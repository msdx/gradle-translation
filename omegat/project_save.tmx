<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="5.4.4_0_ab4394596" segtype="sentence" srclang="en-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-US">
        <seg>"$project.buildDir/sonar"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023748Z" creationid="huanghaohang" creationdate="20181202T023748Z">
        <seg>"$project.buildDir/sonar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>"$project.group:$project.name" (for root project of analysed hierarchy; left to Sonar Runner otherwise)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023740Z" creationid="huanghaohang" creationdate="20181202T023740Z">
        <seg>"$project.group:$project.name" （用于已分析的层次结构的根项目，否则留给 Sonar Runner 处理）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>"&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/reports/jacoco"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135314Z" creationid="huanghaohang" creationdate="20180712T135314Z">
        <seg>"&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/reports/jacoco"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>"reuseReports"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023750Z" creationid="huanghaohang" creationdate="20181202T023750Z">
        <seg>"reuseReports"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N100BF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072132Z" creationid="95" creationdate="20170723T072132Z">
        <seg>#N100BF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N101CA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030915Z" creationid="95" creationdate="20170729T030915Z">
        <seg>#N101CA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N10658</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051629Z" creationid="huanghaohang" creationdate="20170908T051629Z">
        <seg>#N10658</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N1067B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051837Z" creationid="huanghaohang" creationdate="20170908T051837Z">
        <seg>#N1067B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N109D7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153241Z" creationid="huanghaohang" creationdate="20170914T153241Z">
        <seg>#N109D7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N10C0B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150606Z" creationid="huanghaohang" creationdate="20170918T150606Z">
        <seg>#N10C0B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N10EFC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T045709Z" creationid="huanghaohang" creationdate="20170923T045709Z">
        <seg>#N10EFC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N113DF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094812Z" creationid="huanghaohang" creationdate="20180105T094812Z">
        <seg>#N113DF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N12897</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113425Z" creationid="huanghaohang" creationdate="20180406T113425Z">
        <seg>#N12897</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N128AD</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113445Z" creationid="huanghaohang" creationdate="20180406T113445Z">
        <seg>#N128AD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N12A87</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T005023Z" creationid="huanghaohang" creationdate="20180407T005023Z">
        <seg>#N12A87</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N12E18</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141803Z" creationid="huanghaohang" creationdate="20180407T141803Z">
        <seg>#N12E18</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N130C2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143210Z" creationid="huanghaohang" creationdate="20180408T143210Z">
        <seg>#N130C2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N14D1D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T020444Z" creationid="huanghaohang" creationdate="20190606T020444Z">
        <seg>#N14D1D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N14D3B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021210Z" creationid="huanghaohang" creationdate="20190606T021210Z">
        <seg>#N14D3B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N1513E</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021225Z" creationid="huanghaohang" creationdate="20190606T021225Z">
        <seg>#N1513E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N1537C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021302Z" creationid="huanghaohang" creationdate="20190606T021302Z">
        <seg>#N1537C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N153DA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T090832Z" creationid="huanghaohang" creationdate="20190606T090832Z">
        <seg>#N153DA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N15574</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091251Z" creationid="huanghaohang" creationdate="20190608T091251Z">
        <seg>#N15574</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N15E8A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152659Z" creationid="huanghaohang" creationdate="20190613T152659Z">
        <seg>#N15E8A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N16354</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152912Z" creationid="huanghaohang" creationdate="20190623T152912Z">
        <seg>#N16354</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N163DA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153317Z" creationid="huanghaohang" creationdate="20190623T153317Z">
        <seg>#N163DA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N163F6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153439Z" creationid="huanghaohang" creationdate="20190623T153439Z">
        <seg>#N163F6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N164FE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153618Z" creationid="huanghaohang" creationdate="20190623T153618Z">
        <seg>#N164FE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N16866</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142649Z" creationid="huanghaohang" creationdate="20191202T142649Z">
        <seg>#N16866</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#N1699D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142722Z" creationid="huanghaohang" creationdate="20191202T142722Z">
        <seg>#N1699D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N100BF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T070853Z" creationid="95" creationdate="20170723T070853Z">
        <seg>#ftn.N100BF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N101CA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T143921Z" creationid="95" creationdate="20170724T143921Z">
        <seg>#ftn.N101CA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N10658</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050030Z" creationid="huanghaohang" creationdate="20170908T050030Z">
        <seg>#ftn.N10658</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N1067B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050750Z" creationid="huanghaohang" creationdate="20170908T050750Z">
        <seg>#ftn.N1067B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N109D7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T124612Z" creationid="huanghaohang" creationdate="20170912T124612Z">
        <seg>#ftn.N109D7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N10C0B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T133658Z" creationid="huanghaohang" creationdate="20170917T133658Z">
        <seg>#ftn.N10C0B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N10EFC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084844Z" creationid="huanghaohang" creationdate="20170922T084844Z">
        <seg>#ftn.N10EFC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N113DF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171210T152234Z" creationid="huanghaohang" creationdate="20171210T152234Z">
        <seg>#ftn.N113DF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N12897</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155934Z" creationid="huanghaohang" creationdate="20180405T155934Z">
        <seg>#ftn.N12897</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N128AD</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T041841Z" creationid="huanghaohang" creationdate="20180406T041841Z">
        <seg>#ftn.N128AD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N12A87</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121137Z" creationid="huanghaohang" creationdate="20180406T121137Z">
        <seg>#ftn.N12A87</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N12E18</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015258Z" creationid="huanghaohang" creationdate="20180407T015258Z">
        <seg>#ftn.N12E18</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N130C2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142509Z" creationid="huanghaohang" creationdate="20180408T142509Z">
        <seg>#ftn.N130C2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N14D1D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190530T095446Z" creationid="huanghaohang" creationdate="20190530T095446Z">
        <seg>#ftn.N14D1D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N14D3B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044534Z" creationid="huanghaohang" creationdate="20190531T044534Z">
        <seg>#ftn.N14D3B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N1513E</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025810Z" creationid="huanghaohang" creationdate="20190604T025810Z">
        <seg>#ftn.N1513E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N1537C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T152857Z" creationid="huanghaohang" creationdate="20190605T152857Z">
        <seg>#ftn.N1537C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N153DA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T071914Z" creationid="huanghaohang" creationdate="20190606T071914Z">
        <seg>#ftn.N153DA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N15574</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T075001Z" creationid="huanghaohang" creationdate="20190607T075001Z">
        <seg>#ftn.N15574</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N15E8A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153333Z" creationid="huanghaohang" creationdate="20190612T153333Z">
        <seg>#ftn.N15E8A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N16354</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150349Z" creationid="huanghaohang" creationdate="20190617T150349Z">
        <seg>#ftn.N16354</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N163DA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160410Z" creationid="huanghaohang" creationdate="20190617T160410Z">
        <seg>#ftn.N163DA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N163F6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160639Z" creationid="huanghaohang" creationdate="20190617T160639Z">
        <seg>#ftn.N163F6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N164FE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152444Z" creationid="huanghaohang" creationdate="20190623T152444Z">
        <seg>#ftn.N164FE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N16866</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190806T160024Z" creationid="huanghaohang" creationdate="20190806T160024Z">
        <seg>#ftn.N16866</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#ftn.N1699D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141150Z" creationid="huanghaohang" creationdate="20191202T141150Z">
        <seg>#ftn.N1699D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#include &lt;CUnit/Basic.h&gt;
#include "gradle_cunit_register.h"
#include "test_operators.h"

int suite_init(void) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032629Z" creationid="huanghaohang" creationdate="20190611T032629Z">
        <seg>#include &lt;CUnit/Basic.h&gt;
#include "gradle_cunit_register.h"
#include "test_operators.h"

int suite_init(void) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160758Z" creationid="huanghaohang" creationdate="20190527T160758Z">
        <seg>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>*** gradle.manifesto.txt ***
Make the impossible possible, make the possible easy and make the easy elegant.
(inspired by Moshe Feldenkrais)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153833Z" creationid="95" creationdate="20170728T153833Z">
        <seg>*** gradle.manifesto.txt ***
Make the impossible possible, make the possible easy and make the easy elegant.
(inspired by Moshe Feldenkrais)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>-</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140633Z" creationid="huanghaohang" creationdate="20180205T140633Z">
        <seg>-</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.DefaultTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T153957Z" creationid="huanghaohang" creationdate="20190704T153957Z">
        <seg>../dsl/org.gradle.api.DefaultTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.NamedDomainObjectContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131223Z" creationid="huanghaohang" creationdate="20190728T131223Z">
        <seg>../dsl/org.gradle.api.NamedDomainObjectContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T124806Z" creationid="huanghaohang" creationdate="20170912T124806Z">
        <seg>../dsl/org.gradle.api.Project.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:apply(java.util.Map)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092814Z" creationid="huanghaohang" creationdate="20180130T092814Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:apply(java.util.Map)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:configurations(groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051255Z" creationid="huanghaohang" creationdate="20170908T051255Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:configurations(groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:container(java.lang.Class)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131016Z" creationid="huanghaohang" creationdate="20190728T131016Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:container(java.lang.Class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:copy(groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075126Z" creationid="huanghaohang" creationdate="20171015T075126Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:copy(groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:copySpec(groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233403Z" creationid="huanghaohang" creationdate="20171206T233403Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:copySpec(groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:dependencies(groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051302Z" creationid="huanghaohang" creationdate="20170908T051302Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:dependencies(groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:file(java.lang.Object)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T124852Z" creationid="huanghaohang" creationdate="20170923T124852Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:file(java.lang.Object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:fileTree(java.util.Map)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023049Z" creationid="huanghaohang" creationdate="20171002T023049Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:fileTree(java.util.Map)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:files(java.lang.Object[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T130837Z" creationid="huanghaohang" creationdate="20170923T130837Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:files(java.lang.Object[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:repositories(groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051300Z" creationid="huanghaohang" creationdate="20170908T051300Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:repositories(groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:tarTree(java.lang.Object)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133110Z" creationid="huanghaohang" creationdate="20171002T133110Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:tarTree(java.lang.Object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:zipTree(java.lang.Object)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023650Z" creationid="huanghaohang" creationdate="20171002T023650Z">
        <seg>../dsl/org.gradle.api.Project.html#org.gradle.api.Project:zipTree(java.lang.Object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Script.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132337Z" creationid="huanghaohang" creationdate="20170913T132337Z">
        <seg>../dsl/org.gradle.api.Script.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Task.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130922Z" creationid="huanghaohang" creationdate="20170919T130922Z">
        <seg>../dsl/org.gradle.api.Task.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Task.html#org.gradle.api.Task:dependsOn(java.lang.Object[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035922Z" creationid="huanghaohang" creationdate="20170922T035922Z">
        <seg>../dsl/org.gradle.api.Task.html#org.gradle.api.Task:dependsOn(java.lang.Object[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Task.html#org.gradle.api.Task:finalizedBy(java.lang.Object[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044614Z" creationid="huanghaohang" creationdate="20170923T044614Z">
        <seg>../dsl/org.gradle.api.Task.html#org.gradle.api.Task:finalizedBy(java.lang.Object[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.Task.html#org.gradle.api.Task:mustRunAfter(java.lang.Object[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035830Z" creationid="huanghaohang" creationdate="20170922T035830Z">
        <seg>../dsl/org.gradle.api.Task.html#org.gradle.api.Task:mustRunAfter(java.lang.Object[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.Configuration.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105654Z" creationid="huanghaohang" creationdate="20190602T105654Z">
        <seg>../dsl/org.gradle.api.artifacts.Configuration.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.ConfigurationContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T124629Z" creationid="huanghaohang" creationdate="20190521T124629Z">
        <seg>../dsl/org.gradle.api.artifacts.ConfigurationContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.ResolutionStrategy.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T131015Z" creationid="95" creationdate="20190316T131015Z">
        <seg>../dsl/org.gradle.api.artifacts.ResolutionStrategy.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T131610Z" creationid="95" creationdate="20190316T131610Z">
        <seg>../dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html#org.gradle.api.artifacts.dsl.DependencyHandler:gradleApi()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105536Z" creationid="huanghaohang" creationdate="20190602T105536Z">
        <seg>../dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html#org.gradle.api.artifacts.dsl.DependencyHandler:gradleApi()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html#org.gradle.api.artifacts.dsl.DependencyHandler:localGroovy()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105606Z" creationid="huanghaohang" creationdate="20190602T105606Z">
        <seg>../dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html#org.gradle.api.artifacts.dsl.DependencyHandler:localGroovy()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.repositories.IvyArtifactRepository.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155135Z" creationid="huanghaohang" creationdate="20210516T155135Z">
        <seg>../dsl/org.gradle.api.artifacts.repositories.IvyArtifactRepository.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.artifacts.repositories.IvyArtifactRepository.html#org.gradle.api.artifacts.repositories.IvyArtifactRepository:layout(java.lang.String, groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041509Z" creationid="huanghaohang" creationdate="20190603T041509Z">
        <seg>../dsl/org.gradle.api.artifacts.repositories.IvyArtifactRepository.html#org.gradle.api.artifacts.repositories.IvyArtifactRepository:layout(java.lang.String, groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.distribution.DistributionContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093714Z" creationid="huanghaohang" creationdate="20190124T093714Z">
        <seg>../dsl/org.gradle.api.distribution.DistributionContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.initialization.Settings.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145531Z" creationid="huanghaohang" creationdate="20190612T145531Z">
        <seg>../dsl/org.gradle.api.initialization.Settings.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.invocation.Gradle.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150833Z" creationid="huanghaohang" creationdate="20190613T150833Z">
        <seg>../dsl/org.gradle.api.invocation.Gradle.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.invocation.Gradle.html#org.gradle.api.invocation.Gradle:useLogger(java.lang.Object)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025722Z" creationid="huanghaohang" creationdate="20180107T025722Z">
        <seg>../dsl/org.gradle.api.invocation.Gradle.html#org.gradle.api.invocation.Gradle:useLogger(java.lang.Object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.BasePluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010835Z" creationid="huanghaohang" creationdate="20180318T010835Z">
        <seg>../dsl/org.gradle.api.plugins.BasePluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135211Z" creationid="huanghaohang" creationdate="20170913T135211Z">
        <seg>../dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.JavaPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010834Z" creationid="huanghaohang" creationdate="20180318T010834Z">
        <seg>../dsl/org.gradle.api.plugins.JavaPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.MavenPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060726Z" creationid="huanghaohang" creationdate="20190607T060726Z">
        <seg>../dsl/org.gradle.api.plugins.MavenPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.ProjectReportsPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T041003Z" creationid="huanghaohang" creationdate="20190123T041003Z">
        <seg>../dsl/org.gradle.api.plugins.ProjectReportsPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.WarPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142344Z" creationid="huanghaohang" creationdate="20180408T142344Z">
        <seg>../dsl/org.gradle.api.plugins.WarPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.announce.AnnouncePluginExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092332Z" creationid="huanghaohang" creationdate="20190124T092332Z">
        <seg>../dsl/org.gradle.api.plugins.announce.AnnouncePluginExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.antlr.AntlrTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013508Z" creationid="huanghaohang" creationdate="20190123T013508Z">
        <seg>../dsl/org.gradle.api.plugins.antlr.AntlrTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.buildcomparison.gradle.CompareGradleBuilds.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T142353Z" creationid="huanghaohang" creationdate="20210513T142353Z">
        <seg>../dsl/org.gradle.api.plugins.buildcomparison.gradle.CompareGradleBuilds.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144800Z" creationid="huanghaohang" creationdate="20180416T144800Z">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyRun.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144016Z" creationid="huanghaohang" creationdate="20180416T144016Z">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyRun.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyRunWar.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144302Z" creationid="huanghaohang" creationdate="20180416T144302Z">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyRunWar.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyStop.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144312Z" creationid="huanghaohang" creationdate="20180416T144312Z">
        <seg>../dsl/org.gradle.api.plugins.jetty.JettyStop.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.osgi.OsgiPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030010Z" creationid="huanghaohang" creationdate="20181203T030010Z">
        <seg>../dsl/org.gradle.api.plugins.osgi.OsgiPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.Checkstyle.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135603Z" creationid="huanghaohang" creationdate="20180516T135603Z">
        <seg>../dsl/org.gradle.api.plugins.quality.Checkstyle.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140139Z" creationid="huanghaohang" creationdate="20180516T140139Z">
        <seg>../dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.CodeNarc.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141828Z" creationid="huanghaohang" creationdate="20180516T141828Z">
        <seg>../dsl/org.gradle.api.plugins.quality.CodeNarc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.CodeNarcExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142115Z" creationid="huanghaohang" creationdate="20180516T142115Z">
        <seg>../dsl/org.gradle.api.plugins.quality.CodeNarcExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.FindBugs.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142320Z" creationid="huanghaohang" creationdate="20180516T142320Z">
        <seg>../dsl/org.gradle.api.plugins.quality.FindBugs.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.FindBugsExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142508Z" creationid="huanghaohang" creationdate="20180516T142508Z">
        <seg>../dsl/org.gradle.api.plugins.quality.FindBugsExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.JDepend.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142644Z" creationid="huanghaohang" creationdate="20180516T142644Z">
        <seg>../dsl/org.gradle.api.plugins.quality.JDepend.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.JDependExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142804Z" creationid="huanghaohang" creationdate="20180516T142804Z">
        <seg>../dsl/org.gradle.api.plugins.quality.JDependExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.Pmd.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143145Z" creationid="huanghaohang" creationdate="20180516T143145Z">
        <seg>../dsl/org.gradle.api.plugins.quality.Pmd.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.quality.PmdExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143247Z" creationid="huanghaohang" creationdate="20180516T143247Z">
        <seg>../dsl/org.gradle.api.plugins.quality.PmdExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.plugins.sonar.SonarAnalyze.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085519Z" creationid="huanghaohang" creationdate="20181012T085519Z">
        <seg>../dsl/org.gradle.api.plugins.sonar.SonarAnalyze.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.publish.PublishingExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155124Z" creationid="huanghaohang" creationdate="20210516T155124Z">
        <seg>../dsl/org.gradle.api.publish.PublishingExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.publish.PublishingExtension.html#org.gradle.api.publish.PublishingExtension:publications</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210517T161510Z" creationid="huanghaohang" creationdate="20210517T161510Z">
        <seg>../dsl/org.gradle.api.publish.PublishingExtension.html#org.gradle.api.publish.PublishingExtension:publications</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.publish.ivy.IvyPublication.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155125Z" creationid="huanghaohang" creationdate="20210516T155125Z">
        <seg>../dsl/org.gradle.api.publish.ivy.IvyPublication.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155610Z" creationid="huanghaohang" creationdate="20210516T155610Z">
        <seg>../dsl/org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.publish.ivy.tasks.PublishToIvyRepository.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155703Z" creationid="huanghaohang" creationdate="20210516T155703Z">
        <seg>../dsl/org.gradle.api.publish.ivy.tasks.PublishToIvyRepository.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.reporting.GenerateBuildDashboard.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153740Z" creationid="95" creationdate="20190202T153740Z">
        <seg>../dsl/org.gradle.api.reporting.GenerateBuildDashboard.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.reporting.Reporting.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135327Z" creationid="huanghaohang" creationdate="20180712T135327Z">
        <seg>../dsl/org.gradle.api.reporting.Reporting.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.reporting.ReportingExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153816Z" creationid="95" creationdate="20190202T153816Z">
        <seg>../dsl/org.gradle.api.reporting.ReportingExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.reporting.dependencies.HtmlDependencyReportTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040032Z" creationid="huanghaohang" creationdate="20190123T040032Z">
        <seg>../dsl/org.gradle.api.reporting.dependencies.HtmlDependencyReportTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.Copy.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122243Z" creationid="huanghaohang" creationdate="20170919T122243Z">
        <seg>../dsl/org.gradle.api.tasks.Copy.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.Delete.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063410Z" creationid="haohang" creationdate="20180312T063410Z">
        <seg>../dsl/org.gradle.api.tasks.Delete.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.GradleBuild.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135557Z" creationid="huanghaohang" creationdate="20191201T135557Z">
        <seg>../dsl/org.gradle.api.tasks.GradleBuild.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.GroovySourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T234948Z" creationid="huanghaohang" creationdate="20180406T234948Z">
        <seg>../dsl/org.gradle.api.tasks.GroovySourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.JavaExec.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135022Z" creationid="95" creationdate="20190131T135022Z">
        <seg>../dsl/org.gradle.api.tasks.JavaExec.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.ScalaSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020322Z" creationid="huanghaohang" creationdate="20180407T020322Z">
        <seg>../dsl/org.gradle.api.tasks.ScalaSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.SourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T081459Z" creationid="huanghaohang" creationdate="20180130T081459Z">
        <seg>../dsl/org.gradle.api.tasks.SourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.SourceSetOutput.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095102Z" creationid="haohang" creationdate="20180320T095102Z">
        <seg>../dsl/org.gradle.api.tasks.SourceSetOutput.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.Sync.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060933Z" creationid="huanghaohang" creationdate="20171126T060933Z">
        <seg>../dsl/org.gradle.api.tasks.Sync.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.Upload.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063224Z" creationid="haohang" creationdate="20180312T063224Z">
        <seg>../dsl/org.gradle.api.tasks.Upload.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.application.CreateStartScripts.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135034Z" creationid="95" creationdate="20190131T135034Z">
        <seg>../dsl/org.gradle.api.tasks.application.CreateStartScripts.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.bundling.AbstractArchiveTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T022957Z" creationid="huanghaohang" creationdate="20180218T022957Z">
        <seg>../dsl/org.gradle.api.tasks.bundling.AbstractArchiveTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.bundling.Jar.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125230Z" creationid="huanghaohang" creationdate="20171126T125230Z">
        <seg>../dsl/org.gradle.api.tasks.bundling.Jar.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.bundling.Tar.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125229Z" creationid="huanghaohang" creationdate="20171126T125229Z">
        <seg>../dsl/org.gradle.api.tasks.bundling.Tar.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.bundling.War.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125231Z" creationid="huanghaohang" creationdate="20171126T125231Z">
        <seg>../dsl/org.gradle.api.tasks.bundling.War.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.bundling.Zip.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125228Z" creationid="huanghaohang" creationdate="20171126T125228Z">
        <seg>../dsl/org.gradle.api.tasks.bundling.Zip.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.compile.GroovyCompile.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120746Z" creationid="huanghaohang" creationdate="20180406T120746Z">
        <seg>../dsl/org.gradle.api.tasks.compile.GroovyCompile.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.compile.JavaCompile.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133540Z" creationid="huanghaohang" creationdate="20171002T133540Z">
        <seg>../dsl/org.gradle.api.tasks.compile.JavaCompile.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.DependencyInsightReportTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022204Z" creationid="huanghaohang" creationdate="20170910T022204Z">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.DependencyInsightReportTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.DependencyReportTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040013Z" creationid="huanghaohang" creationdate="20190123T040013Z">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.DependencyReportTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.PropertyReportTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040322Z" creationid="huanghaohang" creationdate="20190123T040322Z">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.PropertyReportTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.TaskReportTask.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040332Z" creationid="huanghaohang" creationdate="20190123T040332Z">
        <seg>../dsl/org.gradle.api.tasks.diagnostics.TaskReportTask.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134117Z" creationid="huanghaohang" creationdate="20190706T134117Z">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html#org.gradle.api.tasks.incremental.IncrementalTaskInputs:incremental</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141013Z" creationid="huanghaohang" creationdate="20190707T141013Z">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html#org.gradle.api.tasks.incremental.IncrementalTaskInputs:incremental</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html#org.gradle.api.tasks.incremental.IncrementalTaskInputs:outOfDate(org.gradle.api.Action)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134535Z" creationid="huanghaohang" creationdate="20190706T134535Z">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html#org.gradle.api.tasks.incremental.IncrementalTaskInputs:outOfDate(org.gradle.api.Action)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html#org.gradle.api.tasks.incremental.IncrementalTaskInputs:removed(org.gradle.api.Action)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134541Z" creationid="huanghaohang" creationdate="20190706T134541Z">
        <seg>../dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html#org.gradle.api.tasks.incremental.IncrementalTaskInputs:removed(org.gradle.api.Action)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.javadoc.Groovydoc.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120914Z" creationid="huanghaohang" creationdate="20180406T120914Z">
        <seg>../dsl/org.gradle.api.tasks.javadoc.Groovydoc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.javadoc.Javadoc.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062933Z" creationid="haohang" creationdate="20180312T062933Z">
        <seg>../dsl/org.gradle.api.tasks.javadoc.Javadoc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.scala.ScalaCompile.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010514Z" creationid="huanghaohang" creationdate="20180407T010514Z">
        <seg>../dsl/org.gradle.api.tasks.scala.ScalaCompile.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.scala.ScalaDoc.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010619Z" creationid="huanghaohang" creationdate="20180407T010619Z">
        <seg>../dsl/org.gradle.api.tasks.scala.ScalaDoc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.testing.Test.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132800Z" creationid="95" creationdate="20170730T132800Z">
        <seg>../dsl/org.gradle.api.tasks.testing.Test.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:debug</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062049Z" creationid="haohang" creationdate="20180330T062049Z">
        <seg>../dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:debug</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.testing.TestReport.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042837Z" creationid="huanghaohang" creationdate="20180406T042837Z">
        <seg>../dsl/org.gradle.api.tasks.testing.TestReport.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T060843Z" creationid="haohang" creationdate="20180330T060843Z">
        <seg>../dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.api.tasks.wrapper.Wrapper.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090703Z" creationid="huanghaohang" creationdate="20180211T090703Z">
        <seg>../dsl/org.gradle.api.tasks.wrapper.Wrapper.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.buildinit.tasks.InitBuild.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213729Z" creationid="95" creationdate="20190131T213729Z">
        <seg>../dsl/org.gradle.buildinit.tasks.InitBuild.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.ide.visualstudio.VisualStudioExtension.html#org.gradle.ide.visualstudio.VisualStudioExtension:projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031447Z" creationid="huanghaohang" creationdate="20190611T031447Z">
        <seg>../dsl/org.gradle.ide.visualstudio.VisualStudioExtension.html#org.gradle.ide.visualstudio.VisualStudioExtension:projects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.ide.visualstudio.VisualStudioExtension.html#org.gradle.ide.visualstudio.VisualStudioExtension:solutions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031451Z" creationid="huanghaohang" creationdate="20190611T031451Z">
        <seg>../dsl/org.gradle.ide.visualstudio.VisualStudioExtension.html#org.gradle.ide.visualstudio.VisualStudioExtension:solutions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.language.assembler.AssemblerSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051852Z" creationid="huanghaohang" creationdate="20190609T051852Z">
        <seg>../dsl/org.gradle.language.assembler.AssemblerSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.language.c.CSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051335Z" creationid="huanghaohang" creationdate="20190609T051335Z">
        <seg>../dsl/org.gradle.language.c.CSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.language.cpp.CppSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T042716Z" creationid="huanghaohang" creationdate="20190609T042716Z">
        <seg>../dsl/org.gradle.language.cpp.CppSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.language.objectivec.ObjectiveCSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052323Z" creationid="huanghaohang" creationdate="20190609T052323Z">
        <seg>../dsl/org.gradle.language.objectivec.ObjectiveCSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.language.objectivecpp.ObjectiveCppSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052551Z" creationid="huanghaohang" creationdate="20190609T052551Z">
        <seg>../dsl/org.gradle.language.objectivecpp.ObjectiveCppSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.language.rc.WindowsResourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012936Z" creationid="huanghaohang" creationdate="20190610T012936Z">
        <seg>../dsl/org.gradle.language.rc.WindowsResourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.NativeBinary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024528Z" creationid="huanghaohang" creationdate="20190609T024528Z">
        <seg>../dsl/org.gradle.nativebinaries.NativeBinary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.NativeExecutable.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024527Z" creationid="huanghaohang" creationdate="20190609T024527Z">
        <seg>../dsl/org.gradle.nativebinaries.NativeExecutable.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.NativeLibrary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024528Z" creationid="huanghaohang" creationdate="20190609T024528Z">
        <seg>../dsl/org.gradle.nativebinaries.NativeLibrary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.ProjectNativeBinary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032738Z" creationid="huanghaohang" creationdate="20190611T032738Z">
        <seg>../dsl/org.gradle.nativebinaries.ProjectNativeBinary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.SharedLibraryBinary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030334Z" creationid="huanghaohang" creationdate="20190609T030334Z">
        <seg>../dsl/org.gradle.nativebinaries.SharedLibraryBinary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.StaticLibraryBinary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030335Z" creationid="huanghaohang" creationdate="20190609T030335Z">
        <seg>../dsl/org.gradle.nativebinaries.StaticLibraryBinary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.TargetedNativeComponent.html#org.gradle.nativebinaries.TargetedNativeComponent:targetBuildTypes(java.lang.String[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053643Z" creationid="huanghaohang" creationdate="20190610T053643Z">
        <seg>../dsl/org.gradle.nativebinaries.TargetedNativeComponent.html#org.gradle.nativebinaries.TargetedNativeComponent:targetBuildTypes(java.lang.String[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.TargetedNativeComponent.html#org.gradle.nativebinaries.TargetedNativeComponent:targetFlavors(java.lang.String[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053650Z" creationid="huanghaohang" creationdate="20190610T053650Z">
        <seg>../dsl/org.gradle.nativebinaries.TargetedNativeComponent.html#org.gradle.nativebinaries.TargetedNativeComponent:targetFlavors(java.lang.String[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.TargetedNativeComponent.html#org.gradle.nativebinaries.TargetedNativeComponent:targetPlatforms(java.lang.String[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053330Z" creationid="huanghaohang" creationdate="20190610T053330Z">
        <seg>../dsl/org.gradle.nativebinaries.TargetedNativeComponent.html#org.gradle.nativebinaries.TargetedNativeComponent:targetPlatforms(java.lang.String[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.language.PreprocessingTool.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013914Z" creationid="huanghaohang" creationdate="20190610T013914Z">
        <seg>../dsl/org.gradle.nativebinaries.language.PreprocessingTool.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.platform.Platform.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T044343Z" creationid="huanghaohang" creationdate="20190610T044343Z">
        <seg>../dsl/org.gradle.nativebinaries.platform.Platform.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.test.cunit.CUnitTestSuite.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031714Z" creationid="huanghaohang" creationdate="20190611T031714Z">
        <seg>../dsl/org.gradle.nativebinaries.test.cunit.CUnitTestSuite.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.Clang.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084858Z" creationid="huanghaohang" creationdate="20190610T084858Z">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.Clang.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.Gcc.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084855Z" creationid="huanghaohang" creationdate="20190610T084855Z">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.Gcc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.ToolChain.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053302Z" creationid="huanghaohang" creationdate="20190609T053302Z">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.ToolChain.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.VisualCpp.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012537Z" creationid="huanghaohang" creationdate="20190610T012537Z">
        <seg>../dsl/org.gradle.nativebinaries.toolchain.VisualCpp.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ear.Ear.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125232Z" creationid="huanghaohang" creationdate="20171126T125232Z">
        <seg>../dsl/org.gradle.plugins.ear.Ear.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ear.EarPluginConvention.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142633Z" creationid="huanghaohang" creationdate="20180416T142633Z">
        <seg>../dsl/org.gradle.plugins.ear.EarPluginConvention.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025952Z" creationid="huanghaohang" creationdate="20181210T025952Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseJdt.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030003Z" creationid="huanghaohang" creationdate="20181210T030003Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseJdt.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseProject.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025935Z" creationid="huanghaohang" creationdate="20181210T025935Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseProject.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030016Z" creationid="huanghaohang" creationdate="20181210T030016Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030038Z" creationid="huanghaohang" creationdate="20181210T030038Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061714Z" creationid="huanghaohang" creationdate="20181210T061714Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseJdt.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061722Z" creationid="huanghaohang" creationdate="20181210T061722Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseJdt.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseModel.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030127Z" creationid="huanghaohang" creationdate="20181210T030127Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseModel.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseProject.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061708Z" creationid="huanghaohang" creationdate="20181210T061708Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseProject.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061753Z" creationid="huanghaohang" creationdate="20181210T061753Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061814Z" creationid="huanghaohang" creationdate="20181210T061814Z">
        <seg>../dsl/org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.GenerateIdeaModule.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061119Z" creationid="huanghaohang" creationdate="20181212T061119Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.GenerateIdeaModule.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.GenerateIdeaProject.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061052Z" creationid="huanghaohang" creationdate="20181212T061052Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.GenerateIdeaProject.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.GenerateIdeaWorkspace.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061127Z" creationid="huanghaohang" creationdate="20181212T061127Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.GenerateIdeaWorkspace.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaModel.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061203Z" creationid="huanghaohang" creationdate="20181212T061203Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaModel.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061224Z" creationid="huanghaohang" creationdate="20181212T061224Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061220Z" creationid="huanghaohang" creationdate="20181212T061220Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaWorkspace.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061230Z" creationid="huanghaohang" creationdate="20181212T061230Z">
        <seg>../dsl/org.gradle.plugins.ide.idea.model.IdeaWorkspace.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.signing.Sign.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134519Z" creationid="huanghaohang" creationdate="20190608T134519Z">
        <seg>../dsl/org.gradle.plugins.signing.Sign.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.plugins.signing.SigningExtension.html#org.gradle.plugins.signing.SigningExtension:signPom(org.gradle.api.artifacts.maven.MavenDeployment, groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010141Z" creationid="huanghaohang" creationdate="20190609T010141Z">
        <seg>../dsl/org.gradle.plugins.signing.SigningExtension.html#org.gradle.plugins.signing.SigningExtension:signPom(org.gradle.api.artifacts.maven.MavenDeployment, groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.testing.jacoco.plugins.JacocoPluginExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T134815Z" creationid="huanghaohang" creationdate="20180712T134815Z">
        <seg>../dsl/org.gradle.testing.jacoco.plugins.JacocoPluginExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.testing.jacoco.plugins.JacocoTaskExtension.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093017Z" creationid="huanghaohang" creationdate="20180715T093017Z">
        <seg>../dsl/org.gradle.testing.jacoco.plugins.JacocoTaskExtension.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../dsl/org.gradle.testing.jacoco.tasks.JacocoReport.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135326Z" creationid="huanghaohang" creationdate="20180712T135326Z">
        <seg>../dsl/org.gradle.testing.jacoco.tasks.JacocoReport.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarDatabase.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151336Z" creationid="huanghaohang" creationdate="20180811T151336Z">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarDatabase.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarProject.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151338Z" creationid="huanghaohang" creationdate="20180811T151338Z">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarProject.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarProjectModel.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152832Z" creationid="huanghaohang" creationdate="20180811T152832Z">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarProjectModel.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarProperty.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072803Z" creationid="huanghaohang" creationdate="20180812T072803Z">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarProperty.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarRootModel.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151334Z" creationid="huanghaohang" creationdate="20180811T151334Z">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarRootModel.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarServer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151335Z" creationid="huanghaohang" creationdate="20180811T151335Z">
        <seg>../groovydoc/org/gradle/api/plugins/sonar/model/SonarServer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/api/sonar/runner/SonarRunner.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T020525Z" creationid="huanghaohang" creationdate="20181202T020525Z">
        <seg>../groovydoc/org/gradle/api/sonar/runner/SonarRunner.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/Classpath.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082549Z" creationid="huanghaohang" creationdate="20181210T082549Z">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/Classpath.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/Project.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082546Z" creationid="huanghaohang" creationdate="20181210T082546Z">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/Project.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/WtpComponent.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082553Z" creationid="huanghaohang" creationdate="20181210T082553Z">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/WtpComponent.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/WtpFacet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082555Z" creationid="huanghaohang" creationdate="20181210T082555Z">
        <seg>../groovydoc/org/gradle/plugins/ide/eclipse/model/WtpFacet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/idea/model/Module.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012459Z" creationid="huanghaohang" creationdate="20190123T012459Z">
        <seg>../groovydoc/org/gradle/plugins/ide/idea/model/Module.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/idea/model/Project.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012458Z" creationid="huanghaohang" creationdate="20190123T012458Z">
        <seg>../groovydoc/org/gradle/plugins/ide/idea/model/Project.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/ide/idea/model/Workspace.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012501Z" creationid="huanghaohang" creationdate="20190123T012501Z">
        <seg>../groovydoc/org/gradle/plugins/ide/idea/model/Workspace.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../groovydoc/org/gradle/plugins/signing/SigningExtension.html#setRequired(java.lang.Object)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T161315Z" creationid="huanghaohang" creationdate="20190608T161315Z">
        <seg>../groovydoc/org/gradle/plugins/signing/SigningExtension.html#setRequired(java.lang.Object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/BuildListener.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144454Z" creationid="huanghaohang" creationdate="20180107T144454Z">
        <seg>../javadoc/org/gradle/BuildListener.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/Action.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151307Z" creationid="huanghaohang" creationdate="20190613T151307Z">
        <seg>../javadoc/org/gradle/api/Action.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/AntBuilder.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132301Z" creationid="huanghaohang" creationdate="20170913T132301Z">
        <seg>../javadoc/org/gradle/api/AntBuilder.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/JavaVersion.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094220Z" creationid="haohang" creationdate="20180314T094220Z">
        <seg>../javadoc/org/gradle/api/JavaVersion.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/Plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093409Z" creationid="huanghaohang" creationdate="20180130T093409Z">
        <seg>../javadoc/org/gradle/api/Plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/Plugin.html#apply(T)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150236Z" creationid="huanghaohang" creationdate="20190719T150236Z">
        <seg>../javadoc/org/gradle/api/Plugin.html#apply(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/ProjectEvaluationListener.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144456Z" creationid="huanghaohang" creationdate="20180107T144456Z">
        <seg>../javadoc/org/gradle/api/ProjectEvaluationListener.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/Task.html#shouldRunAfter(java.lang.Object[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035919Z" creationid="huanghaohang" creationdate="20170922T035919Z">
        <seg>../javadoc/org/gradle/api/Task.html#shouldRunAfter(java.lang.Object[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/XmlProvider.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082547Z" creationid="huanghaohang" creationdate="20181210T082547Z">
        <seg>../javadoc/org/gradle/api/XmlProvider.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/ClientModule.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051426Z" creationid="huanghaohang" creationdate="20190531T051426Z">
        <seg>../javadoc/org/gradle/api/artifacts/ClientModule.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/Dependency.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105653Z" creationid="huanghaohang" creationdate="20190602T105653Z">
        <seg>../javadoc/org/gradle/api/artifacts/Dependency.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/ExternalModuleDependency.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T161015Z" creationid="huanghaohang" creationdate="20190527T161015Z">
        <seg>../javadoc/org/gradle/api/artifacts/ExternalModuleDependency.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/ModuleDependency.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140015Z" creationid="huanghaohang" creationdate="20190602T140015Z">
        <seg>../javadoc/org/gradle/api/artifacts/ModuleDependency.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/ProjectDependency.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112309Z" creationid="huanghaohang" creationdate="20190601T112309Z">
        <seg>../javadoc/org/gradle/api/artifacts/ProjectDependency.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/ResolvableDependencies.html#getResolutionResult()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141913Z" creationid="huanghaohang" creationdate="20190602T141913Z">
        <seg>../javadoc/org/gradle/api/artifacts/ResolvableDependencies.html#getResolutionResult()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/maven/Conf2ScopeMappingContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060557Z" creationid="huanghaohang" creationdate="20190607T060557Z">
        <seg>../javadoc/org/gradle/api/artifacts/maven/Conf2ScopeMappingContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/maven/MavenDeployer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093637Z" creationid="huanghaohang" creationdate="20190607T093637Z">
        <seg>../javadoc/org/gradle/api/artifacts/maven/MavenDeployer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/maven/MavenPom.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061326Z" creationid="huanghaohang" creationdate="20190607T061326Z">
        <seg>../javadoc/org/gradle/api/artifacts/maven/MavenPom.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/maven/PomFilterContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084753Z" creationid="huanghaohang" creationdate="20190608T084753Z">
        <seg>../javadoc/org/gradle/api/artifacts/maven/PomFilterContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/artifacts/result/ResolutionResult.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141914Z" creationid="huanghaohang" creationdate="20190602T141914Z">
        <seg>../javadoc/org/gradle/api/artifacts/result/ResolutionResult.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/component/SoftwareComponent.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150414Z" creationid="huanghaohang" creationdate="20210518T150414Z">
        <seg>../javadoc/org/gradle/api/component/SoftwareComponent.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/distribution/Distribution.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061006Z" creationid="huanghaohang" creationdate="20190128T061006Z">
        <seg>../javadoc/org/gradle/api/distribution/Distribution.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/execution/TaskActionListener.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144500Z" creationid="huanghaohang" creationdate="20180107T144500Z">
        <seg>../javadoc/org/gradle/api/execution/TaskActionListener.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/execution/TaskExecutionGraph.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152351Z" creationid="huanghaohang" creationdate="20190613T152351Z">
        <seg>../javadoc/org/gradle/api/execution/TaskExecutionGraph.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/execution/TaskExecutionGraphListener.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144457Z" creationid="huanghaohang" creationdate="20180107T144457Z">
        <seg>../javadoc/org/gradle/api/execution/TaskExecutionGraphListener.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/execution/TaskExecutionListener.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144459Z" creationid="huanghaohang" creationdate="20180107T144459Z">
        <seg>../javadoc/org/gradle/api/execution/TaskExecutionListener.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/file/CopySpec.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134517Z" creationid="huanghaohang" creationdate="20171002T134517Z">
        <seg>../javadoc/org/gradle/api/file/CopySpec.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/file/CopySpec.html#from(java.lang.Object[])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134518Z" creationid="huanghaohang" creationdate="20171002T134518Z">
        <seg>../javadoc/org/gradle/api/file/CopySpec.html#from(java.lang.Object[])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/file/CopySpec.html#into(java.lang.Object)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134520Z" creationid="huanghaohang" creationdate="20171002T134520Z">
        <seg>../javadoc/org/gradle/api/file/CopySpec.html#into(java.lang.Object)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/file/FileCollection.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T130140Z" creationid="huanghaohang" creationdate="20170923T130140Z">
        <seg>../javadoc/org/gradle/api/file/FileCollection.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/file/FileTree.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150852Z" creationid="huanghaohang" creationdate="20170927T150852Z">
        <seg>../javadoc/org/gradle/api/file/FileTree.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/file/SourceDirectorySet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100047Z" creationid="haohang" creationdate="20180320T100047Z">
        <seg>../javadoc/org/gradle/api/file/SourceDirectorySet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/initialization/ProjectDescriptor.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153218Z" creationid="huanghaohang" creationdate="20190612T153218Z">
        <seg>../javadoc/org/gradle/api/initialization/ProjectDescriptor.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/initialization/dsl/ScriptHandler.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T140938Z" creationid="huanghaohang" creationdate="20191201T140938Z">
        <seg>../javadoc/org/gradle/api/initialization/dsl/ScriptHandler.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/java/archives/Manifest.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010641Z" creationid="huanghaohang" creationdate="20180318T010641Z">
        <seg>../javadoc/org/gradle/api/java/archives/Manifest.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/java/archives/ManifestMergeDetails.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T112016Z" creationid="huanghaohang" creationdate="20180406T112016Z">
        <seg>../javadoc/org/gradle/api/java/archives/ManifestMergeDetails.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/logging/Logger.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T012026Z" creationid="huanghaohang" creationdate="20180107T012026Z">
        <seg>../javadoc/org/gradle/api/logging/Logger.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/logging/LoggingManager.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T024825Z" creationid="huanghaohang" creationdate="20180107T024825Z">
        <seg>../javadoc/org/gradle/api/logging/LoggingManager.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/plugins/ExtensionContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T151051Z" creationid="huanghaohang" creationdate="20190719T151051Z">
        <seg>../javadoc/org/gradle/api/plugins/ExtensionContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/plugins/JavaPlugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092944Z" creationid="huanghaohang" creationdate="20180130T092944Z">
        <seg>../javadoc/org/gradle/api/plugins/JavaPlugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/plugins/osgi/OsgiManifest.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025409Z" creationid="huanghaohang" creationdate="20181203T025409Z">
        <seg>../javadoc/org/gradle/api/plugins/osgi/OsgiManifest.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/JavaExec.html#setDebug(boolean)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233853Z" creationid="95" creationdate="20190130T233853Z">
        <seg>../javadoc/org/gradle/api/tasks/JavaExec.html#setDebug(boolean)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/SourceSetContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062346Z" creationid="haohang" creationdate="20180313T062346Z">
        <seg>../javadoc/org/gradle/api/tasks/SourceSetContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/StopExecutionException.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084210Z" creationid="huanghaohang" creationdate="20170922T084210Z">
        <seg>../javadoc/org/gradle/api/tasks/StopExecutionException.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/TaskAction.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T154404Z" creationid="huanghaohang" creationdate="20190704T154404Z">
        <seg>../javadoc/org/gradle/api/tasks/TaskAction.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/TaskContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121139Z" creationid="huanghaohang" creationdate="20170919T121139Z">
        <seg>../javadoc/org/gradle/api/tasks/TaskContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/TaskInputs.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003955Z" creationid="huanghaohang" creationdate="20170923T003955Z">
        <seg>../javadoc/org/gradle/api/tasks/TaskInputs.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/TaskOutputs.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003956Z" creationid="huanghaohang" creationdate="20170923T003956Z">
        <seg>../javadoc/org/gradle/api/tasks/TaskOutputs.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/TaskOutputs.html#upToDateWhen(groovy.lang.Closure)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T004314Z" creationid="huanghaohang" creationdate="20170923T004314Z">
        <seg>../javadoc/org/gradle/api/tasks/TaskOutputs.html#upToDateWhen(groovy.lang.Closure)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/testing/Test.html#setMaxParallelForks(int)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142938Z" creationid="huanghaohang" creationdate="20190621T142938Z">
        <seg>../javadoc/org/gradle/api/tasks/testing/Test.html#setMaxParallelForks(int)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/api/tasks/testing/TestFilter.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131644Z" creationid="huanghaohang" creationdate="20180405T131644Z">
        <seg>../javadoc/org/gradle/api/tasks/testing/TestFilter.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095503Z" creationid="haohang" creationdate="20180326T095503Z">
        <seg>../javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095504Z" creationid="haohang" creationdate="20180326T095504Z">
        <seg>../javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/language/base/FunctionalSourceSet.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024530Z" creationid="huanghaohang" creationdate="20190609T024530Z">
        <seg>../javadoc/org/gradle/language/base/FunctionalSourceSet.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/nativebinaries/ExecutableBinary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032056Z" creationid="huanghaohang" creationdate="20190609T032056Z">
        <seg>../javadoc/org/gradle/nativebinaries/ExecutableBinary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/nativebinaries/test/TestSuiteExecutableBinary.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032758Z" creationid="huanghaohang" creationdate="20190611T032758Z">
        <seg>../javadoc/org/gradle/nativebinaries/test/TestSuiteExecutableBinary.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/plugins/ide/eclipse/model/Jdt.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082551Z" creationid="huanghaohang" creationdate="20181210T082551Z">
        <seg>../javadoc/org/gradle/plugins/ide/eclipse/model/Jdt.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/process/JavaForkOptions.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093308Z" creationid="huanghaohang" creationdate="20180715T093308Z">
        <seg>../javadoc/org/gradle/process/JavaForkOptions.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/testfixtures/ProjectBuilder.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123812Z" creationid="huanghaohang" creationdate="20190706T123812Z">
        <seg>../javadoc/org/gradle/testfixtures/ProjectBuilder.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/testing/jacoco/tasks/JacocoReportsContainer.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135330Z" creationid="huanghaohang" creationdate="20180712T135330Z">
        <seg>../javadoc/org/gradle/testing/jacoco/tasks/JacocoReportsContainer.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>../javadoc/org/gradle/tooling/GradleConnector.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T151206Z" creationid="huanghaohang" creationdate="20200106T151206Z">
        <seg>../javadoc/org/gradle/tooling/GradleConnector.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>// Maven2 layout (if a repository is marked as Maven2 compatible, the organization (group) is split into subfolders according to the dots.)
someroot/[organisation]/[module]/[revision]/[module]-[revision].[ext]

// Typical layout for an Ivy repository (the organization is not split into subfolder)
someroot/[organisation]/[module]/[revision]/[type]s/[artifact].[ext]

// Simple layout (the organization is not used, no nested folders.)
someroot/[artifact]-[revision].[ext]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030330Z" creationid="huanghaohang" creationdate="20190604T030330Z">
        <seg>// Maven2 layout (if a repository is marked as Maven2 compatible, the organization (group) is split into subfolders according to the dots.)
someroot/[organisation]/[module]/[revision]/[module]-[revision].[ext]

// Typical layout for an Ivy repository (the organization is not split into subfolder)
someroot/[organisation]/[module]/[revision]/[type]s/[artifact].[ext]

// Simple layout (the organization is not used, no nested folders.)
someroot/[artifact]-[revision].[ext]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>// Use Java 6's console to read from the console (no good for a CI environment)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133041Z" creationid="huanghaohang" creationdate="20190608T133041Z">
        <seg>// Use Java 6's console to read from the console (no good for a CI environment)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072430Z" creationid="haohang" creationdate="20170720T072430Z">
        <seg>1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1. /home/user/gradle/samples/native-binaries/cunit/src/operatorsTest/cunit/test_plus.c:6  - plus(0, -2) == -2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090432Z" creationid="huanghaohang" creationdate="20190611T090432Z">
        <seg>1. /home/user/gradle/samples/native-binaries/cunit/src/operatorsTest/cunit/test_plus.c:6  - plus(0, -2) == -2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1. Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T005956Z" creationid="95" creationdate="20190204T005956Z">
        <seg>1. 介绍</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072433Z" creationid="haohang" creationdate="20170720T072433Z">
        <seg>1.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1.1. About this user guide</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010002Z" creationid="95" creationdate="20190204T010002Z">
        <seg>1.1. 关于本用户指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1.1. About this user guide</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T142043Z" creationid="95" creationdate="20170721T142043Z">
        <seg>1.1. 关于本用户指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>1.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141905Z" creationid="huanghaohang" creationdate="20190707T141905Z">
        <seg>1.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233810Z" creationid="huanghaohang" creationdate="20171206T233810Z">
        <seg>10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233816Z" creationid="huanghaohang" creationdate="20171206T233816Z">
        <seg>10.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.1. Building a WAR file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004549Z" creationid="huanghaohang" creationdate="20170909T004549Z">
        <seg>10.1. 构建一个WAR文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233829Z" creationid="huanghaohang" creationdate="20171206T233829Z">
        <seg>10.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.2. Running your web application</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005509Z" creationid="huanghaohang" creationdate="20170909T005509Z">
        <seg>10.2. 运行 web 应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233843Z" creationid="huanghaohang" creationdate="20171206T233843Z">
        <seg>10.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>10.3. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T010145Z" creationid="huanghaohang" creationdate="20170909T010145Z">
        <seg>10.3. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233844Z" creationid="huanghaohang" creationdate="20171206T233844Z">
        <seg>11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233850Z" creationid="huanghaohang" creationdate="20171206T233850Z">
        <seg>11.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.1. Executing multiple tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T030325Z" creationid="huanghaohang" creationdate="20170909T030325Z">
        <seg>11.1. 执行多个任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233858Z" creationid="huanghaohang" creationdate="20171206T233858Z">
        <seg>11.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.2. Excluding tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031707Z" creationid="huanghaohang" creationdate="20170909T031707Z">
        <seg>11.2. 排除任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233910Z" creationid="huanghaohang" creationdate="20171206T233910Z">
        <seg>11.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.3. Continuing the build when a failure occurs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T073647Z" creationid="huanghaohang" creationdate="20170909T073647Z">
        <seg>11.3. 失败后继续构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233921Z" creationid="huanghaohang" creationdate="20171206T233921Z">
        <seg>11.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.4. Task name abbreviation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T075114Z" creationid="huanghaohang" creationdate="20170909T075114Z">
        <seg>11.4. 任务名缩写</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233929Z" creationid="huanghaohang" creationdate="20171206T233929Z">
        <seg>11.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.5. Selecting which build to execute</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113358Z" creationid="huanghaohang" creationdate="20170909T113358Z">
        <seg>11.5. 选择执行哪个构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233938Z" creationid="huanghaohang" creationdate="20171206T233938Z">
        <seg>11.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.1. Listing projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011446Z" creationid="huanghaohang" creationdate="20170910T010925Z">
        <seg>11.6.1. 列出项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.2. Listing tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011451Z" creationid="huanghaohang" creationdate="20170910T011436Z">
        <seg>11.6.2. 列出任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.3. Show task usage details</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012423Z" creationid="huanghaohang" creationdate="20170910T012334Z">
        <seg>11.6.3. 显示任务帮助信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.4. Listing project dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T013110Z" creationid="huanghaohang" creationdate="20170910T013110Z">
        <seg>11.6.4. 列出项目依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.5. Getting the insight into a particular dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T021957Z" creationid="huanghaohang" creationdate="20170910T021706Z">
        <seg>11.6.5. 查看特定的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.6. Listing project properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023255Z" creationid="huanghaohang" creationdate="20170910T023255Z">
        <seg>11.6.6. 列出项目属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6.7. Profiling a build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023503Z" creationid="huanghaohang" creationdate="20170910T023503Z">
        <seg>11.6.7. 分析构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.6. Obtaining information about your build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114322Z" creationid="huanghaohang" creationdate="20170909T114322Z">
        <seg>11.6. 获取构建的相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233947Z" creationid="huanghaohang" creationdate="20171206T233947Z">
        <seg>11.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.7. Dry Run</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031426Z" creationid="huanghaohang" creationdate="20170910T031426Z">
        <seg>11.7. 演练</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233955Z" creationid="huanghaohang" creationdate="20171206T233955Z">
        <seg>11.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>11.8. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031753Z" creationid="huanghaohang" creationdate="20170910T031753Z">
        <seg>11.8. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234002Z" creationid="huanghaohang" creationdate="20171206T234002Z">
        <seg>12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234010Z" creationid="huanghaohang" creationdate="20171206T234010Z">
        <seg>12.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.1. Task Tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143746Z" creationid="huanghaohang" creationdate="20170911T143746Z">
        <seg>12.1. 任务树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234021Z" creationid="huanghaohang" creationdate="20171206T234021Z">
        <seg>12.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.2. Favorites</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144553Z" creationid="huanghaohang" creationdate="20170911T144553Z">
        <seg>12.2. 收藏夹</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234027Z" creationid="huanghaohang" creationdate="20171206T234027Z">
        <seg>12.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.3. Command Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145614Z" creationid="huanghaohang" creationdate="20170911T145614Z">
        <seg>12.3. 命令行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234032Z" creationid="huanghaohang" creationdate="20171206T234032Z">
        <seg>12.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>12.4. Setup</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145834Z" creationid="huanghaohang" creationdate="20170911T145834Z">
        <seg>12.4. 设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032744Z" creationid="huanghaohang" creationdate="20180131T032744Z">
        <seg>13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032749Z" creationid="huanghaohang" creationdate="20180131T032749Z">
        <seg>13.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.1. The Gradle build language</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T124212Z" creationid="huanghaohang" creationdate="20170912T124212Z">
        <seg>13.1. Gradle 构建语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032758Z" creationid="huanghaohang" creationdate="20180131T032758Z">
        <seg>13.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.2.1. Standard project properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T131959Z" creationid="huanghaohang" creationdate="20170913T131959Z">
        <seg>13.2.1. 标准project属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.2. The Project API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T124804Z" creationid="huanghaohang" creationdate="20170912T124804Z">
        <seg>13.2. Project API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032805Z" creationid="huanghaohang" creationdate="20180131T032805Z">
        <seg>13.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.3. The Script API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132335Z" creationid="huanghaohang" creationdate="20170913T132335Z">
        <seg>13.3.  Script API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032833Z" creationid="huanghaohang" creationdate="20180131T032833Z">
        <seg>13.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.4.1. Local variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132631Z" creationid="huanghaohang" creationdate="20170913T132631Z">
        <seg>13.4.1. 局部变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.4.2. Extra properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133013Z" creationid="huanghaohang" creationdate="20170913T133013Z">
        <seg>13.4.2. 额外属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.4. Declaring variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132530Z" creationid="huanghaohang" creationdate="20170913T132530Z">
        <seg>13.4. 声明变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032842Z" creationid="huanghaohang" creationdate="20180131T032842Z">
        <seg>13.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.1. Groovy JDK</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135642Z" creationid="huanghaohang" creationdate="20170913T135642Z">
        <seg>13.5.1. Groovy JDK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.2. Property accessors</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135949Z" creationid="huanghaohang" creationdate="20170913T135949Z">
        <seg>13.5.2. 属性访问器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.3. Optional parentheses on method calls</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141322Z" creationid="huanghaohang" creationdate="20170913T141322Z">
        <seg>13.5.3 方法调用上的可选括号</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.4. List and map literals</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141532Z" creationid="huanghaohang" creationdate="20170913T141532Z">
        <seg>13.5.4. List 和 Map </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.5. Closures as the last parameter in a method</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141720Z" creationid="huanghaohang" creationdate="20170913T141720Z">
        <seg>13.5.5. 作为方法最后一个参数的闭包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5.6. Closure delegate</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T152924Z" creationid="huanghaohang" creationdate="20170914T152924Z">
        <seg>13.5.6. 闭包委托（delegate）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>13.5. Some Groovy basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135520Z" creationid="huanghaohang" creationdate="20170913T135520Z">
        <seg>13.5.一些 Groovy 基础知识</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034001Z" creationid="huanghaohang" creationdate="20180131T034001Z">
        <seg>14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034012Z" creationid="huanghaohang" creationdate="20180131T034012Z">
        <seg>14.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.1. Directory creation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T131932Z" creationid="huanghaohang" creationdate="20170917T131932Z">
        <seg>14.1. 创建目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034019Z" creationid="huanghaohang" creationdate="20180131T034019Z">
        <seg>14.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.2.1. Checking for project properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135040Z" creationid="huanghaohang" creationdate="20170917T135040Z">
        <seg>14.2.1.检查项目的属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.2. Gradle properties and system properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132419Z" creationid="huanghaohang" creationdate="20170917T132419Z">
        <seg>14.2. Gradle 属性和系统属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034032Z" creationid="huanghaohang" creationdate="20180131T034032Z">
        <seg>14.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.3. Configuring the project using an external build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145154Z" creationid="huanghaohang" creationdate="20170918T145154Z">
        <seg>14.3. 使用外部构建脚本配置项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034055Z" creationid="huanghaohang" creationdate="20180131T034055Z">
        <seg>14.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.4. Configuring arbitrary objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145356Z" creationid="huanghaohang" creationdate="20170918T145356Z">
        <seg>14.4. 配置任意对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034103Z" creationid="huanghaohang" creationdate="20180131T034103Z">
        <seg>14.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.5. Configuring arbitrary objects using an external script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145831Z" creationid="huanghaohang" creationdate="20170918T145831Z">
        <seg>14.5. 使用外部脚本配置任意对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034112Z" creationid="huanghaohang" creationdate="20180131T034112Z">
        <seg>14.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>14.6. Caching</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150055Z" creationid="huanghaohang" creationdate="20170918T150055Z">
        <seg>14.6. 缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021637Z" creationid="huanghaohang" creationdate="20180201T021637Z">
        <seg>15.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021642Z" creationid="huanghaohang" creationdate="20180201T021642Z">
        <seg>15.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.1. Defining tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120439Z" creationid="huanghaohang" creationdate="20170919T120439Z">
        <seg>15.1. 定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021748Z" creationid="huanghaohang" creationdate="20180201T021748Z">
        <seg>15.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.10. Task rules</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011536Z" creationid="huanghaohang" creationdate="20170923T011536Z">
        <seg>15.10. 任务规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021754Z" creationid="huanghaohang" creationdate="20180201T021754Z">
        <seg>15.11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.11. Finalizer tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043853Z" creationid="huanghaohang" creationdate="20170923T043853Z">
        <seg>15.11. 析构器任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021802Z" creationid="huanghaohang" creationdate="20180201T021802Z">
        <seg>15.12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.12. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T045201Z" creationid="huanghaohang" creationdate="20170923T045201Z">
        <seg>15.12. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021648Z" creationid="huanghaohang" creationdate="20180201T021648Z">
        <seg>15.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.2. Locating tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121404Z" creationid="huanghaohang" creationdate="20170919T121404Z">
        <seg>15.2. 查找任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021655Z" creationid="huanghaohang" creationdate="20180201T021655Z">
        <seg>15.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.3. Configuring tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122055Z" creationid="huanghaohang" creationdate="20170919T122055Z">
        <seg>15.3. 配置任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021659Z" creationid="huanghaohang" creationdate="20180201T021659Z">
        <seg>15.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.4. Adding dependencies to a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124948Z" creationid="huanghaohang" creationdate="20170919T124948Z">
        <seg>15.4. 向任务添加依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021710Z" creationid="huanghaohang" creationdate="20180201T021710Z">
        <seg>15.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.5. Ordering tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130933Z" creationid="huanghaohang" creationdate="20170919T130933Z">
        <seg>15.5. 任务排序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021715Z" creationid="huanghaohang" creationdate="20180201T021715Z">
        <seg>15.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.6. Adding a description to a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081613Z" creationid="huanghaohang" creationdate="20170922T081613Z">
        <seg>15.6. 向任务添加描述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021724Z" creationid="huanghaohang" creationdate="20180201T021724Z">
        <seg>15.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.7. Replacing tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082311Z" creationid="huanghaohang" creationdate="20170922T082311Z">
        <seg>15.7. 替换任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021731Z" creationid="huanghaohang" creationdate="20180201T021731Z">
        <seg>15.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.8.1. Using a predicate</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083702Z" creationid="huanghaohang" creationdate="20170922T083702Z">
        <seg>15.8.1. 使用断言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.8.2. Using StopExecutionException</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084205Z" creationid="huanghaohang" creationdate="20170922T084205Z">
        <seg>15.8.2. 使用 StopExecutionException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.8.3. Enabling and disabling tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085202Z" creationid="huanghaohang" creationdate="20170922T085202Z">
        <seg>15.8.3. 启用和禁用任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.8. Skipping tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083652Z" creationid="huanghaohang" creationdate="20170922T083652Z">
        <seg>15.8. 跳过任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021737Z" creationid="huanghaohang" creationdate="20180201T021737Z">
        <seg>15.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.9.1. Declaring a task's inputs and outputs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085611Z" creationid="huanghaohang" creationdate="20170922T085611Z">
        <seg>15.9.1. 声明一个任务的输入和输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.9.2. How does it work?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T004829Z" creationid="huanghaohang" creationdate="20170923T004829Z">
        <seg>15.9.2. 它是怎么实现的？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>15.9. Skipping tasks that are up-to-date</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T093742Z" creationid="huanghaohang" creationdate="20170922T085414Z">
        <seg>15.9.  跳过最新的任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092959Z" creationid="huanghaohang" creationdate="20180218T092959Z">
        <seg>16.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093002Z" creationid="huanghaohang" creationdate="20180218T093002Z">
        <seg>16.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.1. Locating files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T125036Z" creationid="huanghaohang" creationdate="20170923T124850Z">
        <seg>16.1. 查找文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093014Z" creationid="huanghaohang" creationdate="20180218T093014Z">
        <seg>16.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.2. File collections</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T130138Z" creationid="huanghaohang" creationdate="20170923T130138Z">
        <seg>16.2. 文件集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093021Z" creationid="huanghaohang" creationdate="20180218T093021Z">
        <seg>16.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.3. File trees</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150851Z" creationid="huanghaohang" creationdate="20170927T150851Z">
        <seg>16.3. 文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093027Z" creationid="huanghaohang" creationdate="20180218T093027Z">
        <seg>16.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.4. Using the contents of an archive as a file tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023649Z" creationid="huanghaohang" creationdate="20171002T023649Z">
        <seg>16.4. 使用归档的内容作为文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093042Z" creationid="huanghaohang" creationdate="20180218T093042Z">
        <seg>16.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.5. Specifying a set of input files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133539Z" creationid="huanghaohang" creationdate="20171002T133539Z">
        <seg>16.5. 指定一组输入文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093052Z" creationid="huanghaohang" creationdate="20180218T093052Z">
        <seg>16.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.6.1. Renaming files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060224Z" creationid="huanghaohang" creationdate="20171126T060224Z">
        <seg>16.6.1. 重命名文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.6.2. Filtering files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060303Z" creationid="huanghaohang" creationdate="20171126T060303Z">
        <seg>16.6.2 过滤文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.6.3. Using the &lt;c0&gt;CopySpec&lt;/c0&gt; class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060352Z" creationid="huanghaohang" creationdate="20171126T060352Z">
        <seg>16.6.3. 使用&lt;c0&gt;CopySpec&lt;/c0&gt;类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.6. Copying files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134320Z" creationid="huanghaohang" creationdate="20171002T134320Z">
        <seg>16.6. 复制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093058Z" creationid="huanghaohang" creationdate="20180218T093058Z">
        <seg>16.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.7. Using the &lt;c0&gt;Sync&lt;/c0&gt; task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060929Z" creationid="huanghaohang" creationdate="20171126T060929Z">
        <seg>16.7. 使用&lt;c0&gt;Sync&lt;/c0&gt;任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093110Z" creationid="huanghaohang" creationdate="20180218T093110Z">
        <seg>16.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.8.1. Archive naming</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140629Z" creationid="huanghaohang" creationdate="20171126T140629Z">
        <seg>16.8.1. 归档命名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.8.2. Sharing content between multiple archives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233336Z" creationid="huanghaohang" creationdate="20171206T233336Z">
        <seg>16.8.2. 共享多个归档之间的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>16.8. Creating archives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125205Z" creationid="huanghaohang" creationdate="20171126T125205Z">
        <seg>16.8. 创建归档文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015148Z" creationid="huanghaohang" creationdate="20180314T015148Z">
        <seg>17.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015152Z" creationid="huanghaohang" creationdate="20180314T015152Z">
        <seg>17.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.1.1. Using custom Ant tasks in your build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083617Z" creationid="huanghaohang" creationdate="20180105T083509Z">
        <seg>17.1.1. 在你的构建中使用自定义 Ant 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.1. Using Ant tasks and types in your build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171213T140906Z" creationid="huanghaohang" creationdate="20171213T140906Z">
        <seg>17.1. 在构建中使用 Ant 任务和类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015202Z" creationid="huanghaohang" creationdate="20180314T015202Z">
        <seg>17.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.2. Importing an Ant build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084337Z" creationid="huanghaohang" creationdate="20180105T084337Z">
        <seg>17.2. 导入 Ant 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015208Z" creationid="huanghaohang" creationdate="20180314T015208Z">
        <seg>17.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.3. Ant properties and references</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084847Z" creationid="huanghaohang" creationdate="20180105T084847Z">
        <seg>17.3. Ant 属性和引用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015215Z" creationid="huanghaohang" creationdate="20180314T015215Z">
        <seg>17.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>17.4. API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094743Z" creationid="huanghaohang" creationdate="20180105T094743Z">
        <seg>17.4. API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140417Z" creationid="huanghaohang" creationdate="20180516T140417Z">
        <seg>18.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140421Z" creationid="huanghaohang" creationdate="20180516T140421Z">
        <seg>18.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.1. Choosing a log level</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221558Z" creationid="huanghaohang" creationdate="20180105T221558Z">
        <seg>18.1. 选择一个日志级别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140430Z" creationid="huanghaohang" creationdate="20180516T140430Z">
        <seg>18.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.2. Writing your own log messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T011712Z" creationid="huanghaohang" creationdate="20180107T011712Z">
        <seg>18.2. 编写自己的日志消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140439Z" creationid="huanghaohang" creationdate="20180516T140439Z">
        <seg>18.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.3. Logging from external tools and libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T024402Z" creationid="huanghaohang" creationdate="20180107T024402Z">
        <seg>18.3. 使用外部的工具和类库来写日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140458Z" creationid="huanghaohang" creationdate="20180516T140458Z">
        <seg>18.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>18.4. Changing what Gradle logs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025717Z" creationid="huanghaohang" creationdate="20180107T025717Z">
        <seg>18.4. 更改 Gradle 日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143325Z" creationid="huanghaohang" creationdate="20180516T143325Z">
        <seg>19.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143328Z" creationid="huanghaohang" creationdate="20180516T143328Z">
        <seg>19.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.1. Enter the daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133238Z" creationid="huanghaohang" creationdate="20180108T133238Z">
        <seg>19.1. 走进守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143336Z" creationid="huanghaohang" creationdate="20180516T143336Z">
        <seg>19.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.2. Reusing and expiration of daemons</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T142312Z" creationid="huanghaohang" creationdate="20180109T142216Z">
        <seg>19.2. 守护进程的重用和过期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143346Z" creationid="huanghaohang" creationdate="20180516T143346Z">
        <seg>19.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.3. Usage and troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180116T143807Z" creationid="huanghaohang" creationdate="20180116T143807Z">
        <seg>19.3. 用法和故障排除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143352Z" creationid="huanghaohang" creationdate="20180516T143352Z">
        <seg>19.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>19.4. Configuring the daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025707Z" creationid="huanghaohang" creationdate="20180120T025707Z">
        <seg>19.4. 配置守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072442Z" creationid="haohang" creationdate="20170720T072442Z">
        <seg>2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2. /home/user/gradle/samples/native-binaries/cunit/src/operatorsTest/cunit/test_plus.c:7  - plus(2, 2) == 4

:runFailingOperatorsTestCUnitExe FAILED

BUILD FAILED

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090435Z" creationid="huanghaohang" creationdate="20190611T090435Z">
        <seg>2. /home/user/gradle/samples/native-binaries/cunit/src/operatorsTest/cunit/test_plus.c:7  - plus(2, 2) == 4

:runFailingOperatorsTestCUnitExe FAILED

BUILD FAILED

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2. Overview</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010005Z" creationid="95" creationdate="20190204T010005Z">
        <seg>2. 概述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072445Z" creationid="haohang" creationdate="20170720T072445Z">
        <seg>2.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.1. Features</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010007Z" creationid="95" creationdate="20190204T010007Z">
        <seg>2.1. 特性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.1. Features</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T165942Z" creationid="95" creationdate="20170721T165942Z">
        <seg>2.1. 特性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072450Z" creationid="haohang" creationdate="20170720T072450Z">
        <seg>2.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.2. Why Groovy?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010010Z" creationid="95" creationdate="20190204T010010Z">
        <seg>2.2. 为什么使用 Groovy？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.2. Why Groovy?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T065618Z" creationid="95" creationdate="20170723T065618Z">
        <seg>2.2. 为什么使用 Groovy？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>2.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141906Z" creationid="huanghaohang" creationdate="20190707T141906Z">
        <seg>2.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143357Z" creationid="huanghaohang" creationdate="20180516T143357Z">
        <seg>20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034135Z" creationid="huanghaohang" creationdate="20180517T034135Z">
        <seg>20.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.1.1. Forked java processes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T020557Z" creationid="huanghaohang" creationdate="20180126T020557Z">
        <seg>20.1.1. Forked java 进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.1. Configuring the build environment via gradle.properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180123T123641Z" creationid="huanghaohang" creationdate="20180123T123641Z">
        <seg>20.1. 通过 gradle.properties 配置构建环境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034143Z" creationid="huanghaohang" creationdate="20180517T034143Z">
        <seg>20.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.2.1. NTLM Authentication</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T080556Z" creationid="huanghaohang" creationdate="20180130T080556Z">
        <seg>20.2.1. NTLM 身份验证</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>20.2. Accessing the web via a proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073251Z" creationid="huanghaohang" creationdate="20180130T073147Z">
        <seg>20.2. 通过代理访问网络</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034149Z" creationid="huanghaohang" creationdate="20180517T034149Z">
        <seg>21.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034330Z" creationid="huanghaohang" creationdate="20180517T034330Z">
        <seg>21.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.1. Applying plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092812Z" creationid="huanghaohang" creationdate="20180130T092812Z">
        <seg>21.1. 应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034750Z" creationid="huanghaohang" creationdate="20180517T034750Z">
        <seg>21.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.2. What plugins do</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T095816Z" creationid="huanghaohang" creationdate="20180130T095816Z">
        <seg>21.2. 插件都做了什么</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034754Z" creationid="huanghaohang" creationdate="20180517T034754Z">
        <seg>21.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.3. Conventions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100522Z" creationid="huanghaohang" creationdate="20180130T100522Z">
        <seg>21.3. 约定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034801Z" creationid="huanghaohang" creationdate="20180517T034801Z">
        <seg>21.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>21.4. More on plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032607Z" creationid="huanghaohang" creationdate="20180131T032607Z">
        <seg>21.4. 更多关于插件的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034809Z" creationid="huanghaohang" creationdate="20180517T034809Z">
        <seg>22.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034946Z" creationid="huanghaohang" creationdate="20180517T034946Z">
        <seg>22.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.1. Language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140505Z" creationid="huanghaohang" creationdate="20180205T140505Z">
        <seg>22.1. 语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034950Z" creationid="huanghaohang" creationdate="20180517T034950Z">
        <seg>22.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.2. Incubating language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141343Z" creationid="huanghaohang" creationdate="20180205T141343Z">
        <seg>22.2. 试验性的语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034956Z" creationid="huanghaohang" creationdate="20180517T034956Z">
        <seg>22.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.3. Integration plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143147Z" creationid="huanghaohang" creationdate="20180205T143147Z">
        <seg>22.3. 集成插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035001Z" creationid="huanghaohang" creationdate="20180517T035001Z">
        <seg>22.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.4. Incubating integration plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143714Z" creationid="huanghaohang" creationdate="20180207T143714Z">
        <seg>22.4. 试验性的集成插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035007Z" creationid="huanghaohang" creationdate="20180517T035007Z">
        <seg>22.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.5. Software development plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144024Z" creationid="huanghaohang" creationdate="20180207T144024Z">
        <seg>22.5. 软件开发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035013Z" creationid="huanghaohang" creationdate="20180517T035013Z">
        <seg>22.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.6. Incubating software development plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090146Z" creationid="huanghaohang" creationdate="20180211T090146Z">
        <seg>22.6. 试验性的软件开发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035020Z" creationid="huanghaohang" creationdate="20180517T035020Z">
        <seg>22.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.7. Base plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090807Z" creationid="huanghaohang" creationdate="20180211T090807Z">
        <seg>22.7. 基本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035025Z" creationid="huanghaohang" creationdate="20180517T035025Z">
        <seg>22.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>22.8. Third party plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092856Z" creationid="huanghaohang" creationdate="20180218T092856Z">
        <seg>22.8. 第三方插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035031Z" creationid="huanghaohang" creationdate="20180517T035031Z">
        <seg>23.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130005Z" creationid="huanghaohang" creationdate="20180517T130005Z">
        <seg>23.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T153410Z" creationid="huanghaohang" creationdate="20180218T153410Z">
        <seg>23.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130051Z" creationid="huanghaohang" creationdate="20180517T130051Z">
        <seg>23.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.10. Resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100639Z" creationid="haohang" creationdate="20180326T100639Z">
        <seg>23.10. Resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130056Z" creationid="huanghaohang" creationdate="20180517T130056Z">
        <seg>23.11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.11. CompileJava</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101409Z" creationid="haohang" creationdate="20180326T101409Z">
        <seg>23.11. CompileJava</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130100Z" creationid="huanghaohang" creationdate="20180517T130100Z">
        <seg>23.12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.1. Test execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T102729Z" creationid="haohang" creationdate="20180327T102729Z">
        <seg>23.12.1. 测试执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.2. Debugging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062048Z" creationid="haohang" creationdate="20180330T062048Z">
        <seg>23.12.2. 调试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.3. Test filtering</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062433Z" creationid="haohang" creationdate="20180330T062433Z">
        <seg>23.12.3. 测试过滤</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.4. Single test execution via System Properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131800Z" creationid="huanghaohang" creationdate="20180405T131800Z">
        <seg>23.12.4. 通过系统属性执行单个测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.5. Test detection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142934Z" creationid="huanghaohang" creationdate="20180405T142934Z">
        <seg>23.12.5. 测试检测</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.6. Test grouping</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155900Z" creationid="huanghaohang" creationdate="20180405T155900Z">
        <seg>23.12.6. 测试分组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.7.1. TestNG parameterized methods and reporting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T055609Z" creationid="huanghaohang" creationdate="20180406T055609Z">
        <seg>23.12.7.1. TestNG 参数化方法和报告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.7. Test reporting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042054Z" creationid="huanghaohang" creationdate="20180406T042054Z">
        <seg>23.12.7. 测试报告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12.8. Convention values</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104623Z" creationid="huanghaohang" creationdate="20180406T104623Z">
        <seg>23.12.8. 约定值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.12. Test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T102522Z" creationid="haohang" creationdate="20180327T102522Z">
        <seg>23.12. Test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.13.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130102Z" creationid="huanghaohang" creationdate="20180517T130102Z">
        <seg>23.13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.13.1. Manifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111236Z" creationid="huanghaohang" creationdate="20180406T111236Z">
        <seg>23.13.1. Manifest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.13. Jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104637Z" creationid="huanghaohang" creationdate="20180406T104637Z">
        <seg>23.13. Jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.14.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130105Z" creationid="huanghaohang" creationdate="20180517T130105Z">
        <seg>23.14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.14. Uploading</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113351Z" creationid="huanghaohang" creationdate="20180406T113351Z">
        <seg>23.14. 上传</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130011Z" creationid="huanghaohang" creationdate="20180517T130011Z">
        <seg>23.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.2. Source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T153447Z" creationid="huanghaohang" creationdate="20180218T153447Z">
        <seg>23.2 源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130015Z" creationid="huanghaohang" creationdate="20180517T130015Z">
        <seg>23.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.3. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061255Z" creationid="haohang" creationdate="20180312T061255Z">
        <seg>23.3. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130019Z" creationid="huanghaohang" creationdate="20180517T130019Z">
        <seg>23.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.4.1. Changing the project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053035Z" creationid="haohang" creationdate="20180313T053035Z">
        <seg>23.4.1. 更改项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.4. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052630Z" creationid="haohang" creationdate="20180313T052630Z">
        <seg>23.4. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130025Z" creationid="huanghaohang" creationdate="20180517T130025Z">
        <seg>23.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.5. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053350Z" creationid="haohang" creationdate="20180313T053350Z">
        <seg>23.5. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130031Z" creationid="huanghaohang" creationdate="20180517T130031Z">
        <seg>23.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.6. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054457Z" creationid="haohang" creationdate="20180313T054457Z">
        <seg>23.6. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130035Z" creationid="huanghaohang" creationdate="20180517T130035Z">
        <seg>23.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.7.1. Source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094930Z" creationid="haohang" creationdate="20180320T094930Z">
        <seg>23.7.1. 源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.7.2. Defining new source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094528Z" creationid="haohang" creationdate="20180326T094528Z">
        <seg>23.7.2. 定义新的源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.7.3. Some source set examples</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095243Z" creationid="haohang" creationdate="20180326T095243Z">
        <seg>23.7.3. 一些源集的范例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.7. Working with source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010952Z" creationid="huanghaohang" creationdate="20180318T010952Z">
        <seg>23.7. 使用源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130040Z" creationid="huanghaohang" creationdate="20180517T130040Z">
        <seg>23.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.8. Javadoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095500Z" creationid="haohang" creationdate="20180326T095500Z">
        <seg>23.8. Javadoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130042Z" creationid="huanghaohang" creationdate="20180517T130042Z">
        <seg>23.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>23.9. Clean</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100509Z" creationid="haohang" creationdate="20180326T100509Z">
        <seg>23.9. Clean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130114Z" creationid="huanghaohang" creationdate="20180517T130114Z">
        <seg>24.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133145Z" creationid="huanghaohang" creationdate="20180712T133145Z">
        <seg>24.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120712Z" creationid="huanghaohang" creationdate="20180406T120652Z">
        <seg>24.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133148Z" creationid="huanghaohang" creationdate="20180712T133148Z">
        <seg>24.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120718Z" creationid="huanghaohang" creationdate="20180406T120708Z">
        <seg>24.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133150Z" creationid="huanghaohang" creationdate="20180712T133150Z">
        <seg>24.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.3.1. Changing the project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121827Z" creationid="huanghaohang" creationdate="20180406T121827Z">
        <seg>24.3.1. 更改项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121126Z" creationid="huanghaohang" creationdate="20180406T121126Z">
        <seg>24.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133152Z" creationid="huanghaohang" creationdate="20180712T133152Z">
        <seg>24.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122021Z" creationid="huanghaohang" creationdate="20180406T122021Z">
        <seg>24.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133156Z" creationid="huanghaohang" creationdate="20180712T133156Z">
        <seg>24.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.5. Automatic configuration of groovyClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123349Z" creationid="huanghaohang" creationdate="20180406T123349Z">
        <seg>24.5. groovyClasspath 的自动配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133206Z" creationid="huanghaohang" creationdate="20180712T133206Z">
        <seg>24.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.6. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132844Z" creationid="huanghaohang" creationdate="20180406T132844Z">
        <seg>24.6. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133208Z" creationid="huanghaohang" creationdate="20180712T133208Z">
        <seg>24.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.7. Source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132927Z" creationid="huanghaohang" creationdate="20180406T132927Z">
        <seg>24.7. 源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133215Z" creationid="huanghaohang" creationdate="20180712T133215Z">
        <seg>24.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>24.8. GroovyCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003403Z" creationid="huanghaohang" creationdate="20180407T003403Z">
        <seg>24.8. GroovyCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133222Z" creationid="huanghaohang" creationdate="20180712T133222Z">
        <seg>25.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140206Z" creationid="huanghaohang" creationdate="20181201T140206Z">
        <seg>25.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010149Z" creationid="huanghaohang" creationdate="20180407T010149Z">
        <seg>25.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140320Z" creationid="huanghaohang" creationdate="20181201T140320Z">
        <seg>25.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.10. Incremental compilation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T054246Z" creationid="huanghaohang" creationdate="20180407T054246Z">
        <seg>25.10. 增量编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140330Z" creationid="huanghaohang" creationdate="20181201T140330Z">
        <seg>25.11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.11. Eclipse Integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141301Z" creationid="huanghaohang" creationdate="20180407T141247Z">
        <seg>25.11. Eclipse 集成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140337Z" creationid="huanghaohang" creationdate="20181201T140337Z">
        <seg>25.12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.12. IntelliJ IDEA Integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141522Z" creationid="huanghaohang" creationdate="20180407T141522Z">
        <seg>25.12. IntelliJ IDEA 集成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140210Z" creationid="huanghaohang" creationdate="20181201T140210Z">
        <seg>25.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010204Z" creationid="huanghaohang" creationdate="20180407T010204Z">
        <seg>25.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140212Z" creationid="huanghaohang" creationdate="20181201T140212Z">
        <seg>25.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.3.1. Changing the project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011204Z" creationid="huanghaohang" creationdate="20180407T011204Z">
        <seg>25.3.1. 更改项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010753Z" creationid="huanghaohang" creationdate="20180407T010753Z">
        <seg>25.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140216Z" creationid="huanghaohang" creationdate="20181201T140216Z">
        <seg>25.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011254Z" creationid="huanghaohang" creationdate="20180407T011254Z">
        <seg>25.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140217Z" creationid="huanghaohang" creationdate="20181201T140217Z">
        <seg>25.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.5. Automatic configuration of scalaClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015532Z" creationid="huanghaohang" creationdate="20180407T015532Z">
        <seg>25.5. scalaClasspath 的自动配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140230Z" creationid="huanghaohang" creationdate="20181201T140230Z">
        <seg>25.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.6. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020034Z" creationid="huanghaohang" creationdate="20180407T020034Z">
        <seg>25.6. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140233Z" creationid="huanghaohang" creationdate="20181201T140233Z">
        <seg>25.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.7. Source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020058Z" creationid="huanghaohang" creationdate="20180407T020058Z">
        <seg>27.5. 源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140236Z" creationid="huanghaohang" creationdate="20181201T140236Z">
        <seg>25.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.8. Fast Scala Compiler</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020438Z" creationid="huanghaohang" creationdate="20180407T020438Z">
        <seg>25.8. Fast Scala Compiler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140313Z" creationid="huanghaohang" creationdate="20181201T140313Z">
        <seg>25.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>25.9. Compiling in external process</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T022117Z" creationid="huanghaohang" creationdate="20180407T022117Z">
        <seg>25.9. 在外部进程中编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140345Z" creationid="huanghaohang" creationdate="20181201T140345Z">
        <seg>26.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142151Z" creationid="huanghaohang" creationdate="20181201T142151Z">
        <seg>26.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140134Z" creationid="huanghaohang" creationdate="20180408T140134Z">
        <seg>26.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142153Z" creationid="huanghaohang" creationdate="20181201T142153Z">
        <seg>26.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140154Z" creationid="huanghaohang" creationdate="20180408T140154Z">
        <seg>26.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142157Z" creationid="huanghaohang" creationdate="20181201T142157Z">
        <seg>26.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140306Z" creationid="huanghaohang" creationdate="20180408T140306Z">
        <seg>26.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142200Z" creationid="huanghaohang" creationdate="20181201T142200Z">
        <seg>26.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140422Z" creationid="huanghaohang" creationdate="20180408T140422Z">
        <seg>26.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142201Z" creationid="huanghaohang" creationdate="20181201T142201Z">
        <seg>26.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.5. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140724Z" creationid="huanghaohang" creationdate="20180408T140724Z">
        <seg>26.5. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142203Z" creationid="huanghaohang" creationdate="20181201T142203Z">
        <seg>26.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.6. War</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142507Z" creationid="huanghaohang" creationdate="20180408T142507Z">
        <seg>26.6. War</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142205Z" creationid="huanghaohang" creationdate="20181201T142205Z">
        <seg>26.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>26.7. Customizing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143014Z" creationid="huanghaohang" creationdate="20180408T143014Z">
        <seg>26.7. 自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142212Z" creationid="huanghaohang" creationdate="20181201T142212Z">
        <seg>27.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142215Z" creationid="huanghaohang" creationdate="20181201T142215Z">
        <seg>27.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145004Z" creationid="huanghaohang" creationdate="20180415T145004Z">
        <seg>27.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142217Z" creationid="huanghaohang" creationdate="20181201T142217Z">
        <seg>27.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145033Z" creationid="huanghaohang" creationdate="20180415T145033Z">
        <seg>27.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142218Z" creationid="huanghaohang" creationdate="20181201T142218Z">
        <seg>27.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145315Z" creationid="huanghaohang" creationdate="20180415T145315Z">
        <seg>27.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142220Z" creationid="huanghaohang" creationdate="20181201T142220Z">
        <seg>27.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145332Z" creationid="huanghaohang" creationdate="20180415T145332Z">
        <seg>27.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142221Z" creationid="huanghaohang" creationdate="20181201T142221Z">
        <seg>27.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.5. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145845Z" creationid="huanghaohang" creationdate="20180415T145845Z">
        <seg>27.5. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142223Z" creationid="huanghaohang" creationdate="20181201T142223Z">
        <seg>27.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.6. Ear</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142701Z" creationid="huanghaohang" creationdate="20180416T142701Z">
        <seg>27.6. Ear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142224Z" creationid="huanghaohang" creationdate="20181201T142224Z">
        <seg>27.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.7. Customizing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142935Z" creationid="huanghaohang" creationdate="20180416T142935Z">
        <seg>27.7. 自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142228Z" creationid="huanghaohang" creationdate="20181201T142228Z">
        <seg>27.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>27.8. Using custom descriptor file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143132Z" creationid="huanghaohang" creationdate="20180416T143132Z">
        <seg>27.8. 使用自定义的描述符文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142233Z" creationid="huanghaohang" creationdate="20181201T142233Z">
        <seg>28.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142238Z" creationid="huanghaohang" creationdate="20181201T142238Z">
        <seg>28.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143946Z" creationid="huanghaohang" creationdate="20180416T143946Z">
        <seg>28.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142240Z" creationid="huanghaohang" creationdate="20181201T142240Z">
        <seg>28.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144001Z" creationid="huanghaohang" creationdate="20180416T144001Z">
        <seg>28.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142241Z" creationid="huanghaohang" creationdate="20181201T142241Z">
        <seg>28.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144342Z" creationid="huanghaohang" creationdate="20180416T144342Z">
        <seg>28.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142243Z" creationid="huanghaohang" creationdate="20181201T142243Z">
        <seg>28.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144454Z" creationid="huanghaohang" creationdate="20180416T144454Z">
        <seg>28.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142244Z" creationid="huanghaohang" creationdate="20181201T142244Z">
        <seg>28.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>28.5. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144522Z" creationid="huanghaohang" creationdate="20180416T144522Z">
        <seg>28.5. 公约属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142247Z" creationid="huanghaohang" creationdate="20181201T142247Z">
        <seg>29.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142250Z" creationid="huanghaohang" creationdate="20181201T142250Z">
        <seg>29.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180424T134649Z" creationid="huanghaohang" creationdate="20180424T134649Z">
        <seg>29.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142252Z" creationid="huanghaohang" creationdate="20181201T142252Z">
        <seg>29.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135512Z" creationid="huanghaohang" creationdate="20180516T135512Z">
        <seg>29.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142253Z" creationid="huanghaohang" creationdate="20181201T142253Z">
        <seg>29.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135807Z" creationid="huanghaohang" creationdate="20180516T135807Z">
        <seg>29.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142254Z" creationid="huanghaohang" creationdate="20181201T142254Z">
        <seg>29.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140017Z" creationid="huanghaohang" creationdate="20180516T140017Z">
        <seg>29.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142257Z" creationid="huanghaohang" creationdate="20181201T142257Z">
        <seg>29.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>29.5. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140138Z" creationid="huanghaohang" creationdate="20180516T140138Z">
        <seg>29.5. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014533Z" creationid="haohang" creationdate="20170801T014533Z">
        <seg>3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>3. Tutorials</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010013Z" creationid="95" creationdate="20190204T010013Z">
        <seg>3. 教程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>3.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014538Z" creationid="haohang" creationdate="20170801T014538Z">
        <seg>3.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>3.1. Getting Started</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010014Z" creationid="95" creationdate="20190204T010014Z">
        <seg>3.1. 入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>3.1. Getting Started</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014519Z" creationid="95" creationdate="20170723T072518Z">
        <seg>3.1. 入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>3.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141907Z" creationid="huanghaohang" creationdate="20190707T141907Z">
        <seg>3.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144123Z" creationid="huanghaohang" creationdate="20181201T144123Z">
        <seg>30.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144127Z" creationid="huanghaohang" creationdate="20181201T144127Z">
        <seg>30.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140412Z" creationid="huanghaohang" creationdate="20180516T140412Z">
        <seg>30.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144129Z" creationid="huanghaohang" creationdate="20181201T144129Z">
        <seg>30.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141802Z" creationid="huanghaohang" creationdate="20180516T141802Z">
        <seg>30.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144130Z" creationid="huanghaohang" creationdate="20181201T144130Z">
        <seg>30.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142009Z" creationid="huanghaohang" creationdate="20180516T142002Z">
        <seg>30.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144131Z" creationid="huanghaohang" creationdate="20181201T144131Z">
        <seg>30.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142045Z" creationid="huanghaohang" creationdate="20180516T142045Z">
        <seg>30.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144133Z" creationid="huanghaohang" creationdate="20181201T144133Z">
        <seg>30.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>30.5. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142114Z" creationid="huanghaohang" creationdate="20180516T142114Z">
        <seg>30.5. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144153Z" creationid="huanghaohang" creationdate="20181201T144153Z">
        <seg>31.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070013Z" creationid="huanghaohang" creationdate="20190205T070013Z">
        <seg>31.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142227Z" creationid="huanghaohang" creationdate="20180516T142227Z">
        <seg>31.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070016Z" creationid="huanghaohang" creationdate="20190205T070016Z">
        <seg>31.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142243Z" creationid="huanghaohang" creationdate="20180516T142243Z">
        <seg>31.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070018Z" creationid="huanghaohang" creationdate="20190205T070018Z">
        <seg>31.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.3. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142432Z" creationid="huanghaohang" creationdate="20180516T142432Z">
        <seg>31.3. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070019Z" creationid="huanghaohang" creationdate="20190205T070019Z">
        <seg>31.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>31.4. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142506Z" creationid="huanghaohang" creationdate="20180516T142506Z">
        <seg>31.4. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070020Z" creationid="huanghaohang" creationdate="20190205T070020Z">
        <seg>32.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070023Z" creationid="huanghaohang" creationdate="20190205T070023Z">
        <seg>32.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142619Z" creationid="huanghaohang" creationdate="20180516T142619Z">
        <seg>32.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070025Z" creationid="huanghaohang" creationdate="20190205T070025Z">
        <seg>32.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142630Z" creationid="huanghaohang" creationdate="20180516T142630Z">
        <seg>32.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070027Z" creationid="huanghaohang" creationdate="20190205T070027Z">
        <seg>32.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.3. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142740Z" creationid="huanghaohang" creationdate="20180516T142740Z">
        <seg>32.3. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070028Z" creationid="huanghaohang" creationdate="20190205T070028Z">
        <seg>32.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>32.4. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142803Z" creationid="huanghaohang" creationdate="20180516T142803Z">
        <seg>32.4. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070029Z" creationid="huanghaohang" creationdate="20190205T070029Z">
        <seg>33.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070032Z" creationid="huanghaohang" creationdate="20190205T070032Z">
        <seg>33.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143128Z" creationid="huanghaohang" creationdate="20180516T143128Z">
        <seg>33.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070034Z" creationid="huanghaohang" creationdate="20190205T070034Z">
        <seg>33.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143136Z" creationid="huanghaohang" creationdate="20180516T143136Z">
        <seg>33.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070035Z" creationid="huanghaohang" creationdate="20190205T070035Z">
        <seg>33.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.3. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143230Z" creationid="huanghaohang" creationdate="20180516T143230Z">
        <seg>33.3. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070037Z" creationid="huanghaohang" creationdate="20190205T070037Z">
        <seg>33.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>33.4. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143246Z" creationid="huanghaohang" creationdate="20180516T143246Z">
        <seg>33.4. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070038Z" creationid="huanghaohang" creationdate="20190205T070038Z">
        <seg>34.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070042Z" creationid="huanghaohang" creationdate="20190205T070042Z">
        <seg>34.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.1. Getting Started</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133657Z" creationid="huanghaohang" creationdate="20180712T133657Z">
        <seg>34.1. 入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070044Z" creationid="huanghaohang" creationdate="20190205T070044Z">
        <seg>34.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.2. Configuring the JaCoCo Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T134814Z" creationid="huanghaohang" creationdate="20180712T134814Z">
        <seg>34.2.  配置 JaCoCo 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070052Z" creationid="huanghaohang" creationdate="20190205T070052Z">
        <seg>34.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.3. JaCoCo Report configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135324Z" creationid="huanghaohang" creationdate="20180712T135324Z">
        <seg>34.3. JaCoCo 报告配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070100Z" creationid="huanghaohang" creationdate="20190205T070100Z">
        <seg>34.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.4. JaCoCo specific task configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093016Z" creationid="huanghaohang" creationdate="20180715T093016Z">
        <seg>34.4. JaCoCo 的特定任务配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070109Z" creationid="huanghaohang" creationdate="20190205T070109Z">
        <seg>34.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.5. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093837Z" creationid="huanghaohang" creationdate="20180715T093837Z">
        <seg>34.5. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070111Z" creationid="huanghaohang" creationdate="20190205T070111Z">
        <seg>34.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>34.6. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093937Z" creationid="huanghaohang" creationdate="20180715T093937Z">
        <seg>34.6. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070112Z" creationid="huanghaohang" creationdate="20190205T070112Z">
        <seg>35.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070115Z" creationid="huanghaohang" creationdate="20190205T070115Z">
        <seg>35.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100010Z" creationid="huanghaohang" creationdate="20180715T100010Z">
        <seg>35.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070117Z" creationid="huanghaohang" creationdate="20190205T070117Z">
        <seg>35.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.2. Analyzing Multi-Project Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151502Z" creationid="huanghaohang" creationdate="20180811T151502Z">
        <seg>35.2. 分析多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070127Z" creationid="huanghaohang" creationdate="20190205T070127Z">
        <seg>35.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.3. Analyzing Custom Source Sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T071938Z" creationid="huanghaohang" creationdate="20180812T071938Z">
        <seg>35.3. 分析自定义源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070134Z" creationid="huanghaohang" creationdate="20190205T070134Z">
        <seg>35.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.4. Analyzing languages other than Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072229Z" creationid="huanghaohang" creationdate="20180812T072229Z">
        <seg>35.4. 分析非 Java 语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070141Z" creationid="huanghaohang" creationdate="20190205T070141Z">
        <seg>35.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.5. Setting Custom Sonar Properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072755Z" creationid="huanghaohang" creationdate="20180812T072755Z">
        <seg>35.5. 设置自定义的 Sonar 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070146Z" creationid="huanghaohang" creationdate="20190205T070146Z">
        <seg>35.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.6. Configuring Sonar Settings from the Command Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T084805Z" creationid="huanghaohang" creationdate="20181012T084805Z">
        <seg>35.6. 从命令行配置 Sonar 的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070157Z" creationid="huanghaohang" creationdate="20190205T070157Z">
        <seg>35.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>35.7. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085451Z" creationid="huanghaohang" creationdate="20181012T085451Z">
        <seg>35.7. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070158Z" creationid="huanghaohang" creationdate="20190205T070158Z">
        <seg>36.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024107Z" creationid="huanghaohang" creationdate="20190606T024107Z">
        <seg>36.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.1. Plugin Status and Compatibility</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150934Z" creationid="huanghaohang" creationdate="20181201T150934Z">
        <seg>36.1. 插件状态和兼容性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070254Z" creationid="huanghaohang" creationdate="20190205T070254Z">
        <seg>36.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.10. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051933Z" creationid="huanghaohang" creationdate="20181202T051933Z">
        <seg>36.10. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070214Z" creationid="huanghaohang" creationdate="20190205T070214Z">
        <seg>36.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.2. Getting Started</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T015356Z" creationid="huanghaohang" creationdate="20181202T015356Z">
        <seg>36.2. 入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070216Z" creationid="huanghaohang" creationdate="20190205T070216Z">
        <seg>36.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.3. Configuring the Sonar Runner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T020523Z" creationid="huanghaohang" creationdate="20181202T020523Z">
        <seg>36.3. 配置 Sonar Runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070222Z" creationid="huanghaohang" creationdate="20190205T070222Z">
        <seg>36.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.4. Analyzing Multi-Project Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T024007Z" creationid="huanghaohang" creationdate="20181202T024007Z">
        <seg>36.4. 分析多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070224Z" creationid="huanghaohang" creationdate="20190205T070224Z">
        <seg>36.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.5. Analyzing Custom Source Sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042952Z" creationid="huanghaohang" creationdate="20181202T042952Z">
        <seg>36.5. 分析自定义源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070225Z" creationid="huanghaohang" creationdate="20190205T070225Z">
        <seg>36.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.6. Analyzing languages other than Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043426Z" creationid="huanghaohang" creationdate="20181202T043330Z">
        <seg>36.6. 分析 Java 以外的语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070228Z" creationid="huanghaohang" creationdate="20190205T070228Z">
        <seg>36.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.7. More on configuring Sonar properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043550Z" creationid="huanghaohang" creationdate="20181202T043550Z">
        <seg>36.7. 有关配置 Sonar 属性的更多信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070244Z" creationid="huanghaohang" creationdate="20190205T070244Z">
        <seg>36.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.8. Setting Sonar Properties from the Command Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T045035Z" creationid="huanghaohang" creationdate="20181202T045035Z">
        <seg>36.8. 从命令行设置 Sonar 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070249Z" creationid="huanghaohang" creationdate="20190205T070249Z">
        <seg>36.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>36.9. Executing Sonar Runner in a separate process</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051424Z" creationid="huanghaohang" creationdate="20181202T051424Z">
        <seg>36.9. 在一个单独的进程中执行 Sonar Runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070255Z" creationid="huanghaohang" creationdate="20190205T070255Z">
        <seg>37.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070259Z" creationid="huanghaohang" creationdate="20190205T070259Z">
        <seg>37.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025856Z" creationid="huanghaohang" creationdate="20181203T025856Z">
        <seg>37.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070301Z" creationid="huanghaohang" creationdate="20190205T070301Z">
        <seg>37.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.2. Implicitly applied plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025911Z" creationid="huanghaohang" creationdate="20181203T025911Z">
        <seg>37.2. 隐式应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070310Z" creationid="huanghaohang" creationdate="20190205T070310Z">
        <seg>37.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.3. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025928Z" creationid="huanghaohang" creationdate="20181203T025928Z">
        <seg>37.3. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070313Z" creationid="huanghaohang" creationdate="20190205T070313Z">
        <seg>37.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025938Z" creationid="huanghaohang" creationdate="20181203T025933Z">
        <seg>37.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070315Z" creationid="huanghaohang" creationdate="20190205T070315Z">
        <seg>37.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.5.1. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030043Z" creationid="huanghaohang" creationdate="20181203T030043Z">
        <seg>37.5.1. 公约属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.5.2. Convention methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030058Z" creationid="huanghaohang" creationdate="20181203T030058Z">
        <seg>37.5.2. 公约方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.5. Convention object</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030009Z" creationid="huanghaohang" creationdate="20181203T030009Z">
        <seg>37.5. 公约对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>37.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070322Z" creationid="huanghaohang" creationdate="20190205T070322Z">
        <seg>37.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070323Z" creationid="huanghaohang" creationdate="20190205T070323Z">
        <seg>38.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070327Z" creationid="huanghaohang" creationdate="20190205T070327Z">
        <seg>38.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025636Z" creationid="huanghaohang" creationdate="20181210T025636Z">
        <seg>38.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070328Z" creationid="huanghaohang" creationdate="20190205T070328Z">
        <seg>38.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025742Z" creationid="huanghaohang" creationdate="20181210T025742Z">
        <seg>38.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070330Z" creationid="huanghaohang" creationdate="20190205T070330Z">
        <seg>38.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.3. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030100Z" creationid="huanghaohang" creationdate="20181210T030100Z">
        <seg>38.3. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070331Z" creationid="huanghaohang" creationdate="20190205T070331Z">
        <seg>38.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.1.1. Disabling merging with a complete overwrite</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T081529Z" creationid="huanghaohang" creationdate="20181210T081447Z">
        <seg>38.4.1.1. 使用完全覆盖禁用合并</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.1. Merging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T062820Z" creationid="huanghaohang" creationdate="20181210T062820Z">
        <seg>38.4.1. 合并</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.2.1. Partial overwrite of existing content</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T083629Z" creationid="huanghaohang" creationdate="20181210T082606Z">
        <seg>38.4.2.1. 部分覆盖现有内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.2.2. Modifying the fully populated domain objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084536Z" creationid="huanghaohang" creationdate="20181210T084536Z">
        <seg>38.4.2.2. 修改完全填充的域对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.2.3. Modifying the XML representation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085158Z" creationid="huanghaohang" creationdate="20181210T085158Z">
        <seg>38.4.2.3. 修改 XML 的表示形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4.2. Hooking into the generation lifecycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082023Z" creationid="huanghaohang" creationdate="20181210T082023Z">
        <seg>38.4.2. Hooking 到生成的生命周期中</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>38.4. Customizing the generated files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061903Z" creationid="huanghaohang" creationdate="20181210T061903Z">
        <seg>38.4. 自定义生成的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070337Z" creationid="huanghaohang" creationdate="20190205T070337Z">
        <seg>39.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070340Z" creationid="huanghaohang" creationdate="20190205T070340Z">
        <seg>39.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031102Z" creationid="huanghaohang" creationdate="20181212T031102Z">
        <seg>39.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070342Z" creationid="huanghaohang" creationdate="20190205T070342Z">
        <seg>39.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031147Z" creationid="huanghaohang" creationdate="20181212T031147Z">
        <seg>39.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070343Z" creationid="huanghaohang" creationdate="20190205T070343Z">
        <seg>39.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.3. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061154Z" creationid="huanghaohang" creationdate="20181212T061154Z">
        <seg>39.3. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070345Z" creationid="huanghaohang" creationdate="20190205T070345Z">
        <seg>39.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.1.1. Disabling merging with a complete overwrite</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T160239Z" creationid="huanghaohang" creationdate="20190121T160239Z">
        <seg>39.4.1.1. 使用完全覆盖禁用合并</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.1. Merging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T155949Z" creationid="huanghaohang" creationdate="20190121T155904Z">
        <seg>39.4.1. 合并</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.2.1. Partial overwrite of existing content</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012506Z" creationid="huanghaohang" creationdate="20190123T012506Z">
        <seg>39.4.2.1. 部分覆盖现有内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.2.2. Modifying the fully populated domain objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012805Z" creationid="huanghaohang" creationdate="20190123T012759Z">
        <seg>39.4.2.2. 修改完全填充的域对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.2.3. Modifying the XML representation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012909Z" creationid="huanghaohang" creationdate="20190123T012909Z">
        <seg>39.4.2.3. 修改 XML 的表示形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4.2. Hooking into the generation lifecycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T160542Z" creationid="huanghaohang" creationdate="20190121T160542Z">
        <seg>39.4.2. Hooking 到生成的生命周期中</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.4. Customizing the generated files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061241Z" creationid="huanghaohang" creationdate="20181212T061241Z">
        <seg>39.4. 自定义生成的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070346Z" creationid="huanghaohang" creationdate="20190205T070346Z">
        <seg>39.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>39.5. Further things to consider</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012928Z" creationid="huanghaohang" creationdate="20190123T012928Z">
        <seg>39.5. 还需要考虑的事情</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014548Z" creationid="haohang" creationdate="20170801T014548Z">
        <seg>4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4. Installing Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010020Z" creationid="95" creationdate="20190204T010020Z">
        <seg>4. 安装 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013321Z" creationid="huanghaohang" creationdate="20170919T013321Z">
        <seg>4.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.1. Prerequisites</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010028Z" creationid="95" creationdate="20190204T010028Z">
        <seg>4.1. 环境要求</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.1. Prerequisites</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T081223Z" creationid="95" creationdate="20170723T081223Z">
        <seg>4.1. 环境要求</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013331Z" creationid="huanghaohang" creationdate="20170919T013331Z">
        <seg>4.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.2. Download</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010031Z" creationid="95" creationdate="20190204T010031Z">
        <seg>4.2. 下载</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.2. Download</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114306Z" creationid="95" creationdate="20170723T114306Z">
        <seg>4.2. 下载</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013338Z" creationid="huanghaohang" creationdate="20170919T013338Z">
        <seg>4.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.3. Unpacking</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010033Z" creationid="95" creationdate="20190204T010033Z">
        <seg>4.3. 解压</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.3. Unpacking</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114407Z" creationid="95" creationdate="20170723T114407Z">
        <seg>4.3. 解压</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013344Z" creationid="huanghaohang" creationdate="20170919T013344Z">
        <seg>4.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.4. Environment variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010035Z" creationid="95" creationdate="20190204T010035Z">
        <seg>4.4. 环境变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.4. Environment variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T115052Z" creationid="95" creationdate="20170723T115052Z">
        <seg>4.4. 环境变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013350Z" creationid="huanghaohang" creationdate="20170919T013350Z">
        <seg>4.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.5. Running and testing your installation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010044Z" creationid="95" creationdate="20190204T010044Z">
        <seg>4.5. 运行和测试您的安装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.5. Running and testing your installation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T115236Z" creationid="95" creationdate="20170723T115236Z">
        <seg>4.5. 运行和测试您的安装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013400Z" creationid="huanghaohang" creationdate="20170919T013400Z">
        <seg>4.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.6. JVM options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010048Z" creationid="95" creationdate="20190204T010048Z">
        <seg>4.6. JVM 选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.6. JVM options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T115602Z" creationid="95" creationdate="20170723T115602Z">
        <seg>4.6. JVM 选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.times { counter -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132724Z" creationid="95" creationdate="20170727T132724Z">
        <seg>4.times { counter -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>4.times { print &lt;s0&gt;"$it "&lt;/s0&gt; }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155858Z" creationid="95" creationdate="20170726T155858Z">
        <seg>4.times { print &lt;s0&gt;"$it "&lt;/s0&gt; }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070352Z" creationid="huanghaohang" creationdate="20190205T070352Z">
        <seg>40.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070358Z" creationid="huanghaohang" creationdate="20190205T070358Z">
        <seg>40.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013436Z" creationid="huanghaohang" creationdate="20190123T013436Z">
        <seg>40.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070400Z" creationid="huanghaohang" creationdate="20190205T070400Z">
        <seg>40.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013450Z" creationid="huanghaohang" creationdate="20190123T013450Z">
        <seg>40.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070401Z" creationid="huanghaohang" creationdate="20190205T070401Z">
        <seg>40.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013711Z" creationid="huanghaohang" creationdate="20190123T013711Z">
        <seg>40.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070402Z" creationid="huanghaohang" creationdate="20190205T070402Z">
        <seg>40.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013807Z" creationid="huanghaohang" creationdate="20190123T013807Z">
        <seg>40.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070404Z" creationid="huanghaohang" creationdate="20190205T070404Z">
        <seg>40.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.5. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013906Z" creationid="huanghaohang" creationdate="20190123T013906Z">
        <seg>40.5. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070405Z" creationid="huanghaohang" creationdate="20190205T070405Z">
        <seg>40.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>40.6. Source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013919Z" creationid="huanghaohang" creationdate="20190123T013919Z">
        <seg>40.6. 源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070406Z" creationid="huanghaohang" creationdate="20190205T070406Z">
        <seg>41.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070419Z" creationid="huanghaohang" creationdate="20190205T070419Z">
        <seg>41.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T035946Z" creationid="huanghaohang" creationdate="20190123T035946Z">
        <seg>41.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070421Z" creationid="huanghaohang" creationdate="20190205T070421Z">
        <seg>41.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T035959Z" creationid="huanghaohang" creationdate="20190123T035959Z">
        <seg>41.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070423Z" creationid="huanghaohang" creationdate="20190205T070423Z">
        <seg>41.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040357Z" creationid="huanghaohang" creationdate="20190123T040357Z">
        <seg>41.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070425Z" creationid="huanghaohang" creationdate="20190205T070425Z">
        <seg>41.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040418Z" creationid="huanghaohang" creationdate="20190123T040418Z">
        <seg>41.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070427Z" creationid="huanghaohang" creationdate="20190205T070427Z">
        <seg>41.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>41.5. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040430Z" creationid="huanghaohang" creationdate="20190123T040430Z">
        <seg>41.5. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>42.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070427Z" creationid="huanghaohang" creationdate="20190205T070427Z">
        <seg>42.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>42.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070436Z" creationid="huanghaohang" creationdate="20190205T070436Z">
        <seg>42.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>42.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085710Z" creationid="huanghaohang" creationdate="20190124T085710Z">
        <seg>42.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>42.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070438Z" creationid="huanghaohang" creationdate="20190205T070438Z">
        <seg>42.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>42.2. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092331Z" creationid="huanghaohang" creationdate="20190124T092331Z">
        <seg>42.2. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>43.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070439Z" creationid="huanghaohang" creationdate="20190205T070439Z">
        <seg>43.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>43.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070443Z" creationid="huanghaohang" creationdate="20190205T070443Z">
        <seg>43.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>43.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092615Z" creationid="huanghaohang" creationdate="20190124T092615Z">
        <seg>43.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070443Z" creationid="huanghaohang" creationdate="20190205T070443Z">
        <seg>44.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070446Z" creationid="huanghaohang" creationdate="20190205T070446Z">
        <seg>44.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093704Z" creationid="huanghaohang" creationdate="20190124T093704Z">
        <seg>44.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070448Z" creationid="huanghaohang" creationdate="20190205T070448Z">
        <seg>44.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133827Z" creationid="huanghaohang" creationdate="20190127T133827Z">
        <seg>44.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070449Z" creationid="huanghaohang" creationdate="20190205T070449Z">
        <seg>44.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>44.3. Distribution contents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061005Z" creationid="huanghaohang" creationdate="20190128T061005Z">
        <seg>44.3. 分发内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070454Z" creationid="huanghaohang" creationdate="20190205T070454Z">
        <seg>45.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070457Z" creationid="huanghaohang" creationdate="20190205T070457Z">
        <seg>45.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233550Z" creationid="95" creationdate="20190130T233550Z">
        <seg>45.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070459Z" creationid="huanghaohang" creationdate="20190205T070459Z">
        <seg>45.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T134921Z" creationid="95" creationdate="20190131T134921Z">
        <seg>45.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070500Z" creationid="huanghaohang" creationdate="20190205T070500Z">
        <seg>45.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.3. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135200Z" creationid="95" creationdate="20190131T135200Z">
        <seg>45.3. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070502Z" creationid="huanghaohang" creationdate="20190205T070502Z">
        <seg>45.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>45.4. Including other resources in the distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135455Z" creationid="95" creationdate="20190131T135455Z">
        <seg>45.4. 在分发中包含其他资源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070508Z" creationid="huanghaohang" creationdate="20190205T070508Z">
        <seg>46.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070524Z" creationid="huanghaohang" creationdate="20190205T070524Z">
        <seg>46.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141604Z" creationid="95" creationdate="20190131T141604Z">
        <seg>46.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070525Z" creationid="huanghaohang" creationdate="20190205T070525Z">
        <seg>46.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143740Z" creationid="95" creationdate="20190131T143740Z">
        <seg>46.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070528Z" creationid="huanghaohang" creationdate="20190205T070528Z">
        <seg>46.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>46.3. Including other resources in the distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143822Z" creationid="95" creationdate="20190131T143822Z">
        <seg>46.3. 在分发中包含其他资源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070529Z" creationid="huanghaohang" creationdate="20190205T070529Z">
        <seg>47.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070537Z" creationid="huanghaohang" creationdate="20190205T070537Z">
        <seg>47.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.1. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213655Z" creationid="95" creationdate="20190131T213655Z">
        <seg>47.1. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070539Z" creationid="huanghaohang" creationdate="20190205T070539Z">
        <seg>47.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.2. What to set up</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213759Z" creationid="95" creationdate="20190131T213759Z">
        <seg>47.2. 如何设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070601Z" creationid="huanghaohang" creationdate="20190205T070601Z">
        <seg>47.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3.1. "&lt;c0&gt;pom&lt;/c0&gt;" (Maven conversion)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214550Z" creationid="95" creationdate="20190131T214550Z">
        <seg>47.3.1. “&lt;c0&gt;pom&lt;/c0&gt;”（Maven 转换）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3.2. "&lt;c0&gt;java-library&lt;/c0&gt;"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145704Z" creationid="95" creationdate="20190201T145704Z">
        <seg>47.3.2. “&lt;c0&gt;java-library&lt;/c0&gt;”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3.3. "&lt;c0&gt;scala-library&lt;/c0&gt;"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154707Z" creationid="95" creationdate="20190201T154707Z">
        <seg>47.3.3. “&lt;c0&gt;scala-library&lt;/c0&gt;”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3.4. "&lt;c0&gt;groovy-library&lt;/c0&gt;"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154815Z" creationid="95" creationdate="20190201T154815Z">
        <seg>47.3.4. “&lt;c0&gt;groovy-library&lt;/c0&gt;”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3.5. "basic"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155008Z" creationid="95" creationdate="20190201T155008Z">
        <seg>47.3.5. “basic”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>47.3. Build init types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214336Z" creationid="95" creationdate="20190131T214336Z">
        <seg>47.3. 构建初始化类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>48.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070606Z" creationid="huanghaohang" creationdate="20190205T070606Z">
        <seg>48.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>48.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070622Z" creationid="huanghaohang" creationdate="20190205T070622Z">
        <seg>48.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>48.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155743Z" creationid="95" creationdate="20190201T155743Z">
        <seg>48.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>48.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070624Z" creationid="huanghaohang" creationdate="20190205T070624Z">
        <seg>48.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>48.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155919Z" creationid="95" creationdate="20190201T155919Z">
        <seg>48.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070625Z" creationid="huanghaohang" creationdate="20190205T070625Z">
        <seg>49.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070642Z" creationid="huanghaohang" creationdate="20190205T070642Z">
        <seg>49.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T233111Z" creationid="95" creationdate="20190201T233111Z">
        <seg>49.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070643Z" creationid="huanghaohang" creationdate="20190205T070643Z">
        <seg>49.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153531Z" creationid="95" creationdate="20190202T153531Z">
        <seg>49.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070645Z" creationid="huanghaohang" creationdate="20190205T070645Z">
        <seg>49.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.3. Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153748Z" creationid="95" creationdate="20190202T153748Z">
        <seg>49.3. 项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070646Z" creationid="huanghaohang" creationdate="20190205T070646Z">
        <seg>49.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.4. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153801Z" creationid="95" creationdate="20190202T153801Z">
        <seg>49.4. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070647Z" creationid="huanghaohang" creationdate="20190205T070647Z">
        <seg>49.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>49.5. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153815Z" creationid="95" creationdate="20190202T153815Z">
        <seg>49.5. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013409Z" creationid="huanghaohang" creationdate="20170919T013409Z">
        <seg>5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5. Troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010052Z" creationid="95" creationdate="20190204T010052Z">
        <seg>5. 疑难解答</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013423Z" creationid="huanghaohang" creationdate="20170919T013423Z">
        <seg>5.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5.1. Working through problems</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T010109Z" creationid="95" creationdate="20190204T010109Z">
        <seg>5.1. 解决问题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5.1. Working through problems</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121003Z" creationid="95" creationdate="20170723T121003Z">
        <seg>5.1. 解决问题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013433Z" creationid="huanghaohang" creationdate="20170919T013433Z">
        <seg>5.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>5.2. Getting help</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121457Z" creationid="95" creationdate="20170723T121457Z">
        <seg>5.2. 获取帮助</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070650Z" creationid="huanghaohang" creationdate="20190205T070650Z">
        <seg>50.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190410T003954Z" creationid="huanghaohang" creationdate="20190410T003954Z">
        <seg>50.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.1.1. Flexible dependency management for migrations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T003628Z" creationid="95" creationdate="20190204T003628Z">
        <seg>50.1.1. 迁移的灵活依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.1.2. Dependency management and Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T103909Z" creationid="95" creationdate="20190210T103909Z">
        <seg>50.1.2. 依赖管理和 Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.1. Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T154031Z" creationid="95" creationdate="20190202T154028Z">
        <seg>50.1.导言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024133Z" creationid="huanghaohang" creationdate="20190606T024133Z">
        <seg>50.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.10.1. Implicit transitive dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T015427Z" creationid="huanghaohang" creationdate="20190606T015427Z">
        <seg>50.10.1. 隐式传递依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.10. Strategies for transitive dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151359Z" creationid="huanghaohang" creationdate="20190605T151359Z">
        <seg>50.10. 传递依赖管理的策略</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141807Z" creationid="huanghaohang" creationdate="20190411T141807Z">
        <seg>50.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.2.1. Put the Version in the Filename (Version the jar)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T145508Z" creationid="95" creationdate="20190210T145508Z">
        <seg>50.2.1. 在文件名中包含版本号（版本化 jar ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.2.2. Manage transitive dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T162509Z" creationid="95" creationdate="20190315T162509Z">
        <seg>50.2.2. 管理传递依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.2.3. Resolve version conflicts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T221246Z" creationid="95" creationdate="20190315T221156Z">
        <seg>50.2.3. 解决版本冲突</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.2.4. Use Dynamic Versions and Changing Modules</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190418T124309Z" creationid="huanghaohang" creationdate="20190418T124309Z">
        <seg>50.2.4. 使用动态版本和变化模块</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.2. Dependency Management Best Practices</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T143558Z" creationid="95" creationdate="20190210T143558Z">
        <seg>50.2. 依赖管理最佳实践</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141813Z" creationid="huanghaohang" creationdate="20190411T141813Z">
        <seg>50.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.3. Dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T104359Z" creationid="huanghaohang" creationdate="20190521T104359Z">
        <seg>50.3. 依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141816Z" creationid="huanghaohang" creationdate="20190411T141816Z">
        <seg>50.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.1.1. Depending on modules with multiple artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190528T022319Z" creationid="huanghaohang" creationdate="20190528T022319Z">
        <seg>50.4.1.1. 依赖有多个工件的模块</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.1.2. Artifact only notation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190530T095443Z" creationid="huanghaohang" creationdate="20190530T095443Z">
        <seg>50.4.1.2. 仅工件表示法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.1.3. Classifiers</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044531Z" creationid="huanghaohang" creationdate="20190531T044531Z">
        <seg>50.4.1.3.分类器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.1. External module dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160710Z" creationid="huanghaohang" creationdate="20190527T160710Z">
        <seg>50.4.1 外部模块依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.10. Dependency reports</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141620Z" creationid="huanghaohang" creationdate="20190602T141620Z">
        <seg>50.4.10. 依赖报告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.2. Client module dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051212Z" creationid="huanghaohang" creationdate="20190531T051212Z">
        <seg>50.4.2. 客户端模块依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.3. Project dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112114Z" creationid="huanghaohang" creationdate="20190601T112114Z">
        <seg>50.4.3. 项目依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.4. File dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112418Z" creationid="huanghaohang" creationdate="20190601T112418Z">
        <seg>50.4.4. 文件依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.5. Gradle API Dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105535Z" creationid="huanghaohang" creationdate="20190602T105535Z">
        <seg>50.4.5. Gradle API 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.6. Local Groovy Dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105605Z" creationid="huanghaohang" creationdate="20190602T105605Z">
        <seg>50.4.6. 本地 Groovy 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.7. Excluding transitive dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105640Z" creationid="huanghaohang" creationdate="20190602T105640Z">
        <seg>50.4.7. 排除传递依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.8. Optional attributes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140048Z" creationid="huanghaohang" creationdate="20190602T140048Z">
        <seg>50.4.8. 可选属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4.9. Dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140948Z" creationid="huanghaohang" creationdate="20190602T140948Z">
        <seg>50.4.9. 依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.4. How to declare your dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153710Z" creationid="huanghaohang" creationdate="20190527T153710Z">
        <seg>50.4. 如何声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141824Z" creationid="huanghaohang" creationdate="20190411T141824Z">
        <seg>50.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.5. Working with dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142727Z" creationid="huanghaohang" creationdate="20190602T142727Z">
        <seg>50.5. 使用依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141830Z" creationid="huanghaohang" creationdate="20190411T141830Z">
        <seg>50.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.1. Supported repository transport protocols</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030124Z" creationid="huanghaohang" creationdate="20190603T030124Z">
        <seg>50.6.1. 支持的仓库传输协议</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.2. Maven central repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030925Z" creationid="huanghaohang" creationdate="20190603T030925Z">
        <seg>50.6.2. Maven 中央仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.3. Maven JCenter repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031045Z" creationid="huanghaohang" creationdate="20190603T031045Z">
        <seg>50.6.3. Maven JCenter 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.4. Local Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031601Z" creationid="huanghaohang" creationdate="20190603T031601Z">
        <seg>50.6.4. 本地 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.5.1. Accessing password protected Maven repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034004Z" creationid="huanghaohang" creationdate="20190603T033915Z">
        <seg>50.6.5.1. 访问受密码保护的 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.5. Maven repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033559Z" creationid="huanghaohang" creationdate="20190603T033559Z">
        <seg>50.6.5. Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.6. Flat directory repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040452Z" creationid="huanghaohang" creationdate="20190603T040438Z">
        <seg>50.6.6. 平面目录仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.7.1. Defining an Ivy repository with a standard layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041107Z" creationid="huanghaohang" creationdate="20190603T041107Z">
        <seg>50.6.7.1. 使用标准布局定义 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.7.2. Defining a named layout for an Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041336Z" creationid="huanghaohang" creationdate="20190603T041157Z">
        <seg>50.6.7.2. 为 Ivy 仓库定义指定名称的布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.7.3. Defining custom pattern layout for an Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T023730Z" creationid="huanghaohang" creationdate="20190604T023730Z">
        <seg>50.6.7.3. 为 Ivy 仓库定义定制模式布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.7.4. Accessing password protected Ivy repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025141Z" creationid="huanghaohang" creationdate="20190604T025141Z">
        <seg>50.6.7.4. 访问受密码保护的 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.7. Ivy repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041013Z" creationid="huanghaohang" creationdate="20190603T040835Z">
        <seg>50.6.7. Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.8. Working with repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025239Z" creationid="huanghaohang" creationdate="20190604T025239Z">
        <seg>50.6.8. 使用仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6.9. More about Ivy resolvers</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025359Z" creationid="huanghaohang" creationdate="20190604T025359Z">
        <seg>50.6.9. 更多关于 Ivy 解析器的信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.6. Repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T160211Z" creationid="huanghaohang" creationdate="20190602T160211Z">
        <seg>50.6. 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141832Z" creationid="huanghaohang" creationdate="20190411T141832Z">
        <seg>50.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.7. How dependency resolution works</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T031455Z" creationid="huanghaohang" creationdate="20190604T031455Z">
        <seg>50.7. 依赖解析的工作原理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141855Z" creationid="huanghaohang" creationdate="20190411T141855Z">
        <seg>50.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.1. Forcing a particular module version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033918Z" creationid="huanghaohang" creationdate="20190604T033918Z">
        <seg>50.8.1. 强制使用特定模块版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.2.1. Modelling releaseable units</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T161130Z" creationid="huanghaohang" creationdate="20190604T040323Z">
        <seg>50.8.2.1. 模型化可发布单元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.2.2. Implement a custom versioning scheme</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015400Z" creationid="huanghaohang" creationdate="20190605T015400Z">
        <seg>50.8.2.2. 实现自定义版本方案</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.2.3. Blacklisting a particular version with a replacement</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024458Z" creationid="huanghaohang" creationdate="20190605T022728Z">
        <seg>50.8.2.3. 通过替换把特定版本列入黑名单</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.2.4. Substituting a dependency module with a compatible replacement</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024539Z" creationid="huanghaohang" creationdate="20190605T024539Z">
        <seg>50.8.2.4. 使用兼容模块替换依赖模块</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.2. Using dependency resolve rules</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T034903Z" creationid="huanghaohang" creationdate="20190604T034903Z">
        <seg>50.8.2. 使用依赖解析规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.3. Enabling Ivy dynamic resolve mode</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025017Z" creationid="huanghaohang" creationdate="20190605T025017Z">
        <seg>50.8.3. 启用 Ivy 动态解析模式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8.4. Component metadata rules</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025848Z" creationid="huanghaohang" creationdate="20190605T025848Z">
        <seg>50.8.4. 组件元数据规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.8. Fine-tuning the dependency resolution process</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033506Z" creationid="huanghaohang" creationdate="20190604T033447Z">
        <seg>50.8. 微调依赖解析过程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024127Z" creationid="huanghaohang" creationdate="20190606T024127Z">
        <seg>50.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.1.1. Separate metadata cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T042942Z" creationid="huanghaohang" creationdate="20190605T042942Z">
        <seg>50.9.1.1. 单独的元数据缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.1.2. Repository caches are independent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T071416Z" creationid="huanghaohang" creationdate="20190605T071416Z">
        <seg>50.9.1.2. 仓库缓存是独立的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.1.3. Artifact reuse</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T083547Z" creationid="huanghaohang" creationdate="20190605T083547Z">
        <seg>50.9.1.3. 工件复用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.1.4. Checksum based storage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T144045Z" creationid="huanghaohang" creationdate="20190605T144045Z">
        <seg>50.9.1.4. 基于校验和的存储</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.1.5. Cache Locking</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T144841Z" creationid="huanghaohang" creationdate="20190605T144841Z">
        <seg>50.9.1.5. 缓存锁</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.1. Key features of the Gradle dependency cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T042757Z" creationid="huanghaohang" creationdate="20190605T042757Z">
        <seg>50.9.1. Gradle 依赖缓存的关键特点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.2.1. Offline</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T145234Z" creationid="huanghaohang" creationdate="20190605T145234Z">
        <seg>50.9.2.1. 离线</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.2.2. Refresh</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T145715Z" creationid="huanghaohang" creationdate="20190605T145715Z">
        <seg>50.9.2.2. 刷新</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.2. Command line options to override caching</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T145231Z" creationid="huanghaohang" creationdate="20190605T145231Z">
        <seg>50.9.2. 覆盖缓存的命令行选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9.3. Fine-tuned control over dependency caching</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T150838Z" creationid="huanghaohang" creationdate="20190605T150838Z">
        <seg>50.9.3. 依赖缓存的微调控制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>50.9. The dependency cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041039Z" creationid="huanghaohang" creationdate="20190605T041039Z">
        <seg>50.9. 依赖缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091854Z" creationid="huanghaohang" creationdate="20190608T091854Z">
        <seg>51.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091857Z" creationid="huanghaohang" creationdate="20190608T091857Z">
        <seg>51.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.1. Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T023150Z" creationid="huanghaohang" creationdate="20190606T023150Z">
        <seg>51.1. 导言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091900Z" creationid="huanghaohang" creationdate="20190608T091900Z">
        <seg>51.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.2. Artifacts and configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091934Z" creationid="huanghaohang" creationdate="20190606T024053Z">
        <seg>51.2. 工件和配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091907Z" creationid="huanghaohang" creationdate="20190608T091907Z">
        <seg>51.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.3.1. Archive task artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075132Z" creationid="huanghaohang" creationdate="20190606T075132Z">
        <seg>51.3.1. 归档任务工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.3.2. File artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075354Z" creationid="huanghaohang" creationdate="20190606T075354Z">
        <seg>51.3.2. 文件工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.3. Declaring artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075113Z" creationid="huanghaohang" creationdate="20190606T075113Z">
        <seg>51.3. 声明工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091941Z" creationid="huanghaohang" creationdate="20190608T091941Z">
        <seg>51.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.4. Publishing artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075810Z" creationid="huanghaohang" creationdate="20190606T075810Z">
        <seg>51.4. 发布工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091942Z" creationid="huanghaohang" creationdate="20190608T091942Z">
        <seg>51.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>51.5. More about project libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T085444Z" creationid="huanghaohang" creationdate="20190606T085444Z">
        <seg>51.5. 关于项目库的更多信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091958Z" creationid="huanghaohang" creationdate="20190608T091958Z">
        <seg>52.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092003Z" creationid="huanghaohang" creationdate="20190608T092003Z">
        <seg>52.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091150Z" creationid="huanghaohang" creationdate="20190606T091150Z">
        <seg>52.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092004Z" creationid="huanghaohang" creationdate="20190608T092004Z">
        <seg>52.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.2. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091216Z" creationid="huanghaohang" creationdate="20190606T091216Z">
        <seg>52.2. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092006Z" creationid="huanghaohang" creationdate="20190608T092006Z">
        <seg>52.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.3. Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060352Z" creationid="huanghaohang" creationdate="20190607T060352Z">
        <seg>52.3. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092007Z" creationid="huanghaohang" creationdate="20190608T092007Z">
        <seg>52.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.4. Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060412Z" creationid="huanghaohang" creationdate="20190607T060412Z">
        <seg>52.4. 约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092009Z" creationid="huanghaohang" creationdate="20190608T092009Z">
        <seg>52.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.5. Convention methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060755Z" creationid="huanghaohang" creationdate="20190607T060755Z">
        <seg>52.5. 约定方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092018Z" creationid="huanghaohang" creationdate="20190608T092018Z">
        <seg>52.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.1. Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T062554Z" creationid="huanghaohang" creationdate="20190607T062554Z">
        <seg>52.6.1. 导言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.2. Deploying to a Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074735Z" creationid="huanghaohang" creationdate="20190607T074735Z">
        <seg>52.6.2. 部署到 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.3. Installing to the local repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093712Z" creationid="huanghaohang" creationdate="20190607T093712Z">
        <seg>52.6.3. 安装到本地仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.4.1. Multiple artifacts per project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111414Z" creationid="huanghaohang" creationdate="20190607T111414Z">
        <seg>52.6.4.1. 每个项目多个构件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.4.2. Dependency mapping</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T085154Z" creationid="huanghaohang" creationdate="20190608T085154Z">
        <seg>52.6.4.2. 依赖映射</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6.4. Maven POM generation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094522Z" creationid="huanghaohang" creationdate="20190607T094522Z">
        <seg>52.6.4. Maven POM 生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>52.6. Interacting with Maven repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T062521Z" creationid="huanghaohang" creationdate="20190607T062521Z">
        <seg>52.6. 与 Maven 仓库的交互</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092026Z" creationid="huanghaohang" creationdate="20190608T092026Z">
        <seg>53.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T095314Z" creationid="huanghaohang" creationdate="20190608T095314Z">
        <seg>53.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.1. Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130401Z" creationid="huanghaohang" creationdate="20190608T130401Z">
        <seg>53.1. 用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T095332Z" creationid="huanghaohang" creationdate="20190608T095332Z">
        <seg>53.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.2. Signatory credentials</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130504Z" creationid="huanghaohang" creationdate="20190608T130504Z">
        <seg>53.2. 签名凭证</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011004Z" creationid="huanghaohang" creationdate="20190609T011004Z">
        <seg>53.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.3.1. Signing Configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134025Z" creationid="huanghaohang" creationdate="20190608T134025Z">
        <seg>53.3.1. 签名配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.3.2. Signing Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135049Z" creationid="huanghaohang" creationdate="20190608T135049Z">
        <seg>53.3.2. 签名任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.3.3. Conditional Signing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140804Z" creationid="huanghaohang" creationdate="20190608T140804Z">
        <seg>53.3.3. 条件签名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.3. Specifying what to sign</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133104Z" creationid="huanghaohang" creationdate="20190608T133104Z">
        <seg>53.3. 指定要签名的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011014Z" creationid="huanghaohang" creationdate="20190609T011014Z">
        <seg>53.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.4. Publishing the signatures</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T005625Z" creationid="huanghaohang" creationdate="20190609T005625Z">
        <seg>53.4. 发布签名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011019Z" creationid="huanghaohang" creationdate="20190609T011019Z">
        <seg>53.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>53.5. Signing POM files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010057Z" creationid="huanghaohang" creationdate="20190609T010057Z">
        <seg>53.5. 签名 POM 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011027Z" creationid="huanghaohang" creationdate="20190609T011027Z">
        <seg>54.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091046Z" creationid="huanghaohang" creationdate="20190611T091046Z">
        <seg>54.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.1. Supported languages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021743Z" creationid="huanghaohang" creationdate="20190609T021743Z">
        <seg>54.1. 受支持的语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091141Z" creationid="huanghaohang" creationdate="20190611T091141Z">
        <seg>54.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.10.1. Defining tool chains</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084849Z" creationid="huanghaohang" creationdate="20190610T084849Z">
        <seg>54.10.1. 定义工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.10.2. Using tool chains</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085050Z" creationid="huanghaohang" creationdate="20190610T085050Z">
        <seg>54.10.2. 使用工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.10.3. Cross-compiling with GCC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093551Z" creationid="huanghaohang" creationdate="20190610T093538Z">
        <seg>54.10.3. 使用 GCC 进行交叉编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.10. Tool chains</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084502Z" creationid="huanghaohang" creationdate="20190610T084502Z">
        <seg>54.10. 工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091146Z" creationid="huanghaohang" creationdate="20190611T091146Z">
        <seg>54.11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.11. Visual Studio IDE integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T030847Z" creationid="huanghaohang" creationdate="20190611T030847Z">
        <seg>54.11. Visual Studio IDE 集成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091154Z" creationid="huanghaohang" creationdate="20190611T091154Z">
        <seg>54.12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.12.1. CUnit sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031852Z" creationid="huanghaohang" creationdate="20190611T031852Z">
        <seg>54.12.1. CUnit 源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.12.2. Building CUnit executables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032737Z" creationid="huanghaohang" creationdate="20190611T032737Z">
        <seg>54.12.2. 构建 CUnit 可执行文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.12.3. Running CUnit tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T085929Z" creationid="huanghaohang" creationdate="20190611T085929Z">
        <seg>54.12.3. 运行 CUnit 测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.12. CUnit support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031701Z" creationid="huanghaohang" creationdate="20190611T031701Z">
        <seg>54.12. CUnit 支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091053Z" creationid="huanghaohang" creationdate="20190611T091053Z">
        <seg>54.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.2. Tool chain support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021858Z" creationid="huanghaohang" creationdate="20190609T021858Z">
        <seg>54.2. 工具链支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091058Z" creationid="huanghaohang" creationdate="20190611T091058Z">
        <seg>54.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.3. Component model</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024526Z" creationid="huanghaohang" creationdate="20190609T024526Z">
        <seg>54.3. 组件模型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091103Z" creationid="huanghaohang" creationdate="20190611T091103Z">
        <seg>54.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.4.1. Working with shared libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T033134Z" creationid="huanghaohang" creationdate="20190609T032131Z">
        <seg>54.4.1. 使用共享库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.4. Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T031239Z" creationid="huanghaohang" creationdate="20190609T031239Z">
        <seg>54.4. 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091105Z" creationid="huanghaohang" creationdate="20190611T091105Z">
        <seg>54.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5.1. C++ sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T042917Z" creationid="huanghaohang" creationdate="20190609T042559Z">
        <seg>54.4.1. C++ 源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5.2. C sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051255Z" creationid="huanghaohang" creationdate="20190609T051255Z">
        <seg>54.5.2. C 源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5.3. Assembler sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051737Z" creationid="huanghaohang" creationdate="20190609T051717Z">
        <seg>54.5.3. 汇编源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5.4. Objective-C sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052215Z" creationid="huanghaohang" creationdate="20190609T052159Z">
        <seg>54.5.4. Objective-C 源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5.5. Objective-C++ sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052453Z" creationid="huanghaohang" creationdate="20190609T052453Z">
        <seg>54.5.5. Objective-C++ 源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.5. Language support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T033438Z" creationid="huanghaohang" creationdate="20190609T033438Z">
        <seg>54.5. 语言支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091110Z" creationid="huanghaohang" creationdate="20190611T091110Z">
        <seg>54.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.6. Configuring the compiler, assembler and linker</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052651Z" creationid="huanghaohang" creationdate="20190609T052651Z">
        <seg>54.6. 配置编译器、汇编器和连接器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091115Z" creationid="huanghaohang" creationdate="20190611T091115Z">
        <seg>54.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.7. Windows Resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012536Z" creationid="huanghaohang" creationdate="20190610T012536Z">
        <seg>54.7. Windows Resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091124Z" creationid="huanghaohang" creationdate="20190611T091124Z">
        <seg>54.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.8.1. Dependencies within the same project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022413Z" creationid="huanghaohang" creationdate="20190610T022413Z">
        <seg>54.8.1. 同一项目的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.8.2. Project Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022919Z" creationid="huanghaohang" creationdate="20190610T022919Z">
        <seg>54.8.2. 项目依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.8. Library Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022229Z" creationid="huanghaohang" creationdate="20190610T022229Z">
        <seg>54.8. 库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091129Z" creationid="huanghaohang" creationdate="20190611T091129Z">
        <seg>54.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9.1. Build types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035144Z" creationid="huanghaohang" creationdate="20190610T035144Z">
        <seg>54.9.1. 构建类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9.2. Platform</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T044341Z" creationid="huanghaohang" creationdate="20190610T044341Z">
        <seg>54.9.2. 平台</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9.3. Flavor</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052200Z" creationid="huanghaohang" creationdate="20190610T052200Z">
        <seg>54.9.3. 风格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9.4. Selecting the build types, platforms and flavors for a component</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053043Z" creationid="huanghaohang" creationdate="20190610T053043Z">
        <seg>54.9.4. 为组件选择构建类型，平台和风格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9.5. Building all possible variants</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053728Z" creationid="huanghaohang" creationdate="20190610T053728Z">
        <seg>54.9.5. 构建所有可能的变体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>54.9. Native Binary Variants</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023058Z" creationid="huanghaohang" creationdate="20190610T023058Z">
        <seg>54.9. 本地二进制变体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091200Z" creationid="huanghaohang" creationdate="20190611T091200Z">
        <seg>55.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144815Z" creationid="huanghaohang" creationdate="20190708T144815Z">
        <seg>55.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.1. Build phases</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T102632Z" creationid="huanghaohang" creationdate="20190611T102632Z">
        <seg>55.1. 构建阶段</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144822Z" creationid="huanghaohang" creationdate="20190708T144822Z">
        <seg>55.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.2. Settings file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T142853Z" creationid="huanghaohang" creationdate="20190612T142853Z">
        <seg>55.2. 设置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144830Z" creationid="huanghaohang" creationdate="20190708T144830Z">
        <seg>55.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3.1. Project locations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T150143Z" creationid="huanghaohang" creationdate="20190612T150143Z">
        <seg>55.3.1. 项目位置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3.2.1. Hierarchical layouts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143317Z" creationid="huanghaohang" creationdate="20190612T151457Z">
        <seg>55.3.2.1. 层次布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3.2.2. Flat layouts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143619Z" creationid="huanghaohang" creationdate="20190612T152529Z">
        <seg>55.3.2.2. 平面布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3.2. Building the tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T151006Z" creationid="huanghaohang" creationdate="20190612T151006Z">
        <seg>55.3.2. 构建树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3.3. Modifying elements of the project tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152825Z" creationid="huanghaohang" creationdate="20190612T152825Z">
        <seg>55.3.3. 修改项目树元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.3. Multi-project builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145721Z" creationid="huanghaohang" creationdate="20190612T145721Z">
        <seg>55.3. 多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144832Z" creationid="huanghaohang" creationdate="20190708T144832Z">
        <seg>55.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.4. Initialization</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153236Z" creationid="huanghaohang" creationdate="20190612T153236Z">
        <seg>55.4. 初始化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144834Z" creationid="huanghaohang" creationdate="20190708T144834Z">
        <seg>55.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.5. Configuration and execution of a single project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143657Z" creationid="huanghaohang" creationdate="20190613T143657Z">
        <seg>55.5. 单项目构建的配置和执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144843Z" creationid="huanghaohang" creationdate="20190708T144843Z">
        <seg>55.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.6.1. Project evaluation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145502Z" creationid="huanghaohang" creationdate="20190613T145502Z">
        <seg>55.6.1. 项目评估</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.6.2. Task creation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150903Z" creationid="huanghaohang" creationdate="20190613T150903Z">
        <seg>55.6.2. 任务创建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.6.3. Task execution graph ready</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151401Z" creationid="huanghaohang" creationdate="20190613T151401Z">
        <seg>55.6.3. 任务执行图准备</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.6.4. Task execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152419Z" creationid="huanghaohang" creationdate="20190613T152419Z">
        <seg>55.6.4. 任务执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>55.6. Responding to the lifecycle in the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145132Z" creationid="huanghaohang" creationdate="20190613T145132Z">
        <seg>55.6. 构建脚本生命周期的响应</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144848Z" creationid="huanghaohang" creationdate="20190708T144848Z">
        <seg>56.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144851Z" creationid="huanghaohang" creationdate="20190708T144851Z">
        <seg>56.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.1.1.1. Configuration on demand</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T152205Z" creationid="huanghaohang" creationdate="20190614T152205Z">
        <seg>56.1.1.1. 按需配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.1.1. Configuration and execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T151729Z" creationid="huanghaohang" creationdate="20190614T151729Z">
        <seg>56.1.1. 配置和执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.1.2. Defining common behavior</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154310Z" creationid="huanghaohang" creationdate="20190614T154310Z">
        <seg>56.1.2. 定义共同行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.1. Cross project configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T151526Z" creationid="huanghaohang" creationdate="20190614T151526Z">
        <seg>56.1. 跨项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145117Z" creationid="huanghaohang" creationdate="20190708T145117Z">
        <seg>56.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.10. Multi-Project Building and Testing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T134613Z" creationid="huanghaohang" creationdate="20190622T134613Z">
        <seg>56.10. 多项目构建和测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145123Z" creationid="huanghaohang" creationdate="20190708T145123Z">
        <seg>56.11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.11. Property and method inheritance</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T142655Z" creationid="huanghaohang" creationdate="20190622T142655Z">
        <seg>56.11. 属性和方法的继承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145139Z" creationid="huanghaohang" creationdate="20190708T145139Z">
        <seg>56.12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.12. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152441Z" creationid="huanghaohang" creationdate="20190623T152441Z">
        <seg>56.12. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144857Z" creationid="huanghaohang" creationdate="20190708T144857Z">
        <seg>56.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2.1. Defining common behavior</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142121Z" creationid="huanghaohang" creationdate="20190615T142121Z">
        <seg>56.1.2. 定义共同行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2.2. Adding specific behavior</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142211Z" creationid="huanghaohang" creationdate="20190615T142211Z">
        <seg>56.2.2. 添加特定行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2.3.1. Filtering by name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143603Z" creationid="huanghaohang" creationdate="20190615T143603Z">
        <seg>56.2.3.1. 按名称过滤</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2.3.2. Filtering by properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143950Z" creationid="huanghaohang" creationdate="20190615T143950Z">
        <seg>56.2.3.2. 通过属性过滤</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2.3. Project filtering</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143436Z" creationid="huanghaohang" creationdate="20190615T143436Z">
        <seg>56.2.3. 项目过滤</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.2. Subproject configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142106Z" creationid="huanghaohang" creationdate="20190615T142106Z">
        <seg>56.2. 子项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145019Z" creationid="huanghaohang" creationdate="20190708T145019Z">
        <seg>56.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.3. Execution rules for multi-project builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T151329Z" creationid="huanghaohang" creationdate="20190615T151329Z">
        <seg>56.3. 多项目构建的执行规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145024Z" creationid="huanghaohang" creationdate="20190708T145024Z">
        <seg>56.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.4. Running tasks by their absolute path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T110555Z" creationid="huanghaohang" creationdate="20190616T110555Z">
        <seg>56.4. 按绝对路径运行任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145053Z" creationid="huanghaohang" creationdate="20190708T145053Z">
        <seg>56.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.5. Project and task paths</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T112134Z" creationid="huanghaohang" creationdate="20190616T112134Z">
        <seg>56.5. 项目和任务路径</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145058Z" creationid="huanghaohang" creationdate="20190708T145058Z">
        <seg>56.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.1.1. Dependencies and execution order</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140203Z" creationid="huanghaohang" creationdate="20190616T140203Z">
        <seg>56.6.1.1. 依赖和执行顺序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.1.2. Declaring dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141720Z" creationid="huanghaohang" creationdate="20190616T141720Z">
        <seg>56.6.1.2. 声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.1.3. The nature of cross project task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152606Z" creationid="huanghaohang" creationdate="20190616T152606Z">
        <seg>56.6.1.3. 跨项目任务依赖的本质</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.1. Execution dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140157Z" creationid="huanghaohang" creationdate="20190616T140157Z">
        <seg>56.6.1. 执行依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.2. Configuration time dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152844Z" creationid="huanghaohang" creationdate="20190616T152844Z">
        <seg>56.6.2. 配置时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6.3. Real life examples</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150806Z" creationid="huanghaohang" creationdate="20190617T150306Z">
        <seg>56.6.3. 真实生活示例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.6. Dependencies - Which dependencies?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140008Z" creationid="huanghaohang" creationdate="20190616T140008Z">
        <seg>56.6. 依赖——哪些依赖？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145103Z" creationid="huanghaohang" creationdate="20190708T145103Z">
        <seg>56.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.7.1. Disabling the build of dependency projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142412Z" creationid="huanghaohang" creationdate="20190621T142412Z">
        <seg>56.7.1. 禁用依赖项目的构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.7. Project lib dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T155929Z" creationid="huanghaohang" creationdate="20190617T155929Z">
        <seg>56.7. 项目库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145107Z" creationid="huanghaohang" creationdate="20190708T145107Z">
        <seg>56.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.8. Parallel project execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142656Z" creationid="huanghaohang" creationdate="20190621T142656Z">
        <seg>56.8. 并行项目执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145111Z" creationid="huanghaohang" creationdate="20190708T145111Z">
        <seg>56.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>56.9. Decoupled Projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T145926Z" creationid="huanghaohang" creationdate="20190621T145926Z">
        <seg>56.9. 解耦的项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145258Z" creationid="huanghaohang" creationdate="20190708T145258Z">
        <seg>57.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145303Z" creationid="huanghaohang" creationdate="20190708T145303Z">
        <seg>57.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.1. Packaging a task class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T150747Z" creationid="huanghaohang" creationdate="20190626T150747Z">
        <seg>57.1. 封装一个任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145318Z" creationid="huanghaohang" creationdate="20190708T145318Z">
        <seg>57.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.2. Writing a simple task class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T153946Z" creationid="huanghaohang" creationdate="20190704T153946Z">
        <seg>57.2. 编写一个简单的任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145328Z" creationid="huanghaohang" creationdate="20190708T145328Z">
        <seg>57.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.3.1. Using your task class in another project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123407Z" creationid="huanghaohang" creationdate="20190706T123407Z">
        <seg>57.3.1. 在另一个项目中使用你的任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.3.2. Writing tests for your task class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123809Z" creationid="huanghaohang" creationdate="20190706T123809Z">
        <seg>57.3.2. 为你的任务类编写测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.3. A standalone project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122543Z" creationid="huanghaohang" creationdate="20190706T122543Z">
        <seg>57.3. 独立项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145332Z" creationid="huanghaohang" creationdate="20190708T145332Z">
        <seg>57.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.4.1. Implementing an incremental task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134042Z" creationid="huanghaohang" creationdate="20190706T134042Z">
        <seg>57.4.1. 实现增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.4.2. Which inputs are considered out of date?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T135135Z" creationid="huanghaohang" creationdate="20190706T135118Z">
        <seg>57.4.2. 哪些输入是被视为过时的？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.4.3. An incremental task in action</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141141Z" creationid="huanghaohang" creationdate="20190707T141141Z">
        <seg>57.4.3. 增量任务的操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>57.4. Incremental tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124015Z" creationid="huanghaohang" creationdate="20190706T124015Z">
        <seg>57.4. 增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145336Z" creationid="huanghaohang" creationdate="20190708T145336Z">
        <seg>58.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132314Z" creationid="huanghaohang" creationdate="20190728T132314Z">
        <seg>58.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.1. Packaging a plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190715T154119Z" creationid="huanghaohang" creationdate="20190715T154119Z">
        <seg>58.1. 打包插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132323Z" creationid="huanghaohang" creationdate="20190728T132323Z">
        <seg>58.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.2. Writing a simple plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150224Z" creationid="huanghaohang" creationdate="20190719T150224Z">
        <seg>58.2. 编写一个简单的插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132335Z" creationid="huanghaohang" creationdate="20190728T132335Z">
        <seg>58.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.3. Getting input from the build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T151049Z" creationid="huanghaohang" creationdate="20190719T151049Z">
        <seg>58.3. 从构建中获取输入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132345Z" creationid="huanghaohang" creationdate="20190728T132345Z">
        <seg>58.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.4. Working with files in custom tasks and plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T150556Z" creationid="huanghaohang" creationdate="20190727T150556Z">
        <seg>58.4. 在自定义任务和插件中使用文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132351Z" creationid="huanghaohang" creationdate="20190728T132351Z">
        <seg>58.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.5.1. Using your plugin in another project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153739Z" creationid="huanghaohang" creationdate="20190727T153739Z">
        <seg>58.5.1. 在另一个项目中使用你的插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.5.2. Writing tests for your plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130741Z" creationid="huanghaohang" creationdate="20190728T130741Z">
        <seg>58.5.2. 为插件编写测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.5. A standalone project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T152917Z" creationid="huanghaohang" creationdate="20190727T152917Z">
        <seg>58.5. 独立项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132352Z" creationid="huanghaohang" creationdate="20190728T132352Z">
        <seg>58.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>58.6. Maintaining multiple domain objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130908Z" creationid="huanghaohang" creationdate="20190728T130908Z">
        <seg>58.6. 维护多个域对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.1. Inherited properties and methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144503Z" creationid="huanghaohang" creationdate="20190817T144503Z">
        <seg>59.1. 继承的属性和方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.2. Injected configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190819T145311Z" creationid="huanghaohang" creationdate="20190819T145311Z">
        <seg>59.2. 注入配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.3. Build sources in the &lt;c0&gt;buildSrc&lt;/c0&gt; project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132710Z" creationid="huanghaohang" creationdate="20191201T132710Z">
        <seg>59.3. 在 &lt;c0&gt;buildSrc&lt;/c0&gt; 项目中的构建源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.4. Running another Gradle build from a build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135545Z" creationid="huanghaohang" creationdate="20191201T135545Z">
        <seg>59.4. 从一个构建中运行另一个 Gradle 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.5. External dependencies for the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135726Z" creationid="huanghaohang" creationdate="20191201T135726Z">
        <seg>59.5. 构建脚本的外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.6. Ant optional dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141146Z" creationid="huanghaohang" creationdate="20191202T141146Z">
        <seg>59.6. Ant 可选依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>59.7. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142157Z" creationid="huanghaohang" creationdate="20191202T142157Z">
        <seg>59.7. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013442Z" creationid="huanghaohang" creationdate="20170919T013442Z">
        <seg>6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031738Z" creationid="huanghaohang" creationdate="20170927T031738Z">
        <seg>6.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.1. Projects and tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T122532Z" creationid="95" creationdate="20170723T122532Z">
        <seg>6.1. 项目和任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.10.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031851Z" creationid="huanghaohang" creationdate="20170927T031851Z">
        <seg>6.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.10. Using Ant Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T142147Z" creationid="95" creationdate="20170727T142147Z">
        <seg>6.10. 使用 Ant 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.11.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031908Z" creationid="huanghaohang" creationdate="20170927T031908Z">
        <seg>6.11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.11. Using methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T154530Z" creationid="95" creationdate="20170728T154530Z">
        <seg>6.11. 使用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.12.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031919Z" creationid="huanghaohang" creationdate="20170927T031919Z">
        <seg>6.12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.12. Default tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023840Z" creationid="95" creationdate="20170729T023840Z">
        <seg>6.12. 默认任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.13.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031924Z" creationid="huanghaohang" creationdate="20170927T031924Z">
        <seg>6.13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.13. Configure by DAG</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T024252Z" creationid="95" creationdate="20170729T024252Z">
        <seg>6.13. 使用 DAG 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.14.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T032003Z" creationid="huanghaohang" creationdate="20170927T032003Z">
        <seg>6.14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.14. Where to next?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030623Z" creationid="95" creationdate="20170729T030623Z">
        <seg>6.14. 下一步目标？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031750Z" creationid="huanghaohang" creationdate="20170927T031750Z">
        <seg>6.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.2. Hello world</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T143914Z" creationid="95" creationdate="20170724T143914Z">
        <seg>6.2. Hello world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031758Z" creationid="huanghaohang" creationdate="20170927T031758Z">
        <seg>6.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.3. A shortcut task definition</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T151714Z" creationid="95" creationdate="20170724T151714Z">
        <seg>6.3. 快速任务定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031804Z" creationid="huanghaohang" creationdate="20170927T031804Z">
        <seg>6.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.4. Build scripts are code</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155605Z" creationid="95" creationdate="20170726T155605Z">
        <seg>6.4. 构建脚本即代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031815Z" creationid="huanghaohang" creationdate="20170927T031815Z">
        <seg>6.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.5. Task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155926Z" creationid="95" creationdate="20170726T155926Z">
        <seg>6.5. 任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031823Z" creationid="huanghaohang" creationdate="20170927T031823Z">
        <seg>6.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.6. Dynamic tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132506Z" creationid="95" creationdate="20170727T132506Z">
        <seg>6.6. 动态任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031828Z" creationid="huanghaohang" creationdate="20170927T031828Z">
        <seg>6.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.7. Manipulating existing tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132812Z" creationid="95" creationdate="20170727T132812Z">
        <seg>6.7. 操纵现有任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031835Z" creationid="huanghaohang" creationdate="20170927T031835Z">
        <seg>6.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.8. Shortcut notations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133636Z" creationid="95" creationdate="20170727T133636Z">
        <seg>6.8. 快捷符号</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031843Z" creationid="huanghaohang" creationdate="20170927T031843Z">
        <seg>6.9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>6.9. Extra task properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141631Z" creationid="95" creationdate="20170727T141631Z">
        <seg>6.9. 额外的任务属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>60.1. Basic usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T141854Z" creationid="huanghaohang" creationdate="20191203T141854Z">
        <seg>60.1. 基本用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>60.2. Using an init script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142653Z" creationid="huanghaohang" creationdate="20191203T142653Z">
        <seg>60.2. 使用初始化脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>60.3.1. Configuring projects from an init script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143116Z" creationid="huanghaohang" creationdate="20191206T143116Z">
        <seg>60.3.1. 从一个初始化脚本中配置项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>60.3. Writing an init script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T135745Z" creationid="huanghaohang" creationdate="20191204T135745Z">
        <seg>60.3. 写一个初始化脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>60.4. External dependencies for the init script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T150436Z" creationid="huanghaohang" creationdate="20191206T150436Z">
        <seg>60.4. 初始化脚本的外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>60.5. Init script plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151133Z" creationid="huanghaohang" creationdate="20191206T151133Z">
        <seg>60.5. 初始化脚本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>61.1. Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T135517Z" creationid="huanghaohang" creationdate="20191219T135517Z">
        <seg>60.1. 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>61.2. Unix file permissions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141303Z" creationid="huanghaohang" creationdate="20191219T141303Z">
        <seg>61.2. Unix 文件权限</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>62.1. Introduction to the Tooling API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141856Z" creationid="huanghaohang" creationdate="20191219T141856Z">
        <seg>62.1. Tooling API 简介</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>62.2. Tooling API and the Gradle Build Daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191231T123016Z" creationid="huanghaohang" creationdate="20191231T123016Z">
        <seg>62.2. Tooling API 及 Gradle 构建守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>62.3. Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T151204Z" creationid="huanghaohang" creationdate="20200106T151204Z">
        <seg>62.3. 快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.1. Definition of terms</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152649Z" creationid="huanghaohang" creationdate="20200604T152649Z">
        <seg>63.1. 术语定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.2.1. Supported builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T155723Z" creationid="huanghaohang" creationdate="20210508T155723Z">
        <seg>63.2.1. 支持的构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.2.2. Supported build outcomes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T140701Z" creationid="huanghaohang" creationdate="20210513T140701Z">
        <seg>63.2.2. 支持的构建结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.2. Current Capabilities</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T155611Z" creationid="huanghaohang" creationdate="20210508T155611Z">
        <seg>63.2. 当前功能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.3.1. Trying Gradle upgrades</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140326Z" creationid="huanghaohang" creationdate="20210515T140326Z">
        <seg>63.3.1. 尝试 Gradle 升级</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.3.2. The comparison “result”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140819Z" creationid="huanghaohang" creationdate="20210515T140819Z">
        <seg>63.3.2. 比较“结果”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.3.3. Which archives are compared?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141354Z" creationid="huanghaohang" creationdate="20210515T141354Z">
        <seg>63.3.3. 哪些归档文件会被比较？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>63.3. Comparing Gradle Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T142350Z" creationid="huanghaohang" creationdate="20210513T142350Z">
        <seg>63.3. 比较Gradle构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>64.1. The “&lt;c0&gt;ivy-publish&lt;/c0&gt;” Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155049Z" creationid="huanghaohang" creationdate="20210516T155049Z">
        <seg>64.1. “&lt;c0&gt;ivy-publish&lt;/c0&gt;”插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>64.2.1. Publishing a Software Component</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150411Z" creationid="huanghaohang" creationdate="20210518T150411Z">
        <seg>64.2.1. 发布软件组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>64.2. Publications</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155908Z" creationid="huanghaohang" creationdate="20210516T155908Z">
        <seg>64.2. 发布</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124851Z" creationid="huanghaohang" creationdate="20171014T124851Z">
        <seg>7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124856Z" creationid="huanghaohang" creationdate="20171014T124856Z">
        <seg>7.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.1. The Java plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T031248Z" creationid="95" creationdate="20170729T031248Z">
        <seg>7.1. Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124904Z" creationid="huanghaohang" creationdate="20171014T124904Z">
        <seg>7.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.1. Building the project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T013552Z" creationid="95" creationdate="20170730T013552Z">
        <seg>7.2.1. 构建项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.2. External dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014724Z" creationid="95" creationdate="20170730T014724Z">
        <seg>7.2.2. 外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.3. customizing the project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124812Z" creationid="95" creationdate="20170730T124812Z">
        <seg>7.2.3. 自定义项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.4. Publishing the JAR file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T150128Z" creationid="95" creationdate="20170731T150128Z">
        <seg>7.2.4. 发布JAR文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.5. Creating an Eclipse project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153752Z" creationid="95" creationdate="20170731T153752Z">
        <seg>7.2.5. 创建一个Eclipse项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2.6. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153944Z" creationid="95" creationdate="20170731T153944Z">
        <seg>7.2.6. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.2. A basic Java project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012356Z" creationid="95" creationdate="20170730T012356Z">
        <seg>7.2. 一个基本的 Java 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124914Z" creationid="huanghaohang" creationdate="20171014T124914Z">
        <seg>7.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.3.1. Defining a multi-project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123148Z" creationid="95" creationdate="20170803T123148Z">
        <seg>7.3.1. 定义一个多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.3.2. Common configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123812Z" creationid="95" creationdate="20170803T123812Z">
        <seg>7.3.2. 公共配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.3.3. Dependencies between projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124842Z" creationid="95" creationdate="20170803T124826Z">
        <seg>7.3.3. 项目中的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.3.4. Creating a distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125652Z" creationid="95" creationdate="20170803T125526Z">
        <seg>7.3.4. 创建分发</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.3. Multi-project Java build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154344Z" creationid="95" creationdate="20170731T154124Z">
        <seg>7.3. 多项目的Java构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124923Z" creationid="huanghaohang" creationdate="20171014T124923Z">
        <seg>7.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>7.4. Where to next?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125746Z" creationid="95" creationdate="20170803T125725Z">
        <seg>7.4. 下一步目标？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233614Z" creationid="huanghaohang" creationdate="20171206T233614Z">
        <seg>8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233620Z" creationid="huanghaohang" creationdate="20171206T233620Z">
        <seg>8.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.1. What is dependency management?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130527Z" creationid="95" creationdate="20170803T130527Z">
        <seg>8.1. 什么是依赖管理？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233631Z" creationid="huanghaohang" creationdate="20171206T233631Z">
        <seg>8.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.2. Declaring your dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170907T154905Z" creationid="95" creationdate="20170907T154905Z">
        <seg>8.2. 依赖声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.3.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233651Z" creationid="huanghaohang" creationdate="20171206T233651Z">
        <seg>8.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.3. Dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T021415Z" creationid="huanghaohang" creationdate="20170908T021415Z">
        <seg>8.3. 依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233659Z" creationid="huanghaohang" creationdate="20171206T233659Z">
        <seg>8.4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.4. External dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T042927Z" creationid="huanghaohang" creationdate="20170908T042927Z">
        <seg>8.4. 外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233709Z" creationid="huanghaohang" creationdate="20171206T233709Z">
        <seg>8.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.5. Repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044102Z" creationid="huanghaohang" creationdate="20170908T044102Z">
        <seg>8.5. 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.6.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233732Z" creationid="huanghaohang" creationdate="20171206T233732Z">
        <seg>8.6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.6. Publishing artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050027Z" creationid="huanghaohang" creationdate="20170908T050027Z">
        <seg>8.6. 发布构件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.7.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233742Z" creationid="huanghaohang" creationdate="20171206T233742Z">
        <seg>8.7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8.7. Where to next?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051121Z" creationid="huanghaohang" creationdate="20170908T051121Z">
        <seg>8.7. 下一步目标？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>8080</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144625Z" creationid="huanghaohang" creationdate="20180416T144625Z">
        <seg>8080</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>9.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233743Z" creationid="huanghaohang" creationdate="20171206T233743Z">
        <seg>9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>9.1.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233747Z" creationid="huanghaohang" creationdate="20171206T233747Z">
        <seg>9.1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>9.1. A basic Groovy project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T001602Z" creationid="huanghaohang" creationdate="20170909T001602Z">
        <seg>9.1. 一个基本的Groovy 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>9.2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233801Z" creationid="huanghaohang" creationdate="20171206T233801Z">
        <seg>9.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>9.2. Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T003019Z" creationid="huanghaohang" creationdate="20170909T003019Z">
        <seg>9.2. 总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>:api:libs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012842Z" creationid="huanghaohang" creationdate="20170910T012842Z">
        <seg>:api:libs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>:webapp:libs

Type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012843Z" creationid="huanghaohang" creationdate="20170910T012843Z">
        <seg>:webapp:libs

Type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;FileTree&lt;/c1&gt;&lt;/a0&gt; (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T234851Z" creationid="huanghaohang" creationdate="20180406T234851Z">
        <seg>&lt;a0&gt;&lt;c1&gt;FileTree&lt;/c1&gt;&lt;/a0&gt;（只读）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;FileTree&lt;/c1&gt;&lt;/a0&gt;. Can set using anything described in &lt;a2&gt;Section 16.5, “Specifying a set of input files”&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100436Z" creationid="haohang" creationdate="20180326T100436Z">
        <seg>&lt;a0&gt;&lt;c1&gt;FileTree&lt;/c1&gt;&lt;/a0&gt;。可以使用《&lt;a2&gt;第 16.5 节，“指定一组输入文件”&lt;/a2&gt;》中所讲到的任何一种方法来设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;JavaVersion&lt;/c1&gt;&lt;/a0&gt;. Can also set using a String or Number, e.g. &lt;c2&gt;'1.5'&lt;/c2&gt; or &lt;c3&gt;1.5&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094402Z" creationid="haohang" creationdate="20180314T094402Z">
        <seg>&lt;a0&gt;&lt;c1&gt;JavaVersion&lt;/c1&gt;&lt;/a0&gt;。也可以使用字符串或数字来设置，如 &lt;c2&gt;'1.5'&lt;/c2&gt; 或 &lt;c3&gt;1.5&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;JavaVersion&lt;/c1&gt;&lt;/a0&gt;. Can also set using a String or a Number, e.g. &lt;c2&gt;'1.5'&lt;/c2&gt; or &lt;c3&gt;1.5&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094302Z" creationid="haohang" creationdate="20180314T094302Z">
        <seg>&lt;a0&gt;&lt;c1&gt;JavaVersion&lt;/c1&gt;&lt;/a0&gt;。也可以使用字符串或数字来设置，如 &lt;c2&gt;'1.5'&lt;/c2&gt; 或 &lt;c3&gt;1.5&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;SourceDirectorySet&lt;/c1&gt;&lt;/a0&gt; (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100053Z" creationid="haohang" creationdate="20180320T100053Z">
        <seg>&lt;a0&gt;&lt;c1&gt;SourceDirectorySet&lt;/c1&gt;&lt;/a0&gt; （只读）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;SourceSetContainer&lt;/c1&gt;&lt;/a0&gt; (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062353Z" creationid="haohang" creationdate="20180313T062353Z">
        <seg>&lt;a0&gt;&lt;c1&gt;SourceSetContainer&lt;/c1&gt;&lt;/a0&gt; （只读）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;SourceSetOutput&lt;/c1&gt;&lt;/a0&gt; (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095112Z" creationid="haohang" creationdate="20180320T095112Z">
        <seg>&lt;a0&gt;&lt;c1&gt;SourceSetOutput&lt;/c1&gt;&lt;/a0&gt; （只读）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;&lt;c1&gt;buildSrc&lt;/c1&gt; project&lt;/a0&gt;. Drop the source for your build classes into a certain directory and Gradle automatically compiles them and includes them in the classpath of your build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144007Z" creationid="huanghaohang" creationdate="20190817T144007Z">
        <seg>&lt;a0&gt;&lt;c1&gt;buildSrc&lt;/c1&gt; 项目&lt;/a0&gt;。把构建类的源码放到特定目录中， Gradle 会自动编译它们，并将它们包含在构建脚本的类路径中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Bintray&lt;/a0&gt;'s JCenter is an up-to-date collection of all popular Maven OSS artifacts, including artifacts published directly to Bintray.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031456Z" creationid="huanghaohang" creationdate="20190603T031456Z">
        <seg>&lt;a0&gt;Bintray&lt;/a0&gt; 的 JCenter 是所有流行的 Maven OSS 工件（包括直接发布到 Bintray 的工件）的最新集合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Configuration injection&lt;/a0&gt;. In a multi-project build, a project (usually the root project) can inject properties and methods into another project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T143928Z" creationid="huanghaohang" creationdate="20190817T143920Z">
        <seg>&lt;a0&gt;配置注入&lt;/a0&gt;。在多项目构建中，一个项目（通常是根项目）可以将属性和方法注入到另一个项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Custom plugins&lt;/a0&gt;. Put your build logic into a custom plugin, and apply that plugin to multiple projects. The plugin must be in the classpath of your build script. You can achieve this either by using &lt;a1&gt;&lt;c2&gt;build sources&lt;/c2&gt;&lt;/a1&gt; or by adding an &lt;a3&gt;external library&lt;/a3&gt; that contains the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144334Z" creationid="huanghaohang" creationdate="20190817T144334Z">
        <seg>&lt;a0&gt;自定义插件&lt;/a0&gt;。把构建逻辑放到自定义插件中，并将该插件应用于多个项目。插件必须在构建脚本的类路径中，你可以通过使用 &lt;a1&gt;&lt;c2&gt;build sources&lt;/c2&gt;&lt;/a1&gt; 或通过添加包含插件的 &lt;a3&gt;外部库&lt;/a3&gt; 来实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Custom tasks&lt;/a0&gt;. Put your build logic into a custom task, and reuse that task in multiple places.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144221Z" creationid="huanghaohang" creationdate="20190817T144221Z">
        <seg>&lt;a0&gt;自定义任务&lt;/a0&gt;。把构建逻辑放到一个自定义任务中，并在多个地方复用该任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Execute an external build&lt;/a0&gt;. Execute another Gradle build from the current build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144417Z" creationid="huanghaohang" creationdate="20190817T144417Z">
        <seg>&lt;a0&gt;执行外部构建&lt;/a0&gt;。从当前构建执行另一个 Gradle 构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;External libraries&lt;/a0&gt;. Use external libraries directly in your build file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144438Z" creationid="huanghaohang" creationdate="20190817T144438Z">
        <seg>&lt;a0&gt;外部库&lt;/a0&gt;。直接在构建文件中使用外部库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;GCC&lt;/a0&gt; with &lt;a1&gt;Cywin 32&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024150Z" creationid="huanghaohang" creationdate="20190609T024150Z">
        <seg>&lt;a0&gt;GCC&lt;/a0&gt; with &lt;a1&gt;Cywin 32&lt;/a1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;GCC&lt;/a0&gt; with &lt;a1&gt;MinGW&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024225Z" creationid="huanghaohang" creationdate="20190609T024225Z">
        <seg>&lt;a0&gt;GCC&lt;/a0&gt; with &lt;a1&gt;MinGW&lt;/a1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Growl&lt;/a0&gt; (Mac OS X)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085707Z" creationid="huanghaohang" creationdate="20190124T085707Z">
        <seg>&lt;a0&gt;Growl&lt;/a0&gt; (Mac OS X)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Inherited properties and methods&lt;/a0&gt;. In a multi-project build, sub-projects inherit the properties and methods of their parent project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T143828Z" creationid="huanghaohang" creationdate="20190817T142901Z">
        <seg>&lt;a0&gt;继承的属性和方法&lt;/a0&gt;。在多项目构建中，子项目将继承父项目的属性和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Previous&lt;/a0&gt;&lt;s1&gt;|&lt;/s1&gt;&lt;a2&gt;Contents&lt;/a2&gt;&lt;s3&gt;|&lt;/s3&gt;&lt;a4&gt;Next&lt;/a4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072520Z" creationid="haohang" creationdate="20170720T072520Z">
        <seg>&lt;a0&gt;上一章&lt;/a0&gt;&lt;s1&gt;|&lt;/s1&gt;&lt;a2&gt;目录&lt;/a2&gt;&lt;s3&gt;|&lt;/s3&gt;&lt;a4&gt;下一章&lt;/a4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Section 55.1, “Build phases”&lt;/a0&gt; describes the phases of every Gradle build. Let's zoom into configuration and execution phases of a multi-project build. The configuration of all projects happens before any task is executed. This means that when a single task, from a single project is requested, &lt;s1&gt;&lt;e2&gt;all&lt;/e2&gt;&lt;/s1&gt; projects of multi-project build are configured first. The reason every project needs to be configured is to support the flexibility of accessing and changing any part of Gradle project model.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T152200Z" creationid="huanghaohang" creationdate="20190614T152200Z">
        <seg>《&lt;a0&gt;第55.1节，构建阶段&lt;/a0&gt;》描述了每个 Gradle 构建的阶段。让我们放大多项目构建的配置和执行阶段。在执行任何任务之前，会进行所有项目的配置。这意味着，当请求一个项目里的某个任务时，首先会配置多项目构建的&lt;s1&gt;&lt;e2&gt;所有&lt;/e2&gt;&lt;/s1&gt;项目。所有项目需要配置的原因是为了支持灵活地访问及更改 Gradle 项目模型的任何部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Section 56.1.1.1, “Configuration on demand”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T144308Z" creationid="huanghaohang" creationdate="20190621T144308Z">
        <seg>&lt;a0&gt;第 56.1.1.1 节，“按需配置”&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Shared scripts&lt;/a0&gt;. Define common configuration in an external build, and apply the script to multiple projects, possibly across different builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144139Z" creationid="huanghaohang" creationdate="20190817T144139Z">
        <seg>&lt;a0&gt;共享脚本&lt;/a0&gt;。在外部构建中定义公共配置，然后把这个脚本应用于多个项目，这些项目可能在不同的构建中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Snarl&lt;/a0&gt; (Windows)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085703Z" creationid="huanghaohang" creationdate="20190124T085703Z">
        <seg>&lt;a0&gt;Snarl&lt;/a0&gt; (Windows)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;notify-send&lt;/a0&gt; (Ubuntu)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085700Z" creationid="huanghaohang" creationdate="20190124T085700Z">
        <seg>&lt;a0&gt;notify-send&lt;/a0&gt; (Ubuntu)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-S&lt;/c0&gt; or &lt;c1&gt;--full-stacktrace&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T011659Z" creationid="huanghaohang" creationdate="20180107T011659Z">
        <seg>&lt;c0&gt;-S&lt;/c0&gt; or &lt;c1&gt;--full-stacktrace&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-d&lt;/c0&gt; or &lt;c1&gt;--debug&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221923Z" creationid="huanghaohang" creationdate="20180105T221923Z">
        <seg>&lt;c0&gt;-d&lt;/c0&gt; or &lt;c1&gt;--debug&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-i&lt;/c0&gt; or &lt;c1&gt;--info&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221921Z" creationid="huanghaohang" creationdate="20180105T221921Z">
        <seg>&lt;c0&gt;-i&lt;/c0&gt; or &lt;c1&gt;--info&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-q&lt;/c0&gt; or &lt;c1&gt;--quiet&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221918Z" creationid="huanghaohang" creationdate="20180105T221918Z">
        <seg>&lt;c0&gt;-q&lt;/c0&gt; or &lt;c1&gt;--quiet&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;-s&lt;/c0&gt; or &lt;c1&gt;--stacktrace&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T222351Z" creationid="huanghaohang" creationdate="20180105T222351Z">
        <seg>&lt;c0&gt;-s&lt;/c0&gt; or &lt;c1&gt;--stacktrace&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;File&lt;/c0&gt; (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061236Z" creationid="haohang" creationdate="20180313T061236Z">
        <seg>&lt;c0&gt;File&lt;/c0&gt; （只读）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;File&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T101701Z" creationid="haohang" creationdate="20180327T101701Z">
        <seg>&lt;c0&gt;File&lt;/c0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;File&lt;/c0&gt;. Can set using anything described in &lt;a1&gt;Section 16.1, “Locating files”&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101403Z" creationid="haohang" creationdate="20180326T101403Z">
        <seg>&lt;c0&gt;File&lt;/c0&gt;。可以使用《&lt;a1&gt;第 16.1 节，“查找文件”&lt;/a1&gt;》中所述的任何设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;GroovyCompile&lt;/c0&gt; and &lt;c1&gt;Groovydoc&lt;/c1&gt; tasks consume Groovy in two ways: on their &lt;c2&gt;classpath&lt;/c2&gt;, and on their &lt;c3&gt;groovyClasspath&lt;/c3&gt;. The former is used to locate classes referenced by the source code, and will typically contain the Groovy library along with other libraries. The latter is used to load and execute the Groovy compiler and Groovydoc tool, respectively, and should only contain the Groovy library and its dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132339Z" creationid="huanghaohang" creationdate="20180406T123350Z">
        <seg>&lt;c0&gt;GroovyCompile&lt;/c0&gt; 和 &lt;c1&gt;GroovyDoc&lt;/c1&gt; 任务以两种方式使用Groovy：在它们的 &lt;c2&gt;classpath&lt;/c2&gt; 以及它们的 &lt;c3&gt;groovyClasspath&lt;/c3&gt; 上。前者用于查找源代码引用的类，并且通常包含 Groovy 库以及其他库。后者用于分别加载和执行 Groovy 编译器和 Groovydoc 工具，并且应该只包含 Groovy库及其依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Object&lt;/c0&gt;. Can set using anything described in &lt;a1&gt;Section 16.5, “Specifying a set of input files”&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101305Z" creationid="haohang" creationdate="20180326T101305Z">
        <seg>&lt;c0&gt;Object&lt;/c0&gt;。可以使用《&lt;a1&gt;第 16.5 节，“指定一组输入文件”&lt;/a1&gt;》中所讲到的任何一种方法来设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;ScalaCompile&lt;/c0&gt; and &lt;c1&gt;ScalaDoc&lt;/c1&gt; tasks consume Scala in two ways: on their &lt;c2&gt;classpath&lt;/c2&gt;, and on their &lt;c3&gt;scalaClasspath&lt;/c3&gt;. The former is used to locate classes referenced by the source code, and will typically contain &lt;c4&gt;scala-library&lt;/c4&gt; along with other libraries. The latter is used to load and execute the Scala compiler and Scaladoc tool, respectively, and should only contain the &lt;c5&gt;scala-compiler&lt;/c5&gt; library and its dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015833Z" creationid="huanghaohang" creationdate="20180407T015539Z">
        <seg>&lt;c0&gt;ScalaCompile&lt;/c0&gt; 和 &lt;c1&gt;ScalaDoc&lt;/c1&gt; 任务以两种方式使用 Scala：在它们的 &lt;c2&gt;classpath&lt;/c2&gt; 以及它们的 &lt;c3&gt;scalaClasspath&lt;/c3&gt; 上。前者用于定位源码所引用的类，并且通常包含 &lt;c4&gt;scala-library&lt;/c4&gt; 库以及其他库。后者用于分别加载和执行 Scala 编译器和 Scaladoc 工具，并且应该只包含 &lt;c5&gt;scala-compiler&lt;/c5&gt; 库及其依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;Set&lt;File&gt;&lt;/c0&gt;. Can set using anything described in &lt;a1&gt;Section 16.5, “Specifying a set of input files”&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100859Z" creationid="haohang" creationdate="20180320T100607Z">
        <seg>&lt;c0&gt;Set&lt;File&gt;&lt;/c0&gt;。可以使用《&lt;a1&gt;第 16.5 节，“指定一组输入文件”&lt;/a1&gt;》中所讲到的任何一种方法来设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;String&lt;/c0&gt; (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095046Z" creationid="haohang" creationdate="20180320T095046Z">
        <seg>&lt;c0&gt;String&lt;/c0&gt; （只读）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;beforeMerged { arg -&gt; }&lt;/c0&gt; argument type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082542Z" creationid="huanghaohang" creationdate="20181210T082542Z">
        <seg>&lt;c0&gt;beforeMerged { arg -&gt; }&lt;/c0&gt; 参数类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;build&lt;/c0&gt; and &lt;c1&gt;build&lt;/c1&gt; tasks in all project lib dependencies of the &lt;c2&gt;testRuntime&lt;/c2&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035408Z" creationid="haohang" creationdate="20180313T035408Z">
        <seg>&lt;c0&gt;build&lt;/c0&gt; 任务，以及在 &lt;c2&gt;testRuntime&lt;/c2&gt; 配置的所有项目库依赖项的 &lt;c1&gt;build&lt;/c1&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;build&lt;/c0&gt; and &lt;c1&gt;build&lt;/c1&gt; tasks in all projects with a project lib dependency on this project in a &lt;c2&gt;testRuntime&lt;/c2&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035523Z" creationid="haohang" creationdate="20180313T035523Z">
        <seg>&lt;c0&gt;build&lt;/c0&gt; 任务，以及在 &lt;c2&gt;testRuntime&lt;/c2&gt; 配置中对此项目有库依赖的所有项目的 &lt;c1&gt;build&lt;/c1&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190629T151058Z" creationid="huanghaohang" creationdate="20190629T151058Z">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;check&lt;/c0&gt; and &lt;c1&gt;assemble&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035041Z" creationid="haohang" creationdate="20180313T035041Z">
        <seg>&lt;c0&gt;check&lt;/c0&gt; 和 &lt;c1&gt;assemble&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;cleanEclipseProject&lt;/c0&gt;, &lt;c1&gt;cleanEclipseClasspath&lt;/c1&gt;, &lt;c2&gt;cleanEclipseJdt&lt;/c2&gt;, &lt;c3&gt;cleanEclipseWtpComponent&lt;/c3&gt;, &lt;c4&gt;cleanEclipseWtpFacet&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025835Z" creationid="huanghaohang" creationdate="20181210T025835Z">
        <seg>&lt;c0&gt;cleanEclipseProject&lt;/c0&gt;, &lt;c1&gt;cleanEclipseClasspath&lt;/c1&gt;, &lt;c2&gt;cleanEclipseJdt&lt;/c2&gt;, &lt;c3&gt;cleanEclipseWtpComponent&lt;/c3&gt;, &lt;c4&gt;cleanEclipseWtpFacet&lt;/c4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;cleanIdeaProject&lt;/c0&gt;, &lt;c1&gt;cleanIdeaModule&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061036Z" creationid="huanghaohang" creationdate="20181212T061036Z">
        <seg>&lt;c0&gt;cleanIdeaProject&lt;/c0&gt;, &lt;c1&gt;cleanIdeaModule&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compile&lt;/c0&gt; (only if the Java plugin is also applied)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145125Z" creationid="huanghaohang" creationdate="20180415T145125Z">
        <seg>&lt;c0&gt;compile&lt;/c0&gt; (only if the Java plugin is also applied)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compile&lt;/c0&gt;, &lt;c1&gt;compileTest&lt;/c1&gt;, plus all tasks which produce the test runtime classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063125Z" creationid="haohang" creationdate="20180312T063125Z">
        <seg>&lt;c0&gt;compile&lt;/c0&gt;， &lt;c1&gt;compileTest&lt;/c1&gt;，以及所有产生测试运行时类路径的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compile&lt;/c0&gt;, plus all tasks which produce the test compile classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062627Z" creationid="haohang" creationdate="20180312T062627Z">
        <seg>&lt;c0&gt;compile&lt;/c0&gt; 任务，以及所有能产生测试编译类路径的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compile&lt;e1&gt;&lt;c2&gt;SourceSet&lt;/c2&gt;&lt;/e1&gt;&lt;/c0&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095258Z" creationid="haohang" creationdate="20180320T095258Z">
        <seg>&lt;c0&gt;compile&lt;e1&gt;&lt;c2&gt;SourceSet&lt;/c2&gt;&lt;/e1&gt;&lt;/c0&gt; 配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compile&lt;e1&gt;&lt;c2&gt;SourceSet&lt;/c2&gt;&lt;/e1&gt;Java&lt;/c0&gt; and &lt;c3&gt;process&lt;e4&gt;&lt;c5&gt;SourceSet&lt;/c5&gt;&lt;/e4&gt;Resources&lt;/c3&gt;. Some plugins add additional compilation tasks for the source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T033857Z" creationid="haohang" creationdate="20180312T073502Z">
        <seg>&lt;c0&gt;compile&lt;e1&gt;&lt;c2&gt;SourceSet&lt;/c2&gt;&lt;/e1&gt;Java&lt;/c0&gt; 和 &lt;c3&gt;process&lt;e4&gt;&lt;c5&gt;SourceSet&lt;/c5&gt;&lt;/e4&gt;Resources&lt;/c3&gt;。有些插件还为源集添加了其他的编译任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compileJava&lt;/c0&gt; and &lt;c1&gt;processResources&lt;/c1&gt;. Some plugins add additional compilation tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062448Z" creationid="haohang" creationdate="20180312T062448Z">
        <seg>&lt;c0&gt;compileJava&lt;/c0&gt; 和 &lt;c1&gt;processResources&lt;/c1&gt;。有些插件会添加其他的编译任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;compileTestJava&lt;/c0&gt; and &lt;c1&gt;processTestResources&lt;/c1&gt;. Some plugins add additional test compilation tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062903Z" creationid="haohang" creationdate="20180312T062903Z">
        <seg>&lt;c0&gt;compileTestJava&lt;/c0&gt; 和 &lt;c1&gt;processTestResources&lt;/c1&gt;。有些插件会添加其他的测试编译任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;dependencies&lt;/c0&gt; returns only the dependencies belonging explicitly to the configuration. &lt;c1&gt;allDependencies&lt;/c1&gt; includes the dependencies from extended configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143226Z" creationid="huanghaohang" creationdate="20190602T143032Z">
        <seg>&lt;c0&gt;dependencies&lt;/c0&gt; 只返回了明确属于配置的依赖，&lt;c1&gt;allDependencies&lt;/c1&gt; 则包括了扩展配置的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;dependencyReport&lt;/c0&gt;, &lt;c1&gt;propertyReport&lt;/c1&gt;, &lt;c2&gt;taskReport&lt;/c2&gt;, &lt;c3&gt;htmlDependencyReport&lt;/c3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040345Z" creationid="huanghaohang" creationdate="20190123T040345Z">
        <seg>&lt;c0&gt;dependencyReport&lt;/c0&gt;, &lt;c1&gt;propertyReport&lt;/c1&gt;, &lt;c2&gt;taskReport&lt;/c2&gt;, &lt;c3&gt;htmlDependencyReport&lt;/c3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;ear&lt;/c0&gt;, &lt;c1&gt;war&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180210T135854Z" creationid="huanghaohang" creationdate="20180210T135854Z">
        <seg>&lt;c0&gt;ear&lt;/c0&gt;, &lt;c1&gt;war&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;eclipseProject&lt;/c0&gt;, &lt;c1&gt;eclipseClasspath&lt;/c1&gt;, &lt;c2&gt;eclipseJdt&lt;/c2&gt;, &lt;c3&gt;eclipseWtpComponent&lt;/c3&gt;, &lt;c4&gt;cleanEclipseWtpFacet&lt;/c4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025818Z" creationid="huanghaohang" creationdate="20181210T025818Z">
        <seg>&lt;c0&gt;eclipseProject&lt;/c0&gt;, &lt;c1&gt;eclipseClasspath&lt;/c1&gt;, &lt;c2&gt;eclipseJdt&lt;/c2&gt;, &lt;c3&gt;eclipseWtpComponent&lt;/c3&gt;, &lt;c4&gt;cleanEclipseWtpFacet&lt;/c4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;groovy&lt;/c0&gt; configuration if non-empty; Groovy library found on &lt;c1&gt;classpath&lt;/c1&gt; otherwise</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T005021Z" creationid="huanghaohang" creationdate="20180407T005021Z">
        <seg>如果 &lt;c0&gt;groovy&lt;/c0&gt; 配置不为空，则为该配置；否则为 &lt;c1&gt;classpath&lt;/c1&gt; 中找到的 Groovy 库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;ideaProject&lt;/c0&gt;, &lt;c1&gt;ideaModule&lt;/c1&gt;, &lt;c2&gt;ideaWorkspace&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061025Z" creationid="huanghaohang" creationdate="20181212T061025Z">
        <seg>&lt;c0&gt;ideaProject&lt;/c0&gt;, &lt;c1&gt;ideaModule&lt;/c1&gt;, &lt;c2&gt;ideaWorkspace&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;jar&lt;/c0&gt;, &lt;c1&gt;startScripts&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135118Z" creationid="95" creationdate="20190131T135118Z">
        <seg>&lt;c0&gt;jar&lt;/c0&gt;, &lt;c1&gt;startScripts&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;distribution&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143801Z" creationid="huanghaohang" creationdate="20180207T143801Z">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;distribution&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;groovy-base&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140844Z" creationid="huanghaohang" creationdate="20180205T140844Z">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;groovy-base&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;scala-base&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140938Z" creationid="huanghaohang" creationdate="20180205T140938Z">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;scala-base&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;war&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143415Z" creationid="huanghaohang" creationdate="20180207T143415Z">
        <seg>&lt;c0&gt;java&lt;/c0&gt;, &lt;c1&gt;war&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;java&lt;/c0&gt;,&lt;c1&gt;groovy&lt;/c1&gt;, &lt;c2&gt;scala&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144521Z" creationid="huanghaohang" creationdate="20180207T144521Z">
        <seg>&lt;c0&gt;java&lt;/c0&gt;,&lt;c1&gt;groovy&lt;/c1&gt;, &lt;c2&gt;scala&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;module-a&lt;/c0&gt; depends on &lt;c1&gt;releasable-unit:part-one:1.0&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015306Z" creationid="huanghaohang" creationdate="20190605T015306Z">
        <seg>&lt;c0&gt;module-a&lt;/c0&gt; 依赖于 &lt;c1&gt;releasable-unit:part-one:1.0&lt;/c1&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;module-b&lt;/c0&gt; depends on &lt;c1&gt;releasable-unit:part-two:1.1&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015314Z" creationid="huanghaohang" creationdate="20190605T015314Z">
        <seg>&lt;c0&gt;module-a&lt;/c0&gt; 依赖于 &lt;c1&gt;releasable-unit:part-one:1.0&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;output&lt;/c0&gt; + &lt;c1&gt;runtime&lt;e2&gt;&lt;c3&gt;SourceSet&lt;/c3&gt;&lt;/e2&gt;&lt;/c1&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095343Z" creationid="haohang" creationdate="20180320T095343Z">
        <seg>&lt;c0&gt;output&lt;/c0&gt; + &lt;c1&gt;runtime&lt;e2&gt;&lt;c3&gt;SourceSet&lt;/c3&gt;&lt;/e2&gt;&lt;/c1&gt; 配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;whenMerged { arg -&gt; }&lt;/c0&gt; argument type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082543Z" creationid="huanghaohang" creationdate="20181210T082543Z">
        <seg>&lt;c0&gt;whenMerged { arg -&gt; }&lt;/c0&gt; 参数类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;withXml { arg -&gt; }&lt;/c0&gt; argument type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082545Z" creationid="huanghaohang" creationdate="20181210T082545Z">
        <seg>&lt;c0&gt;withXml { arg -&gt; }&lt;/c0&gt; 参数类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/binaries/&lt;e2&gt;&lt;c3&gt;$binary.name&lt;/c3&gt;&lt;/e2&gt;/&lt;e4&gt;&lt;c5&gt;$component.name&lt;/c5&gt;&lt;/e4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032112Z" creationid="huanghaohang" creationdate="20190609T032112Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/binaries/&lt;e2&gt;&lt;c3&gt;$binary.name&lt;/c3&gt;&lt;/e2&gt;/&lt;e4&gt;&lt;c5&gt;$component.name&lt;/c5&gt;&lt;/e4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/binaries/&lt;e2&gt;&lt;c3&gt;$binary.name&lt;/c3&gt;&lt;/e2&gt;/&lt;e4&gt;&lt;c5&gt;$component.name&lt;/c5&gt;&lt;/e4&gt;.a</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032123Z" creationid="huanghaohang" creationdate="20190609T032123Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/binaries/&lt;e2&gt;&lt;c3&gt;$binary.name&lt;/c3&gt;&lt;/e2&gt;/&lt;e4&gt;&lt;c5&gt;$component.name&lt;/c5&gt;&lt;/e4&gt;.a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/binaries/&lt;e2&gt;&lt;c3&gt;$binary.name&lt;/c3&gt;&lt;/e2&gt;/lib&lt;e4&gt;&lt;c5&gt;$component.name&lt;/c5&gt;&lt;/e4&gt;.so</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032119Z" creationid="huanghaohang" creationdate="20190609T032119Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/binaries/&lt;e2&gt;&lt;c3&gt;$binary.name&lt;/c3&gt;&lt;/e2&gt;/lib&lt;e4&gt;&lt;c5&gt;$component.name&lt;/c5&gt;&lt;/e4&gt;.so</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/jacoco</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093244Z" creationid="huanghaohang" creationdate="20180715T093244Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$buildDir&lt;/c1&gt;&lt;/e0&gt;/jacoco</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$component.name&lt;/c1&gt;&lt;/e0&gt;Executable</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032058Z" creationid="huanghaohang" creationdate="20190609T032058Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$component.name&lt;/c1&gt;&lt;/e0&gt;Executable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$component.name&lt;/c1&gt;&lt;/e0&gt;SharedLibrary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032116Z" creationid="huanghaohang" creationdate="20190609T032116Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$component.name&lt;/c1&gt;&lt;/e0&gt;SharedLibrary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;$component.name&lt;/c1&gt;&lt;/e0&gt;StaticLibrary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032122Z" creationid="huanghaohang" creationdate="20190609T032122Z">
        <seg>&lt;e0&gt;&lt;c1&gt;$component.name&lt;/c1&gt;&lt;/e0&gt;StaticLibrary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;${distribution.name}&lt;/c1&gt;&lt;/e0&gt;DistTar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134009Z" creationid="huanghaohang" creationdate="20190127T134009Z">
        <seg>&lt;e0&gt;&lt;c1&gt;${distribution.name}&lt;/c1&gt;&lt;/e0&gt;DistTar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;${distribution.name}&lt;/c1&gt;&lt;/e0&gt;DistZip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134008Z" creationid="huanghaohang" creationdate="20190127T134008Z">
        <seg>&lt;e0&gt;&lt;c1&gt;${distribution.name}&lt;/c1&gt;&lt;/e0&gt;DistZip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;baseName&lt;/c1&gt;&lt;/e0&gt;-&lt;e2&gt;&lt;c3&gt;appendix&lt;/c3&gt;&lt;/e2&gt;-&lt;e4&gt;&lt;c5&gt;version&lt;/c5&gt;&lt;/e4&gt;-&lt;e6&gt;&lt;c7&gt;classifier&lt;/c7&gt;&lt;/e6&gt;.&lt;e8&gt;&lt;c9&gt;extension&lt;/c9&gt;&lt;/e8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232635Z" creationid="huanghaohang" creationdate="20171206T232635Z">
        <seg>&lt;e0&gt;&lt;c1&gt;baseName&lt;/c1&gt;&lt;/e0&gt;-&lt;e2&gt;&lt;c3&gt;appendix&lt;/c3&gt;&lt;/e2&gt;-&lt;e4&gt;&lt;c5&gt;version&lt;/c5&gt;&lt;/e4&gt;-&lt;e6&gt;&lt;c7&gt;classifier&lt;/c7&gt;&lt;/e6&gt;.&lt;e8&gt;&lt;c9&gt;extension&lt;/c9&gt;&lt;/e8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;dependencyCacheDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062323Z" creationid="haohang" creationdate="20180313T062323Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;dependencyCacheDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;distsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062137Z" creationid="haohang" creationdate="20180313T062137Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;distsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;docsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062241Z" creationid="haohang" creationdate="20180313T062241Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;docsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;libsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061531Z" creationid="haohang" creationdate="20180313T061531Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;libsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;pomDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091512Z" creationid="huanghaohang" creationdate="20190608T091512Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;pomDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;reportsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061237Z" creationid="haohang" creationdate="20180313T061237Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;reportsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;testResultsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061352Z" creationid="haohang" creationdate="20180313T061352Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;testResultsDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/classes/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095130Z" creationid="haohang" creationdate="20180320T095130Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/classes/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/resources/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095213Z" creationid="haohang" creationdate="20180320T095213Z">
        <seg>&lt;e0&gt;&lt;c1&gt;buildDir&lt;/c1&gt;&lt;/e0&gt;/resources/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;destinationDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;archiveName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232806Z" creationid="huanghaohang" creationdate="20171206T232806Z">
        <seg>&lt;e0&gt;&lt;c1&gt;destinationDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;archiveName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;docsDir&lt;/c1&gt;&lt;/e0&gt;/javadoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100438Z" creationid="haohang" creationdate="20180326T100438Z">
        <seg>&lt;e0&gt;&lt;c1&gt;docsDir&lt;/c1&gt;&lt;/e0&gt;/javadoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;webAppDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142246Z" creationid="huanghaohang" creationdate="20180408T142246Z">
        <seg>&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;webAppDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132223Z" creationid="huanghaohang" creationdate="20170913T132223Z">
        <seg>&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;reportsDir&lt;/c1&gt;&lt;/e0&gt;/&lt;c2&gt;testReportDirName&lt;/c2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061427Z" creationid="haohang" creationdate="20180313T061427Z">
        <seg>&lt;e0&gt;&lt;c1&gt;reportsDir&lt;/c1&gt;&lt;/e0&gt;/&lt;c2&gt;testReportDirName&lt;/c2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;reportsDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;projectReportDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040954Z" creationid="huanghaohang" creationdate="20190123T040954Z">
        <seg>&lt;e0&gt;&lt;c1&gt;reportsDir&lt;/c1&gt;&lt;/e0&gt;/&lt;e2&gt;&lt;c3&gt;projectReportDirName&lt;/c3&gt;&lt;/e2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.compileClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T101658Z" creationid="haohang" creationdate="20180327T101658Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.compileClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003652Z" creationid="huanghaohang" creationdate="20180407T003652Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T101700Z" creationid="haohang" creationdate="20180327T101700Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.output.classesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T101704Z" creationid="haohang" creationdate="20180327T101704Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.output.classesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.output.resourcesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101405Z" creationid="haohang" creationdate="20180326T101405Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.output.resourcesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101317Z" creationid="haohang" creationdate="20180326T101317Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;.resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;Classes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073442Z" creationid="haohang" creationdate="20180312T073442Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;Classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;Compile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054253Z" creationid="haohang" creationdate="20180313T054253Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;Compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;Runtime</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054353Z" creationid="haohang" creationdate="20180313T054353Z">
        <seg>&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;Runtime</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Add some source directories use String paths&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134315Z" creationid="huanghaohang" creationdate="20171002T134315Z">
        <seg>&lt;s0&gt;// Add some source directories use String paths&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Can enable dynamic resolve mode when you define the repository&lt;/s0&gt;
repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025836Z" creationid="huanghaohang" creationdate="20190605T025836Z">
        <seg>&lt;s0&gt;// Can enable dynamic resolve mode when you define the repository&lt;/s0&gt;
repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Copy everything under src/main/webapp&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075015Z" creationid="huanghaohang" creationdate="20171015T075015Z">
        <seg>&lt;s0&gt;// Copy everything under src/main/webapp&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Create a ZIP file tree using path&lt;/s0&gt;
FileTree zip = zipTree(&lt;s1&gt;'someFile.zip'&lt;/s1&gt;)

&lt;s2&gt;// Create a TAR file tree using path&lt;/s2&gt;
FileTree tar = tarTree(&lt;s3&gt;'someFile.tar'&lt;/s3&gt;)

&lt;s4&gt;//tar tree attempts to guess the compression based on the file extension&lt;/s4&gt;
&lt;s5&gt;//however if you must specify the compression explicitly you can:&lt;/s5&gt;
FileTree someTar = tarTree(resources.gzip(&lt;s6&gt;'someTar.ext'&lt;/s6&gt;))</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133534Z" creationid="huanghaohang" creationdate="20171002T133534Z">
        <seg>&lt;s0&gt;// Create a ZIP file tree using path&lt;/s0&gt;
FileTree zip = zipTree(&lt;s1&gt;'someFile.zip'&lt;/s1&gt;)

&lt;s2&gt;// Create a TAR file tree using path&lt;/s2&gt;
FileTree tar = tarTree(&lt;s3&gt;'someFile.tar'&lt;/s3&gt;)

&lt;s4&gt;//tar tree attempts to guess the compression based on the file extension&lt;/s4&gt;
&lt;s5&gt;//however if you must specify the compression explicitly you can:&lt;/s5&gt;
FileTree someTar = tarTree(resources.gzip(&lt;s6&gt;'someTar.ext'&lt;/s6&gt;))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Create a file collection using a closure&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150350Z" creationid="huanghaohang" creationdate="20170927T150350Z">
        <seg>&lt;s0&gt;// Create a file collection using a closure&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Create a file tree with a base directory&lt;/s0&gt;
FileTree tree = fileTree(dir: &lt;s1&gt;'src/main'&lt;/s1&gt;)

&lt;s2&gt;// Add include and exclude patterns to the tree&lt;/s2&gt;
tree.include &lt;s3&gt;'**/*.java'&lt;/s3&gt;
tree.exclude &lt;s4&gt;'**/Abstract*'&lt;/s4&gt;

&lt;s5&gt;// Create a tree using path&lt;/s5&gt;
tree = fileTree(&lt;s6&gt;'src'&lt;/s6&gt;).include(&lt;s7&gt;'**/*.java'&lt;/s7&gt;)

&lt;s8&gt;// Create a tree using closure&lt;/s8&gt;
tree = fileTree(&lt;s9&gt;'src'&lt;/s9&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023415Z" creationid="huanghaohang" creationdate="20171002T023415Z">
        <seg>&lt;s0&gt;// Create a file tree with a base directory&lt;/s0&gt;
FileTree tree = fileTree(dir: &lt;s1&gt;'src/main'&lt;/s1&gt;)

&lt;s2&gt;// Add include and exclude patterns to the tree&lt;/s2&gt;
tree.include &lt;s3&gt;'**/*.java'&lt;/s3&gt;
tree.exclude &lt;s4&gt;'**/Abstract*'&lt;/s4&gt;

&lt;s5&gt;// Create a tree using path&lt;/s5&gt;
tree = fileTree(&lt;s6&gt;'src'&lt;/s6&gt;).include(&lt;s7&gt;'**/*.java'&lt;/s7&gt;)

&lt;s8&gt;// Create a tree using closure&lt;/s8&gt;
tree = fileTree(&lt;s9&gt;'src'&lt;/s9&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Define a new property&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132523Z" creationid="huanghaohang" creationdate="20191201T132523Z">
        <seg>&lt;s0&gt;// Define a new property&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Define a preprocessor macro for every binary&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053254Z" creationid="huanghaohang" creationdate="20190609T053254Z">
        <seg>&lt;s0&gt;// Define a preprocessor macro for every binary&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Define a preprocessor macro that only applies to shared libraries&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012520Z" creationid="huanghaohang" creationdate="20190610T012520Z">
        <seg>&lt;s0&gt;// Define a preprocessor macro that only applies to shared libraries&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Define an extra property&lt;/s0&gt;
ext.srcDirName = &lt;s1&gt;'src/java'&lt;/s1&gt;

&lt;s2&gt;// Define a method&lt;/s2&gt;
def getSrcDir(project) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145007Z" creationid="huanghaohang" creationdate="20190817T145007Z">
        <seg>&lt;s0&gt;// Define an extra property&lt;/s0&gt;
ext.srcDirName = &lt;s1&gt;'src/java'&lt;/s1&gt;

&lt;s2&gt;// Define a method&lt;/s2&gt;
def getSrcDir(project) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Each executable binary produced uses the 'hello' static library binary&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022901Z" creationid="huanghaohang" creationdate="20190610T022901Z">
        <seg>&lt;s0&gt;// Each executable binary produced uses the 'hello' static library binary&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro&lt;/s0&gt;
binaries.withType(SharedLibraryBinary) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012011Z" creationid="huanghaohang" creationdate="20190610T012011Z">
        <seg>&lt;s0&gt;// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro&lt;/s0&gt;
binaries.withType(SharedLibraryBinary) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Iterable gets an each() method&lt;/s0&gt;
configurations.runtime.each { File f -&gt; println f }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135849Z" creationid="huanghaohang" creationdate="20170913T135849Z">
        <seg>&lt;s0&gt;// Iterable gets an each() method&lt;/s0&gt;
configurations.runtime.each { File f -&gt; println f }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Iterate over the contents of a tree&lt;/s0&gt;
tree.each {File file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023625Z" creationid="huanghaohang" creationdate="20171002T023625Z">
        <seg>&lt;s0&gt;// Iterate over the contents of a tree&lt;/s0&gt;
tree.each {File file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Iterate over the files in the collection&lt;/s0&gt;
collection.each {File file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T132329Z" creationid="huanghaohang" creationdate="20170923T132329Z">
        <seg>&lt;s0&gt;// Iterate over the files in the collection&lt;/s0&gt;
collection.each {File file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// List literal&lt;/s0&gt;
test.includes = [&lt;s1&gt;'org/gradle/api/**'&lt;/s1&gt;, &lt;s2&gt;'org/gradle/internal/**'&lt;/s2&gt;]

List&lt;String&gt; list = &lt;s3&gt;new&lt;/s3&gt; ArrayList&lt;String&gt;()
list.add(&lt;s4&gt;'org/gradle/api/**'&lt;/s4&gt;)
list.add(&lt;s5&gt;'org/gradle/internal/**'&lt;/s5&gt;)
test.includes = list

&lt;s6&gt;// Map literal&lt;/s6&gt;
apply plugin: &lt;s7&gt;'java'&lt;/s7&gt;

Map&lt;String, String&gt; map = &lt;s8&gt;new&lt;/s8&gt; HashMap&lt;String, String&gt;()
map.put(&lt;s9&gt;'plugin'&lt;/s9&gt;, &lt;s10&gt;'java'&lt;/s10&gt;)
apply(map)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141557Z" creationid="huanghaohang" creationdate="20170913T141557Z">
        <seg>&lt;s0&gt;// List literal&lt;/s0&gt;
test.includes = [&lt;s1&gt;'org/gradle/api/**'&lt;/s1&gt;, &lt;s2&gt;'org/gradle/internal/**'&lt;/s2&gt;]

List&lt;String&gt; list = &lt;s3&gt;new&lt;/s3&gt; ArrayList&lt;String&gt;()
list.add(&lt;s4&gt;'org/gradle/api/**'&lt;/s4&gt;)
list.add(&lt;s5&gt;'org/gradle/internal/**'&lt;/s5&gt;)
test.includes = list

&lt;s6&gt;// Map literal&lt;/s6&gt;
apply plugin: &lt;s7&gt;'java'&lt;/s7&gt;

Map&lt;String, String&gt; map = &lt;s8&gt;new&lt;/s8&gt; HashMap&lt;String, String&gt;()
map.put(&lt;s9&gt;'plugin'&lt;/s9&gt;, &lt;s10&gt;'java'&lt;/s10&gt;)
apply(map)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Look for POMs and artifacts, such as JARs, here&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033843Z" creationid="huanghaohang" creationdate="20190603T033843Z">
        <seg>&lt;s0&gt;// Look for POMs and artifacts, such as JARs, here&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Specify the installDir if Visual Studio cannot be located by default&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084911Z" creationid="huanghaohang" creationdate="20190610T084911Z">
        <seg>&lt;s0&gt;// Specify the installDir if Visual Studio cannot be located by default&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// URL can refer to a local directory&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T045145Z" creationid="huanghaohang" creationdate="20170908T045145Z">
        <seg>&lt;s0&gt;// URL can refer to a local directory&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Use a File object to specify the source directory&lt;/s0&gt;
compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134048Z" creationid="huanghaohang" creationdate="20171002T134048Z">
        <seg>&lt;s0&gt;// Use a File object to specify the source directory&lt;/s0&gt;
compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Use inherited property&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145011Z" creationid="huanghaohang" creationdate="20190817T145011Z">
        <seg>&lt;s0&gt;// Use inherited property&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Use injected property and method. Here, we override the injected value&lt;/s0&gt;
srcDirName = &lt;s1&gt;'java'&lt;/s1&gt;
def dir = srcDir()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132534Z" creationid="huanghaohang" creationdate="20191201T132534Z">
        <seg>&lt;s0&gt;// Use injected property and method. Here, we override the injected value&lt;/s0&gt;
srcDirName = &lt;s1&gt;'java'&lt;/s1&gt;
def dir = srcDir()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Use the default greeting&lt;/s0&gt;
task hello(type: GreetingTask)

&lt;s1&gt;// Customize the greeting&lt;/s1&gt;
task greeting(type: GreetingTask) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122511Z" creationid="huanghaohang" creationdate="20190706T122511Z">
        <seg>&lt;s0&gt;// Use the default greeting&lt;/s0&gt;
task hello(type: GreetingTask)

&lt;s1&gt;// Customize the greeting&lt;/s1&gt;
task greeting(type: GreetingTask) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Using a getter method&lt;/s0&gt;
println project.buildDir
println getProject().getBuildDir()

&lt;s1&gt;// Using a setter method&lt;/s1&gt;
project.buildDir = &lt;s2&gt;'target'&lt;/s2&gt;
getProject().setBuildDir(&lt;s3&gt;'target'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141244Z" creationid="huanghaohang" creationdate="20170913T141244Z">
        <seg>&lt;s0&gt;// Using a getter method&lt;/s0&gt;
println project.buildDir
println getProject().getBuildDir()

&lt;s1&gt;// Using a setter method&lt;/s1&gt;
project.buildDir = &lt;s2&gt;'target'&lt;/s2&gt;
getProject().setBuildDir(&lt;s3&gt;'target'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Using a relative path&lt;/s0&gt;
File configFile = file(&lt;s1&gt;'src/config.xml'&lt;/s1&gt;)

&lt;s2&gt;// Using an absolute path&lt;/s2&gt;
configFile = file(configFile.absolutePath)

&lt;s3&gt;// Using a File object with a relative path&lt;/s3&gt;
configFile = file(&lt;s4&gt;new&lt;/s4&gt; File(&lt;s5&gt;'src/config.xml'&lt;/s5&gt;))</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T125038Z" creationid="huanghaohang" creationdate="20170923T125038Z">
        <seg>&lt;s0&gt;// Using a relative path&lt;/s0&gt;
File configFile = file(&lt;s1&gt;'src/config.xml'&lt;/s1&gt;)

&lt;s2&gt;// Using an absolute path&lt;/s2&gt;
configFile = file(configFile.absolutePath)

&lt;s3&gt;// Using a File object with a relative path&lt;/s3&gt;
configFile = file(&lt;s4&gt;new&lt;/s4&gt; File(&lt;s5&gt;'src/config.xml'&lt;/s5&gt;))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// Various ways to access the main source set&lt;/s0&gt;
println sourceSets.main.output.classesDir
println sourceSets[&lt;s1&gt;'main'&lt;/s1&gt;].output.classesDir
sourceSets {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094733Z" creationid="haohang" creationdate="20180320T094733Z">
        <seg>&lt;s0&gt;// Various ways to access the main source set&lt;/s0&gt;
println sourceSets.main.output.classesDir
println sourceSets[&lt;s1&gt;'main'&lt;/s1&gt;].output.classesDir
sourceSets {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;// optionally specify host and port of the daemon:&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T021843Z" creationid="huanghaohang" creationdate="20180407T021843Z">
        <seg>&lt;s0&gt;// optionally specify host and port of the daemon:&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;//include specific method in any of the tests&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131637Z" creationid="huanghaohang" creationdate="20180405T131637Z">
        <seg>&lt;s0&gt;//include specific method in any of the tests&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;A fully customizable approach to Dependency Resolution&lt;/e1&gt;&lt;/s0&gt;: Gradle provides you with the ability to customize resolution rules making dependency substitution easy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T160527Z" creationid="95" creationdate="20190202T160527Z">
        <seg>&lt;s0&gt;&lt;e1&gt;完全可自定义的依赖解析方法&lt;/e1&gt;&lt;/s0&gt;：Gradle 使你能够自定义使依赖替换变得简单的解析规则。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Fail&lt;/e1&gt;&lt;/s0&gt;: A version conflict results in a build failure. This strategy enforces that all version conflicts are resolved explicitly in the build script. See &lt;a2&gt;&lt;c3&gt;ResolutionStrategy&lt;/c3&gt;&lt;/a2&gt; for details on how to explicitly choose a particular version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T131202Z" creationid="95" creationdate="20190316T131202Z">
        <seg>&lt;s0&gt;&lt;e1&gt;Fail&lt;/e1&gt;&lt;/s0&gt;：版本冲突导致构建失败。这种策略强制在构建脚本中显示地解决所有版本冲突。有关如何显式选择特定版本的详细信息，请参阅&lt;a2&gt;&lt;c3&gt;ResolutionStrategy&lt;/c3&gt;&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Full Compatibility with Maven and Ivy&lt;/e1&gt;&lt;/s0&gt;: If you have defined dependencies in a Maven POM or an Ivy file, Gradle provide seamless integration with a range of popular build tools.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T160734Z" creationid="95" creationdate="20190202T160734Z">
        <seg>&lt;s0&gt;&lt;e1&gt;完全兼容 Maven 和 Ivy &lt;/e1&gt;&lt;/s0&gt;：如果你已经在 Maven POM 文件或 Ivy 文件中定义了依赖，Gradle 有提供一系列常用的构建工具来进行无缝集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Groovy&lt;/e1&gt;&lt;/s0&gt; build scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T140744Z" creationid="95" creationdate="20170721T140744Z">
        <seg>使用&lt;s0&gt;&lt;e1&gt;Groovy&lt;/e1&gt;&lt;/s0&gt; 语言的构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Integration with existing dependency management infrastructure&lt;/e1&gt;&lt;/s0&gt;: Gradle is compatible with both Maven and Ivy repositories. If you use Archiva, Nexus, or Artifactory, Gradle is 100% compatible with all repository formats.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T161041Z" creationid="95" creationdate="20190202T160750Z">
        <seg>&lt;s0&gt;&lt;e1&gt;与现有依赖管理基础结构的集成&lt;/e1&gt;&lt;/s0&gt;：Gradle兼容Maven和Ivy仓库。 如果你是使用Archiva， Nexus或Artifactory，Gradle与所有仓库格式100%兼容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;NOTE:&lt;/e1&gt;&lt;/s0&gt;In one project, we found a mystery, LDAP related jar in the classpath. No code referenced this jar and there was no connection to the project. No one could figure out what the jar was for, until it was removed from the build and the application suffered massive performance problem whenever it attempted to authenticate to LDAP. This mystery jar was a necessary transitive, fourth-level dependency that was easy to miss because no one had bothered to use managed transitive dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T221021Z" creationid="95" creationdate="20190315T221021Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注：&lt;/e1&gt;&lt;/s0&gt;在一个项目中，我们在类路径中找到了一个神秘的 LDAP 相关的 jar。 没有代码引用此JAR，并且该 jar 包也没有与项目有任何连接。 没人知道该 jar 的用途，直到它从构建中去除，并且应用程序在尝试向 LDAP 进行认证时遇到了严重的性能问题。 这个神秘的 jar 是一个必需传递的第四级依赖，很容易被忽略，因为没有人会费心去使用受管的传递依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Newest&lt;/e1&gt;&lt;/s0&gt;: The newest version of the dependency is used. This is Gradle's default strategy, and is often an appropriate choice as long as versions are backwards-compatible.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T131013Z" creationid="95" creationdate="20190316T130057Z">
        <seg>&lt;s0&gt;&lt;e1&gt;Newest&lt;/e1&gt;&lt;/s0&gt;：将使用最新版本的依赖。 这是Gradle的默认策略，只要版本都能向后兼容，通常是合适的选择。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/customPlugin/plugin&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123310Z" creationid="huanghaohang" creationdate="20190706T123310Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注意：&lt;/e1&gt;&lt;/s0&gt;此例子的代码可以在 Gradle 的二进制文件或源码里的 &lt;c2&gt;samples/customPlugin/plugin&lt;/c2&gt; 中看到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/groovy/quickstart&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T001840Z" creationid="huanghaohang" creationdate="20170909T001702Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注：&lt;/e1&gt;&lt;/s0&gt;本示例的代码可以在Gradle的二进制或源码发行包中的 &lt;c2&gt;samples/groovy/quickstart&lt;/c2&gt;里找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/java/multiproject&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154518Z" creationid="95" creationdate="20170731T154518Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注：&lt;/e1&gt;&lt;/s0&gt;本示例的代码可以在Gradle的二进制或源代码发行包中的 &lt;c2&gt;samples/java/multiproject&lt;/c2&gt;里找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/java/quickstart&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012606Z" creationid="95" creationdate="20170730T012606Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注：&lt;/e1&gt;&lt;/s0&gt;本示例的代码可以在Gradle的二进制或源代码发行包中的 &lt;c2&gt;samples/java/quickstart&lt;/c2&gt;里找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/multiProjectBuildSrc&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135533Z" creationid="huanghaohang" creationdate="20191201T135533Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注意：&lt;/e1&gt;&lt;/s0&gt; 此示例的代码可以在 Gradle 的二进制文件或源码中的 &lt;c2&gt;samples/multiProjectBuildSrc&lt;/c2&gt; 里找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/native-binaries/cunit&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090424Z" creationid="huanghaohang" creationdate="20190611T090424Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注意︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制分发包或源码分发包中的 &lt;c2&gt;samples/native-binaries/cunit&lt;/c2&gt; 内找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/testing/jacoco/application&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093822Z" creationid="huanghaohang" creationdate="20180715T093822Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注：&lt;/e1&gt; &lt;/s0&gt;此示例中的代码可以在 Gradle 的二进制分发包及源代码分发包中的 &lt;c2&gt;samples/testing/jacoco/application&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/addKrill/water&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155551Z" creationid="huanghaohang" creationdate="20190614T155551Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制及源码分发包的 &lt;c2&gt;samples/userguide/multiproject/firstExample/water&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/addTropical/water&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143722Z" creationid="huanghaohang" creationdate="20190615T143722Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制及源码分发包的 &lt;c2&gt;samples/userguide/multiproject/addTropical/water&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/dependencies/firstMessages/messages&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140252Z" creationid="huanghaohang" creationdate="20190616T140252Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 二进制和源码分发包的 &lt;c2&gt;samples/userguide/multiproject/dependencies/firstMessages/messages&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/dependencies/java&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160409Z" creationid="huanghaohang" creationdate="20190617T160409Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 二进制和源码分发包的 &lt;c2&gt;samples/userguide/multiproject/dependencies/java/messages&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/dependencies/messagesWithDependencies/messages&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141815Z" creationid="huanghaohang" creationdate="20190616T141815Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 二进制和源码分发包的 &lt;c2&gt;samples/userguide/multiproject/dependencies/messagesWithDependencies/messages&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/dependencies/webDist&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150857Z" creationid="huanghaohang" creationdate="20190617T150857Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 二进制和源码分发包的 &lt;c2&gt;samples/userguide/multiproject/dependencies/webDist/messages&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/firstExample/water&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154522Z" creationid="huanghaohang" creationdate="20190614T154522Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制及源码分发包的&lt;c2&gt;samples/userguide/multiproject/firstExample/water&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/spreadSpecifics/water&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143015Z" creationid="huanghaohang" creationdate="20190615T143015Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制及源码分发包的&lt;c2&gt;samples/userguide/multiproject/spreadSpecifics/water&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/multiproject/tropicalWithProperties/water&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145014Z" creationid="huanghaohang" creationdate="20190615T145014Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制及源码分发包的 &lt;c2&gt;samples/userguide/multiproject/tropicalWithProperties/water&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/userguide/tasks/incrementalTask&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T135015Z" creationid="huanghaohang" creationdate="20190706T135015Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注︰&lt;/e1&gt; &lt;/s0&gt;此示例的代码可以在 Gradle 的二进制及源码分发包的 &lt;c2&gt;samples/userguide/tasks/incrementalTask&lt;/c2&gt; 中找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Note:&lt;/e1&gt;&lt;/s0&gt; The code for this example can be found at &lt;c2&gt;samples/webApplication/quickstart&lt;/c2&gt; which is in both the binary and source distributions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004659Z" creationid="huanghaohang" creationdate="20170909T004659Z">
        <seg>&lt;s0&gt;&lt;e1&gt;注：&lt;/e1&gt;&lt;/s0&gt;本示例的代码可以在Gradle的二进制或源代码发行包中的 &lt;c2&gt;samples/webApplication/quickstart&lt;/c2&gt;里找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Support for custom dependency definitions.&lt;/e1&gt;&lt;/s0&gt;: Gradle's Module Dependencies give you the ability to describe the dependency hierarchy in the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T160204Z" creationid="95" creationdate="20190202T160204Z">
        <seg>&lt;s0&gt;&lt;e1&gt;对自定义依赖定义的支持&lt;/e1&gt;&lt;/s0&gt;：Gradle 的模块依赖使你能够描述构建脚本中的依赖层次结构。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Support for non-managed dependencies&lt;/e1&gt;&lt;/s0&gt;: If your dependencies are simply files in version control or a shared drive, Gradle provides powerful functionality to support this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T155938Z" creationid="95" creationdate="20190202T155938Z">
        <seg>&lt;s0&gt;&lt;e1&gt;对非管理依赖的支持&lt;/e1&gt;&lt;/s0&gt;：如果你的依赖只是版本控制下或共享驱动器中的文件，Gradle 也提供了强大的功能来支持这种情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;The Gradle daemon&lt;/e1&gt;&lt;/s0&gt; (sometimes referred as &lt;s2&gt;&lt;e3&gt;the build daemon&lt;/e3&gt;&lt;/s2&gt;) aims to improve the startup and execution time of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133319Z" creationid="huanghaohang" creationdate="20180108T133319Z">
        <seg>&lt;s0&gt; &lt;e1&gt;Gradle 守护进程&lt;/e1&gt;&lt;/s0&gt;（有时也称为&lt;s2&gt;&lt;e3&gt;构建守护进程&lt;/e3&gt;&lt;/s2&gt;） 旨在改善 Gradle 的启动和执行时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;e1&gt;Transitive dependency management&lt;/e1&gt;&lt;/s0&gt;: Gradle gives you full control of your project's dependency tree.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T155840Z" creationid="95" creationdate="20190202T155840Z">
        <seg>&lt;s0&gt;&lt;e1&gt;依赖管理传递&lt;/e1&gt;&lt;/s0&gt;：Gradle 使你可以完全控制项目的依赖树。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;echo&gt;&lt;/s0&gt;buildDir = ${buildDir}&lt;s1&gt;&lt;/echo&gt;&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094352Z" creationid="huanghaohang" creationdate="20180105T094352Z">
        <seg>&lt;s0&gt;&lt;echo&gt;&lt;/s0&gt;buildDir = ${buildDir}&lt;s1&gt;&lt;/echo&gt;&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;path&lt;/s0&gt; &lt;s1&gt;id&lt;/s1&gt;=&lt;s2&gt;"antPath"&lt;/s2&gt; &lt;s3&gt;location&lt;/s3&gt;=&lt;s4&gt;"libs"&lt;/s4&gt;&lt;s5&gt;/&gt;&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094737Z" creationid="huanghaohang" creationdate="20180105T094737Z">
        <seg>&lt;s0&gt;&lt;path&lt;/s0&gt; &lt;s1&gt;id&lt;/s1&gt;=&lt;s2&gt;"antPath"&lt;/s2&gt; &lt;s3&gt;location&lt;/s3&gt;=&lt;s4&gt;"libs"&lt;/s4&gt;&lt;s5&gt;/&gt;&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;path&lt;/s0&gt; &lt;s1&gt;refid&lt;/s1&gt;=&lt;s2&gt;"classpath"&lt;/s2&gt;&lt;s3&gt;/&gt;&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094700Z" creationid="huanghaohang" creationdate="20180105T094700Z">
        <seg>&lt;s0&gt;&lt;path&lt;/s0&gt; &lt;s1&gt;refid&lt;/s1&gt;=&lt;s2&gt;"classpath"&lt;/s2&gt;&lt;s3&gt;/&gt;&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;project&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084609Z" creationid="huanghaohang" creationdate="20180105T084609Z">
        <seg>&lt;s0&gt;&lt;project&gt;&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;&lt;property&lt;/s0&gt; &lt;s1&gt;name&lt;/s1&gt;=&lt;s2&gt;"antProp"&lt;/s2&gt; &lt;s3&gt;value&lt;/s3&gt;=&lt;s4&gt;"a property defined in an Ant build"&lt;/s4&gt;&lt;s5&gt;/&gt;&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094612Z" creationid="huanghaohang" creationdate="20180105T094612Z">
        <seg>&lt;s0&gt;&lt;property&lt;/s0&gt; &lt;s1&gt;name&lt;/s1&gt;=&lt;s2&gt;"antProp"&lt;/s2&gt; &lt;s3&gt;value&lt;/s3&gt;=&lt;s4&gt;"a property defined in an Ant build"&lt;/s4&gt;&lt;s5&gt;/&gt;&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;10&lt;/a1&gt;] &lt;/s0&gt;The TestNG documentation contains more details about test groups: &lt;a2&gt;http://testng.org/doc/documentation-main.html#test-groups&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113501Z" creationid="huanghaohang" creationdate="20180406T113501Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;10&lt;/a1&gt;] &lt;/s0&gt;TestNG 文档包含了有关测试组的更多详细信息：&lt;a2&gt;http://testng.org/doc/documentation-main.html#test-groups&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;11&lt;/a1&gt;] &lt;/s0&gt;We are using the same conventions as introduced by Russel Winder's Gant tool (&lt;a2&gt;http://gant.codehaus.org&lt;/a2&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T005112Z" creationid="huanghaohang" creationdate="20180407T005112Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;11&lt;/a1&gt;] &lt;/s0&gt;我们使用和 Russel Winder 的 Gant 工具引入的同样的约定（&lt;a2&gt;http://gant.codehaus.org&lt;/a2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;12&lt;/a1&gt;] &lt;/s0&gt;See &lt;a2&gt;Section 25.5, “Automatic configuration of scalaClasspath”&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141821Z" creationid="huanghaohang" creationdate="20180407T141821Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;12&lt;/a1&gt;]&lt;/s0&gt;参阅《&lt;a2&gt;第 25.5 节，“scalaClasspath 的自动配置”&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;13&lt;/a1&gt;] &lt;/s0&gt;The &lt;c2&gt;runtime&lt;/c2&gt; configuration extends the &lt;c3&gt;compile&lt;/c3&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143220Z" creationid="huanghaohang" creationdate="20180408T143220Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;13&lt;/a1&gt;]&lt;/s0&gt;&lt;c2&gt;runtime&lt;/c2&gt; 配置继承自 &lt;c3&gt;compile&lt;/c3&gt; 配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;14&lt;/a1&gt;] &lt;/s0&gt;Gradle supports partial multiproject builds (see &lt;a2&gt;Chapter 56, &lt;i3&gt;Multi-project Builds&lt;/i3&gt;&lt;/a2&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021209Z" creationid="huanghaohang" creationdate="20190606T021209Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;14&lt;/a1&gt;] &lt;/s0&gt;Gradle 支持部分多项目构建（参见&lt;a2&gt;第 56 章，《&lt;i3&gt;多项目构建&lt;/i3&gt;》&lt;/a2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;15&lt;/a1&gt;] &lt;/s0&gt; &lt;a2&gt;http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-relationships.html&lt;/a2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021223Z" creationid="huanghaohang" creationdate="20190606T021223Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;15&lt;/a1&gt;] &lt;/s0&gt; &lt;a2&gt;http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-relationships.html&lt;/a2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;16&lt;/a1&gt;] &lt;/s0&gt;At &lt;a2&gt;http://ant.apache.org/ivy/history/latest-milestone/concept.html&lt;/a2&gt; you can learn more about ivy patterns.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021301Z" creationid="huanghaohang" creationdate="20190606T021301Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;16&lt;/a1&gt;] &lt;/s0&gt;在 &lt;a2&gt;http://ant.apache.org/ivy/history/latest-milestone/concept.html&lt;/a2&gt;，你可以了解到更多有关 ivy 模式的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;17&lt;/a1&gt;] &lt;/s0&gt;If you want to shield your project from the downtimes of Maven Central things get more complicated. You probably want to set-up a repository proxy for this. In an enterprise environment this is rather common. For an open source project it looks like overkill.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021615Z" creationid="huanghaohang" creationdate="20190606T021615Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;17&lt;/a1&gt;] &lt;/s0&gt;如果你想在 Maven 中央仓库宕机时保护你的项目，事情会变得更复杂些。你可能想要为此设置一个仓库代理。在企业环境中，这种情况相当普遍。而对于开源项目，看起来就有些小题大做了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;18&lt;/a1&gt;] &lt;/s0&gt;To be exact, the Base plugin provides those tasks. This plugin is automatically applied if you use the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T090934Z" creationid="huanghaohang" creationdate="20190606T090841Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;18&lt;/a1&gt;] &lt;/s0&gt;确切地说，Base 插件提供了这些任务。这个插件会在你使用 Java 插件时自动地应用进来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;19&lt;/a1&gt;] &lt;/s0&gt;It is planned for a future release to provide out-of-the-box support for this</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091325Z" creationid="huanghaohang" creationdate="20190608T091325Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;19&lt;/a1&gt;] &lt;/s0&gt;已经计划在将来的发行版中为其提供开箱即用的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;1&lt;/a1&gt;] &lt;/s0&gt;At &lt;a2&gt;http://www.defmacro.org/ramblings/lisp.html&lt;/a2&gt; you find an interesting article comparing Ant, XML, Java and Lisp. It's funny that the 'if Java had that syntax' syntax in this article is actually the Groovy syntax.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072342Z" creationid="95" creationdate="20170723T072136Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;1&lt;/a1&gt;] &lt;/s0&gt;在 &lt;a2&gt;http://www.defmacro.org/ramblings/lisp.html&lt;/a2&gt; 上面，你可以找到一篇比较Ant，XML，Java和List的文章。很有趣的是，这篇文章中的“如果Java具有该语法”的语法实际上正是Groovy的语法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;20&lt;/a1&gt;] &lt;/s0&gt;Gradle supports partial multiproject builds (see &lt;a2&gt;Chapter 56, &lt;i3&gt;Multi-project Builds&lt;/i3&gt;&lt;/a2&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152830Z" creationid="huanghaohang" creationdate="20190613T152759Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;20&lt;/a1&gt;] &lt;/s0&gt;Gradle 支持部分多项目构建（参见《&lt;a2&gt;第五十六章，&lt;i3&gt;多项目构建&lt;/i3&gt;&lt;/a2&gt;》）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;21&lt;/a1&gt;] &lt;/s0&gt;The real use case we had, was using &lt;a2&gt;http://lucene.apache.org/solr&lt;/a2&gt;, where you need a separate war for each index you are accessing. That was one reason why we have created a distribution of webapps. The Resin servlet container allows us, to let such a distribution point to a base installation of the servlet container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153313Z" creationid="huanghaohang" creationdate="20190623T152925Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;21&lt;/a1&gt;] &lt;/s0&gt;我们的实际用例是使用 &lt;a2&gt;http://lucene.apache.org/solr&lt;/a2&gt;，在上面你访问的每个索引都需要一个单独的 war。这就是我们创建 webapps 分发包的原因之一。Resin servlet 容器允许我们让这样的分发点指向一个基本安装的 servlet 容器中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;22&lt;/a1&gt;] &lt;/s0&gt; &lt;c2&gt;services&lt;/c2&gt; is also a project, but we use it just as a container. It has no build script and gets nothing injected by another build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153433Z" creationid="huanghaohang" creationdate="20190623T153433Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;22&lt;/a1&gt;] &lt;/s0&gt;&lt;c2&gt;services&lt;/c2&gt; 也是一个项目，但我们只是把它用作一个容器。它没有构建脚本，并且其他构建脚本也没有向它注入内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;23&lt;/a1&gt;] &lt;/s0&gt;We do this here, as it makes the layout a bit easier. We usually put the project specific stuff into the build script of the respective projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153617Z" creationid="huanghaohang" creationdate="20190623T153617Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;23&lt;/a1&gt;] &lt;/s0&gt;我们在这里实现，是因为它使布局更容易。我们通常将项目的具体内容放在各自项目的构建脚本里。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;24&lt;/a1&gt;] &lt;/s0&gt;So we are well in the range of the &lt;a2&gt;7 plus 2 Rule &lt;/a2&gt; :)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153832Z" creationid="huanghaohang" creationdate="20190623T153832Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;24&lt;/a1&gt;] &lt;/s0&gt;因此在 &lt;a2&gt;7 plus 2 Rule &lt;/a2&gt; 的范围内我们做得很好:)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;25&lt;/a1&gt;] &lt;/s0&gt;Which might range from a single class to something very complex.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142720Z" creationid="huanghaohang" creationdate="20191202T142720Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;25&lt;/a1&gt;] &lt;/s0&gt;可能是从一个类到一些非常复杂的东西的范围。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;26&lt;/a1&gt;] &lt;/s0&gt;In fact, we think this is anyway the nicer solution. Only if your buildscript and Ant's optional task need the &lt;s2&gt;&lt;e3&gt;same&lt;/e3&gt;&lt;/s2&gt; library you would have to define it two times. In such a case it would be nice, if Ant's optional task would automatically pickup the classpath defined in the &lt;c4&gt;gradesettings&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142930Z" creationid="huanghaohang" creationdate="20191202T142930Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;26&lt;/a1&gt;] &lt;/s0&gt;实际上，我们认为这是更好的解决方案。仅当你的构建脚本和 Ant 的可选任务需要 &lt;s2&gt;&lt;e3&gt;相同的&lt;/e3&gt;&lt;/s2&gt; 库时，你才需要定义它两次。在这种情况下，如果 Ant 的可选任务能自动获取 &lt;c4&gt;gradesettings&lt;/c4&gt; 中定义的类路径，会相当不错。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;2&lt;/a1&gt;] &lt;/s0&gt;There are command line switches to change this behavior. See &lt;a2&gt;Appendix D, &lt;i3&gt;Gradle Command Line&lt;/i3&gt;&lt;/a2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T031034Z" creationid="95" creationdate="20170729T030917Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;2&lt;/a1&gt;] &lt;/s0&gt;有一些命令行开关可以改变这一行为，请参阅《&lt;a2&gt;附录 D， &lt;i3&gt;Gradle 命令行&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;3&lt;/a1&gt;] &lt;/s0&gt;We think this is confusing, and we are gradually teasing apart the two concepts in the Gradle DSL.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051835Z" creationid="huanghaohang" creationdate="20170908T051835Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;3&lt;/a1&gt;] &lt;/s0&gt;关于这点，我们认为会让人感到很困惑，因此我们正在逐渐梳理Gradle DSL中的这两个概念。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;4&lt;/a1&gt;] &lt;/s0&gt;We are working to make the syntax consistent for resolving from and publishing to Maven repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T052002Z" creationid="huanghaohang" creationdate="20170908T052002Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;4&lt;/a1&gt;] &lt;/s0&gt;我们正在努力统一从Maven仓库解析依赖以及向其发布的语法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;5&lt;/a1&gt;] &lt;/s0&gt;Any language element except for statement labels.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153533Z" creationid="huanghaohang" creationdate="20170914T153533Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;5&lt;/a1&gt;] &lt;/s0&gt;除语句标签之外的任何语言元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;6&lt;/a1&gt;] &lt;/s0&gt; &lt;s2&gt;&lt;e3&gt;Teamcity&lt;/e3&gt;&lt;/s2&gt; or &lt;s4&gt;&lt;e5&gt;Bamboo&lt;/e5&gt;&lt;/s4&gt; are for example CI servers which offer this functionality.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150653Z" creationid="huanghaohang" creationdate="20170918T150653Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;6&lt;/a1&gt;]&lt;/s0&gt; &lt;s2&gt; &lt;e3&gt;Teamcity&lt;/e3&gt;&lt;/s2&gt;或&lt;s4&gt;&lt;e5&gt;Bamboo&lt;/e5&gt;&lt;/s4&gt;就是作为提供这一功能的 CI 服务器的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;7&lt;/a1&gt;] &lt;/s0&gt;You might be wondering why there is neither an import for the &lt;c2&gt;StopExecutionException&lt;/c2&gt; nor do we access it via its fully qualified name. The reason is, that Gradle adds a set of default imports to your script. These imports are customizable (see &lt;a3&gt;Appendix E, &lt;i4&gt;Existing IDE Support and how to cope without it&lt;/i4&gt;&lt;/a3&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T050907Z" creationid="huanghaohang" creationdate="20170923T050907Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;7&lt;/a1&gt;]&lt;/s0&gt;你可能会想，为什么没有导入&lt;c2&gt;StopExecutionException&lt;/c2&gt;，我们也没有通过其完全限定名来访问它。原因是，Gradle会向你的脚本添加一些默认的导入。这些导入是可以自定义的（参见&lt;a3&gt;附录E，&lt;i4&gt;现有的IDE支持及没有支持时如何应对&lt;/i4&gt;&lt;/a3&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;8&lt;/a1&gt;] &lt;/s0&gt;In Groovy you can execute Strings. To learn more about executing external processes with Groovy have a look in 'Groovy in Action' 9.3.2 or at the Groovy wiki</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094943Z" creationid="huanghaohang" creationdate="20180105T094943Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;8&lt;/a1&gt;] &lt;/s0&gt;在 Groovy 中，你可以执行字符串。要了解有关使用 Groovy 执行外部进程的更多信息，请参阅《Groovy in Action》第 9.3.2 节，或者是参考 Groovy wiki。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;[&lt;a1&gt;9&lt;/a1&gt;] &lt;/s0&gt;The JUnit wiki contains a detailed description on how to work with JUnit categories: &lt;a2&gt;https://github.com/junit-team/junit/wiki/Categories&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113444Z" creationid="huanghaohang" creationdate="20180406T113444Z">
        <seg>&lt;s0&gt;[&lt;a1&gt;9&lt;/a1&gt;] &lt;/s0&gt;JUnit wiki 包含了有关如何使用 JUnit 类别的详细说明： &lt;a2&gt;https://github.com/junit-team/junit/wiki/Categories&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingPluginTest {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130850Z" creationid="huanghaohang" creationdate="20190728T130850Z">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingPluginTest {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T154115Z" creationid="huanghaohang" creationdate="20190704T154115Z">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingTaskTest {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124009Z" creationid="huanghaohang" creationdate="20190706T124009Z">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingTaskTest {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingToFileTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151153Z" creationid="huanghaohang" creationdate="20190727T151153Z">
        <seg>&lt;s0&gt;class&lt;/s0&gt; GreetingToFileTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;class&lt;/s0&gt; IncrementalReverseTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134812Z" creationid="huanghaohang" creationdate="20190706T134812Z">
        <seg>&lt;s0&gt;class&lt;/s0&gt; IncrementalReverseTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.group == &lt;s1&gt;'org.gradle'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015341Z" creationid="huanghaohang" creationdate="20190605T015341Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.group == &lt;s1&gt;'org.gradle'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.group == &lt;s1&gt;'org.software'&lt;/s1&gt; &amp;&amp; details.requested.name == &lt;s2&gt;'some-library'&lt;/s2&gt; &amp;&amp; details.requested.version == &lt;s3&gt;'1.2'&lt;/s3&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024459Z" creationid="huanghaohang" creationdate="20190605T024459Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.group == &lt;s1&gt;'org.software'&lt;/s1&gt; &amp;&amp; details.requested.name == &lt;s2&gt;'some-library'&lt;/s2&gt; &amp;&amp; details.requested.version == &lt;s3&gt;'1.2'&lt;/s3&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.name == &lt;s1&gt;'groovy-all'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025002Z" creationid="huanghaohang" creationdate="20190605T025002Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.name == &lt;s1&gt;'groovy-all'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.version == &lt;s1&gt;'default'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022639Z" creationid="huanghaohang" creationdate="20190605T022639Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (details.requested.version == &lt;s1&gt;'default'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (flavor == flavors.french) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052717Z" creationid="huanghaohang" creationdate="20190610T052717Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (flavor == flavors.french) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (project.hasTests) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145905Z" creationid="huanghaohang" creationdate="20190613T145905Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (project.hasTests) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (projectState.failure) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150829Z" creationid="huanghaohang" creationdate="20190613T150829Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (projectState.failure) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (toolChain in Gcc &amp;&amp; buildType == buildTypes.debug) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035731Z" creationid="huanghaohang" creationdate="20190610T035731Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (toolChain in Gcc &amp;&amp; buildType == buildTypes.debug) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012143Z" creationid="huanghaohang" creationdate="20190610T012143Z">
        <seg>&lt;s0&gt;if&lt;/s0&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.apache.commons.codec.binary.Base6&lt;s1&gt;4&lt;/s1&gt;

buildscript {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141052Z" creationid="huanghaohang" creationdate="20191202T141052Z">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.apache.commons.codec.binary.Base6&lt;s1&gt;4&lt;/s1&gt;

buildscript {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.apache.commons.math.fraction.Fraction

initscript {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151032Z" creationid="huanghaohang" creationdate="20191206T151032Z">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.apache.commons.math.fraction.Fraction

initscript {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.apache.tools.ant.filters.FixCrLfFilter
&lt;s1&gt;import&lt;/s1&gt; org.apache.tools.ant.filters.ReplaceTokens

task filter(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060338Z" creationid="huanghaohang" creationdate="20171126T060338Z">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.apache.tools.ant.filters.FixCrLfFilter
&lt;s1&gt;import&lt;/s1&gt; org.apache.tools.ant.filters.ReplaceTokens

task filter(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.slf4j.Logger
&lt;s1&gt;import&lt;/s1&gt; org.slf4j.LoggerFactory

Logger slf4jLogger = LoggerFactory.getLogger(&lt;s2&gt;'some-logger'&lt;/s2&gt;)
slf4jLogger.info(&lt;s3&gt;'An info log message logged using SLF4j'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T024345Z" creationid="huanghaohang" creationdate="20180107T024345Z">
        <seg>&lt;s0&gt;import&lt;/s0&gt; org.slf4j.Logger
&lt;s1&gt;import&lt;/s1&gt; org.slf4j.LoggerFactory

Logger slf4jLogger = LoggerFactory.getLogger(&lt;s2&gt;'some-logger'&lt;/s2&gt;)
slf4jLogger.info(&lt;s3&gt;'An info log message logged using SLF4j'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;package&lt;/s0&gt; org.gradle

&lt;s1&gt;import&lt;/s1&gt; org.gradle.api.DefaultTask
&lt;s2&gt;import&lt;/s2&gt; org.gradle.api.tasks.TaskAction

&lt;s3&gt;class&lt;/s3&gt; GreetingTask &lt;s4&gt;extends&lt;/s4&gt; DefaultTask {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123357Z" creationid="huanghaohang" creationdate="20190706T123357Z">
        <seg>&lt;s0&gt;package&lt;/s0&gt; org.gradle

&lt;s1&gt;import&lt;/s1&gt; org.gradle.api.DefaultTask
&lt;s2&gt;import&lt;/s2&gt; org.gradle.api.tasks.TaskAction

&lt;s3&gt;class&lt;/s3&gt; GreetingTask &lt;s4&gt;extends&lt;/s4&gt; DefaultTask {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s0&gt;throw&lt;/s0&gt; &lt;s1&gt;new&lt;/s1&gt; RuntimeException(&lt;s2&gt;'broken'&lt;/s2&gt;)
}

gradle.taskGraph.beforeTask { Task task -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152622Z" creationid="huanghaohang" creationdate="20190613T152622Z">
        <seg>&lt;s0&gt;throw&lt;/s0&gt; &lt;s1&gt;new&lt;/s1&gt; RuntimeException(&lt;s2&gt;'broken'&lt;/s2&gt;)
}

gradle.taskGraph.beforeTask { Task task -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s10&gt;// Use a closure to filter each line&lt;/s10&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060346Z" creationid="huanghaohang" creationdate="20171126T060346Z">
        <seg>&lt;s10&gt;// Use a closure to filter each line&lt;/s10&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s11&gt;"[$line]"&lt;/s11&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060348Z" creationid="huanghaohang" creationdate="20171126T060348Z">
        <seg>&lt;s11&gt;"[$line]"&lt;/s11&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s11&gt;// Use the contents of each zip file in the src dir&lt;/s11&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134054Z" creationid="huanghaohang" creationdate="20171002T134054Z">
        <seg>&lt;s11&gt;// Use the contents of each zip file in the src dir&lt;/s11&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s11&gt;// add the enterprise repository&lt;/s11&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151222Z" creationid="huanghaohang" creationdate="20191206T151222Z">
        <seg>&lt;s11&gt;// add the enterprise repository&lt;/s11&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s12&gt;if&lt;/s12&gt; (result.failure != null) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144034Z" creationid="huanghaohang" creationdate="20180107T144034Z">
        <seg>&lt;s12&gt;if&lt;/s12&gt; (result.failure != null) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s13&gt;// also modify the generated deployment descriptor accordingly&lt;/s13&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142957Z" creationid="huanghaohang" creationdate="20180416T142957Z">
        <seg>&lt;s13&gt;// also modify the generated deployment descriptor accordingly&lt;/s13&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;"commons-cli:commons-cli:1.0@jar"&lt;/s1&gt;,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140940Z" creationid="huanghaohang" creationdate="20190602T140940Z">
        <seg>&lt;s1&gt;"commons-cli:commons-cli:1.0@jar"&lt;/s1&gt;,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;// Disable the test report for the individual test task&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T044001Z" creationid="huanghaohang" creationdate="20180406T044001Z">
        <seg>&lt;s1&gt;// Disable the test report for the individual test task&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;// Here you would put arbitrary conditions in real life. But we use this as an integration test, so we want defined behavior.&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084835Z" creationid="huanghaohang" creationdate="20170922T084835Z">
        <seg>&lt;s1&gt;// Here you would put arbitrary conditions in real life. But we use this as an integration test, so we want defined behavior.&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;// installDir "C:/Apps/Microsoft Visual Studio 10.0"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084913Z" creationid="huanghaohang" creationdate="20190610T084913Z">
        <seg>&lt;s1&gt;// installDir "C:/Apps/Microsoft Visual Studio 10.0"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;&lt;target&lt;/s1&gt; &lt;s2&gt;name&lt;/s2&gt;=&lt;s3&gt;"hello"&lt;/s3&gt; &lt;s4&gt;depends&lt;/s4&gt;=&lt;s5&gt;"intro"&lt;/s5&gt;&lt;s6&gt;&gt;&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084838Z" creationid="huanghaohang" creationdate="20180105T084838Z">
        <seg>&lt;s1&gt;&lt;target&lt;/s1&gt; &lt;s2&gt;name&lt;/s2&gt;=&lt;s3&gt;"hello"&lt;/s3&gt; &lt;s4&gt;depends&lt;/s4&gt;=&lt;s5&gt;"intro"&lt;/s5&gt;&lt;s6&gt;&gt;&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;&lt;target&lt;/s1&gt; &lt;s2&gt;name&lt;/s2&gt;=&lt;s3&gt;"hello"&lt;/s3&gt;&lt;s4&gt;&gt;&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084610Z" creationid="huanghaohang" creationdate="20180105T084610Z">
        <seg>&lt;s1&gt;&lt;target&lt;/s1&gt; &lt;s2&gt;name&lt;/s2&gt;=&lt;s3&gt;"hello"&lt;/s3&gt;&lt;s4&gt;&gt;&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;@Test&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124010Z" creationid="huanghaohang" creationdate="20190706T124010Z">
        <seg>&lt;s1&gt;@Test&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (details.id.group == &lt;s2&gt;"air.birds"&lt;/s2&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041009Z" creationid="huanghaohang" creationdate="20190605T041009Z">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (details.id.group == &lt;s2&gt;"air.birds"&lt;/s2&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (file.isFile()) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153800Z" creationid="95" creationdate="20170728T153800Z">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (file.isFile()) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (taskName.startsWith(&lt;s2&gt;"ping"&lt;/s2&gt;)) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011925Z" creationid="huanghaohang" creationdate="20170923T011925Z">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (taskName.startsWith(&lt;s2&gt;"ping"&lt;/s2&gt;)) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012012Z" creationid="huanghaohang" creationdate="20190610T012012Z">
        <seg>&lt;s1&gt;if&lt;/s1&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;new&lt;/s1&gt; File(docs, &lt;s2&gt;"readme.txt"&lt;/s2&gt;).write(&lt;s3&gt;"Read me!"&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140542Z" creationid="95" creationdate="20190131T140542Z">
        <seg>&lt;s1&gt;new&lt;/s1&gt; File(docs, &lt;s2&gt;"readme.txt"&lt;/s2&gt;).write(&lt;s3&gt;"Read me!"&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s1&gt;throw&lt;/s1&gt; &lt;s2&gt;new&lt;/s2&gt; RuntimeException()
}
task taskY &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044134Z" creationid="huanghaohang" creationdate="20170923T044134Z">
        <seg>&lt;s1&gt;throw&lt;/s1&gt; &lt;s2&gt;new&lt;/s2&gt; RuntimeException()
}
task taskY &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;"org.apache.ant:ant:1.9.3@jar"&lt;/s2&gt;]
List hibernate = [&lt;s3&gt;'org.hibernate:hibernate:3.0.5@jar'&lt;/s3&gt;, &lt;s4&gt;'somegroup:someorg:1.0@jar'&lt;/s4&gt;]
dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140940Z" creationid="huanghaohang" creationdate="20190602T140940Z">
        <seg>&lt;s2&gt;"org.apache.ant:ant:1.9.3@jar"&lt;/s2&gt;]
List hibernate = [&lt;s3&gt;'org.hibernate:hibernate:3.0.5@jar'&lt;/s3&gt;, &lt;s4&gt;'somegroup:someorg:1.0@jar'&lt;/s4&gt;]
dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Apply the script&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150034Z" creationid="huanghaohang" creationdate="20170918T150034Z">
        <seg>&lt;s2&gt;// Apply the script&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Copy a single file&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075017Z" creationid="huanghaohang" creationdate="20171015T075017Z">
        <seg>&lt;s2&gt;// Copy a single file&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Define a method using a closure as the method body&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132524Z" creationid="huanghaohang" creationdate="20191201T132524Z">
        <seg>&lt;s2&gt;// Define a method using a closure as the method body&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Define toolchain-specific compiler and linker options&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053255Z" creationid="huanghaohang" creationdate="20190609T053255Z">
        <seg>&lt;s2&gt;// Define toolchain-specific compiler and linker options&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023021Z" creationid="huanghaohang" creationdate="20190610T023021Z">
        <seg>&lt;s2&gt;// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Look for artifacts here if not found at the above location&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033845Z" creationid="huanghaohang" creationdate="20190603T033845Z">
        <seg>&lt;s2&gt;// Look for artifacts here if not found at the above location&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Uncomment to use a GCC install that is not in the PATH&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084915Z" creationid="huanghaohang" creationdate="20190610T084915Z">
        <seg>&lt;s2&gt;// Uncomment to use a GCC install that is not in the PATH&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Use a closure to map the file name&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060237Z" creationid="huanghaohang" creationdate="20171126T060237Z">
        <seg>&lt;s2&gt;// Use a closure to map the file name&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// Use inherited method&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145012Z" creationid="huanghaohang" creationdate="20190817T145012Z">
        <seg>&lt;s2&gt;// Use inherited method&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// do something&lt;/s2&gt;
}
task compile(dependsOn: &lt;s3&gt;'resources'&lt;/s3&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132407Z" creationid="huanghaohang" creationdate="20170917T132407Z">
        <seg>&lt;s2&gt;// do something&lt;/s2&gt;
}
task compile(dependsOn: &lt;s3&gt;'resources'&lt;/s3&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;// non-String values are automatically converted to Strings&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135438Z" creationid="huanghaohang" creationdate="20180816T135438Z">
        <seg>&lt;s2&gt;// non-String values are automatically converted to Strings&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;//following dependencies will become the ear modules and placed in the ear root&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142952Z" creationid="huanghaohang" creationdate="20180416T142952Z">
        <seg>&lt;s2&gt;//following dependencies will become the ear modules and placed in the ear root&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;//include all tests from package&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131639Z" creationid="huanghaohang" creationdate="20180405T131639Z">
        <seg>&lt;s2&gt;//include all tests from package&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;//prefer 'groovy' over 'groovy-all':&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025003Z" creationid="huanghaohang" creationdate="20190605T025003Z">
        <seg>&lt;s2&gt;//prefer 'groovy' over 'groovy-all':&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;//some custom logic that resolves the default version into a specific version&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022642Z" creationid="huanghaohang" creationdate="20190605T022642Z">
        <seg>&lt;s2&gt;//some custom logic that resolves the default version into a specific version&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;@InputDirectory&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134812Z" creationid="huanghaohang" creationdate="20190706T134812Z">
        <seg>&lt;s2&gt;@InputDirectory&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;@TaskAction&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142810Z" creationid="huanghaohang" creationdate="20190705T142810Z">
        <seg>&lt;s2&gt;@TaskAction&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (flavor == flavors.failing) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T061718Z" creationid="huanghaohang" creationdate="20190611T061718Z">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (flavor == flavors.failing) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (project.arctic) { doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145020Z" creationid="huanghaohang" creationdate="20190615T145020Z">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (project.arctic) { doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (toolChain in VisualCpp &amp;&amp; buildType == buildTypes.debug) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035732Z" creationid="huanghaohang" creationdate="20190610T035732Z">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (toolChain in VisualCpp &amp;&amp; buildType == buildTypes.debug) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (true) { &lt;s3&gt;throw&lt;/s3&gt; &lt;s4&gt;new&lt;/s4&gt; StopExecutionException() }
}
task myTask(dependsOn: &lt;s5&gt;'compile'&lt;/s5&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084836Z" creationid="huanghaohang" creationdate="20170922T084836Z">
        <seg>&lt;s2&gt;if&lt;/s2&gt; (true) { &lt;s3&gt;throw&lt;/s3&gt; &lt;s4&gt;new&lt;/s4&gt; StopExecutionException() }
}
task myTask(dependsOn: &lt;s5&gt;'compile'&lt;/s5&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;private&lt;/s2&gt; &lt;s3&gt;static&lt;/s3&gt; String ENTERPRISE_REPOSITORY_URL = &lt;s4&gt;"http://repo.gradle.org/gradle/repo"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151215Z" creationid="huanghaohang" creationdate="20191206T151215Z">
        <seg>&lt;s2&gt;private&lt;/s2&gt; &lt;s3&gt;static&lt;/s3&gt; String ENTERPRISE_REPOSITORY_URL = &lt;s4&gt;"http://repo.gradle.org/gradle/repo"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;public&lt;/s2&gt; &lt;s3&gt;void&lt;/s3&gt; canAddTaskToProject() {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124011Z" creationid="huanghaohang" creationdate="20190706T124011Z">
        <seg>&lt;s2&gt;public&lt;/s2&gt; &lt;s3&gt;void&lt;/s3&gt; canAddTaskToProject() {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;public&lt;/s2&gt; &lt;s3&gt;void&lt;/s3&gt; greeterPluginAddsGreetingTaskToProject() {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130851Z" creationid="huanghaohang" creationdate="20190728T130851Z">
        <seg>&lt;s2&gt;public&lt;/s2&gt; &lt;s3&gt;void&lt;/s3&gt; greeterPluginAddsGreetingTaskToProject() {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s2&gt;void&lt;/s2&gt; apply(Project project) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150922Z" creationid="huanghaohang" creationdate="20190719T150922Z">
        <seg>&lt;s2&gt;void&lt;/s2&gt; apply(Project project) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;"1.0"&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022643Z" creationid="huanghaohang" creationdate="20190605T022643Z">
        <seg>&lt;s3&gt;"1.0"&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;'org.mycomp.package1'&lt;/s3&gt;,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033557Z" creationid="huanghaohang" creationdate="20181203T033557Z">
        <seg>&lt;s3&gt;'org.mycomp.package1'&lt;/s3&gt;,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;// Add a source directory using a File object&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134316Z" creationid="huanghaohang" creationdate="20171002T134316Z">
        <seg>&lt;s3&gt;// Add a source directory using a File object&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;// Copy the output of copyTask&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124928Z" creationid="huanghaohang" creationdate="20171015T124928Z">
        <seg>&lt;s3&gt;// Copy the output of copyTask&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;// Define a task&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132526Z" creationid="huanghaohang" creationdate="20191201T132526Z">
        <seg>&lt;s3&gt;// Define a task&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;// Include the results from the `test` task in all subprojects&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T044005Z" creationid="huanghaohang" creationdate="20180406T044005Z">
        <seg>&lt;s3&gt;// Include the results from the `test` task in all subprojects&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;// path "/usr/bin/gcc"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084915Z" creationid="huanghaohang" creationdate="20190610T084915Z">
        <seg>&lt;s3&gt;// path "/usr/bin/gcc"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;@OutputDirectory&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134814Z" creationid="huanghaohang" creationdate="20190706T134814Z">
        <seg>&lt;s3&gt;@OutputDirectory&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;if&lt;/s3&gt; (taskGraph.hasTask(release)) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025306Z" creationid="95" creationdate="20170729T025306Z">
        <seg>&lt;s3&gt;if&lt;/s3&gt; (taskGraph.hasTask(release)) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;if&lt;/s3&gt; (toolChain in Gcc) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053256Z" creationid="huanghaohang" creationdate="20190609T053256Z">
        <seg>&lt;s3&gt;if&lt;/s3&gt; (toolChain in Gcc) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;if&lt;/s3&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023023Z" creationid="huanghaohang" creationdate="20190610T023023Z">
        <seg>&lt;s3&gt;if&lt;/s3&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;return&lt;/s3&gt; project.file(srcDirName)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145008Z" creationid="huanghaohang" creationdate="20190817T145008Z">
        <seg>&lt;s3&gt;return&lt;/s3&gt; project.file(srcDirName)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s3&gt;void&lt;/s3&gt; apply(Project project) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155821Z" creationid="huanghaohang" creationdate="20190719T155821Z">
        <seg>&lt;s3&gt;void&lt;/s3&gt; apply(Project project) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;'org.mycomp.package2'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033558Z" creationid="huanghaohang" creationdate="20181203T033558Z">
        <seg>&lt;s4&gt;'org.mycomp.package2'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;// Add the 'greeting' extension object&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155822Z" creationid="huanghaohang" creationdate="20190719T155822Z">
        <seg>&lt;s4&gt;// Add the 'greeting' extension object&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;// Copy the output of a task&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075020Z" creationid="huanghaohang" creationdate="20171015T075020Z">
        <seg>&lt;s4&gt;// Copy the output of a task&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;// Substitute property references in files&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060342Z" creationid="huanghaohang" creationdate="20171126T060342Z">
        <seg>&lt;s4&gt;// Substitute property references in files&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;//following dependencies will become ear libs and placed in a dir configured via libDirName property&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142954Z" creationid="huanghaohang" creationdate="20180416T142954Z">
        <seg>&lt;s4&gt;//following dependencies will become ear libs and placed in a dir configured via libDirName property&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;//include all integration tests&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131640Z" creationid="huanghaohang" creationdate="20180405T131640Z">
        <seg>&lt;s4&gt;//include all integration tests&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;//prefer different version which contains some necessary fixes&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024505Z" creationid="huanghaohang" creationdate="20190605T024505Z">
        <seg>&lt;s4&gt;//prefer different version which contains some necessary fixes&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;@Input&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134815Z" creationid="huanghaohang" creationdate="20190706T134815Z">
        <seg>&lt;s4&gt;@Input&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (classesDir.isDirectory()) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132408Z" creationid="huanghaohang" creationdate="20170917T132408Z">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (classesDir.isDirectory()) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (details.baseValue != details.mergeValue) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111943Z" creationid="huanghaohang" creationdate="20180406T111943Z">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (details.baseValue != details.mergeValue) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (details.requested.name == &lt;s5&gt;'log4j'&lt;/s5&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025004Z" creationid="huanghaohang" creationdate="20190605T025004Z">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (details.requested.name == &lt;s5&gt;'log4j'&lt;/s5&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (state.failure) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152623Z" creationid="huanghaohang" creationdate="20190613T152623Z">
        <seg>&lt;s4&gt;if&lt;/s4&gt; (state.failure) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;public&lt;/s4&gt; &lt;s5&gt;void&lt;/s5&gt; beforeExecute(Task task) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144027Z" creationid="huanghaohang" creationdate="20180107T144027Z">
        <seg>&lt;s4&gt;public&lt;/s4&gt; &lt;s5&gt;void&lt;/s5&gt; beforeExecute(Task task) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s4&gt;void&lt;/s4&gt; apply(Project project) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151631Z" creationid="huanghaohang" creationdate="20190726T151631Z">
        <seg>&lt;s4&gt;void&lt;/s4&gt; apply(Project project) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;// Add some source directories using a closure&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134318Z" creationid="huanghaohang" creationdate="20171002T134318Z">
        <seg>&lt;s5&gt;// Add some source directories using a closure&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;// Copy the output of a task using Task outputs explicitly.&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075024Z" creationid="huanghaohang" creationdate="20171015T075024Z">
        <seg>&lt;s5&gt;// Copy the output of a task using Task outputs explicitly.&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;// Use a regular expression to map the file name&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060241Z" creationid="huanghaohang" creationdate="20171126T060241Z">
        <seg>&lt;s5&gt;// Use a regular expression to map the file name&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;&lt;echo&gt;&lt;/s5&gt;Hello, from Ant&lt;s6&gt;&lt;/echo&gt;&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084611Z" creationid="huanghaohang" creationdate="20180105T084611Z">
        <seg>&lt;s5&gt;&lt;echo&gt;&lt;/s5&gt;Hello, from Ant&lt;s6&gt;&lt;/echo&gt;&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;@TaskAction&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134816Z" creationid="huanghaohang" creationdate="20190706T134816Z">
        <seg>&lt;s5&gt;@TaskAction&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;if&lt;/s5&gt; (details.key == &lt;s6&gt;'foo'&lt;/s6&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111944Z" creationid="huanghaohang" creationdate="20180406T111944Z">
        <seg>&lt;s5&gt;if&lt;/s5&gt; (details.key == &lt;s6&gt;'foo'&lt;/s6&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s5&gt;void&lt;/s5&gt; apply(Gradle gradle) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151216Z" creationid="huanghaohang" creationdate="20191206T151216Z">
        <seg>&lt;s5&gt;void&lt;/s5&gt; apply(Gradle gradle) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;// Add a task that uses the configuration&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155824Z" creationid="huanghaohang" creationdate="20190719T155824Z">
        <seg>&lt;s6&gt;// Add a task that uses the configuration&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;// Copy the contents of a Zip file&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075027Z" creationid="huanghaohang" creationdate="20171015T075027Z">
        <seg>&lt;s6&gt;// Copy the contents of a Zip file&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;// ONLY USE ENTERPRISE REPO FOR DEPENDENCIES&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151217Z" creationid="huanghaohang" creationdate="20191206T151217Z">
        <seg>&lt;s6&gt;// ONLY USE ENTERPRISE REPO FOR DEPENDENCIES&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;// do something&lt;/s6&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132410Z" creationid="huanghaohang" creationdate="20170917T132410Z">
        <seg>&lt;s6&gt;// do something&lt;/s6&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;//prefer 'log4j-over-slf4j' over 'log4j', with fixed version:&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025005Z" creationid="huanghaohang" creationdate="20190605T025005Z">
        <seg>&lt;s6&gt;//prefer 'log4j-over-slf4j' over 'log4j', with fixed version:&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;@TaskAction&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122513Z" creationid="huanghaohang" creationdate="20190706T122513Z">
        <seg>&lt;s6&gt;@TaskAction&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;else&lt;/s6&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152625Z" creationid="huanghaohang" creationdate="20190613T152625Z">
        <seg>&lt;s6&gt;else&lt;/s6&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;if&lt;/s6&gt; (flavor == flavors.failing) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090229Z" creationid="huanghaohang" creationdate="20190611T090229Z">
        <seg>&lt;s6&gt;if&lt;/s6&gt; (flavor == flavors.failing) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s6&gt;void&lt;/s6&gt; execute(IncrementalTaskInputs inputs) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134817Z" creationid="huanghaohang" creationdate="20190706T134817Z">
        <seg>&lt;s6&gt;void&lt;/s6&gt; execute(IncrementalTaskInputs inputs) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s7&gt;// Use some of the filters provided by Ant&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060344Z" creationid="huanghaohang" creationdate="20171126T060344Z">
        <seg>&lt;s7&gt;// Use some of the filters provided by Ant&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s7&gt;//remove all repositories not pointing to the enterprise repository url&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151219Z" creationid="huanghaohang" creationdate="20191206T151219Z">
        <seg>&lt;s7&gt;//remove all repositories not pointing to the enterprise repository url&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s7&gt;&lt;/target&gt;&lt;/s7&gt;
&lt;s8&gt;&lt;/project&gt;&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084612Z" creationid="huanghaohang" creationdate="20180105T084612Z">
        <seg>&lt;s7&gt;&lt;/target&gt;&lt;/s7&gt;
&lt;s8&gt;&lt;/project&gt;&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s7&gt;&lt;echo&gt;&lt;/s7&gt;Hello, from Ant&lt;s8&gt;&lt;/echo&gt;&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084840Z" creationid="huanghaohang" creationdate="20180105T084840Z">
        <seg>&lt;s7&gt;&lt;echo&gt;&lt;/s7&gt;Hello, from Ant&lt;s8&gt;&lt;/echo&gt;&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s7&gt;final&lt;/s7&gt; String name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131003Z" creationid="huanghaohang" creationdate="20190728T131003Z">
        <seg>&lt;s7&gt;final&lt;/s7&gt; String name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s7&gt;public&lt;/s7&gt; &lt;s8&gt;void&lt;/s8&gt; afterExecute(Task task, TaskState state) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144029Z" creationid="huanghaohang" creationdate="20180107T144029Z">
        <seg>&lt;s7&gt;public&lt;/s7&gt; &lt;s8&gt;void&lt;/s8&gt; afterExecute(Task task, TaskState state) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s8&gt;// Determine the destination directory later&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075029Z" creationid="huanghaohang" creationdate="20171015T075029Z">
        <seg>&lt;s8&gt;// Determine the destination directory later&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s8&gt;if&lt;/s8&gt; (!(repo &lt;s9&gt;instanceof&lt;/s9&gt; MavenArtifactRepository) || repo.url.toString() != ENTERPRISE_REPOSITORY_URL) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151220Z" creationid="huanghaohang" creationdate="20191206T151220Z">
        <seg>&lt;s8&gt;if&lt;/s8&gt; (!(repo &lt;s9&gt;instanceof&lt;/s9&gt; MavenArtifactRepository) || repo.url.toString() != ENTERPRISE_REPOSITORY_URL) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s8&gt;if&lt;/s8&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053258Z" creationid="huanghaohang" creationdate="20190609T053258Z">
        <seg>&lt;s8&gt;if&lt;/s8&gt; (toolChain in VisualCpp) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s8&gt;this&lt;/s8&gt;.name = name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131008Z" creationid="huanghaohang" creationdate="20190728T131008Z">
        <seg>&lt;s8&gt;this&lt;/s8&gt;.name = name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s9&gt;&lt;/target&gt;&lt;/s9&gt;
&lt;s10&gt;&lt;/project&gt;&lt;/s10&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084841Z" creationid="huanghaohang" creationdate="20180105T084841Z">
        <seg>&lt;s9&gt;&lt;/target&gt;&lt;/s9&gt;
&lt;s10&gt;&lt;/project&gt;&lt;/s10&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;s9&gt;public&lt;/s9&gt; &lt;s10&gt;void&lt;/s10&gt; buildFinished(BuildResult result) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144031Z" creationid="huanghaohang" creationdate="20180107T144031Z">
        <seg>&lt;s9&gt;public&lt;/s9&gt; &lt;s10&gt;void&lt;/s10&gt; buildFinished(BuildResult result) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle --init-script init.gradle -q doNothing
2 / 5</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151121Z" creationid="huanghaohang" creationdate="20191206T151121Z">
        <seg>&gt; gradle --init-script init.gradle -q doNothing
2 / 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle --init-script init.gradle -q showRepos
All repos:
[MavenLocal, MavenRepo]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143651Z" creationid="huanghaohang" creationdate="20191206T143651Z">
        <seg>&gt; gradle --init-script init.gradle -q showRepos
All repos:
[MavenLocal, MavenRepo]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -I init.gradle build
[compile]
compiling source

[testCompile]
compiling test source

[test]
running unit tests

[build]

build completed</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144041Z" creationid="huanghaohang" creationdate="20180107T144041Z">
        <seg>&gt; gradle -I init.gradle build
[compile]
compiling source

[testCompile]
compiling test source

[test]
running unit tests

[build]

build completed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -a :api:build
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141017Z" creationid="huanghaohang" creationdate="20190622T141017Z">
        <seg>&gt; gradle -a :api:build
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q
Default Cleaning!
Default Running!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023928Z" creationid="95" creationdate="20170729T023928Z">
        <seg>&gt; gradle -q
Default Cleaning!
Default Running!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q -I init.gradle showRepositories
repository: STANDARD_ENTERPRISE_REPO ('http://repo.gradle.org/gradle/repo')</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151248Z" creationid="huanghaohang" creationdate="20191206T151248Z">
        <seg>&gt; gradle -q -I init.gradle showRepositories
repository: STANDARD_ENTERPRISE_REPO ('http://repo.gradle.org/gradle/repo')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps
commandLineProjectPropValue
gradlePropertiesValue
systemPropertyValue
envPropertyValue
systemValue</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135037Z" creationid="huanghaohang" creationdate="20170917T135037Z">
        <seg>&gt; gradle -q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps
commandLineProjectPropValue
gradlePropertiesValue
systemPropertyValue
envPropertyValue
systemValue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q -PtaskInputProperty=changed incrementalReverse
ALL inputs considered out of date
out of date: 1.txt
out of date: 2.txt
out of date: 3.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143256Z" creationid="huanghaohang" creationdate="20190707T143256Z">
        <seg>&gt; gradle -q -PtaskInputProperty=changed incrementalReverse
ALL inputs considered out of date
out of date: 1.txt
out of date: 2.txt
out of date: 3.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q -b subdir/myproject.gradle hello
using build file 'myproject.gradle' in 'subdir'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114026Z" creationid="huanghaohang" creationdate="20170909T114026Z">
        <seg>&gt; gradle -q -b subdir/myproject.gradle hello
using build file 'myproject.gradle' in 'subdir'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q -p subdir hello
using build file 'build.gradle' in 'subdir'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114308Z" creationid="huanghaohang" creationdate="20170909T114308Z">
        <seg>&gt; gradle -q -p subdir hello
using build file 'build.gradle' in 'subdir'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q :hello :krill:hello hello
I'm water
I'm krill
- I depend on water
- The weight of my species in summer is twice as heavy as all human beings.
- I love to spend time in the arctic waters.
I'm tropicalFish
- I depend on water</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T111248Z" creationid="huanghaohang" creationdate="20190616T111248Z">
        <seg>&gt; gradle -q :hello :krill:hello hello
I'm water
I'm krill
- I depend on water
- The weight of my species in summer is twice as heavy as all human beings.
- I love to spend time in the arctic waters.
I'm tropicalFish
- I depend on water</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q a
source dir is src/main/java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151307Z" creationid="huanghaohang" creationdate="20190613T151307Z">
        <seg>&gt; gradle -q a
source dir is src/main/java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q action
Consuming message: null</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141351Z" creationid="huanghaohang" creationdate="20190616T141351Z">
        <seg>&gt; gradle -q action
Consuming message: null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q action
Consuming message: null
Producing message:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140303Z" creationid="huanghaohang" creationdate="20190616T140303Z">
        <seg>&gt; gradle -q action
Consuming message: null
Producing message:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q action
Producing message:
Consuming message: Watch the order of execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141054Z" creationid="huanghaohang" creationdate="20190616T141054Z">
        <seg>&gt; gradle -q action
Producing message:
Consuming message: Watch the order of execution.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q allFiles
orca-1.0.jar
shark-1.0.jar
tuna-1.0.jar
herring-1.0.jar
seal-2.0.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143302Z" creationid="huanghaohang" creationdate="20190602T143302Z">
        <seg>&gt; gradle -q allFiles
orca-1.0.jar
shark-1.0.jar
tuna-1.0.jar
herring-1.0.jar
seal-2.0.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q api:dependencies --configuration testCompile
------------------------------------------------------------
Project :api - The shared API for the application
------------------------------------------------------------

testCompile
\--- junit:junit:4.11</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T021703Z" creationid="huanghaohang" creationdate="20170910T021703Z">
        <seg>&gt; gradle -q api:dependencies --configuration testCompile
------------------------------------------------------------
Project :api - The shared API for the application
------------------------------------------------------------

testCompile
\--- junit:junit:4.11</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q api:properties
------------------------------------------------------------
Project :api - The shared API for the application
------------------------------------------------------------

allprojects: [project ':api']
ant: org.gradle.api.internal.project.DefaultAntBuilder@12345
antBuilderFactory: org.gradle.api.internal.project.DefaultAntBuilderFactory@12345
artifacts: org.gradle.api.internal.artifacts.dsl.DefaultArtifactHandler@12345
asDynamicObject: org.gradle.api.internal.ExtensibleDynamicObject@12345
baseClassLoaderScope: org.gradle.api.internal.initialization.DefaultClassLoaderScope@12345
buildDir: /home/user/gradle/samples/userguide/tutorial/projectReports/api/build
buildFile: /home/user/gradle/samples/userguide/tutorial/projectReports/api/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023447Z" creationid="huanghaohang" creationdate="20170910T023447Z">
        <seg>&gt; gradle -q api:properties
------------------------------------------------------------
Project :api - The shared API for the application
------------------------------------------------------------

allprojects: [project ':api']
ant: org.gradle.api.internal.project.DefaultAntBuilder@12345
antBuilderFactory: org.gradle.api.internal.project.DefaultAntBuilderFactory@12345
artifacts: org.gradle.api.internal.artifacts.dsl.DefaultArtifactHandler@12345
asDynamicObject: org.gradle.api.internal.ExtensibleDynamicObject@12345
baseClassLoaderScope: org.gradle.api.internal.initialization.DefaultClassLoaderScope@12345
buildDir: /home/user/gradle/samples/userguide/tutorial/projectReports/api/build
buildFile: /home/user/gradle/samples/userguide/tutorial/projectReports/api/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q books
developerGuide -&gt; /home/user/gradle/samples/userguide/organizeBuildLogic/customPluginWithDomainObjectContainer/src/docs/developerGuide
quickStart -&gt; /home/user/gradle/samples/userguide/organizeBuildLogic/customPluginWithDomainObjectContainer/src/docs/quick-start
userGuide -&gt; /home/user/gradle/samples/userguide/organizeBuildLogic/customPluginWithDomainObjectContainer/src/docs/userGuide</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131013Z" creationid="huanghaohang" creationdate="20190728T131013Z">
        <seg>&gt; gradle -q books
developerGuide -&gt; /home/user/gradle/samples/userguide/organizeBuildLogic/customPluginWithDomainObjectContainer/src/docs/developerGuide
quickStart -&gt; /home/user/gradle/samples/userguide/organizeBuildLogic/customPluginWithDomainObjectContainer/src/docs/quick-start
userGuide -&gt; /home/user/gradle/samples/userguide/organizeBuildLogic/customPluginWithDomainObjectContainer/src/docs/userGuide</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q broken
executing task ':ok' ...
done
executing task ':broken' ...
FAILED</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152637Z" creationid="huanghaohang" creationdate="20190613T152637Z">
        <seg>&gt; gradle -q broken
executing task ':ok' ...
done
executing task ':broken' ...
FAILED</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q build
hello from the other build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135719Z" creationid="huanghaohang" creationdate="20191201T135719Z">
        <seg>&gt; gradle -q build
hello from the other build.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q check
projectApi
projectApi</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130259Z" creationid="huanghaohang" creationdate="20170912T130259Z">
        <seg>&gt; gradle -q check
projectApi
projectApi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q compile
The class directory exists. I can operate</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132418Z" creationid="huanghaohang" creationdate="20170917T132418Z">
        <seg>&gt; gradle -q compile
The class directory exists. I can operate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q configure
1
5</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145829Z" creationid="huanghaohang" creationdate="20170918T145829Z">
        <seg>&gt; gradle -q configure
1
5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q consume
Consuming message: Watch the order of evaluation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153659Z" creationid="huanghaohang" creationdate="20190616T153659Z">
        <seg>&gt; gradle -q consume
Consuming message: Watch the order of evaluation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q consume
Consuming message: null</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153155Z" creationid="huanghaohang" creationdate="20190616T153155Z">
        <seg>&gt; gradle -q consume
Consuming message: null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q consume
Producing message:
Consuming message: Watch the order of execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152801Z" creationid="huanghaohang" creationdate="20190616T152801Z">
        <seg>&gt; gradle -q consume
Producing message:
Consuming message: Watch the order of execution.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q copy
I am the new one.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083322Z" creationid="huanghaohang" creationdate="20170922T083322Z">
        <seg>&gt; gradle -q copy
I am the new one.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q copy
albatros
shark
tuna

albatros</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152844Z" creationid="huanghaohang" creationdate="20190602T152844Z">
        <seg>&gt; gradle -q copy
albatros
shark
tuna

albatros</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q copyVsFiles
orca-1.0.jar
seal-1.0.jar

orca-1.0.jar
seal-2.0.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153128Z" creationid="huanghaohang" creationdate="20190602T153128Z">
        <seg>&gt; gradle -q copyVsFiles
orca-1.0.jar
seal-1.0.jar

orca-1.0.jar
seal-2.0.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q count
0 1 2 3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155921Z" creationid="95" creationdate="20170726T155921Z">
        <seg>&gt; gradle -q count
0 1 2 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q dependencies
albatros

albatros
orca
shark
tuna

albatros
shark
tuna</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143031Z" creationid="huanghaohang" creationdate="20190602T143031Z">
        <seg>&gt; gradle -q dependencies
albatros

albatros
orca
shark
tuna

albatros
shark
tuna</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q dependencies api:dependencies webapp:dependencies
------------------------------------------------------------
Root project
------------------------------------------------------------

No configurations

------------------------------------------------------------
Project :api - The shared API for the application
------------------------------------------------------------

compile
\--- org.codehaus.groovy:groovy-all:2.3.3

testCompile
\--- junit:junit:4.11</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T014136Z" creationid="huanghaohang" creationdate="20170910T014136Z">
        <seg>&gt; gradle -q dependencies api:dependencies webapp:dependencies
------------------------------------------------------------
Root project
------------------------------------------------------------

No configurations

------------------------------------------------------------
Project :api - The shared API for the application
------------------------------------------------------------

compile
\--- org.codehaus.groovy:groovy-all:2.3.3

testCompile
\--- junit:junit:4.11</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q distanceToIceberg
20 nautical miles
5 nautical miles</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162449Z" creationid="huanghaohang" creationdate="20190615T162449Z">
        <seg>&gt; gradle -q distanceToIceberg
20 nautical miles
5 nautical miles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q distribution
We build the zip with version=1.0-SNAPSHOT</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025321Z" creationid="95" creationdate="20170729T025321Z">
        <seg>&gt; gradle -q distribution
We build the zip with version=1.0-SNAPSHOT</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q encode
aGVsbG8gd29ybGQK</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141100Z" creationid="huanghaohang" creationdate="20191202T141100Z">
        <seg>&gt; gradle -q encode
aGVsbG8gd29ybGQK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q files
orca-1.0.jar
seal-2.0.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143717Z" creationid="huanghaohang" creationdate="20190602T143717Z">
        <seg>&gt; gradle -q files
orca-1.0.jar
seal-2.0.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q groupPing
Pinging: Server1
Pinging: Server2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043847Z" creationid="huanghaohang" creationdate="20170923T043847Z">
        <seg>&gt; gradle -q groupPing
Pinging: Server1
Pinging: Server2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
:hello
:hello
:projectA:hello
:projectA:hello</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122012Z" creationid="huanghaohang" creationdate="20170919T122012Z">
        <seg>&gt; gradle -q hello
:hello
:hello
:projectA:hello
:projectA:hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
Hello Venus
Hello Earth
Hello Mars
Hello Jupiter</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133119Z" creationid="95" creationdate="20170727T133119Z">
        <seg>&gt; gradle -q hello
Hello Venus
Hello Earth
Hello Mars
Hello Jupiter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
Hello from the GreetingPlugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150926Z" creationid="huanghaohang" creationdate="20190719T150926Z">
        <seg>&gt; gradle -q hello
Hello from the GreetingPlugin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
Hello world!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T145850Z" creationid="95" creationdate="20170724T145850Z">
        <seg>&gt; gradle -q hello
Hello world!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
Hello world!
Greetings from the hello task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141348Z" creationid="95" creationdate="20170727T141348Z">
        <seg>&gt; gradle -q hello
Hello world!
Greetings from the hello task.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
Hi from Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155829Z" creationid="huanghaohang" creationdate="20190719T155829Z">
        <seg>&gt; gradle -q hello
Hi from Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
- I love to spend time in the arctic waters.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T161741Z" creationid="huanghaohang" creationdate="20190615T161741Z">
        <seg>&gt; gradle -q hello
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
- I love to spend time in the arctic waters.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154825Z" creationid="huanghaohang" creationdate="20190614T154825Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I love to spend time in the arctic waters.
- I'm the largest animal that has ever lived on this planet.
I'm krill
- I depend on water
- I love to spend time in the arctic waters.
- The weight of my species in summer is twice as heavy as all human beings.
I'm tropicalFish
- I depend on water</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143748Z" creationid="huanghaohang" creationdate="20190615T143748Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I love to spend time in the arctic waters.
- I'm the largest animal that has ever lived on this planet.
I'm krill
- I depend on water
- I love to spend time in the arctic waters.
- The weight of my species in summer is twice as heavy as all human beings.
I'm tropicalFish
- I depend on water</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
- I love to spend time in the arctic waters.
I'm krill
- I depend on water
- The weight of my species in summer is twice as heavy as all human beings.
- I love to spend time in the arctic waters.
I'm tropicalFish
- I depend on water</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145043Z" creationid="huanghaohang" creationdate="20190615T145043Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
- I love to spend time in the arctic waters.
I'm krill
- I depend on water
- The weight of my species in summer is twice as heavy as all human beings.
- I love to spend time in the arctic waters.
I'm tropicalFish
- I depend on water</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
I'm krill
- I depend on water</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142646Z" creationid="huanghaohang" creationdate="20190615T142646Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
I'm krill
- I depend on water</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
I'm krill
- I depend on water
- The weight of my species in summer is twice as heavy as all human beings.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143056Z" creationid="huanghaohang" creationdate="20190615T143056Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
- I'm the largest animal that has ever lived on this planet.
I'm krill
- I depend on water
- The weight of my species in summer is twice as heavy as all human beings.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
I'm krill
- I depend on water</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142152Z" creationid="huanghaohang" creationdate="20190615T142152Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
- I depend on water
I'm krill
- I depend on water</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
I'm krill</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155646Z" creationid="huanghaohang" creationdate="20190614T155646Z">
        <seg>&gt; gradle -q hello
I'm water
I'm bluewhale
I'm krill</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
configuring root project 'configureProjectUsingScript'
hello from other script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145344Z" creationid="huanghaohang" creationdate="20170918T145344Z">
        <seg>&gt; gradle -q hello
configuring root project 'configureProjectUsingScript'
hello from other script</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello
hello from GreetingTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142814Z" creationid="huanghaohang" creationdate="20190705T142814Z">
        <seg>&gt; gradle -q hello
hello from GreetingTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q hello greeting
hello from GreetingTask
greetings from GreetingTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122518Z" creationid="huanghaohang" creationdate="20190706T122518Z">
        <seg>&gt; gradle -q hello greeting
hello from GreetingTask
greetings from GreetingTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q help --task libs
Detailed task information for libs

Paths</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012840Z" creationid="huanghaohang" creationdate="20170910T012840Z">
        <seg>&gt; gradle -q help --task libs
Detailed task information for libs

Paths</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q incrementalReverse</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142116Z" creationid="huanghaohang" creationdate="20190707T142116Z">
        <seg>&gt; gradle -q incrementalReverse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q incrementalReverse
ALL inputs considered out of date
out of date: 1.txt
out of date: 2.txt
out of date: 3.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141912Z" creationid="huanghaohang" creationdate="20190707T141912Z">
        <seg>&gt; gradle -q incrementalReverse
ALL inputs considered out of date
out of date: 1.txt
out of date: 2.txt
out of date: 3.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q intro
Hello world!
I'm Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160131Z" creationid="95" creationdate="20170726T160131Z">
        <seg>&gt; gradle -q intro
Hello world!
I'm Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q list
Contents of src
src/dir1
src/file1.txt
Contents of src2
src2/dir1
src2/dir2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150359Z" creationid="huanghaohang" creationdate="20170927T150359Z">
        <seg>&gt; gradle -q list
Contents of src
src/dir1
src/file1.txt
Contents of src2
src2/dir1
src2/dir2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q list
compiling classes
classpath = [classes]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105527Z" creationid="huanghaohang" creationdate="20190602T105527Z">
        <seg>&gt; gradle -q list
compiling classes
classpath = [classes]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q listBirds
albatros-2.0.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041021Z" creationid="huanghaohang" creationdate="20190605T041021Z">
        <seg>&gt; gradle -q listBirds
albatros-2.0.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q listFish
tuna-1.5.jar

tuna-1.4.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040725Z" creationid="huanghaohang" creationdate="20190605T040725Z">
        <seg>&gt; gradle -q listFish
tuna-1.5.jar

tuna-1.4.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q listJars
hibernate-core-3.6.7.Final.jar
antlr-2.7.6.jar
commons-collections-3.1.jar
dom4j-1.6.1.jar
hibernate-commons-annotations-3.2.0.Final.jar
hibernate-jpa-2.0-api-1.0.1.Final.jar
jta-1.1.jar
slf4j-api-1.6.1.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051200Z" creationid="huanghaohang" creationdate="20190531T051200Z">
        <seg>&gt; gradle -q listJars
hibernate-core-3.6.7.Final.jar
antlr-2.7.6.jar
commons-collections-3.1.jar
dom4j-1.6.1.jar
hibernate-commons-annotations-3.2.0.Final.jar
hibernate-jpa-2.0-api-1.0.1.Final.jar
jta-1.1.jar
slf4j-api-1.6.1.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q loadfile
*** agile.manifesto.txt ***
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration  over contract negotiation
Responding to change over following a plan</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153832Z" creationid="95" creationdate="20170728T153832Z">
        <seg>&gt; gradle -q loadfile
*** agile.manifesto.txt ***
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration  over contract negotiation
Responding to change over following a plan</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q loadfile
I'm fond of agile.manifesto.txt
I'm fond of gradle.manifesto.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023516Z" creationid="95" creationdate="20170729T023516Z">
        <seg>&gt; gradle -q loadfile
I'm fond of agile.manifesto.txt
I'm fond of gradle.manifesto.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q myTask
I am not affected</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084842Z" creationid="huanghaohang" creationdate="20170922T084842Z">
        <seg>&gt; gradle -q myTask
I am not affected</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q myZip
customName-1.0.zip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232535Z" creationid="huanghaohang" creationdate="20171206T232535Z">
        <seg>&gt; gradle -q myZip
customName-1.0.zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q myZip
gradle-wrapper-1.0-src.zip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232603Z" creationid="huanghaohang" creationdate="20171206T232603Z">
        <seg>&gt; gradle -q myZip
gradle-wrapper-1.0-src.zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q myZip
zipProject-1.0.zip
build/distributions
build/distributions/zipProject-1.0.zip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140722Z" creationid="huanghaohang" creationdate="20171126T140722Z">
        <seg>&gt; gradle -q myZip
zipProject-1.0.zip
build/distributions
build/distributions/zipProject-1.0.zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q pingServer1
Pinging: Server1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011931Z" creationid="huanghaohang" creationdate="20170923T011931Z">
        <seg>&gt; gradle -q pingServer1
Pinging: Server1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q printProperties
3.1.0.RELEASE
build@master.org
main
plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133602Z" creationid="huanghaohang" creationdate="20170913T133602Z">
        <seg>&gt; gradle -q printProperties
3.1.0.RELEASE
build@master.org
main
plugin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q printTaskProperties
myValue</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T142011Z" creationid="95" creationdate="20170727T142011Z">
        <seg>&gt; gradle -q printTaskProperties
myValue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q projects
------------------------------------------------------------
Root project
------------------------------------------------------------

Root project 'projectReports'
+--- Project ':api' - The shared API for the application
\--- Project ':webapp' - The Web application implementation

To see a list of the tasks of a project, run gradle &lt;project-path&gt;:tasks
For example, try running gradle :api:tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011131Z" creationid="huanghaohang" creationdate="20170910T011131Z">
        <seg>&gt; gradle -q projects
------------------------------------------------------------
Root project
------------------------------------------------------------

Root project 'projectReports'
+--- Project ':api' - The shared API for the application
\--- Project ':webapp' - The Web application implementation

To see a list of the tasks of a project, run gradle &lt;project-path&gt;:tasks
For example, try running gradle :api:tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q release
We build the zip with version=1.0
We release now</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025329Z" creationid="95" creationdate="20170729T025329Z">
        <seg>&gt; gradle -q release
We build the zip with version=1.0
We release now</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q removeInput incrementalReverse
CHANGED inputs considered out of date
removed: 3.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142533Z" creationid="huanghaohang" creationdate="20190707T142533Z">
        <seg>&gt; gradle -q removeInput incrementalReverse
CHANGED inputs considered out of date
removed: 3.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q removeOutput incrementalReverse
ALL inputs considered out of date
out of date: 1.txt
out of date: 2.txt
out of date: 3.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143022Z" creationid="huanghaohang" creationdate="20190707T143022Z">
        <seg>&gt; gradle -q removeOutput incrementalReverse
ALL inputs considered out of date
out of date: 1.txt
out of date: 2.txt
out of date: 3.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q runFailingOperatorsTestCUnitExe

There were test failures:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090431Z" creationid="huanghaohang" creationdate="20190611T090431Z">
        <seg>&gt; gradle -q runFailingOperatorsTestCUnitExe

There were test failures:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q sayGreeting
Hello!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151215Z" creationid="huanghaohang" creationdate="20190727T151215Z">
        <seg>&gt; gradle -q sayGreeting
Hello!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q show
build/classes/main
build/resources/main</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100230Z" creationid="huanghaohang" creationdate="20180130T100230Z">
        <seg>&gt; gradle -q show
build/classes/main
build/resources/main</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q show
build/output/classes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022600Z" creationid="huanghaohang" creationdate="20180131T022600Z">
        <seg>&gt; gradle -q show
build/output/classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q show
project: :child1
srcDirName: java
srcDir: child1/java
project: :child2
srcDirName: src/java/legacy
srcDir: child2/src/java/legacy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132542Z" creationid="huanghaohang" creationdate="20191201T132542Z">
        <seg>&gt; gradle -q show
project: :child1
srcDirName: java
srcDir: child1/java
project: :child2
srcDirName: src/java/legacy
srcDir: child2/src/java/legacy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q show
srcDirName: src/java
srcDir: child/src/java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145017Z" creationid="huanghaohang" creationdate="20190817T145017Z">
        <seg>&gt; gradle -q show
srcDirName: src/java
srcDir: child/src/java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q task0
I'm task number 2
I'm task number 3
I'm task number 0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133039Z" creationid="95" creationdate="20170727T133039Z">
        <seg>&gt; gradle -q task0
I'm task number 2
I'm task number 3
I'm task number 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q task1
I'm task number 1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132731Z" creationid="95" creationdate="20170727T132731Z">
        <seg>&gt; gradle -q task1
I'm task number 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q taskX
lib1
lib2
taskX</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130920Z" creationid="huanghaohang" creationdate="20170919T130920Z">
        <seg>&gt; gradle -q taskX
lib1
lib2
taskX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q taskX
taskX
taskY</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044046Z" creationid="huanghaohang" creationdate="20170923T044046Z">
        <seg>&gt; gradle -q taskX
taskX
taskY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q taskX
taskY
taskX</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160402Z" creationid="95" creationdate="20170726T160402Z">
        <seg>&gt; gradle -q taskX
taskY
taskX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q taskX
taskZ
taskY
taskX</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081554Z" creationid="huanghaohang" creationdate="20170922T081554Z">
        <seg>&gt; gradle -q taskX
taskZ
taskY
taskX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q taskY
taskY</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035749Z" creationid="huanghaohang" creationdate="20170922T035749Z">
        <seg>&gt; gradle -q taskY
taskY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q taskY taskX
taskX
taskY</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T032053Z" creationid="huanghaohang" creationdate="20170922T032053Z">
        <seg>&gt; gradle -q taskY taskX
taskX
taskY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q tasks
------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------

Default tasks: dists

Build tasks
-----------
clean - Deletes the build directory (build)
dists - Builds the distribution
libs - Builds the JAR

Build Setup tasks
-----------------
init - Initializes a new Gradle build. [incubating]
wrapper - Generates Gradle wrapper files. [incubating]

Help tasks
----------
dependencies - Displays all dependencies declared in root project 'projectReports'.
dependencyInsight - Displays the insight into a specific dependency in root project 'projectReports'.
help - Displays a help message
projects - Displays the sub-projects of root project 'projectReports'.
properties - Displays the properties of root project 'projectReports'.
tasks - Displays the tasks runnable from root project 'projectReports' (some of the displayed tasks may belong to subprojects).

To see all tasks and more detail, run with --all.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011714Z" creationid="huanghaohang" creationdate="20170910T011714Z">
        <seg>&gt; gradle -q tasks
------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------

Default tasks: dists

Build tasks
-----------
clean - Deletes the build directory (build)
dists - Builds the distribution
libs - Builds the JAR

Build Setup tasks
-----------------
init - Initializes a new Gradle build. [incubating]
wrapper - Generates Gradle wrapper files. [incubating]

Help tasks
----------
dependencies - Displays all dependencies declared in root project 'projectReports'.
dependencyInsight - Displays the insight into a specific dependency in root project 'projectReports'.
help - Displays a help message
projects - Displays the sub-projects of root project 'projectReports'.
properties - Displays the properties of root project 'projectReports'.
tasks - Displays the tasks runnable from root project 'projectReports' (some of the displayed tasks may belong to subprojects).

To see all tasks and more detail, run with --all.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q tasks --all
------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------

Default tasks: dists

Build tasks
-----------
clean - Deletes the build directory (build)
api:clean - Deletes the build directory (build)
webapp:clean - Deletes the build directory (build)
dists - Builds the distribution [api:libs, webapp:libs]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012327Z" creationid="huanghaohang" creationdate="20170910T012327Z">
        <seg>&gt; gradle -q tasks --all
------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------

Default tasks: dists

Build tasks
-----------
clean - Deletes the build directory (build)
api:clean - Deletes the build directory (build)
webapp:clean - Deletes the build directory (build)
dists - Builds the distribution [api:libs, webapp:libs]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q test
Adding test task to project ':projectA'
Running tests for project ':projectA'</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150017Z" creationid="huanghaohang" creationdate="20190613T150017Z">
        <seg>&gt; gradle -q test
Adding test task to project ':projectA'
Running tests for project ':projectA'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q test
Evaluation of root project 'buildProjectEvaluateEvents' succeeded
Evaluation of project ':projectA' succeeded
Evaluation of project ':projectB' FAILED</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150832Z" creationid="huanghaohang" creationdate="20190613T150832Z">
        <seg>&gt; gradle -q test
Evaluation of root project 'buildProjectEvaluateEvents' succeeded
Evaluation of project ':projectA' succeeded
Evaluation of project ':projectB' FAILED</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q updateInputs incrementalReverse
CHANGED inputs considered out of date
out of date: 1.txt
out of date: 4.txt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142325Z" creationid="huanghaohang" creationdate="20190707T142325Z">
        <seg>&gt; gradle -q updateInputs incrementalReverse
CHANGED inputs considered out of date
out of date: 1.txt
out of date: 4.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q upper
Original: mY_nAmE
Upper case: MY_NAME</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155840Z" creationid="95" creationdate="20170726T155840Z">
        <seg>&gt; gradle -q upper
Original: mY_nAmE
Upper case: MY_NAME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle -q webapp:dependencyInsight --dependency groovy --configuration compile
org.codehaus.groovy:groovy-all:2.3.3
\--- project :api</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022200Z" creationid="huanghaohang" creationdate="20170910T022200Z">
        <seg>&gt; gradle -q webapp:dependencyInsight --dependency groovy --configuration compile
org.codehaus.groovy:groovy-all:2.3.3
\--- project :api</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle :api:build
:shared:compileJava
:shared:processResources
:shared:classes
:shared:jar
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T135500Z" creationid="huanghaohang" creationdate="20190622T135500Z">
        <seg>&gt; gradle :api:build
:shared:compileJava
:shared:processResources
:shared:classes
:shared:jar
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle :api:buildDependents
:shared:compileJava
:shared:processResources
:shared:classes
:shared:jar
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build
:services:personService:compileJava
:services:personService:processResources
:services:personService:classes
:services:personService:jar
:services:personService:assemble
:services:personService:compileTestJava
:services:personService:processTestResources
:services:personService:testClasses
:services:personService:test
:services:personService:check
:services:personService:build
:services:personService:buildDependents
:api:buildDependents

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T142339Z" creationid="huanghaohang" creationdate="20190622T142339Z">
        <seg>&gt; gradle :api:buildDependents
:shared:compileJava
:shared:processResources
:shared:classes
:shared:jar
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build
:services:personService:compileJava
:services:personService:processResources
:services:personService:classes
:services:personService:jar
:services:personService:assemble
:services:personService:compileTestJava
:services:personService:processTestResources
:services:personService:testClasses
:services:personService:test
:services:personService:check
:services:personService:build
:services:personService:buildDependents
:api:buildDependents

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle :api:buildNeeded
:shared:compileJava
:shared:processResources
:shared:classes
:shared:jar
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build
:shared:assemble
:shared:compileTestJava
:shared:processTestResources
:shared:testClasses
:shared:test
:shared:check
:shared:build
:shared:buildNeeded
:api:buildNeeded

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141708Z" creationid="huanghaohang" creationdate="20190622T141708Z">
        <seg>&gt; gradle :api:buildNeeded
:shared:compileJava
:shared:processResources
:shared:classes
:shared:jar
:api:compileJava
:api:processResources
:api:classes
:api:jar
:api:assemble
:api:compileTestJava
:api:processTestResources
:api:testClasses
:api:test
:api:check
:api:build
:shared:assemble
:shared:compileTestJava
:shared:processTestResources
:shared:testClasses
:shared:test
:shared:check
:shared:build
:shared:buildNeeded
:api:buildNeeded

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle build
:compileJava
:processResources
:classes
:jar
:assemble
:compileTestJava
:processTestResources
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014310Z" creationid="95" creationdate="20170730T014310Z">
        <seg>&gt; gradle build
:compileJava
:processResources
:classes
:jar
:assemble
:compileTestJava
:processTestResources
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle cT
:compile
compiling source
:compileTest
compiling unit tests

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113301Z" creationid="huanghaohang" creationdate="20170909T113301Z">
        <seg>&gt; gradle cT
:compile
compiling source
:compileTest
compiling unit tests

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle di
:compile
compiling source
:compileTest
compiling unit tests
:test
running unit tests
:dist
building the distribution

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T112858Z" creationid="huanghaohang" creationdate="20170909T112858Z">
        <seg>&gt; gradle di
:compile
compiling source
:compileTest
compiling unit tests
:test
running unit tests
:dist
building the distribution

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle disableMe
:disableMe SKIPPED

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085331Z" creationid="huanghaohang" creationdate="20170922T085331Z">
        <seg>&gt; gradle disableMe
:disableMe SKIPPED

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle dist -x test
:compile
compiling source
:dist
building the distribution

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T032032Z" creationid="huanghaohang" creationdate="20170909T032032Z">
        <seg>&gt; gradle dist -x test
:compile
compiling source
:dist
building the distribution

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle dist test
:compile
compiling source
:compileTest
compiling unit tests
:test
running unit tests
:dist
building the distribution

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031201Z" creationid="huanghaohang" creationdate="20170909T031201Z">
        <seg>&gt; gradle dist test
:compile
compiling source
:compileTest
compiling unit tests
:test
running unit tests
:dist
building the distribution

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle distZip
:createDocs
:compileJava
:processResources UP-TO-DATE
:classes
:jar
:startScripts
:distZip

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141044Z" creationid="95" creationdate="20190131T141044Z">
        <seg>&gt; gradle distZip
:createDocs
:compileJava
:processResources UP-TO-DATE
:classes
:jar
:startScripts
:distZip

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle distanceToIceberg
:bluewhale:distanceToIceberg
20 nautical miles
:krill:distanceToIceberg
5 nautical miles

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162621Z" creationid="huanghaohang" creationdate="20190615T162621Z">
        <seg>&gt; gradle distanceToIceberg
:bluewhale:distanceToIceberg
20 nautical miles
:krill:distanceToIceberg
5 nautical miles

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle hello
:hello
[ant:echo] Hello, from Ant

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084618Z" creationid="huanghaohang" creationdate="20180105T084618Z">
        <seg>&gt; gradle hello
:hello
[ant:echo] Hello, from Ant

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle hello
:hello
[ant:echo] Hello, from Ant
Hello, from Gradle

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084809Z" creationid="huanghaohang" creationdate="20180105T084809Z">
        <seg>&gt; gradle hello
:hello
[ant:echo] Hello, from Ant
Hello, from Gradle

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle hello
:hello
[ant:echo] hello from Ant

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022503Z" creationid="huanghaohang" creationdate="20171216T022503Z">
        <seg>&gt; gradle hello
:hello
[ant:echo] hello from Ant

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle hello
:intro
Hello, from Gradle
:hello
[ant:echo] Hello, from Ant

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084842Z" creationid="huanghaohang" creationdate="20180105T084842Z">
        <seg>&gt; gradle hello
:intro
Hello, from Gradle
:hello
[ant:echo] Hello, from Ant

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle hello -PskipHello
:hello SKIPPED

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084201Z" creationid="huanghaohang" creationdate="20170922T084201Z">
        <seg>&gt; gradle hello -PskipHello
:hello SKIPPED

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle intTestClasses
:compileIntTestJava
:processIntTestResources
:intTestClasses

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095242Z" creationid="haohang" creationdate="20180326T095242Z">
        <seg>&gt; gradle intTestClasses
:compileIntTestJava
:processIntTestResources
:intTestClasses

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle intro
:hello
[ant:echo] Hello, from Ant
:intro
Hello, from Gradle

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084650Z" creationid="huanghaohang" creationdate="20180105T084650Z">
        <seg>&gt; gradle intro
:hello
[ant:echo] Hello, from Ant
:intro
Hello, from Gradle

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle signArchives
:compileJava
:processResources
:classes
:jar
:signArchives

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135045Z" creationid="huanghaohang" creationdate="20190608T135045Z">
        <seg>&gt; gradle signArchives
:compileJava
:processResources
:classes
:jar
:signArchives

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle signStuffZip
:stuffZip
:signStuffZip

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140518Z" creationid="huanghaohang" creationdate="20190608T140518Z">
        <seg>&gt; gradle signStuffZip
:stuffZip
:signStuffZip

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle test
This is executed during the initialization phase.
This is executed during the configuration phase.
This is also executed during the configuration phase.
:test
This is executed during the execution phase.

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145525Z" creationid="huanghaohang" creationdate="20190612T145525Z">
        <seg>&gt; gradle test
This is executed during the initialization phase.
This is executed during the configuration phase.
This is also executed during the configuration phase.
:test
This is executed during the execution phase.

BUILD SUCCESSFUL

Total time: 1 secs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle transform
:transform
Transforming source file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085718Z" creationid="huanghaohang" creationdate="20170922T085718Z">
        <seg>&gt; gradle transform
:transform
Transforming source file.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&gt; gradle transform
:transform UP-TO-DATE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003901Z" creationid="huanghaohang" creationdate="20170923T003901Z">
        <seg>&gt; gradle transform
:transform UP-TO-DATE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;a0&gt;&lt;c1&gt;CUnitTestSuite&lt;/c1&gt;&lt;/a0&gt; component has an associated &lt;a2&gt;&lt;c3&gt;NativeExecutable&lt;/c3&gt;&lt;/a2&gt; or &lt;a4&gt;&lt;c5&gt;NativeLibrary&lt;/c5&gt;&lt;/a4&gt; component. For each &lt;a6&gt;&lt;c7&gt;ProjectNativeBinary&lt;/c7&gt;&lt;/a6&gt; configured for the main component, a matching &lt;a8&gt;&lt;c9&gt;TestSuiteExecutableBinary&lt;/c9&gt;&lt;/a8&gt; will be configured on the test suite component. These test suite binaries can be configured in a similar way to any other binary instance:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T061706Z" creationid="huanghaohang" creationdate="20190611T061706Z">
        <seg>一个 &lt;a0&gt;&lt;c1&gt;CUnitTestSuite&lt;/c1&gt;&lt;/a0&gt; 组件有一个相关联的 &lt;a2&gt;&lt;c3&gt;NativeExecutable&lt;/c3&gt;&lt;/a2&gt; 或 &lt;a4&gt;&lt;c5&gt;NativeLibrary&lt;/c5&gt;&lt;/a4&gt; 组件。对于为主组件配置的每一个 &lt;a6&gt;&lt;c7&gt;ProjectNativeBinary&lt;/c7&gt;&lt;/a6&gt;，在测试套件组件上都会配置一个匹配的 &lt;a8&gt;&lt;c9&gt;TestSuiteExecutableBinary&lt;/c9&gt;&lt;/a8&gt; 。这些测试套件二进制文件可以使用一种与其他二进制实例类似的方式来配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;a0&gt;complete overwrite&lt;/a0&gt; causes all existing content to be discarded, thereby losing any changes made directly in the IDE. Alternatively, the &lt;c1&gt;beforeMerged&lt;/c1&gt; hook makes it possible to overwrite just certain parts of the existing content. The following example removes all existing dependencies from the &lt;c2&gt;Classpath&lt;/c2&gt; domain object:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084059Z" creationid="huanghaohang" creationdate="20181210T084059Z">
        <seg>&lt;a0&gt;完全覆盖&lt;/a0&gt;会导致现有的所有内容被丢弃，从而丢失在 IDE 中直接做的任何更改。作为另一种选择，&lt;c1&gt;beforeMerged&lt;/c1&gt; 钩子使得可以只覆盖现有内容的某些部分。以下示例从 &lt;c2&gt;Classpath&lt;/c2&gt; 域对象中删除现有的所有依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;a0&gt;complete overwrite&lt;/a0&gt; causes all existing content to be discarded, thereby losing any changes made directly in the IDE. The &lt;c1&gt;beforeMerged&lt;/c1&gt; hook makes it possible to overwrite just certain parts of the existing content. The following example removes all existing dependencies from the &lt;c2&gt;Module&lt;/c2&gt; domain object:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012634Z" creationid="huanghaohang" creationdate="20190123T012525Z">
        <seg>&lt;a0&gt;完全覆盖&lt;/a0&gt;会导致现有的所有内容被丢弃，从而丢失直接在 IDE 中进行的任何更改。&lt;c1&gt;beforeMerged&lt;/c1&gt; 钩子使得可以只覆盖现有内容的某些部分。以下示例为从 &lt;c2&gt;Module&lt;/c2&gt; 域对象中删除现有的所有依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;build type&lt;/c0&gt; determines various non-functional aspects of a binary, such as whether debug information is included, or what optimisation level the binary is compiled with. Typical build types are 'debug' and 'release', but a project is free to define any set of build types.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035426Z" creationid="huanghaohang" creationdate="20190610T035426Z">
        <seg>&lt;c0&gt;build type&lt;/c0&gt; 决定了二进制文件的各种非功能性方面，例如是否包含调试信息，或使用什么样的优化级别来编译。典型的构建类型为“debug”和“release”，但项目可以自由定义任意的一组构建类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;file collection&lt;/e0&gt; is simply a set of files. It is represented by the &lt;a1&gt;&lt;c2&gt;FileCollection&lt;/c2&gt;&lt;/a1&gt; interface. Many objects in the Gradle API implement this interface. For example, &lt;a3&gt;dependency configurations&lt;/a3&gt; implement &lt;c4&gt;FileCollection&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T130835Z" creationid="huanghaohang" creationdate="20170923T130315Z">
        <seg>一个&lt;e0&gt;文件集合&lt;/e0&gt;只是一组文件，它通过&lt;a1&gt;&lt;c2&gt;FileCollection&lt;/c2&gt;&lt;/a1&gt;接口来表示。 Gradle API中的许多对象都实现了这个接口。比如，&lt;a3&gt;依dependency configurations&lt;/a3&gt;就实现了&lt;c4&gt;FileCollection&lt;/c4&gt;这一接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;e0&gt;file tree&lt;/e0&gt; is a collection of files arranged in a hierarchy. For example, a file tree might represent a directory tree or the contents of a ZIP file. It is represented by the &lt;a1&gt;&lt;c2&gt;FileTree&lt;/c2&gt;&lt;/a1&gt; interface. The &lt;c3&gt;FileTree&lt;/c3&gt; interface extends &lt;c4&gt;FileCollection&lt;/c4&gt;, so you can treat a file tree exactly the same way as you would a file collection. Several objects in Gradle implement the &lt;c5&gt;FileTree&lt;/c5&gt; interface, such as &lt;a6&gt;source sets&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023100Z" creationid="huanghaohang" creationdate="20170927T150857Z">
        <seg>一个&lt;e0&gt;文件树&lt;/e0&gt;是一个按层次结构排列的文件集合。 例如，文件树可能表示一个目录树或ZIP 文件的内容。它通过&lt;a1&gt;&lt;c2&gt;FileTree&lt;/c2&gt;&lt;/a1&gt; 接口来表示。&lt;c3&gt;FileTree&lt;/c3&gt; 接口继承自 &lt;c4&gt;FileCollection&lt;/c4&gt;，因此你可以像处理文件集一样来处理文件树。Gradle中的几个对象都实现了 &lt;c5&gt;FileTree&lt;/c5&gt; 接口，如&lt;a6&gt;源码集&lt;/a6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Gradle build has three distinct phases.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T102741Z" creationid="huanghaohang" creationdate="20190611T102741Z">
        <seg>Gradle 构建有三个不同的阶段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Gradle build with a build executed by another tool such as Apache Ant, Apache Maven or something else (i.e. migrating to Gradle).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152324Z" creationid="huanghaohang" creationdate="20200604T152324Z">
        <seg>由 Apache Ant，Apache Maven 或其他工具执行的 Gradle 构建（即迁移到 Gradle）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Gradle plugin packages up reusable pieces of build logic, which can be used across many different projects and builds. Gradle allows you to implement your own custom plugins, so you can reuse your build logic, and share it with others.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190715T153304Z" creationid="huanghaohang" creationdate="20190715T153304Z">
        <seg>Gradle 插件打包了构建逻辑的可复用部分，这些逻辑可以在许多不同的项目和构建中使用。Gradle 允许你实现自己的自定义插件，因此你可以复用自己的构建逻辑，并与他人共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Maven repository. Can be located on the local filesystem or at some remote location.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025946Z" creationid="huanghaohang" creationdate="20190603T025946Z">
        <seg>一个 Maven 仓库。 可以位于本地文件系统上，或在某个远程位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Sonar property value set via a system property overrides any value set in a build script (for the same property). When analyzing a project hierarchy, values set via system properties apply to the root project of the analyzed hierarchy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051415Z" creationid="huanghaohang" creationdate="20181202T051415Z">
        <seg>通过系统属性设置的 Sonar 属性值将覆盖构建脚本中设置的任何值（对于同一属性）。分析项目层次结构时，通过系统属性设置的值将应用于所分析的层次结构的根项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A basic Groovy project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233758Z" creationid="huanghaohang" creationdate="20171206T233758Z">
        <seg>一个基本的 Groovy 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A basic Java project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124911Z" creationid="huanghaohang" creationdate="20171014T124911Z">
        <seg>一个基本的 Java 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A binary store of resolved module meta-data, including the results of resolving dynamic versions, module descriptors, and artifacts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041919Z" creationid="huanghaohang" creationdate="20190605T041919Z">
        <seg>解析的模块元数据的二进制存储，包括解析动态版本、 模块描述符和工件的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A build depending on both &lt;c0&gt;module-a&lt;/c0&gt; and &lt;c1&gt;module-b&lt;/c1&gt; will obtain different versions of libraries within the releasable unit.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015317Z" creationid="huanghaohang" creationdate="20190605T015317Z">
        <seg>一个同时依赖于 &lt;c0&gt;module-a&lt;/c0&gt; 和 &lt;c1&gt;module-b&lt;/c1&gt; 的构建，将在可发布单元内获得这个库的不同版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A build outcome is uncompared if a logical equivalent from the other build cannot be found (e.g. a build produces a zip file that the other build does not).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T154822Z" creationid="huanghaohang" creationdate="20210508T154822Z">
        <seg>如果无法从其他构建中找到逻辑等价物（比如一个构建产生了一个zip文件，而其他的构建不会），那么这个构建结果就是不可比的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A build outcome that cannot be understood by the host build. This can occur when the source or target build is a newer Gradle version than the host build and that Gradle version exposes new outcome types. Unknown build outcomes can be compared in so far as they can be identified to be logically equivalent to an unknown build outcome in the other build, but no meaningful comparison of what the build outcome actually is can be performed. Using the latest Gradle version for the host build will avoid encountering unknown build outcomes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T155600Z" creationid="huanghaohang" creationdate="20210508T155600Z">
        <seg>主机构建无法理解的构建结果。当源构建或目标构建是比主机构建更新的 Gradle 版本且 Gradle 版本有新增加的结果类型时，就会有这种情况。目前为止，未知的构建结果是可以被比较的，因为它们可以确定与其他构建的未知构建结果是否为逻辑等价物，但无法对其实际执行的构建结果进行有意义的比较。对主机构建使用最新的 Gradle 版本将避免遇到未知的构建结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A build script can contain any Groovy language element. &lt;s0&gt;[&lt;a1&gt;5&lt;/a1&gt;]&lt;/s0&gt; Gradle assumes that each build script is encoded using UTF-8.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T124752Z" creationid="huanghaohang" creationdate="20170912T124752Z">
        <seg>构建脚本可以包含任何Groovy语言元素。 &lt;s0&gt;[&lt;a1&gt;5&lt;/a1&gt;]&lt;/s0&gt; Gradle假定每个构建脚本都是使用UTF-8编码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A build with a newer version of Gradle than it's currently using (i.e. upgrading the Gradle version).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152308Z" creationid="huanghaohang" creationdate="20200604T152308Z">
        <seg>比当前所使用的 Gradle 版本更新的版本的构建（即升级 Gradle 版本）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A common usage pattern is to only sign build artifacts under certain conditions. For example, you may not wish to sign artifacts for non release versions. To achieve this, you can specify that signing is only required under certain conditions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T161255Z" creationid="huanghaohang" creationdate="20190608T140827Z">
        <seg>常见的用法模式是只在特定条件下才签名构建工件。例如，你可能不想对非发布版的工件进行签名。要实现这个目的，你可以指定只在一定条件下才需要签名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency on a set of files on the local filesystem.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153944Z" creationid="huanghaohang" creationdate="20190527T153944Z">
        <seg>对本地文件系统上一组文件的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency on an external module in some repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153921Z" creationid="huanghaohang" creationdate="20190527T153824Z">
        <seg>对一些仓库中的外部模块的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency on an external module, where the artifacts are located in some repository but the module meta-data is specified by the local build. You use this kind of dependency when you want to override the meta-data for the module.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160157Z" creationid="huanghaohang" creationdate="20190527T160157Z">
        <seg>对外部模块的依赖，该外部模块的工件位于某仓库中，但模块元数据由本地构建指定。当你要覆盖模块的元数据时，可以使用这种类型的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency on another project in the same build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153917Z" creationid="huanghaohang" creationdate="20190527T153917Z">
        <seg>对同一个构建中另一个项目的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency on the API of the current Gradle version. You use this kind of dependency when you are developing custom Gradle plugins and task types.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160653Z" creationid="huanghaohang" creationdate="20190527T160206Z">
        <seg>对当前 Gradle 版本的 API 的依赖。在开发自定义 Gradle 插件和任务类型时，使用这种依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency on the Groovy version used by the current Gradle version. You use this kind of dependency when you are developing custom Gradle plugins and task types.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160703Z" creationid="huanghaohang" creationdate="20190527T160643Z">
        <seg>对当前 Gradle 版本所使用的 Groovy 版本的依赖。在开发自定义 Gradle 插件和任务类型时，使用这种依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A dependency resolve rule is executed for each resolved dependency, and offers a powerful api for manipulating a requested dependency prior to that dependency being resolved. This feature is &lt;a0&gt;incubating&lt;/a0&gt;, but currently offers the ability to change the group, name and/or version of a requested dependency, allowing a dependency to be substituted with a completely different module during resolution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T040113Z" creationid="huanghaohang" creationdate="20190604T040113Z">
        <seg>一个依赖解析规则针对每个已解析的依赖执行，并提供了一个功能强大的 api，用于在该依赖解析之前处理所请求的依赖。这个功能目前还是&lt;a0&gt;实验性&lt;/a0&gt;功能，但当前提供了对一个所请求的依赖更改它的组，名称及版本的功能，从而允许在解析期间将一个依赖替换为一个完全不同的模块。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A deployment descriptor with sensible defaults named &lt;c0&gt;application.xml&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T150108Z" creationid="huanghaohang" creationdate="20180415T150108Z">
        <seg>具有合理默认值，名为 &lt;c0&gt;application.xml中&lt;/c0&gt; 的部署描述符</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A description for the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132158Z" creationid="huanghaohang" creationdate="20170913T132158Z">
        <seg>项目描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A feature in an incubating state may change in future Gradle versions until it is no longer incubating. Changes to incubating features for a Gradle release will be highlighted in the release notes for that release. The incubation period for new features varies depending on the scope, complexity and nature of the feature.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091330Z" creationid="huanghaohang" creationdate="20190608T091330Z">
        <seg>A feature in an incubating state may change in future Gradle versions until it is no longer incubating. Changes to incubating features for a Gradle release will be highlighted in the release notes for that release. The incubation period for new features varies depending on the scope, complexity and nature of the feature.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A file collection is iterable, and can be converted to a number of other types using the &lt;c0&gt;as&lt;/c0&gt; operator. You can also add 2 file collections together using the &lt;c1&gt;+&lt;/c1&gt; operator, or subtract one file collection from another using the &lt;c2&gt;-&lt;/c2&gt; operator. Here are some examples of what you can do with a file collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T132304Z" creationid="huanghaohang" creationdate="20170923T131759Z">
        <seg>一个文件集合是可迭代的，可以使用&lt;c0&gt;as&lt;/c0&gt;操作符把它转换为多个其他类型。你也可以使用&lt;c1&gt;+&lt;/c1&gt;运算符把两个文件集合加到一起，或使用&lt;c2&gt;-&lt;/c2&gt;运算符从另一个文件集中减去另一个文件集合。以下是操作文件集合的一些示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A file-based store of downloaded artifacts, including binaries like jars as well as raw downloaded meta-data like POM files and Ivy files. The storage path for a downloaded artifact includes the SHA1 checksum, meaning that 2 artifacts with the same name but different content can easily be cached.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041827Z" creationid="huanghaohang" creationdate="20190605T041827Z">
        <seg>基于文件的下载工件存储，包括了像 jar 这样的二进制文件，以及像 POM 文件及 Ivy 文件这样的原始下载的元数据。下载的工件的存储路径包含了 SHA1 校验和，它意味着可以很容易地缓存两个名称相同但内容不同的工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A fundamental characteristic of the tooling API is that it operates in a version independent way. This means that you can use the same API to work with different target versions of Gradle. The tooling API is Gradle wrapper aware and, by default, uses the same target Gradle version as that used by the wrapper-powered project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T142659Z" creationid="huanghaohang" creationdate="20191220T142659Z">
        <seg>这个 tooling API 的基本特征是它以独立于版本的方式运行。这意味着你可以使用同一 API 来处理不同目标g版本的 Gradle。Toolin API 是能感知到 Gradle 包装器的，默认情况下，它使用与包装器驱动的项目相同的 Gradle 版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A list of available Sonar properties can be found in the &lt;a0&gt;Sonar documentation&lt;/a0&gt;. Note that for most of these properties, the Sonar plugin's object model has an equivalent property, and it isn't necessary to use a &lt;c1&gt;withGlobalProperties&lt;/c1&gt; or &lt;c2&gt;withProjectProperties&lt;/c2&gt; hook. For configuring a third-party Sonar plugin, consult the plugin's documentation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T084754Z" creationid="huanghaohang" creationdate="20180816T135524Z">
        <seg>Sonar 的可用属性列表可以在 &lt;a0&gt;Sonar 文档&lt;/a0&gt;中找到。注意，对于这些属性的大部分，在 Sonar 插件的对象模型中都具有等效的属性，且没有必要使用 &lt;c1&gt;withGlobalProperties&lt;/c1&gt; 或 &lt;c2&gt;withProjectProperties&lt;/c2&gt; 的钩子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A module's status and status scheme are taken into consideration when a &lt;c0&gt;latest&lt;/c0&gt; version selector is resolved. Specifically, &lt;c1&gt;latest.someStatus&lt;/c1&gt; will resolve to the highest module version that has status &lt;c2&gt;someStatus&lt;/c2&gt; or a more mature status. For example, with the default status scheme in place, &lt;c3&gt;latest.integration&lt;/c3&gt; will select the highest module version regardless of its status (because &lt;c4&gt;integration&lt;/c4&gt; is the least mature status), whereas &lt;c5&gt;latest.release&lt;/c5&gt; will select the highest module version with status &lt;c6&gt;release&lt;/c6&gt;. Here is what this looks like in code:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T035710Z" creationid="huanghaohang" creationdate="20190605T034907Z">
        <seg>一个模块的状态及状态模式，会在解析 &lt;c0&gt;latest&lt;/c0&gt; 版本选择器时考虑到。具体而言，&lt;c1&gt;latest.someStatus&lt;/c1&gt; 会解析成有着 &lt;c2&gt;someStatus&lt;/c2&gt; 或更成熟状态的最高模块版本。例如，如果其他地方存在默认的状态模式，那么 &lt;c3&gt;latest.integration&lt;/c3&gt; 将选择最高的模块版本，而不考虑其状态（因为 &lt;c4&gt;integration&lt;/c4&gt; 是成熟度最低的状态），而 &lt;c5&gt;latest.release&lt;/c5&gt; 将选择 &lt;c6&gt;release&lt;/c6&gt; 状态的最高模块版本。以下是在代码中的表现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A multi-project build is a build where you build more than one project during a single execution of Gradle. You have to declare the projects taking part in the multiproject build in the settings file. There is much more to say about multi-project builds in the chapter dedicated to this topic (see &lt;a0&gt;Chapter 56, &lt;i1&gt;Multi-project Builds&lt;/i1&gt;&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T150035Z" creationid="huanghaohang" creationdate="20190612T150035Z">
        <seg>多项目构建是指在一个 Gradle 执行中构建多个项目的构建。你必须在设置文件中声明参与多项目构建的项目。关于多项目构建，在专门讨论这一主题的章节中还有更多的介绍（参见《&lt;a0&gt;第五十六章，&lt;i1&gt;多项目构建&lt;/i1&gt;&lt;/a0&gt;》）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A native binary project defines a set of &lt;a0&gt;&lt;c1&gt;NativeExecutable&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;NativeLibrary&lt;/c3&gt;&lt;/a2&gt; components, each of which Gradle maps to a number of &lt;a4&gt;&lt;c5&gt;NativeBinary&lt;/c5&gt;&lt;/a4&gt; outputs. For each &lt;c6&gt;executable&lt;/c6&gt; or &lt;c7&gt;library&lt;/c7&gt; defined, Gradle adds a &lt;a8&gt;&lt;c9&gt;FunctionalSourceSet&lt;/c9&gt;&lt;/a8&gt; with the same name. Each of these functional source sets will contain a language-specific source set for each of the languages supported by the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030333Z" creationid="huanghaohang" creationdate="20190609T030333Z">
        <seg>本机二进制项目定义了一组 &lt;a0&gt;&lt;c1&gt;NativeExecutable&lt;/c1&gt;&lt;/a0&gt; 和 &lt;a2&gt;&lt;c3&gt;NativeLibrary&lt;/c3&gt;&lt;/a2&gt; 组件，每个组件 Gradle 都映射到大量的 &lt;a4&gt;&lt;c5&gt;NativeBinary&lt;/c5&gt;&lt;/a4&gt; 输出。对于定义的每个 &lt;c6&gt;executable&lt;/c6&gt; 或 &lt;c7&gt;library&lt;/c7&gt; ，Gradle 会添加有相同名称的 &lt;a8&gt;&lt;c9&gt;FunctionalSourceSet&lt;/c9&gt;&lt;/a8&gt; 。每一个功能源码集都将针对项目所支持的每一种语言包含特定语言的源码集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A one element set with the project the plugin was applied to.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040842Z" creationid="huanghaohang" creationdate="20190123T040842Z">
        <seg>一个单元素的集合，元素为应用了该插件的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A plugin is simply any class that implements the &lt;a0&gt;&lt;c1&gt;Plugin&lt;/c1&gt;&lt;/a0&gt; interface. Gradle provides the core plugins as part of its distribution so simply applying the plugin as above is all you need to do. For 3rd party plugins however, you need to make the plugins available to the build classpath. For more information on how to do this, see &lt;a2&gt;Section 59.5, “External dependencies for the build script”&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T095729Z" creationid="huanghaohang" creationdate="20180130T095729Z">
        <seg>一个插件是简单的任何实现了&lt;a0&gt;&lt;c1&gt;Plugin&lt;/c1&gt;&lt;/a0&gt; 接口的类。 Gradle 提供了核心插件作为其发行版的一部分，所以你只需要简单地使用上面的插件即可。但是，对于第三方插件，你需要进行配置以使插件在构建类路径中可用。有关如何执行此操作的详细信息，请参阅&lt;a2&gt;第 59.5 节，《构建脚本的外部依赖》&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pre-configured repository that looks for dependencies in Bintray's JCenter.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025902Z" creationid="huanghaohang" creationdate="20190603T025902Z">
        <seg>一个在 Bintray 的 Jcenter 中查找依赖的预配置仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pre-configured repository that looks for dependencies in Maven Central.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025837Z" creationid="huanghaohang" creationdate="20190603T025837Z">
        <seg>一个在 Maven Cemtral 中查找依赖的预配置仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A pre-configured repository that looks for dependencies in the local Maven repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025912Z" creationid="huanghaohang" creationdate="20190603T025912Z">
        <seg>一个在本地 Maven 仓库中查找依赖的预配置仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A project can have as many as JAR archives as you want. You can also add WAR, ZIP and TAR archives to your project. Archives are created using the various archive tasks: &lt;a0&gt;&lt;c1&gt;Zip&lt;/c1&gt;&lt;/a0&gt;, &lt;a2&gt;&lt;c3&gt;Tar&lt;/c3&gt;&lt;/a2&gt;, &lt;a4&gt;&lt;c5&gt;Jar&lt;/c5&gt;&lt;/a4&gt;, &lt;a6&gt;&lt;c7&gt;War&lt;/c7&gt;&lt;/a6&gt;, and &lt;a8&gt;&lt;c9&gt;Ear&lt;/c9&gt;&lt;/a8&gt;. They all work the same way, so let's look at how you create a ZIP file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135301Z" creationid="huanghaohang" creationdate="20171126T130837Z">
        <seg>一个项目可以有尽可能多的 JAR 文件。你也可以将 WAR，ZIP 和 TAR 文件添加到你的项目中。这些归档文件是通过以下这些不同的归档任务来创建的： &lt;a0&gt;&lt;c1&gt;Zip&lt;/c1&gt;&lt;/a0&gt;，&lt;a2&gt;&lt;c3&gt;Tar&lt;/c3&gt;&lt;/a2&gt;，&lt;a4&gt;&lt;c5&gt;Jar&lt;/c5&gt;&lt;/a4&gt;，&lt;a6&gt;&lt;c7&gt;War&lt;/c7&gt;&lt;/a6&gt; 和 &lt;a8&gt;&lt;c9&gt;Ear&lt;/c9&gt;&lt;/a8&gt;。它们的使用方式相同，所以让我们来看看如何创建一个 ZIP 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A project can have multiple repositories. Gradle will look for a dependency in each repository in the order they are specified, stopping at the first repository that contains the requested module.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T045952Z" creationid="huanghaohang" creationdate="20170908T045151Z">
        <seg>项目可以有多个仓库。 Gradle将按照指定的顺序在每个仓库中查找依赖，并在找到包含了所请求模块的第一个仓库后停止。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A project path has the following pattern: It starts always with a colon, which denotes the root project. The root project is the only project in a path that is not specified by its name. The path &lt;c0&gt;:bluewhale&lt;/c0&gt; corresponds to the file system path &lt;c1&gt;water/bluewhale&lt;/c1&gt; in the case of the example above.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T135533Z" creationid="huanghaohang" creationdate="20190616T135533Z">
        <seg>项目路径具有以下模式：它始终以冒号开头，表示根项目。根项目是路径中唯一不由其名称指定的项目。路径 &lt;c0&gt;:bluewhale&lt;/c0&gt; 对应于上面示例中的文件系统路径 &lt;c1&gt;water/bluewhale&lt;/c1&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A project's configurations are managed by a &lt;c0&gt;configurations&lt;/c0&gt; object. The closure you pass to the configurations object is applied against its API. To learn more about this API have a look at &lt;a1&gt;&lt;c2&gt;ConfigurationContainer&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153532Z" creationid="huanghaohang" creationdate="20190521T125042Z">
        <seg>项目的配置由 &lt;c0&gt;configurations&lt;/c0&gt; 对象管理。你传给这个配置对象的闭包将通过它对应的 API 被应用。要了解有关此 API 的更多信息，请查看 &lt;a1&gt;&lt;c2&gt;ConfigurationContainer&lt;/c2&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A published Ivy module can be consumed by Gradle (see &lt;a0&gt;Chapter 50, &lt;i1&gt;Dependency Management&lt;/i1&gt;&lt;/a0&gt;) and other tools that understand the Ivy format.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155041Z" creationid="huanghaohang" creationdate="20210516T155041Z">
        <seg>已发布的 Ivy 模块可以在Gradle（参见《&lt;a0&gt;第五十章，&lt;i1&gt;依赖管理&lt;/i1&gt;&lt;/a0&gt;》）或其他支持 Ivy 格式的工具中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A rich domain model for describing your build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T140853Z" creationid="95" creationdate="20170721T140853Z">
        <seg>丰富的领域模型来描述您的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A set of sources may depend on header files provided by another binary component within the same project. A common example is a native executable component that uses functions provided by a separate native library component.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022559Z" creationid="huanghaohang" creationdate="20190610T022559Z">
        <seg>一组源可能依赖于同一项目中另一个二进制组件提供的头文件。一个常见的示例是，一个本机可执行组件使用了单独的本机库组件提供的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A shortcut task definition</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031802Z" creationid="huanghaohang" creationdate="20170927T031802Z">
        <seg>快速任务定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A similar mechanism exists for selecting &lt;a0&gt;&lt;c1&gt;TargetedNativeComponent.targetBuildTypes()&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;TargetedNativeComponent.targetFlavors()&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053717Z" creationid="huanghaohang" creationdate="20190610T053717Z">
        <seg>在选择 &lt;a0&gt;&lt;c1&gt;TargetedNativeComponent.targetBuildTypes()&lt;/c1&gt;&lt;/a0&gt; 和&lt;a2&gt;&lt;c3&gt;TargetedNativeComponent.targetFlavors()&lt;/c3&gt;&lt;/a2&gt;上也存在着类似的机制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A simple option for logging in your build file is to write messages to standard output. Gradle redirects anything written to standard output to it's logging system at the &lt;c0&gt;QUIET&lt;/c0&gt; log level.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T011938Z" creationid="huanghaohang" creationdate="20180107T011720Z">
        <seg>一种简单的在构建文件中打印日志的方法是把消息写到标准输出中。Gradle 会把写到标准输出的所有内容重定向到它的日志系统的 &lt;c0&gt;QUIET&lt;/c0&gt; 级别中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A simple repository on the local filesystem. Does not support any meta-data formats.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030103Z" creationid="huanghaohang" creationdate="20190603T030040Z">
        <seg>一个在本地文件系统上的简单仓库。不支持任何元数据格式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A single build may utilize different tool chains to build variants for different platforms. To this end, the core 'native-binary' plugins will attempt to locate and make available supported tool chains. However, the set of tool chains for a project may also be explicitly defined, allowing additional cross-compilers to be configured as well as allowing the install directories to be specified.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084835Z" creationid="huanghaohang" creationdate="20190610T084821Z">
        <seg>单个构建可以利用不同的工具链来构建不同平台的变体。为此，核心的“本机二进制”插件将尝试查找并提供受支持的工具链。不过，一个项目里的工具链集也可以被显式定义，允许配置其他交叉编译器以及指定安装目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A standalone project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145330Z" creationid="huanghaohang" creationdate="20190708T145330Z">
        <seg>独立项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task may only contain a single incremental task action.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T135124Z" creationid="huanghaohang" creationdate="20190706T135117Z">
        <seg>一个任务可能只包含一个增量任务操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task that aggregates the results of all tasks of a particular type: eg. test report task combines the outputs of all executed test tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030630Z" creationid="huanghaohang" creationdate="20170922T030630Z">
        <seg>聚合特定类型的所有任务的结果的任务：例如，测试报告任务结合了所有执行的测试任务的输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task with no defined outputs will &lt;s0&gt;&lt;e1&gt;never&lt;/e1&gt;&lt;/s0&gt; be considered up-to-date. For scenarios where the outputs of a task are not files, or for more complex scenarios, the &lt;a2&gt;&lt;c3&gt;TaskOutputs.upToDateWhen()&lt;/c3&gt;&lt;/a2&gt; method allows you to calculate programmatically if the tasks outputs should be considered up to date.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T004643Z" creationid="huanghaohang" creationdate="20170923T004643Z">
        <seg>一个任务如果没有定义输出，那么它将&lt;s0&gt;&lt;e1&gt;永远不会&lt;/e1&gt;&lt;/s0&gt;被当作是最新的。对于任务的输出不是文件或是更复杂的场景，&lt;a2&gt; &lt;c3&gt;TaskOutputs.upToDateWhen()&lt;/c3&gt;&lt;/a2&gt;方法允许你以编程方式计算任务的输出是否应该被视为最新的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A task with only outputs defined will be considered up-to-date if those outputs are unchanged since the previous build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T004824Z" creationid="huanghaohang" creationdate="20170923T004824Z">
        <seg>一个只定义了输出的任务，如果自上次构建以来它的输出没变，那么它会被视为最新的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A very common way for projects to be coupled is by using configuration injection (&lt;a0&gt;Section 56.1, “Cross project configuration”&lt;/a0&gt;). It may not be immediately apparent, but using key Gradle features like the &lt;c1&gt;allprojects&lt;/c1&gt; and &lt;c2&gt;subprojects&lt;/c2&gt; keywords automatically cause your projects to be coupled. This is because these keywords are used in a &lt;c3&gt;build.gradle&lt;/c3&gt; file, which defines a project. Often this is a "root project" that does nothing more than define common configuration, but as far as Gradle is concerned this root project is still a fully-fledged project, and by using &lt;c4&gt;allprojects&lt;/c4&gt; that project is effectively coupled to all other projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T120545Z" creationid="huanghaohang" creationdate="20190621T152200Z">
        <seg>通过使用配置注入（《&lt;a0&gt;第56.1节，跨项目配置&lt;/a0&gt;》），是一种很常见的使项目耦合的方式。它可能不明显，但是使用关键的 Gradle 功能如 &lt;c1&gt;allprojects&lt;/c1&gt; 和 &lt;c2&gt;subproject&lt;/c2&gt; 关键字，会自动导致你的项目耦合。这是因为这些关键字在定义项目的 &lt;c3&gt;build.gradle&lt;/c3&gt; 文件中使用。而通常这是一个“根项目”，它只定义公共配置而不执行其他操作，但对 Gradle 而言这个根项目仍然是一个完全成熟的项目，并且通过使用 &lt;c4&gt;allprojects&lt;/c4&gt;，该项目实际上就和所有其他项目耦合了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A very flexible general purpose build tool like Ant.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T133918Z" creationid="95" creationdate="20170721T133918Z">
        <seg>一个像Ant一样非常灵活而通用的构建工具。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ANTLR grammar files for the given source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013804Z" creationid="huanghaohang" creationdate="20190123T013804Z">
        <seg>给定源集的 ANTLR 语法文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015217Z" creationid="huanghaohang" creationdate="20180314T015217Z">
        <seg>API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>About this user guide</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072441Z" creationid="haohang" creationdate="20170720T072441Z">
        <seg>关于本用户指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Accessing the web via a proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034148Z" creationid="huanghaohang" creationdate="20180517T034148Z">
        <seg>通过代理访问网络</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add dependency configurations to the project (see &lt;a0&gt;Section 8.3, “Dependency configurations”&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100118Z" creationid="huanghaohang" creationdate="20180130T100118Z">
        <seg>向项目中添加依赖配置 （见&lt;a0&gt;第 8.3 节，《依赖配置》&lt;/a0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add new properties and methods to existing type via extensions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100127Z" creationid="huanghaohang" creationdate="20180130T100127Z">
        <seg>通过扩展对现有类型添加新的属性和方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add tasks to the favorites (see Favorites tab)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144420Z" creationid="huanghaohang" creationdate="20170911T144420Z">
        <seg>将任务添加到收藏夹（见收藏夹Favorites选项卡）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add tasks to the project (e.g. compile, test)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100042Z" creationid="huanghaohang" creationdate="20180130T100014Z">
        <seg>将任务添加到 project（如编译、测试）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Added a new domain object type: &lt;a0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024759Z" creationid="huanghaohang" creationdate="20180131T024759Z">
        <seg>添加了一个新的域对象类型： &lt;a0&gt; &lt;c1&gt;SourceSet&lt;/c1&gt; &lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding a JAR containing the classes of a source set:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095303Z" creationid="haohang" creationdate="20180326T095303Z">
        <seg>添加一个包含源集的类的 JAR 包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding a description to a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021722Z" creationid="huanghaohang" creationdate="20180201T021722Z">
        <seg>向任务添加描述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding a test suite to run the tests in a source set:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095449Z" creationid="haohang" creationdate="20180326T095449Z">
        <seg>添加测试套件以运行源集里的测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding dependencies to a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021707Z" creationid="huanghaohang" creationdate="20180201T021707Z">
        <seg>向任务添加依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Additional dependencies for compiling tests.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053819Z" creationid="haohang" creationdate="20180313T053819Z">
        <seg>用于编译测试代码的其他依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Additional dependencies for running tests only.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053850Z" creationid="haohang" creationdate="20180313T053850Z">
        <seg>只用于运行测试的其他依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds C source compilation capabilities to a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143023Z" creationid="huanghaohang" creationdate="20180205T143023Z">
        <seg>向项目添加 C语言代码编译的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds C++ source compilation capabilities to a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143035Z" creationid="huanghaohang" creationdate="20180205T143035Z">
        <seg>向项目添加 C++ 代码编译的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Groovy configuration to &lt;c0&gt;.project&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025328Z" creationid="huanghaohang" creationdate="20181210T025328Z">
        <seg>添加 Groovy 配置到 &lt;c0&gt;.project&lt;/c0&gt;文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Java compilation, testing and bundling capabilities to a project. It serves as the basis for many of the other Gradle plugins. See also &lt;a0&gt;Chapter 7, &lt;i1&gt;Java Quickstart&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140841Z" creationid="huanghaohang" creationdate="20180205T140841Z">
        <seg>向一个项目添加 Java 编译，测试和捆绑的功能。它是许多其他 Gradle 插件的基础服务。另请参阅《&lt;a0&gt;第7章，&lt;i1&gt;Java 快速入门&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Java configuration to &lt;c0&gt;.project&lt;/c0&gt;. Generates &lt;c1&gt;.classpath&lt;/c1&gt; and JDT settings file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025312Z" creationid="huanghaohang" creationdate="20181210T025312Z">
        <seg>添加 Java 配置到 &lt;c0&gt;.project&lt;/c0&gt;。生成 &lt;c1&gt;.classpath&lt;/c1&gt; 和 JDT 设置文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Java configuration to the module and project files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031023Z" creationid="huanghaohang" creationdate="20181212T031023Z">
        <seg>将 Java 配置添加到模块和项目文件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Objective-C source compilation capabilities to a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143053Z" creationid="huanghaohang" creationdate="20180205T143053Z">
        <seg>向项目中添加 Objective-C 代码编译的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Objective-C++ source compilation capabilities to a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143108Z" creationid="huanghaohang" creationdate="20180205T143108Z">
        <seg>向项目中添加 Objective-C 代码编译的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds Scala support to &lt;c0&gt;.project&lt;/c0&gt; and &lt;c1&gt;.classpath&lt;/c1&gt; files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025347Z" creationid="huanghaohang" creationdate="20181210T025347Z">
        <seg>添加 Scala 支持到 &lt;c0&gt;.project&lt;/c0&gt; 和 &lt;c1&gt;.classpath&lt;/c1&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds a &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt; task for generating Gradle wrapper files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090745Z" creationid="huanghaohang" creationdate="20180211T090745Z">
        <seg>添加用于生成 Gradle wrapper 文件的 &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds all &lt;c0&gt;.java&lt;/c0&gt; files found in the Groovy source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003350Z" creationid="huanghaohang" creationdate="20180407T003350Z">
        <seg>添加所有在 Groovy 源目录中找到的 &lt;c0&gt;.java&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds all &lt;c0&gt;.java&lt;/c0&gt; files found in the Scala source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020403Z" creationid="huanghaohang" creationdate="20180407T020403Z">
        <seg>添加在 Scala 源目录中找到的所有 &lt;c0&gt;.java&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds all source files found in the Groovy source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003358Z" creationid="huanghaohang" creationdate="20180407T003358Z">
        <seg>添加所有在 Groovy 的源目录中找到的源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds all source files found in the Scala source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020408Z" creationid="huanghaohang" creationdate="20180407T020408Z">
        <seg>添加在 Scala 的源目录中找到的所有源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds ear application support to &lt;c0&gt;.project&lt;/c0&gt; file. Generates WTP settings files only if &lt;c1&gt;eclipse-wtp&lt;/c1&gt; plugin was applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025520Z" creationid="huanghaohang" creationdate="20181210T025520Z">
        <seg>添加 ear 应用程序支持到 &lt;c0&gt;.project&lt;/c0&gt; 文件。仅在应用了 &lt;c1&gt;eclipse-wtp&lt;/c1&gt; 插件时生成 WTP 设置文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds integration with Visual Studio.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090658Z" creationid="huanghaohang" creationdate="20180211T090658Z">
        <seg>添加对 Visual Studio 的集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds native assembly language capabilities to a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143000Z" creationid="huanghaohang" creationdate="20180205T142941Z">
        <seg>向项目添加本地汇编语言的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds some shared convention properties to the project, relating to report generation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092854Z" creationid="huanghaohang" creationdate="20180218T092830Z">
        <seg>将一些共享的约定属性添加到项目中，它们与报告的生成有关。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for assembling web application WAR files. See also &lt;a0&gt;Chapter 10, &lt;i1&gt;Web Application Quickstart&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143704Z" creationid="huanghaohang" creationdate="20180207T143458Z">
        <seg>添加装配 web 应用程序的 WAR 文件的支持。另请参阅《&lt;a0&gt;第十章，&lt;i1&gt;Web 应用程序快速入门&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for building Groovy projects. See also &lt;a0&gt;Chapter 9, &lt;i1&gt;Groovy Quickstart&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140933Z" creationid="huanghaohang" creationdate="20180205T140933Z">
        <seg>添加对 Groovy 项目构建的支持。另请参阅《&lt;a0&gt;第九章，&lt;i1&gt;Groovy 快速入门&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for building J2EE applications.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T014456Z" creationid="huanghaohang" creationdate="20180206T014456Z">
        <seg>添加用于构建 J2EE 应用程序的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for building OSGi bundles.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143456Z" creationid="huanghaohang" creationdate="20180207T143456Z">
        <seg>添加构建 OSGi 包的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for building Scala projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140946Z" creationid="huanghaohang" creationdate="20180205T140946Z">
        <seg>添加对 Scala 项目构建的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for building ZIP and TAR distributions for a Java library.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143842Z" creationid="huanghaohang" creationdate="20180207T143842Z">
        <seg>添加构建 Java 库的 ZIP 和 TAR 分发包的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for building ZIP and TAR distributions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143747Z" creationid="huanghaohang" creationdate="20180207T143747Z">
        <seg>添加构建 ZIP 和 TAR 分发包的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for generating parsers using &lt;a0&gt;Antlr&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141243Z" creationid="huanghaohang" creationdate="20180205T141243Z">
        <seg>添加对使用 &lt;a0&gt;Antlr&lt;/a0&gt; 作为生成解析器的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for including Windows resources in native binaries.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143143Z" creationid="huanghaohang" creationdate="20180205T143143Z">
        <seg>添加对本地二进制文件包含 Windows 资源的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for initializing a new Gradle build. Handles converting a Maven build to a Gradle build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090433Z" creationid="huanghaohang" creationdate="20180211T090218Z">
        <seg>添加用于初始化一个新 Gradle 构建的支持，以及处理从 Maven 构建到 Gradle 构建的转换。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for publishing artifacts to Maven repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143426Z" creationid="huanghaohang" creationdate="20180207T143426Z">
        <seg>添加将项目发布到 Maven 仓库的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds support for running &lt;a0&gt;CUnit&lt;/a0&gt; tests.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090448Z" creationid="huanghaohang" creationdate="20180211T090448Z">
        <seg>添加用于运行 &lt;a0&gt;CUnit&lt;/a0&gt; 测试的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds tasks for running and bundling a Java project as a command-line application.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T014449Z" creationid="huanghaohang" creationdate="20180206T014449Z">
        <seg>添加了一些用于运行和捆绑 Java 项目的任务作为命令行应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the Groovy source sets concept to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092812Z" creationid="huanghaohang" creationdate="20180218T092812Z">
        <seg>向项目添加 Groovy 源集的概念。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the Scala source sets concept to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092828Z" creationid="huanghaohang" creationdate="20180218T092828Z">
        <seg>向项目添加 Scala 源集的概念。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the ability to digitally sign built files and artifacts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090018Z" creationid="huanghaohang" creationdate="20180211T090018Z">
        <seg>添加对生成的文件或工件进行数字签名的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the source sets concept to the project. Does not add any particular source sets.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092753Z" creationid="huanghaohang" creationdate="20180218T092753Z">
        <seg>对项目添加源集的概念。它不会添加任何特定的源集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds the standard lifecycle tasks and configures reasonable defaults for the archive tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T022710Z" creationid="huanghaohang" creationdate="20180218T022710Z">
        <seg>添加标准的生命周期任务，并为归档任务默认进行合理的配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adds web application support to &lt;c0&gt;.project&lt;/c0&gt; file. Generates WTP settings files only if &lt;c1&gt;eclipse-wtp&lt;/c1&gt; plugin was applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025528Z" creationid="huanghaohang" creationdate="20181210T025458Z">
        <seg>添加 web 应用程序支持到 &lt;c0&gt;.project&lt;/c0&gt; 文件。仅在应用了 &lt;c1&gt;eclipse-wtp&lt;/c1&gt; 插件时生成 WTP 设置文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adjusts java compiler settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145604Z" creationid="95" creationdate="20190201T145604Z">
        <seg>调整 java 编译器设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After such an execution you find the following new or updated files in your project directory (in case the default configuration of the wrapper task is used).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130142Z" creationid="huanghaohang" creationdate="20191219T130142Z">
        <seg>执行之后，你会在你的项目目录中发现以下新生成或更新的文件（在使用的 wrapper 任务为默认配置的情况下）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Again, this defines a task called &lt;c0&gt;hello&lt;/c0&gt; with a single closure to execute. We will use this task definition style throughout the user guide.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155544Z" creationid="95" creationdate="20170726T155319Z">
        <seg>这里再一次使用了一个闭包的方式来定义一个 &lt;c0&gt;hello&lt;/c0&gt; 任务去执行。在本用户指南中，我们还会再使用这种任务定义的风格。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All &lt;c0&gt;.java&lt;/c0&gt; files of this source set. Some plugins, such as the Groovy plugin, add additional Java source files to this collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101502Z" creationid="haohang" creationdate="20180320T101257Z">
        <seg>该源集的所有 &lt;c0&gt;.java&lt;/c0&gt; 文件。有些插件，如Groovy 插件，会将其他 Java 源文件添加到此集合中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All Checkstyle tasks, including &lt;c0&gt;checkstyleMain&lt;/c0&gt; and &lt;c1&gt;checkstyleTest&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135804Z" creationid="huanghaohang" creationdate="20180516T135804Z">
        <seg>所有 Checkstyle 任务，包括 &lt;c0&gt;checkstyleMain&lt;/c0&gt; 和 &lt;c1&gt;checkstyleTest&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All CodeNarc tasks, including &lt;c0&gt;codenarcMain&lt;/c0&gt; and &lt;c1&gt;codenarcTest&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142001Z" creationid="huanghaohang" creationdate="20180516T142001Z">
        <seg>所有的 CodeNarc 任务，包括 &lt;c0&gt;codenarcMain&lt;/c0&gt; 和 &lt;c1&gt;codenarcTest&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All FindBugs tasks, including &lt;c0&gt;findbugsMain&lt;/c0&gt; and &lt;c1&gt;findbugsTest&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142427Z" creationid="huanghaohang" creationdate="20180516T142427Z">
        <seg>所有 FindBugs 任务，包括 &lt;c0&gt;findbugsMain&lt;/c0&gt; 和 &lt;c1&gt;findbugsTest&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All Groovy source files of this source set. Contains only the &lt;c0&gt;.groovy&lt;/c0&gt; files found in the Groovy source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T234947Z" creationid="huanghaohang" creationdate="20180406T234947Z">
        <seg>此源码集的所有 Groovy 源文件。仅包含在 Groovy 源目录中找到的 &lt;c0&gt;.groovy&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All JDepend tasks, including &lt;c0&gt;jdependMain&lt;/c0&gt; and &lt;c1&gt;jdependTest&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142734Z" creationid="huanghaohang" creationdate="20180516T142734Z">
        <seg>所有 JDepend 任务，包括 &lt;c0&gt;jdependMain&lt;/c0&gt; 和 &lt;c1&gt;jdependTest&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All PMD tasks, including &lt;c0&gt;pmdMain&lt;/c0&gt; and &lt;c1&gt;pmdTest&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143227Z" creationid="huanghaohang" creationdate="20180516T143227Z">
        <seg>所有的 PMD 任务，包括 &lt;c0&gt;pmdMain&lt;/c0&gt; 和 &lt;c1&gt;pmdTest&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All Scala source files of this source set. Contains only the &lt;c0&gt;.scala&lt;/c0&gt; files found in the Scala source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020321Z" creationid="huanghaohang" creationdate="20180407T020321Z">
        <seg>此源码集的所有 Scala 源文件。仅包含在 Scala 源目录中找到的 &lt;c0&gt;.scala&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All archive tasks in the project, including &lt;c0&gt;jar&lt;/c0&gt;. Some plugins add additional archive tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T034850Z" creationid="haohang" creationdate="20180313T034602Z">
        <seg>项目中的所有归档任务，包括 &lt;c0&gt;jar&lt;/c0&gt;。有些插件会向项目添加另外的归档任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All attributes for a dependency are optional, except the name. It depends on the repository type, which information is need for actually finding the dependencies in the repository. See &lt;a0&gt;Section 50.6, “Repositories”&lt;/a0&gt;. If you work for example with Maven repositories, you need to define the group, name and version. If you work with filesystem repositories you might only need the name or the name and the version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140736Z" creationid="huanghaohang" creationdate="20190602T140052Z">
        <seg>依赖的所有属性除了名称之外都是可选的。这取决于仓库类型，这些信息实际上用于查找仓库中的依赖。请参阅 &lt;a0&gt;第50.6节，《存储库》&lt;/a0&gt;。 比如如果你使用 Maven 仓库，那么就需要定义组，名称及版本。如果你使用文件系统仓库，那么可能只需要名称或名称及版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All build setup types include the setup of the Gradle Wrapper.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214329Z" creationid="95" creationdate="20190131T214329Z">
        <seg>所有构建设置类型都包括 Gradle Wrapper 的设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All enhanced objects in Gradle's domain model can hold extra user-defined properties. This includes, but is not limited to, projects, tasks, and source sets. Extra properties can be added, read and set via the owning object's &lt;c0&gt;ext&lt;/c0&gt; property. Alternatively, an &lt;c1&gt;ext&lt;/c1&gt; block can be used to add multiple properties at once.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133515Z" creationid="huanghaohang" creationdate="20170913T133515Z">
        <seg>在Gradle域模型中，所有增强的对象都可以保存用户定义的额外属性。这包括但不限于项目（projects），任务（tasks）和源码集（source sets）。额外属性可以通过所属对象的&lt;c0&gt;ext&lt;/c0&gt;属性进行添加，读取和。此外，一个 &lt;c1&gt;ext&lt;/c1&gt;块可以一次添加多个属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of Gradle's scripting features can be leveraged to configure Sonar Runner as needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150718Z" creationid="huanghaohang" creationdate="20181201T150718Z">
        <seg>可以利用 Gradle 的所有脚本特性根据需要去配置 Sonar Runner。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of the artifacts for the module are then requested from the &lt;s0&gt;&lt;e1&gt;same repository&lt;/e1&gt;&lt;/s0&gt; that was chosen in the process above.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033409Z" creationid="huanghaohang" creationdate="20190604T033409Z">
        <seg>然后将从上面的过程所选择的 &lt;s0&gt;&lt;e1&gt;同一个仓库&lt;/e1&gt;&lt;/s0&gt; 中请求这个模块的所有工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of the files from the &lt;c0&gt;src/dist&lt;/c0&gt; directory are copied. To include any static files in the distribution, simply arrange them in the &lt;c1&gt;src/dist&lt;/c1&gt; directory, or add it to the content of the distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143925Z" creationid="95" creationdate="20190131T143925Z">
        <seg>所有在 &lt;c0&gt;src/dist&lt;/c0&gt; 目录中的文件都会被复制。要在分发中包含任何的静态文件，只需要把它们放到 &lt;c1&gt;src/dist&lt;/c1&gt; 目录，或将其添加到分发的内容中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of the files in the "&lt;c0&gt;src/&lt;e1&gt;&lt;c2&gt;$distribution.name&lt;/c2&gt;&lt;/e1&gt;/dist&lt;/c0&gt;" directory will automatically be included in the distribution. You can add additional files by configuring the &lt;a3&gt;&lt;c4&gt;Distribution&lt;/c4&gt;&lt;/a3&gt; object that is part of the container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061229Z" creationid="huanghaohang" creationdate="20190128T061229Z">
        <seg>“&lt;c0&gt;src/&lt;e1&gt;&lt;c2&gt;$distribution.name&lt;/c2&gt;&lt;/e1&gt;/dist&lt;/c0&gt;”目录中的所有文件都会被自动包含在分发中。你可以通过配置作为容器中的一部分的&lt;a3&gt;&lt;c4&gt;Distribution&lt;/c4&gt;&lt;/a3&gt;对象来添加其他文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of these files &lt;s0&gt;&lt;e1&gt;should&lt;/e1&gt;&lt;/s0&gt; be submitted to your version control system. This only needs to be done once. After these files have been added to the project, the project should then be built with the added &lt;s2&gt;&lt;s3&gt;gradlew&lt;/s3&gt;&lt;/s2&gt; command. The &lt;s4&gt;&lt;s5&gt;gradlew&lt;/s5&gt;&lt;/s4&gt; command can be used &lt;s6&gt;&lt;e7&gt;exactly&lt;/e7&gt;&lt;/s6&gt; the same way as the &lt;s8&gt;&lt;s9&gt;gradle&lt;/s9&gt;&lt;/s8&gt; command.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T135250Z" creationid="huanghaohang" creationdate="20191219T135250Z">
        <seg>所有这些文件都 &lt;s0&gt;&lt;e1&gt;应该&lt;/e1&gt;&lt;/s0&gt; 提交到版本控制系统中。这只需要做一次。在将这些文件添加到项目之后，应该使用所添加的 &lt;s2&gt;&lt;s3&gt;gradlew&lt;/s3&gt;&lt;/s2&gt; 命令来构建项目。&lt;s4&gt;&lt;s5&gt;gradlew&lt;/s5&gt;&lt;/s4&gt; 命令可以和 &lt;s8&gt;&lt;s9&gt;gradle&lt;/s9&gt;&lt;/s8&gt; 命令&lt;s6&gt;&lt;e7&gt;完全&lt;/e7&gt;&lt;/s6&gt;一样地使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of this happened during the &lt;c0&gt;apply plugin: "java"&lt;/c0&gt; step. In the example above, we &lt;s1&gt;&lt;e2&gt;changed&lt;/e2&gt;&lt;/s1&gt; the desired location of the class files after this conventional configuration had been performed. Notice by the output with the example that the value for &lt;c3&gt;compileJava.destinationDir&lt;/c3&gt; also changed to reflect the configuration change.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T031612Z" creationid="huanghaohang" creationdate="20180131T025501Z">
        <seg>所有这一切都发生在 &lt;c0&gt;apply plugin: "java"&lt;/c0&gt; 这一步过程中。在上面的例子中，我们在约定配置被执行之后，&lt;s1&gt;&lt;e2&gt;修改了&lt;/e2&gt;&lt;/s1&gt;类文件的预定位置。通过这个例子的输出可以注意到，&lt;c3&gt;compileJava.destinationDir&lt;/c3&gt; 的值也改变了，以反映配置的变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All source files of this source set. This include all resource files and all Java source files. Some plugins, such as the Groovy plugin, add additional source files to this collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094526Z" creationid="haohang" creationdate="20180326T094526Z">
        <seg>该源集的所有源文件，包括所有资源文件和 Java 源文件。有些插件（如 Groovy 插件）会将其他源文件添加到此集合中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All tasks that build the associated archives.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091352Z" creationid="huanghaohang" creationdate="20190606T091352Z">
        <seg>所有构建关联归档的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All tasks which produce the compile classpath. This includes the &lt;c0&gt;jar&lt;/c0&gt; task for project dependencies included in the &lt;c1&gt;compile&lt;/c1&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062804Z" creationid="haohang" creationdate="20180312T061836Z">
        <seg>所有产生编译类路径的任务，也包括了 &lt;c0&gt;jar&lt;/c0&gt; 任务，因为项目依赖被包含在 &lt;c1&gt;compile&lt;/c1&gt; 配置中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All tasks which produce the source set's compile classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073342Z" creationid="haohang" creationdate="20180312T073342Z">
        <seg>所有产生源集编译类路径的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the build logic is in the &lt;c0&gt;build.gradle&lt;/c0&gt; of the root project. &lt;s1&gt;[&lt;a2&gt;23&lt;/a2&gt;]&lt;/s1&gt; A &lt;s3&gt;&lt;e4&gt;lib&lt;/e4&gt;&lt;/s3&gt; dependency is a special form of an execution dependency. It causes the other project to be built first and adds the jar with the classes of the other project to the classpath. It also adds the dependencies of the other project to the classpath. So you can enter the &lt;c5&gt;api&lt;/c5&gt; directory and trigger a &lt;s6&gt;&lt;c7&gt;gradle compile&lt;/c7&gt;&lt;/s6&gt;. First &lt;c8&gt;shared&lt;/c8&gt; is built and then &lt;c9&gt;api&lt;/c9&gt; is built. Project dependencies enable partial multi-project builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162504Z" creationid="huanghaohang" creationdate="20190617T162504Z">
        <seg>所有构建逻辑都在根项目的 &lt;c0&gt;build.gradle&lt;/c0&gt; 中。 &lt;s1&gt;[&lt;a2&gt;23&lt;/a2&gt;]&lt;/s1&gt;&lt;s3&gt;&lt;e4&gt;库&lt;/e4&gt;&lt;/s3&gt;依赖是执行依赖的一种特殊形式。它会首先构建另一个项目，并把其他项目的 jar 文件和类一起添加到类路径中。它还将其他项目的依赖也添加到类路径。因此你可以进入 &lt;c5&gt;api&lt;/c5&gt; 目录并触发 &lt;s6&gt;&lt;c7&gt;gradle compile&lt;/c7&gt;&lt;/s6&gt;。首先构建 &lt;c8&gt;shared&lt;/c8&gt;，然后构建 &lt;c9&gt;api&lt;/c9&gt;。项目依赖支持部分多项目构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All verification tasks in the project, including &lt;c0&gt;test&lt;/c0&gt;. Some plugins add additional verification tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035004Z" creationid="haohang" creationdate="20180313T034907Z">
        <seg>项目中的所有验证任务，包括 &lt;c0&gt;test&lt;/c0&gt;。有些插件会向项目添加另外的验证任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allow tests to be declared with javadoc-style annotations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090641Z" creationid="huanghaohang" creationdate="20190611T090641Z">
        <seg>允许使用 javadoc 风格的注解声明测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring classpath information</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061721Z" creationid="huanghaohang" creationdate="20181210T061721Z">
        <seg>允许配置类路径信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring jdt information (source/target java compatibility)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061752Z" creationid="huanghaohang" creationdate="20181210T061726Z">
        <seg>允许配置 jdt 信息（source/target java 兼容性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring module information</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061229Z" creationid="huanghaohang" creationdate="20181212T061229Z">
        <seg>允许配置模块信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring project information</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061713Z" creationid="huanghaohang" creationdate="20181210T061713Z">
        <seg>允许配置项目信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring the workspace XML</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061235Z" creationid="huanghaohang" creationdate="20181212T061235Z">
        <seg>允许配置工作区 XML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring wtp component information only if &lt;c0&gt;eclipse-wtp&lt;/c0&gt; plugin was applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061813Z" creationid="huanghaohang" creationdate="20181210T061813Z">
        <seg>仅当 &lt;c0&gt;eclipse-wtp&lt;/c0&gt; 插件被应用时，允许配置 wtp 组件信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows configuring wtp facet information only if &lt;c0&gt;eclipse-wtp&lt;/c0&gt; plugin was applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061858Z" creationid="huanghaohang" creationdate="20181210T061858Z">
        <seg>仅当 &lt;c0&gt;eclipse-wtp&lt;/c0&gt; 插件被应用时，允许配置 wtp 方面的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Also have a look at &lt;a0&gt;&lt;c1&gt;Ear&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142927Z" creationid="huanghaohang" creationdate="20180416T142927Z">
        <seg>另请参阅 &lt;a0&gt;&lt;c1&gt;Ear&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, Sonar properties can be set from the command line. See &lt;a0&gt;Section 35.6, “Configuring Sonar Settings from the Command Line”&lt;/a0&gt; for more information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023159Z" creationid="huanghaohang" creationdate="20181202T023159Z">
        <seg>作为选择，也可以从命令行设置 Sonar 属性。更多信息请参见《&lt;a0&gt;第35.6节，“从命令行配置声纳设置”&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, a library dependency can be provided directly to the &lt;c0&gt;ExecutableBinary&lt;/c0&gt; for the &lt;c1&gt;executable&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022847Z" creationid="huanghaohang" creationdate="20190610T022847Z">
        <seg>另外，一个库依赖可以直接提供给 &lt;c1&gt;executable&lt;/c1&gt; 的 &lt;c0&gt;ExecutableBinary&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, some or all connection settings can be set from the command line (see &lt;a0&gt;Section 35.6, “Configuring Sonar Settings from the Command Line”&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100232Z" creationid="huanghaohang" creationdate="20180715T100232Z">
        <seg>或者也可以从命令行设置其中一些或全部的连接设置（见《&lt;a0&gt;第 35.6 节，“从命令行中配置 Sonar 设置”&lt;/a0&gt;》）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, sometimes the module you request can change over time, even for the same version. An example of this type of &lt;s0&gt;&lt;e1&gt;changing module&lt;/e1&gt;&lt;/s0&gt; is a Maven &lt;c2&gt;SNAPSHOT&lt;/c2&gt; module, which always points at the latest artifact published. In other words, a standard Maven snapshot is a module that never stands still so to speak, it is a "changing module".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T025521Z" creationid="huanghaohang" creationdate="20190521T025120Z">
        <seg>或者，有时你请求的模块可能会随着时间的推移而变化，即使是版本相同。这种&lt;s0&gt;&lt;e1&gt;变化模块&lt;/e1&gt;&lt;/s0&gt;类型的一个例子是Maven的&lt;c2&gt;SNAPSHOT&lt;/c2&gt;模块，它始终指向最新发布的工件。换句话说，一个标准的Maven快照是一个永远不会不变的模块，可以这样说，它是一个“变化模块”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can use the &lt;c0&gt;-p&lt;/c0&gt; option to specify the project directory to use. For multi-project builds you should use &lt;c1&gt;-p&lt;/c1&gt; option instead of &lt;c2&gt;-b&lt;/c2&gt; option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114222Z" creationid="huanghaohang" creationdate="20170909T114222Z">
        <seg>或者，你也可以使用&lt;c0&gt;-p&lt;/c0&gt;选项来指定使用哪一个项目目录。对于多项目构建，你应该使用&lt;c1&gt;-p&lt;/c1&gt;而不是&lt;c2&gt;-b&lt;/c2&gt;选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although Gradle already offers parallel test execution via &lt;a0&gt;&lt;c1&gt;Test.setMaxParallelForks()&lt;/c1&gt;&lt;/a0&gt; the feature described in this section is parallel execution at a project level. Parallel execution is an incubating feature. Please use it and let us know how it works for you.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T143405Z" creationid="huanghaohang" creationdate="20190621T143405Z">
        <seg>虽然 Gradle 已通过 &lt;a0&gt;&lt;c1&gt;Test.setMaxParallelForks()&lt;/c1&gt;&lt;/a0&gt; 提供了并行测试执行，本节中描述的功能是项目级别的并行执行。并行执行是一个实验性的功能，请使用它，并让我们知道它是如何为你处理的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Amongst other things, Gradle supports the same builder syntax as polyglot Maven. To learn more about the Gradle Maven POM object, see &lt;a0&gt;&lt;c1&gt;MavenPom&lt;/c1&gt;&lt;/a0&gt;. See also: &lt;a2&gt;&lt;c3&gt;MavenPluginConvention&lt;/c3&gt;&lt;/a2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T062501Z" creationid="huanghaohang" creationdate="20190607T062501Z">
        <seg>在其他方面，Gradle 支持和 polyglot Maven 相同的生成器语法。要了解有关 Gradle Maven POM 对象的更多信息，请参阅&lt;a0&gt;&lt;c1&gt;MavenPom&lt;/c1&gt;&lt;/a0&gt;。另请参见：&lt;a2&gt;&lt;c3&gt;MavenPluginConvention&lt;/c3&gt;&lt;/a2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;AntBuilder&lt;/c0&gt; instance</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132305Z" creationid="huanghaohang" creationdate="20170913T132305Z">
        <seg>&lt;c0&gt;AntBuilder&lt;/c0&gt;实例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An &lt;c0&gt;upToDateWhen&lt;/c0&gt; criteria added to the task returns &lt;c1&gt;false&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140704Z" creationid="huanghaohang" creationdate="20190707T140704Z">
        <seg>添加到任务的 &lt;c0&gt;upToDateWhen&lt;/c0&gt; 条件返回 &lt;c1&gt;false&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An HTML test report.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042110Z" creationid="huanghaohang" creationdate="20180406T042110Z">
        <seg>一个 HTML 测试报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An Ivy repository. Can be located on the local filesystem or at some remote location.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030001Z" creationid="huanghaohang" creationdate="20190603T030001Z">
        <seg>一个 Ivy 仓库。 可以位于本地文件系统上，或在某个远程位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An artifact only notation creates a module dependency which downloads only the artifact file with the specified extension. Existing module descriptors are ignored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044521Z" creationid="huanghaohang" creationdate="20190531T044313Z">
        <seg>仅工件表示法将创建只下载具有指定扩展名的工件文件的模块依赖，而忽略现有的模块描述符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An example of component flavors might differentiate between 'demo', 'paid' and 'enterprise' editions of the component, where the same set of sources is used to produce binaries with different functions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052704Z" creationid="huanghaohang" creationdate="20190610T052704Z">
        <seg>有关组件风格的一个例子是，可以区分组件的“demo”，“paid”和“enterprise”版本，它们是用同样的源码来生成不同功能的二进制文件的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An executable or library can be built to run on different operating systems and cpu architectures, with a variant being produced for each platform. Gradle defines each OS/architecture combination as a &lt;a0&gt;&lt;c1&gt;Platform&lt;/c1&gt;&lt;/a0&gt;, and a project may define any number of platforms. If no platforms are defined in a project, then a single, default platform 'current' is added.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T044701Z" creationid="huanghaohang" creationdate="20190610T044701Z">
        <seg>通过为每个平台生成一个变体，能够使可执行文件或库构建为可以运行在不同的操作系统及 CPU 架构上。Gradle 把每个操作系统/架构的组合定义为一个 &lt;a0&gt;&lt;c1&gt;Platform&lt;/c1&gt;&lt;/a0&gt;，并且一个项目可以定义任意多个平台。如果在项目中没有定义平台，则会添加一个默认的 'current' 平台。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An external dependency is identified using &lt;c0&gt;group&lt;/c0&gt;, &lt;c1&gt;name&lt;/c1&gt; and &lt;c2&gt;version&lt;/c2&gt; attributes. Depending on which kind of repository you are using, &lt;c3&gt;group&lt;/c3&gt; and &lt;c4&gt;version&lt;/c4&gt; may be optional.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043615Z" creationid="huanghaohang" creationdate="20170908T043428Z">
        <seg>一个外部依赖使用&lt;c0&gt;group&lt;/c0&gt;, &lt;c1&gt;name&lt;/c1&gt; 和 &lt;c2&gt;version&lt;/c2&gt; 属性来定义。根据你所使用的仓库类型不同， &lt;c3&gt;group&lt;/c3&gt; 和 &lt;c4&gt;version&lt;/c4&gt; 可能是可选的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An input property has changed since the previous execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140732Z" creationid="huanghaohang" creationdate="20190707T140732Z">
        <seg>自上次执行以来，输入属性已有修改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An overview of which Resolvers are offered by Ivy and thus also by Gradle can be found &lt;a0&gt;here&lt;/a0&gt;. With Gradle you just don't configure them via XML but directly via their API.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T031441Z" creationid="huanghaohang" creationdate="20190604T031441Z">
        <seg>其中由 Ivy（也因此由 Gradle）提供的解析器，它的概述可以在&lt;a0&gt;这里&lt;/a0&gt;找到。通过 Gradle，你只是不通过 XML 进行配置，而是通过它们的 API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Analyzes a project hierarchy and stores the results in the Sonar database.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085533Z" creationid="huanghaohang" creationdate="20181012T085533Z">
        <seg>分析项目层次结构，并将结果存储在 Sonar 数据库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Analyzing Custom Source Sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070132Z" creationid="huanghaohang" creationdate="20190205T070132Z">
        <seg>分析自定义源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Analyzing Multi-Project Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070125Z" creationid="huanghaohang" creationdate="20190205T070125Z">
        <seg>分析多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Analyzing languages other than Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070139Z" creationid="huanghaohang" creationdate="20190205T070139Z">
        <seg>分析非 Java 语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And where is the build script for the &lt;c0&gt;bluewhale&lt;/c0&gt; project? In Gradle build scripts are optional. Obviously for a single project build, a project without a build script doesn't make much sense. For multiproject builds the situation is different. Let's look at the build script for the &lt;c1&gt;water&lt;/c1&gt; project and execute it:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154800Z" creationid="huanghaohang" creationdate="20190614T154800Z">
        <seg>那么，&lt;c0&gt;bluewhale&lt;/c0&gt; 项目的构建脚本在哪里呢？在 Gradle 中，构建脚本是可选的。显然，对于单项目构建而言，没有构建脚本的项目没有多大意义。但对于多项目构建，情况就不同了。让我们看看 &lt;c1&gt;water&lt;/c1&gt; 项目的构建脚本并执行它：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another typical per-project configuration is the programming language to be analyzed. Note that Sonar can only analyze one language per project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153244Z" creationid="huanghaohang" creationdate="20180811T153244Z">
        <seg>另一种典型的每个项目配置是配置要分析的编程语言。请注意，每一个项目 Sonar 只能分析一种语言。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ant can be divided into two layers. The first layer is the Ant language. It provides the syntax for the &lt;c0&gt;build.xml&lt;/c0&gt;, the handling of the targets, special constructs like macrodefs, and so on. In other words, everything except the Ant tasks and types. Gradle understands this language, and allows you to import your Ant &lt;c1&gt;build.xml&lt;/c1&gt; directly into a Gradle project. You can then use the targets of your Ant build as if they were Gradle tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171210T152022Z" creationid="huanghaohang" creationdate="20171210T151111Z">
        <seg>Ant 可以分为两层。第一层是 Ant 语言，它为&lt;c0&gt;build.xml&lt;/c0&gt;，目标的处理，像宏定义这样的特殊结构等等提供了语法。换句话说，除了 Ant 任务和类型以外的所有东西都有。 Gradle 理解这种语言，并允许你把你的 Ant &lt;c1&gt;build.xml&lt;/c1&gt; 直接导入 Gradle 项目。然后，你可以像使用 Gradle 任务一样使用 Ant 构建里的目标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ant properties and references</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015213Z" creationid="huanghaohang" creationdate="20180314T015213Z">
        <seg>Ant 属性和引用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ant tasks and builds as first class citizens.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T140635Z" creationid="95" creationdate="20170721T140635Z">
        <seg>Ant 任务和构建是Gradle的第一公民。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ant tasks are first class citizens. Even more interesting, Ant projects are first class citizens as well. Gradle provides a deep import for any Ant project, turning Ant targets into native Gradle tasks at runtime. You can depend on them from Gradle, you can enhance them from Gradle, you can even declare dependencies on Gradle tasks in your build.xml. The same integration is provided for properties, paths, etc ...</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T060609Z" creationid="95" creationdate="20170723T060609Z">
        <seg>Ant任务是一级公民。更有趣的是，Ant 项目也是一级公民。Gradle为Ant项目提供了一种深度的导入，能够在运行时将Ant 目标转换为原生的Gradle任何。你可以从Gradle中依赖它们，增强它们，甚至在你的build.xml中定义对Gradle任何的依赖。同时，Gradle还为属性，路径等提供了同样的集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ant tasks are first-class citizens in Gradle. Gradle provides excellent integration for Ant tasks by simply relying on Groovy. Groovy is shipped with the fantastic &lt;c0&gt;AntBuilder&lt;/c0&gt;. Using Ant tasks from Gradle is as convenient and more powerful than using Ant tasks from a &lt;c1&gt;build.xml&lt;/c1&gt; file. From the example below, you can learn how to execute ant tasks and how to access ant properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153726Z" creationid="95" creationdate="20170728T153726Z">
        <seg>Ant任务是Gradle的一级公民。Gradle通过简单地依赖Groovy，对Ant任务提供了强大的集成。Groovy自带了一个神奇的&lt;c0&gt;AntBuilder&lt;/c0&gt;，在Gradle中使用Ant任务比在&lt;c1&gt;build.xml&lt;/c1&gt;中调用更方便和强大。通过下面的例子，您可以学习到如何执行ant任务，以及如何访问ant属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>AntBuilder</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132302Z" creationid="huanghaohang" creationdate="20170913T132302Z">
        <seg>AntBuilder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>AntlrTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013509Z" creationid="huanghaohang" creationdate="20190123T013509Z">
        <seg>AntlrTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092204Z" creationid="huanghaohang" creationdate="20190124T092204Z">
        <seg>任意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any method or property defined in a project build script is also visible to all the sub-projects. You can use this to define common configurations, and to extract build logic into methods which can be reused by the sub-projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145002Z" creationid="huanghaohang" creationdate="20190817T145002Z">
        <seg>项目构建脚本中定义的任何方法或属性，它的所有子项目都是可见的。你可以通过这一特点来定义公共配置，并将构建逻辑抽取到子项目可复用的方法中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any method you call in your build script, which &lt;s0&gt;&lt;e1&gt;is not defined&lt;/e1&gt;&lt;/s0&gt; in the build script, is delegated to the &lt;c2&gt;Project&lt;/c2&gt; object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130148Z" creationid="huanghaohang" creationdate="20170912T130148Z">
        <seg>在构建脚本中，你所调用的任何方法，如果在构建脚本中&lt;s0&gt;&lt;e1&gt;没有定义&lt;/e1&gt;&lt;/s0&gt;，那么它将被委托给&lt;c2&gt;Project&lt;/c2&gt;对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any property you access in your build script, which &lt;s0&gt;&lt;e1&gt;is not defined&lt;/e1&gt;&lt;/s0&gt; in the build script, is delegated to the &lt;c2&gt;Project&lt;/c2&gt; object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130159Z" creationid="huanghaohang" creationdate="20170912T130159Z">
        <seg>在构建脚本中，你所访问的任何一个属性，如果在构建脚本里&lt;s0&gt;&lt;e1&gt;没有定义&lt;/e1&gt;&lt;/s0&gt;，它也会被委托给&lt;c2&gt;Project&lt;/c2&gt;对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appendix C. The Feature Lifecycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T152600Z" creationid="huanghaohang" creationdate="20200106T152600Z">
        <seg>附录 C. 功能生命周期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Appendix E. Existing IDE Support and how to cope without it</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141728Z" creationid="huanghaohang" creationdate="20191219T141728Z">
        <seg>附录 E . 已有的 IDE 支持以及不支持的情况下如何应对</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applies maven, java and war plugins (as needed)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145348Z" creationid="95" creationdate="20190201T145348Z">
        <seg>应用maven，java 和 war 插件（根据需要）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applies the Java base plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025924Z" creationid="huanghaohang" creationdate="20181203T025924Z">
        <seg>应用 Java 基础插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applies the “&lt;c0&gt;publishing&lt;/c0&gt;” plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155607Z" creationid="huanghaohang" creationdate="20210516T155607Z">
        <seg> 应用“&lt;c0&gt;publishing&lt;/c0&gt;”插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying a plugin to the project allows the plugin to extend the project's capabilities. It can do things such as:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100023Z" creationid="huanghaohang" creationdate="20180130T095955Z">
        <seg>在项目中应用插件可以使插件扩展 project 的功能。它可以做的事情有：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034747Z" creationid="huanghaohang" creationdate="20180517T034747Z">
        <seg>应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying the plugin adds the &lt;c0&gt;buildDashboard&lt;/c0&gt; task to your project. The task aggregates the reports for all tasks that implement the &lt;a1&gt;&lt;c2&gt;Reporting&lt;/c2&gt;&lt;/a1&gt; interface from &lt;s3&gt;&lt;e4&gt;all projects&lt;/e4&gt;&lt;/s3&gt; in the build. It is typically only applied to the root project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T233405Z" creationid="95" creationdate="20190201T233204Z">
        <seg>应用插件会将 &lt;c0&gt;buildDashboard&lt;/c0&gt; 任务添加到项目。 此任务将聚合了在构建中从 &lt;s3&gt;&lt;e4&gt;所有项目&lt;/e4&gt;&lt;/s3&gt; 实现了 &lt;a1&gt;&lt;c2&gt;报告&lt;/c2&gt;&lt;/a1&gt; 接口的所有任务的报告。 它通常仅应用于根项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying the “&lt;c0&gt;ivy-publish&lt;/c0&gt;” plugin does the following:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155557Z" creationid="huanghaohang" creationdate="20210516T155557Z">
        <seg>应用“&lt;c0&gt;ivy-publish&lt;/c0&gt;”插件将会执行以下操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Architectures</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085907Z" creationid="huanghaohang" creationdate="20190610T085907Z">
        <seg>架构</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150605Z" creationid="huanghaohang" creationdate="20210518T150605Z">
        <seg>工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Artifacts (e.g. jars) produced by this project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053909Z" creationid="haohang" creationdate="20180313T053909Z">
        <seg>由本项目产生的工件（如 jar 包）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Artifacts and configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091927Z" creationid="huanghaohang" creationdate="20190608T091904Z">
        <seg>工件和配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, let's look at the &lt;c0&gt;Copy&lt;/c0&gt; task provided by Gradle. To create a &lt;c1&gt;Copy&lt;/c1&gt; task for your build, you can declare in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122236Z" creationid="huanghaohang" creationdate="20170919T122056Z">
        <seg>举个例子，我们来看看Gradle提供的&lt;c0&gt;Copy&lt;/c0&gt; 任务。如果要创建一个&lt;c1&gt;Copy&lt;/c1&gt;任务，你可以在构建脚本中声明：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As can be seen in the first line above, classifiers can be used together with artifact only notation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051241Z" creationid="huanghaohang" creationdate="20190531T051037Z">
        <seg>如上面的第一行所示，分类器可以和仅工件表示法一起用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As described above, for each repository there is a separate metadata cache. A repository is identified by its URL, type and layout. If a module or artifact has not been previously resolved from &lt;s0&gt;&lt;e1&gt;this repository&lt;/e1&gt;&lt;/s0&gt;, Gradle will attempt to resolve the module against the repository. This will always involve a remote lookup on the repository, however in many cases no download will be required (see&lt;a2&gt;Section 50.9.1.3, “Artifact reuse”&lt;/a2&gt;, below).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T083037Z" creationid="huanghaohang" creationdate="20190605T083037Z">
        <seg>如上文所述，每个仓库都有一个单独的元数据缓存。一个仓库由它的 URL、类型和布局来进行标识。如果一个模块或工件在之前从没有在 &lt;s0&gt;&lt;e1&gt;这个仓库&lt;/e1&gt;&lt;/s0&gt;中解析过，那么 Gradle 将尝试针对这个仓库来解析这个模块。这将始终涉及仓库的远程查找，但是在许多情况下并不需要下载（请参阅下面的&lt;a2&gt;第 50.9.1.3 节，《工件复用》&lt;/a2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As mentioned before 'should run after' ordering rule will be ignored if it introduces an ordering cycle:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081510Z" creationid="huanghaohang" creationdate="20170922T081504Z">
        <seg>如前所述，如果“应该在之后运行”的排序规则引入了排序循环，那么这条规则将被忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As mentioned earlier, a Maven module has only one artifact. Hence, when your project depends on a Maven module, it's obvious what its artifact is. With Gradle or Ivy, the case is different. Ivy's dependency descriptor (&lt;c0&gt;ivy.xml&lt;/c0&gt;) can declare multiple artifacts. For more information, see the Ivy reference for &lt;c1&gt;ivy.xml&lt;/c1&gt;. In Gradle, when you declare a dependency on an Ivy module, you actually declare a dependency on the &lt;c2&gt;default&lt;/c2&gt; configuration of that module. So the actual set of artifacts (typically jars) you depend on is the set of artifacts that are associated with the &lt;c3&gt;default&lt;/c3&gt; configuration of that module. Here are some situations where this matters:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190530T094717Z" creationid="huanghaohang" creationdate="20190528T022324Z">
        <seg>如前所述，一个 Maven 模块只有一个工件。因此，当你的项目依赖于一个 Maven 模块时，这个模块的工件是什么会很明显。而对于 Gradle 或 Ivy 情况就不同了。Ivy 的依赖描述符（&lt;c0&gt;ivy.xml&lt;/c0&gt;）可以声明多个工件。关于这一点的更多信息请参阅关于 &lt;c1&gt;ivy.xml&lt;/c1&gt;的 Ivy 参考文档。在 Gradle 中，当你在一个 Ivy 模块上声明依赖时，实际上是在该模块的 &lt;c2&gt;default&lt;/c2&gt; 配置上声明了一个依赖。所以你实际上依赖的工件集（通常是一些 jar 包），是与该模块的 &lt;c3&gt;default&lt;/c3&gt; 配置相关联的工件集。以下是这个问题上的一些情况：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As of Sonar 3.4, only one language per project can be analyzed. It is, however, possible to analyze a different language for each project in a multi-project build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043523Z" creationid="huanghaohang" creationdate="20181202T043523Z">
        <seg>从 Sonar 3.4 开始，每个项目只能分析一种语言。但是，你可以在多项目构建中为每个项目分析不同的语言。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As of Sonar 3.4, only one language per project can be analyzed. You can, however, set a different language for each project in a multi-project build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072751Z" creationid="huanghaohang" creationdate="20180812T072751Z">
        <seg>从 Sonar 3.4 开始，每个项目只能分析一种语言。不过，你可以为多项目构建中的每个项目设置不同的语言。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As said above, if no module descriptor file can be found, Gradle by default downloads a jar with the name of the module. But sometimes, even if the repository contains module descriptors, you want to download only the artifact jar, without the dependencies. &lt;s0&gt;[&lt;a1&gt;14&lt;/a1&gt;]&lt;/s0&gt; And sometimes you want to download a zip from a repository, that does not have module descriptors. Gradle provides an &lt;s2&gt;&lt;e3&gt;artifact only&lt;/e3&gt;&lt;/s2&gt; notation for those use cases - simply prefix the extension that you want to be downloaded with &lt;c4&gt;'@'&lt;/c4&gt; sign:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044257Z" creationid="huanghaohang" creationdate="20190530T095451Z">
        <seg>如上所述，如果找不到模块描述符文件，那么默认情况下 Gradle 会下载一个与模块名称相同的 jar。但有时候，即便仓库中包含了模块描述符，你也希望只下载工件 jar 而不下载它的依赖。&lt;s0&gt;[&lt;a1&gt;14&lt;/a1&gt;]&lt;/s0&gt; 有时候你希望从仓库中下载没有模块描述符的 zip。 Gradle 提供了 &lt;s2&gt;&lt;e3&gt;仅工件&lt;/e3&gt;&lt;/s2&gt; 表示法，用于这些案例——只需要对你想要下载的扩展名前加个 &lt;c4&gt;'@'&lt;/c4&gt; 符号：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As this is an &lt;a0&gt;incubating&lt;/a0&gt; feature, a limited set of the eventual functionality has been implemented at this time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T155704Z" creationid="huanghaohang" creationdate="20210508T155704Z">
        <seg>由于它还是一个&lt;a0&gt;孵化中的&lt;/a0&gt;功能，目前只是实现了最终功能的一部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As this plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;, only 3 build init types are currently supported. More types will be added in future Gradle releases.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214545Z" creationid="95" creationdate="20190131T214344Z">
        <seg>由于此插件当前是 &lt;a0&gt;实验性&lt;/a0&gt;阶段，因此目前仅支持3种构建初始化类型。 在未来的Gradle发行版中，将会添加更多的类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we have said, we usually prefer to put project specific behavior into the build script of this project. Let's refactor and also add some project specific behavior to the &lt;c0&gt;krill&lt;/c0&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142845Z" creationid="huanghaohang" creationdate="20190615T142845Z">
        <seg>正如前面所说，我们通常倾向于将特定于项目的行为放入该项目的构建脚本中。让我们重构并将一些项目特定行为添加到 &lt;c0&gt;krill&lt;/c0&gt; 项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we have seen, Gradle is a general-purpose build tool. It can build pretty much anything you care to implement in your build script. Out-of-the-box, however, it doesn't build anything unless you add code to your build script to do so.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T010757Z" creationid="95" creationdate="20170729T031316Z">
        <seg>如你所见，Gradle是一个通用的构建工具。你在构建脚本中实现的几乎任何内容它都能够构建。它开箱即用，但是需要你在构建脚本中先写好代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we have seen, you can run a multi-project build by entering any subproject dir and execute the build from there. All matching task names of the project hierarchy starting with the current dir are executed. But Gradle also offers to execute tasks by their absolute path (see also &lt;a0&gt;Section 56.5, “Project and task paths”&lt;/a0&gt;):</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T111218Z" creationid="huanghaohang" creationdate="20190616T111218Z">
        <seg>如我们所见，你可以通过进入任意的子项目目录并从该处执行构建来运行多项目构建。从当前目录开始的项目层次结构中，所有名字匹配的任务都会被执行。不过 Gradle 也提供了按绝对路径来执行任务的方式（另请参阅《&lt;a0&gt;第56.5节，项目和任务路径&lt;/a0&gt;》）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we later describe in full detail (see &lt;a0&gt;Chapter 55, &lt;i1&gt;The Build Lifecycle&lt;/i1&gt;&lt;/a0&gt;), Gradle has a configuration phase and an execution phase. After the configuration phase, Gradle knows all tasks that should be executed. Gradle offers you a hook to make use of this information. A use-case for this would be to check if the release task is among the tasks to be executed. Depending on this, you can assign different values to some variables.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025119Z" creationid="95" creationdate="20170729T024301Z">
        <seg>正如我们后面会详细描述的的（见&lt;a0&gt;第五十五章，&lt;i1&gt;构建的生命周期&lt;/i1&gt;&lt;/a0&gt;），Gradle有一个配置阶段和一个执行阶段。在配置阶段后，Gradle会了解所有应该执行的任务。Gradle提供了一个钩子来让你使用这些信息。一个使用场景是，可以检查某个发布任务是否在这些要执行的任务当中。借由此，您可以为一些变量进行不同的赋值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As well as configuring how things are to be signed (i.e. the signatory configuration), you must also specify what is to be signed. The Signing plugin provides a DSL that allows you to specify the tasks and/or configurations that should be signed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134019Z" creationid="huanghaohang" creationdate="20190608T134019Z">
        <seg>除了配置内容要如何签名（即签名配置），你还必须指定要签名哪些文件。Signing 插件提供了一个 DSL，能够让你指定应签名的任务和配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As well as considering artifacts downloaded from a different repository, Gradle will also attempt to reuse artifacts found in the local Maven Repository. If a candidate artifact has been downloaded by Maven, Gradle will use this artifact if it can be verified to match the checksum declared by the remote server.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T144037Z" creationid="huanghaohang" creationdate="20190605T143750Z">
        <seg>在考虑从其他仓库下载的工件时，Gradle 还将尝试复用在本地 Maven 仓库中找到的工件。如果某个候选工件已经通过 Maven 下载，并且它可以验证和远程服务器定义的校验和相匹配，Gradle 就会使用此工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with other source types, you can configure the location of the windows resources that should in included in the binary.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013411Z" creationid="huanghaohang" creationdate="20190610T013411Z">
        <seg>与其他源码类型一样，你可以配置应该包含在二进制文件中的 windows 资源的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As you can see, you can either use a reference to an existing repository or create a new repository. As described in &lt;a0&gt;Section 50.6.9, “More about Ivy resolvers”&lt;/a0&gt;, you can use all the Ivy resolvers suitable for the purpose of uploading.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T084807Z" creationid="huanghaohang" creationdate="20190606T084807Z">
        <seg>正如你所见，你可以使用一个现有仓库的引用，也可以创建一个新仓库。如&lt;a0&gt;第 50.6.8 节，《更多关于 Ivy 解析器的信息》&lt;/a0&gt;中所述，你可以使用适合于上传的所有 Ivy 解析器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As you might have noticed in the previous examples, there is a convenient notation for accessing an &lt;s0&gt;&lt;e1&gt;existing&lt;/e1&gt;&lt;/s0&gt; task. Each task is available as a property of the build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141306Z" creationid="95" creationdate="20170727T141306Z">
        <seg>你可能在前面的例子中也注意到了，一个&lt;s0&gt;&lt;e1&gt;已存在&lt;/e1&gt;&lt;/s0&gt;任务会有一个便捷的符号用于访问。 每一个任务都可作为这个构建脚本中的一个属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As you probably have guessed, you can declare dependencies between your tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160057Z" creationid="95" creationdate="20170726T160057Z">
        <seg>你应该也已经猜到了，我们可以声明任务之间的依赖关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembler sources to be included in a native binary are provided via a &lt;a0&gt;&lt;c1&gt;AssemblerSourceSet&lt;/c1&gt;&lt;/a0&gt;, which defines a set of Assembler source files. By default, for any named component the &lt;a2&gt;&lt;c3&gt;AssemblerSourceSet&lt;/c3&gt;&lt;/a2&gt; contains &lt;c4&gt;.s&lt;/c4&gt; source files under &lt;c5&gt;src/${name}/asm&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052142Z" creationid="huanghaohang" creationdate="20190609T052142Z">
        <seg>把汇编源码包含到本机二进制文件中，是通过 &lt;a0&gt;&lt;c1&gt;AssemblerSourceSet&lt;/c1&gt;&lt;/a0&gt; 来实现的，它定义了一组 Assembler 源文件。默认情况下，对于任何命名的组件，&lt;a2&gt;&lt;c3&gt;AssemblerSourceSet&lt;/c3&gt;&lt;/a2&gt; 包含了在 &lt;c5&gt;src/${name}/asm&lt;/c5&gt; 中的 &lt;c4&gt;.s&lt;/c4&gt; 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles all the archives in the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T034904Z" creationid="haohang" creationdate="20180313T034904Z">
        <seg>组装项目中所有的归档文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles and uploads the artifacts in the specified configuration. The task is added by the Base plugin which is implicitly applied by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T040011Z" creationid="haohang" creationdate="20180313T040011Z">
        <seg>以指定的配置组装并上传工件。该任务由 Base 插件添加，并由 Java 插件隐式应用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the JAR file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062913Z" creationid="haohang" creationdate="20180312T062913Z">
        <seg>组装 JAR 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the application EAR file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145150Z" creationid="huanghaohang" creationdate="20180415T145150Z">
        <seg>组装应用程序 EAR 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the application WAR file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140228Z" creationid="huanghaohang" creationdate="20180408T140228Z">
        <seg>组装应用程序 WAR 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the artifacts in the specified configuration. The task is added by the Base plugin which is implicitly applied by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T040021Z" creationid="haohang" creationdate="20180313T035734Z">
        <seg>组装指定配置的工件。该任务由 Base 插件添加，并由 Java 插件隐式应用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the distribution content and installs it on the current machine</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133925Z" creationid="huanghaohang" creationdate="20190127T133925Z">
        <seg>组装分发内容，并将其安装在当前计算机上</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the given source set's classes directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T033902Z" creationid="haohang" creationdate="20180313T033902Z">
        <seg>组装给定源集的类目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the production classes directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062502Z" creationid="haohang" creationdate="20180312T062502Z">
        <seg>组装生产类目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembles the test classes directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062906Z" creationid="haohang" creationdate="20180312T062906Z">
        <seg>组装测试类目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembly</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021843Z" creationid="huanghaohang" creationdate="20190609T021843Z">
        <seg>Assembly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assembly language support is provided by means of the &lt;c0&gt;'assembler'&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051753Z" creationid="huanghaohang" creationdate="20190609T051753Z">
        <seg>汇编语言的支持是通过 &lt;c0&gt;“assembler”&lt;/c0&gt; 插件提供的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assume you are working on a single project, the :api project. You have been making changes, but have not built the entire project since performing a clean. You want to build any necessary supporting jars, but only perform code quality and unit tests on the project you have changed. The &lt;c0&gt;build&lt;/c0&gt; task does this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T135451Z" creationid="huanghaohang" creationdate="20190622T135451Z">
        <seg>假设你正在处理 :api 这一个项目，你做了一些修改，但由于执行了 clean 以来还没有构建整个项目。你希望构建所有必需的支持 jar，但只对这个做了修改的项目执行代码质量和单元测试，这正是 &lt;c0&gt;build&lt;/c0&gt; 任务执行的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assuming a local Sonar server with out-of-the-box settings is up and running, no further mandatory configuration is required. Execute &lt;s0&gt;&lt;c1&gt;gradle sonarRunner&lt;/c1&gt;&lt;/s0&gt; and wait until the build has completed, then open the web page indicated at the bottom of the Sonar Runner output. You should now be able to browse the analysis results.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T020003Z" creationid="huanghaohang" creationdate="20181202T015510Z">
        <seg>假设一个具有开箱即用设置的本地 Sonar 服务器已启动并正在运行，则不需要进一步强制性的配置。执行 &lt;s0&gt;&lt;c1&gt;gradle sonarRunner&lt;/c1&gt;&lt;/s0&gt; 并等待构建完成，然后打开 Sonar Runner 输出底部所指示的网页。你现在应该能够看到分析结果了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At a minimum, the Sonar plugin has to be applied to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100045Z" creationid="huanghaohang" creationdate="20180715T100045Z">
        <seg>最低要求是必须配置在项目中应用 Sonar 插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At the heart of Gradle lies a rich extensible Domain Specific Language (DSL) based on Groovy. Gradle pushes declarative builds to the next level by providing declarative language elements that you can assemble as you like. Those elements also provide build-by-convention support for Java, Groovy, OSGi, Web and Scala projects. Even more, this declarative language is extensible. Add your own new language elements or enhance the existing ones. Thus providing concise, maintainable and comprehensible builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T020231Z" creationid="95" creationdate="20170722T015420Z">
        <seg>Gradle 的核心是基于Groovy的丰富可扩展的域特定语言（DSL）。Gradle通过提供可以根据需要进行组合的声明性语言元素，将声明性构建推到一个新的层次。这些元素还将为Java，Groovy，OSGi，Web和Scala项目提供基于约定的构建。更重要的是，这种声明性语言是可扩展的。可以通过添加你自己的新的语言元素，或者是增加现有的元素，从而提供简洁，可维护以及易于理解的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At the moment daemon is coupled with particular version of Gradle. This means that even if some daemon is idle but you are running the build with a different version of Gradle, a new daemon will be started. This also has a consequence for the &lt;c0&gt;--stop&lt;/c0&gt; command line instruction: You can only stop daemons that were started with the Gradle version you use when running &lt;c1&gt;--stop&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180116T143715Z" creationid="huanghaohang" creationdate="20180116T143715Z">
        <seg>此刻，守护进程将与特定版本的 Gradle 结合在一起。这意味着即使某些守护进程闲置，但是你正在使用不同版本的 Gradle 来运行构建，也会启动一个新的守护进程。这对于 &lt;c0&gt;--stop&lt;/c0&gt; 命令行指令也有一个后果：当运行 &lt;c1&gt;--stop&lt;/c1&gt; 时，你只能停止运行这个命令的 Gradle 版本所启动的守护进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At this stage, it is completely up to the build script to configure the relevant compiler/linker flags for each build type. Future versions of Gradle will automatically include the appropriate debug flags for any 'debug' build type, and may be aware of various levels of optimisation as well.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T044337Z" creationid="huanghaohang" creationdate="20190610T044337Z">
        <seg>在这个阶段，完全由构建脚本来为每个构建类型配置相关的编译器或链接器标志。未来版本的 Gradle 将自动为任何 'debug' 构建类型包含相应的调试标志，并且还可能了解各个优化级别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At times a completely different module can serve as a replacement for a requested module dependency. Examples include using '&lt;c0&gt;groovy&lt;/c0&gt;' in place of '&lt;c1&gt;groovy-all&lt;/c1&gt;', or using '&lt;c2&gt;log4j-over-slf4j&lt;/c2&gt;' instead of '&lt;c3&gt;log4j&lt;/c3&gt;'. Starting with Gradle 1.5 you can make these substitutions using dependency resolve rules:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024949Z" creationid="huanghaohang" creationdate="20190605T024949Z">
        <seg>有时候，可以用一个完全不同的模块来替换所请求的模块依赖。示例包括，使用 “&lt;c0&gt;groovy&lt;/c0&gt;” 代替 “&lt;c1&gt;groovy-all&lt;/c1&gt;”，或使用 “&lt;c2&gt;log4j-over-slf4j&lt;/c2&gt;” 代替 “&lt;c3&gt;log4j&lt;/c3&gt;”。从 Gradle 1.5 起，你可以使用依赖解析规则来进行这些替换：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At times, the Gradle Dependency Cache can be out of sync with the actual state of the configured repositories. Perhaps a repository was initially misconfigured, or perhaps a "non-changing" module was published incorrectly. To refresh all dependencies in the dependency cache, use the &lt;c0&gt;--refresh-dependencies&lt;/c0&gt; option on the command line.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T150052Z" creationid="huanghaohang" creationdate="20190605T150052Z">
        <seg>有时，Gradle 依赖缓存可能会与已配置仓库的实际状态不同步。也许一个仓库的最初配置有误，或者是没有正确发布“无更改”模块。要刷新依赖缓存中的所有依赖，请在命令行上使用 &lt;c0&gt;--refresh-dependencies&lt;/c0&gt; 选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Authentication schemes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030319Z" creationid="huanghaohang" creationdate="20190603T030319Z">
        <seg>认证方案</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Automatic configuration of groovyClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133203Z" creationid="huanghaohang" creationdate="20180712T133203Z">
        <seg>groovyClasspath 的自动配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Automatic configuration of scalaClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140227Z" creationid="huanghaohang" creationdate="20181201T140227Z">
        <seg>scalaClasspath 的自动配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Automatic provisioning of Sonar Runner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150518Z" creationid="huanghaohang" creationdate="20181201T150518Z">
        <seg>自动配置 Sonar Runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Automatically applies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140559Z" creationid="huanghaohang" creationdate="20180205T140559Z">
        <seg>自动应用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Automatically chooses between snarl, growl, and notify-send depending on the current operating system.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092326Z" creationid="huanghaohang" creationdate="20190124T092326Z">
        <seg>根据当前的操作系统在 snarl，growl和notify-send之间自动选择。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Base plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035023Z" creationid="huanghaohang" creationdate="20180517T035023Z">
        <seg>基本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basically, in most of the cases excluding the transitive dependency should be done per configuration. This way the dependency declaration is more explicit. It is also more accurate because a per-dependency exclude rule does not guarantee the given transitive dependency does not show up in the configuration. For example, some other dependency, which does not have any exclude rules, might pull in that unwanted transitive dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140012Z" creationid="huanghaohang" creationdate="20190602T114331Z">
        <seg>基本上，大多数情况下，应该对配置排除依赖，这样依赖声明就更加明确。它也更加准确，因为对依赖的排除规则不保证给定的传递依赖不会显示在配置中。例如，其他某些不含任何排除规则的依赖可能会带上那个不需要的传递依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because Gradle's build language is based on Groovy, and parts of Gradle are implemented in Groovy, Gradle already ships with a Groovy library (1.8.6 as of Gradle 1.6). Nevertheless, Groovy projects need to explicitly declare a Groovy dependency. This dependency will then be used on compile and runtime class paths. It will also be used to get hold of the Groovy compiler and Groovydoc tool, respectively.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122451Z" creationid="huanghaohang" creationdate="20180406T122451Z">
        <seg>由于 Gradle 的构建语言基于 Groovy，并且部分的 Gradle 使用 Groovy 实现，所以 Gradle 已经附带了一个 Groovy 库（自 Gradle 1.6 起所带的 Groovy 库的版本是 1.8.6）。不过，Groovy 项目需要显式地声明一个 Groovy 依赖。这个依赖将被用于编译和运行时类路径。它也将分别用于获取 Groovy 编译器和 Groovydoc 工具。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because each task is executed once only, executing &lt;s0&gt;&lt;c1&gt;gradle test test&lt;/c1&gt;&lt;/s0&gt; is exactly the same as executing &lt;s2&gt;&lt;c3&gt;gradle test&lt;/c3&gt;&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031650Z" creationid="huanghaohang" creationdate="20170909T031205Z">
        <seg>由于每个任务只执行一次，执行&lt;s0&gt;&lt;c1&gt;gradle test test&lt;/c1&gt;&lt;/s0&gt;与执行&lt;s2&gt;&lt;c3&gt;gradle test&lt;/c3&gt;&lt;/s2&gt;的结果是完全相同的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the &lt;c0&gt;sonarProperties&lt;/c0&gt; block is evaluated lazily, properties of Gradle's object model can be safely referenced from within the block, without having to fear that they have not yet been set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T045029Z" creationid="huanghaohang" creationdate="20181202T045029Z">
        <seg>因为 &lt;c0&gt;sonarProperties&lt;/c0&gt; 块的评估是惰性的，Gradle 的对象模型的属性可以在块中安全地引用，而无需担心它们还没有被赋值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before a task is executed for the first time, Gradle takes a snapshot of the inputs. This snapshot contains the set of input files and a hash of the contents of each file. Gradle then executes the task. If the task completes successfully, Gradle takes a snapshot of the outputs. This snapshot contains the set of output files and a hash of the contents of each file. Gradle persists both snapshots for next time the task is executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T010859Z" creationid="huanghaohang" creationdate="20170923T004834Z">
        <seg>在第一次执行任务之前，Gradle会获取输入的快照。此快照包含一组输入文件和每个文件的内容的散列。然后Gradle执行任务。如果任务成功完成，则Gradle会对输出进行快照。此快照包含一组输出文件和每个文件的内容的散列。 Gradle会保存这两个快照，用于这个任务下一次的执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before downloading an artifact, Gradle tries to determine the checksum of the required artifact by downloading the sha file associated with that artifact. If the checksum can be retrieved, an artifact is not downloaded if an artifact already exists with the same id and checksum. If the checksum cannot be retrieved from the remote server, the artifact will be downloaded (and ignored if it matches an existing artifact).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T143729Z" creationid="huanghaohang" creationdate="20190605T083552Z">
        <seg>在下载工件前，Gradle 试图通过下载与该工件关联的 sha 文件来确定所需工件的校验和。如果校验和可以获取得到，并且已经存在有相同 id 和校验和的工件，就不会再去下载为个工件。如果无法从远程服务器中获取校验和，则下载这个工件（并且如果它与现有工件相匹配就忽略掉）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Before executing the &lt;c0&gt;sonarRunner&lt;/c0&gt; task, all tasks producing output to be analysed by Sonar need to be executed. Typically, these are compile tasks, test tasks, and code coverage tasks. To meet these needs, the plugins adds a task dependency from &lt;c1&gt;sonarRunner&lt;/c1&gt; on &lt;c2&gt;test&lt;/c2&gt; if the &lt;c3&gt;java&lt;/c3&gt; plugin is applied. Further task dependencies can be added as needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T020520Z" creationid="huanghaohang" creationdate="20181202T020520Z">
        <seg>在执行之前 &lt;c0&gt;sonarRunner&lt;/c0&gt; 任务，所有产生输出以用于 Sonar 分析的任务都需要被执行。通常情况下它们是编译任务，测试任务和代码覆盖任务。为了满足这些需求，如果应用了 &lt;c3&gt;java的&lt;/c3&gt; 插件，Sonar Runner 插件将对 &lt;c1&gt;sonarRunner&lt;/c1&gt; 添加一个对 &lt;c2&gt;test&lt;/c2&gt; 任务的依赖。根据需要，可以添加更多的任务依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Below four tasks are defined. Both &lt;c0&gt;dist&lt;/c0&gt; and &lt;c1&gt;test&lt;/c1&gt; depend on the &lt;c2&gt;compile&lt;/c2&gt; task. Running &lt;s3&gt;&lt;c4&gt;gradle dist test&lt;/c4&gt;&lt;/s3&gt; for this build script results in the &lt;c5&gt;compile&lt;/c5&gt; task being executed only once.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031022Z" creationid="huanghaohang" creationdate="20170909T031022Z">
        <seg>下面定义了四个任务，其中&lt;c0&gt;dist&lt;/c0&gt;和&lt;c1&gt;test&lt;/c1&gt;都依赖于&lt;c2&gt;compile&lt;/c2&gt;任务。对于这个构建脚本，运行&lt;s3&gt;&lt;c4&gt;gradle dist test&lt;/c4&gt;&lt;/s3&gt;只会使&lt;c5&gt;compile&lt;/c5&gt;任务被执行一次。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Below is an example which adds a &lt;c0&gt;test&lt;/c0&gt; task to each project with the &lt;c1&gt;hasTests&lt;/c1&gt; property set to true.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145815Z" creationid="huanghaohang" creationdate="20190613T145815Z">
        <seg>下面是将一个 &lt;c0&gt;test&lt;/c0&gt; 任务添加到每个 &lt;c1&gt;hasTests&lt;/c1&gt; 属性为 true 的项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Beside the build script files, Gradle defines a settings file. The settings file is determined by Gradle via a naming convention. The default name for this file is &lt;c0&gt;settings.gradle&lt;/c0&gt;. Later in this chapter we explain how Gradle looks for a settings file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T143136Z" creationid="huanghaohang" creationdate="20190612T143136Z">
        <seg>在构建脚本文件旁边，Gradle 定义了一个设置文件。这个设置文件是 Gradle 通过命名约定来决定的，它的默认名称是 &lt;c0&gt;settings.gradle&lt;/c0&gt;。在本章中，稍后我们会解释 Gradle 是如何查找设置文件的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Better progress monitoring and build cancellation. For example, allowing test execution to be monitored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T143656Z" creationid="huanghaohang" creationdate="20191220T143459Z">
        <seg>改进进度监视和构建取消。例如，允许监视测试执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binaries produced by Gradle can be differentiated on &lt;a0&gt;build type&lt;/a0&gt;, &lt;a1&gt;platform&lt;/a1&gt; and &lt;a2&gt;flavor&lt;/a2&gt;. For each of these 'variant dimensions', it is possible to specify a set of available values as well as target each component at one, some or all of these. For example, a plugin may define a range of support platforms, but you may choose to only target Windows-x86 for a particular component.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035139Z" creationid="huanghaohang" creationdate="20190610T035139Z">
        <seg>由 Gradle 生成的二进制文件可以在&lt;a0&gt;构建类型&lt;/a0&gt;，&lt;a1&gt;平台&lt;/a1&gt; 和&lt;a2&gt;风格&lt;/a2&gt;上区分。对于这些“变体维度”中的每个维度，可以指定一组可用值，也可以针对每一个组件指定这里的一个、多个或全部的值。比如，插件可能定义了一系列支持的平台，但你可以对某个特定组件选择只针对 Windows-x86 构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Book(String name) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131006Z" creationid="huanghaohang" creationdate="20190728T131006Z">
        <seg>Book(String name) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both &lt;c0&gt;println&lt;/c0&gt; statements print out the same property. The first uses auto-delegation to the &lt;c1&gt;Project&lt;/c1&gt; object, for properties not defined in the build script. The other statement uses the &lt;c2&gt;project&lt;/c2&gt; property available to any build script, which returns the associated &lt;c3&gt;Project&lt;/c3&gt; object. Only if you define a property or a method which has the same name as a member of the &lt;c4&gt;Project&lt;/c4&gt; object, you need to use the &lt;c5&gt;project&lt;/c5&gt; property.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T131937Z" creationid="huanghaohang" creationdate="20170912T130332Z">
        <seg>这两个&lt;c0&gt;println&lt;/c0&gt;语句打印出相同的属性。在构建脚本中未定义的属性，第一次使用时会自动委派到&lt;c1&gt;Project&lt;/c1&gt;对象。另一个语句使用了可用于任何构建脚本的&lt;c2&gt;project&lt;/c2&gt;属性，这个属性返回关联的&lt;c3&gt;Project&lt;/c3&gt;对象。只有当你定义的属性或方法与这个&lt;c4&gt;Project&lt;/c4&gt;对象的成员方法或变量重名时，你才需要使用&lt;c5&gt;project&lt;/c5&gt;属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both the CUnit sources provided by your project and the generated launcher require the core CUnit headers and libraries. Presently, this library dependency must be provided by your project for each &lt;a0&gt;&lt;c1&gt;TestSuiteExecutableBinary&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T085925Z" creationid="huanghaohang" creationdate="20190611T085732Z">
        <seg>你的项目及生成的启动器所提供的两种 CUnit 源码，都需要核心的 CUnit 头文件和库。目前，这个库依赖项必须由你的项目为每个 &lt;a0&gt;&lt;c1&gt;TestSuiteExecutableBinary&lt;/c1&gt;&lt;/a0&gt; 提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both tools rely on descriptor XML files, which contain information about the dependencies of a particular jar. Both also use repositories where the actual jars are placed together with their descriptor files, and both offer resolution for conflicting jar versions in one form or the other. Both have emerged as standards for solving dependency conflicts, and while Gradle originally used Ivy under the hood for its dependency management. Gradle has replaced this direct dependency on Ivy with a native Gradle dependency resolution engine which supports a range of approaches to dependency resolution including both POM and Ivy descriptor files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T143548Z" creationid="95" creationdate="20190210T104432Z">
        <seg>这两种工具都依赖于描述符XML文件，这些文件包含有关特定jar的依赖信息。 它们还使用仓库，在这些仓库中，实际的jar与它们的描述符文件放在一起；并且这两者都以一种形式或其他形式提供了jar版本冲突的解决方案。它们都成为解决依赖冲突的标准，而Gradle对于依赖管理从一开始在底层上使用的是Ivy。Gradle取代了对Ivy的直接依赖，采用了本地Gradle语解决引擎，该引擎支持一系列依赖解决方案的方法，包括POM和Ivy描述符文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build Init Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070535Z" creationid="huanghaohang" creationdate="20190205T070535Z">
        <seg>构建初始化插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build Script Basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031735Z" creationid="huanghaohang" creationdate="20170927T031735Z">
        <seg>构建脚本基础</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build comparison support is an &lt;a0&gt;incubating&lt;/a0&gt; feature. This means that it is incomplete and not yet at regular Gradle production quality. This also means that this Gradle User Guide chapter is a work in progress.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T143553Z" creationid="huanghaohang" creationdate="20200604T143553Z">
        <seg>构建比较支持是一个&lt;a0&gt;实验性&lt;/a0&gt; 功能。这表示它是不完整的，而且还没有稳定的 Gradle 生产质量。同时也意味着本章 Gradle 用户指南还在完善中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build init types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070605Z" creationid="huanghaohang" creationdate="20190205T070605Z">
        <seg>构建初始化类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154433Z" creationid="95" creationdate="20170731T154433Z">
        <seg>构建布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build outcomes that are intended to be logically equivalent in the “source” and “target” builds, and are therefore meaningfully comparable.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T154531Z" creationid="huanghaohang" creationdate="20210508T154531Z">
        <seg>构建结果原来的目的是成为在“源”构建和“目标”构建中的逻辑等价物，因此具有可比较性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build phases</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144820Z" creationid="huanghaohang" creationdate="20190708T144820Z">
        <seg>构建阶段</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T150824Z" creationid="huanghaohang" creationdate="20190626T150824Z">
        <seg>构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build scripts are code</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031813Z" creationid="huanghaohang" creationdate="20170927T031813Z">
        <seg>构建脚本即代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>BuildListener</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144455Z" creationid="huanghaohang" creationdate="20180107T144455Z">
        <seg>BuildListener</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Building a WAR file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233826Z" creationid="huanghaohang" creationdate="20171206T233826Z">
        <seg>构建一个 WAR 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Building native binaries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091044Z" creationid="huanghaohang" creationdate="20190611T091044Z">
        <seg>构建本机二进制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Builds the JAR</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012851Z" creationid="huanghaohang" creationdate="20170910T012851Z">
        <seg>Builds the JAR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Builds which utilize a buildSrc directory will generate a second profile report for buildSrc in the &lt;c0&gt;buildSrc/build&lt;/c0&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031129Z" creationid="huanghaohang" creationdate="20170910T030957Z">
        <seg>使用buildSrc目录的构建为buildSrc在&lt;c0&gt;buildSrc/build&lt;/c0&gt;目录里生成第二个分析报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But it is easy for transitive dependency resolution to violate this contract. For example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T162029Z" creationid="huanghaohang" creationdate="20190604T162029Z">
        <seg>但传递依赖的解析会很容易破坏这种协议。举个例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But we never lock you in!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T135020Z" creationid="95" creationdate="20170721T134611Z">
        <seg>但我们不会去限定你。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By comparing builds in these scenarios you can make an informed decision about the Gradle upgrade, migration to Gradle or build change by understanding the differences in the outcomes. The comparison process produces a HTML report outlining which outcomes were found to be identical and identifying the differences between non-identical outcomes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152647Z" creationid="huanghaohang" creationdate="20200604T152404Z">
        <seg>通过比较这些场景中的构建，通过了解结果中的差异，你可以对 Gradle 升级，迁移到 Gradle 或构建更改做出明智的决策。比较过程会生成一份 HTML 报告，其中概述发现了哪些结果是相同的，并确定不同结果之间的差异。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By compiling only classes whose source code has changed since the previous compilation, and classes affected by these changes, incremental compilation can significantly reduce Scala compilation time. It is particularly effective when frequently compiling small code increments, as is often done at development time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110403Z" creationid="huanghaohang" creationdate="20180407T110403Z">
        <seg>通过仅编译源代码自上次编译后发生更改的类以及受这些更改影响的类，增量编译可以显著减少 Scala 的编译时间。它对于频繁编译小量增量代码时特别有效，而我们开发时经常要这样做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, Gradle caches changing modules for 24 hours. To change how long Gradle will cache the meta-data and artifacts for a changing module, use:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151313Z" creationid="huanghaohang" creationdate="20190605T151313Z">
        <seg>默认情况下， Gradle缓存变化模块的时间为 24 小时。如果要更改 Gradle 缓存变化模块的元数据和工件的时间，请使用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, Gradle caches dynamic versions and changing modules for 24 hours. You can override the default cache modes using &lt;a0&gt;command line options&lt;/a0&gt;. You can change the cache expiry times in your build using the &lt;c1&gt;resolution strategy&lt;/c1&gt; (see &lt;a2&gt;Section 50.9.3, “Fine-tuned control over dependency caching”&lt;/a2&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T124215Z" creationid="huanghaohang" creationdate="20190521T104353Z">
        <seg>默认情况下，Grdale 对动态版本和变化模块的缓存时间是24小时。你可能使用&lt;a0&gt;命令行选项&lt;/a0&gt;重写默认的缓存模式。你可以通过 &lt;c1&gt;resolution strategy&lt;/c1&gt; 修改你的构建的缓存到期时间（见&lt;a2&gt;第 50.9.3 节，《调整控制依赖缓存》&lt;/a2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, Gradle caches dynamic versions for 24 hours. To change how long Gradle will cache the resolved version for a dynamic version, use:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151144Z" creationid="huanghaohang" creationdate="20190605T151144Z">
        <seg>默认情况下，Gradle 缓存动态版本的时间为 24 小时。如果要更改 Gradle 对动态版本解析到的版本的缓存时间，请使用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, Gradle does not define any repositories. You need to define at least one before you can use external dependencies. One option is use the Maven central repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044736Z" creationid="huanghaohang" creationdate="20170908T044736Z">
        <seg>默认情况下，Gradle没有定义任何仓库。需要你至少去定义一个，然后才能使用外部依赖。我们通常使用的有Maven中央仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, Gradle will abort execution and fail the build as soon as any task fails. This allows the build to complete sooner, but hides other failures that would have occurred. In order to discover as many failures as possible in a single build execution, you can use the &lt;c0&gt;--continue&lt;/c0&gt; option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T074040Z" creationid="huanghaohang" creationdate="20170909T074040Z">
        <seg>默认情况下，只要有任务失败，Gradle就将中断执行让构建失败。这样做会使构建更快地结束，但也会让其他可能发生的失败不被发现。因此你可以使用&lt;c0&gt;--continue&lt;/c0&gt;选项来在单个构建执行中发现尽可能多的失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the Java compiler runs in the Gradle process. Setting &lt;c0&gt;options.fork&lt;/c0&gt; to &lt;c1&gt;true&lt;/c1&gt; causes compilation to occur in a separate process. In the case of the Ant javac task, this means that a new process will be forked for each compile task, which can slow down compilation. Conversely, Gradle's direct compiler integration (see above) will reuse the same compiler process as much as possible. In both cases, all fork options specified with &lt;c2&gt;options.forkOptions&lt;/c2&gt; will be honored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T102445Z" creationid="haohang" creationdate="20180327T101708Z">
        <seg>默认情况下，Java 编译器在 Gradle 进程中运行。将 &lt;c0&gt;options.fork&lt;/c0&gt; 设置为 &lt;c1&gt;true&lt;/c1&gt; 将使得在一个单独的进程中进行编译。在Ant javac 任务的情况中，意味着每个编译任务都会 fork 一个新进程，这样就会使编译变慢。相反，Gradle 的直接编译器集成（见上文）将尽可能地重用相同的编译器进程。在这两种情况下，使用 &lt;c2&gt;options.forkOptions&lt;/c2&gt; 指定的所有 fork 选项都将得到重视。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the Sonar Runner plugin passes on the project's &lt;c0&gt;main&lt;/c0&gt; source set as production sources, and the project's &lt;c1&gt;test&lt;/c1&gt; source set as test sources. This works regardless of the project's source directory layout. Additional source sets can be added as needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043315Z" creationid="huanghaohang" creationdate="20181202T042959Z">
        <seg>默认情况下，Sonar Runner 插件会把项目的 &lt;c0&gt;main&lt;/c0&gt; 源集当作生产源，把项目的 &lt;c1&gt;test&lt;/c1&gt; 源集当为测试源。这与项目的源目录布局无关。根据需要，可以添加其他的源集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the Sonar plugin will analyze the production sources in the &lt;c0&gt;main&lt;/c0&gt; source set and the test sources in the &lt;c1&gt;test&lt;/c1&gt; source set. This works independent of the project's source directory layout. Additional source sets can be added as needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072222Z" creationid="huanghaohang" creationdate="20180812T072156Z">
        <seg>默认情况下，Sonar 插件将分析在 &lt;c0&gt;main&lt;/c0&gt; 源集里的生产源文件和 &lt;c1&gt;test&lt;/c1&gt; 源集里的测试源文件。它们的分析独立于项目的源目录布局。根据需求，可以添加其他的源集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, this report shows only those tasks which have been assigned to a task group. You can do this by setting the &lt;c0&gt;group&lt;/c0&gt; property for the task. You can also set the &lt;c1&gt;description&lt;/c1&gt; property, to provide a description to be included in the report.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011914Z" creationid="huanghaohang" creationdate="20170910T011716Z">
        <seg>默认情况下，此报告仅显示已分配给任务组的任务。你可以通过为任务设置&lt;c0&gt;group&lt;/c0&gt;属性来实现它。你也可以通过设置&lt;c1&gt;description&lt;/c1&gt;属性，来提供包含在报告中的描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By requiring special syntax for adding a property, Gradle can fail fast when an attempt is made to set a (predefined or extra) property but the property is misspelled or does not exist. Extra properties can be accessed from anywhere their owning object can be accessed, giving them a wider scope than local variables. Extra properties on a project are visible from its subprojects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135456Z" creationid="huanghaohang" creationdate="20170913T135209Z">
        <seg>通过添加属性所要求的特殊语法，Gradle 可以在你试图设置（预定义的或额外的） 属性，但拼写错误或不存在时快速失败。额外属性在任何能够访问它们所属对象的地方都可以被访问，这使它们有着比局部变量更广的作用域。父项目上的额外属性，在子项目中也可以访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By specifying that the distribution should include the task's output files (see &lt;a0&gt;Section 15.9.1, “Declaring a task's inputs and outputs”&lt;/a0&gt;), Gradle knows that the task that produces the files must be invoked before the distribution can be assembled and will take care of this for you.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141017Z" creationid="95" creationdate="20190131T140551Z">
        <seg>通过指定分布应包含的任务的输出文件（见&lt;a0&gt;第15.9.1节，《声明任务的输入和输出》&lt;/a0&gt;），Gradle 将知道在组装分发前必须调用哪些生产文件的任务，并且会为你处理好。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By using 'must run after" ordering rule you can specify that &lt;c0&gt;taskB&lt;/c0&gt; must always run after &lt;c1&gt;taskA&lt;/c1&gt;, whenever both &lt;c2&gt;taskA&lt;/c2&gt; and &lt;c3&gt;taskB&lt;/c3&gt; are scheduled for execution. This is expressed as &lt;c4&gt;taskB.mustRunAfter(taskA)&lt;/c4&gt;. The 'should run after' ordering rule is similar but less strict as it will be ignored in two situations. Firstly if using that rule introduces an ordering cycle. Secondly when using parallel execution and all dependencies of a task have been satisfied apart from should run after then this task will be run regardless of weather its 'should run after' dependencies have been run or not. You would use 'should run after' rule when ordering preference for faster feedback, where the ordering is helpful but not strictly required.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T031931Z" creationid="huanghaohang" creationdate="20170922T030758Z">
        <seg>通过使用“必须在之后运行”的排序规则，你可以指定&lt;c0&gt;taskB&lt;/c0&gt;必须总是运行在&lt;c1&gt;taskA&lt;/c1&gt;之后，无论&lt;c2&gt;taskA&lt;/c2&gt;和&lt;c3&gt;taskB&lt;/c3&gt;这两者在什么时候调度执行。这被表示为&lt;c4&gt;taskB.mustRunAfter(taskA)&lt;/c4&gt;。 “应该运行”的排序规则与其类似，但没有那么严格，因为它在两种情况下会被忽略：首先，如果使用该规则引入了排序循环；其次，当使用并行执行时，一个任务除了应该在之后运行这个条件之外，它的所有依赖都已经满足，那么这个任务就会运行，不管它的“应该在之后运行”的依赖关系是否已经运行或。当对任务的排序倾向于更快的反馈时，你应该使用“应该在之后运行”的规则，它对于排序很有帮助但不会严格要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021815Z" creationid="huanghaohang" creationdate="20190609T021815Z">
        <seg>C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C language support is provided by means of the &lt;c0&gt;'c'&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051314Z" creationid="huanghaohang" creationdate="20190609T051314Z">
        <seg>C 语言支持是通过 &lt;c0&gt;'c'&lt;/c0&gt; 插件来提供的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C sources to be included in a native binary are provided via a &lt;a0&gt;&lt;c1&gt;CSourceSet&lt;/c1&gt;&lt;/a0&gt;, which defines a set of C source files and optionally a set of exported header files (for a library). By default, for any named component the &lt;a2&gt;&lt;c3&gt;CSourceSet&lt;/c3&gt;&lt;/a2&gt; contains &lt;c4&gt;.c&lt;/c4&gt; source files in &lt;c5&gt;src/${name}/c&lt;/c5&gt;, and header files in &lt;c6&gt;src/${name}/headers&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052151Z" creationid="huanghaohang" creationdate="20190609T051531Z">
        <seg>把 C 源码包含到本机二进制文件中，是通过 &lt;a0&gt;&lt;c1&gt;CSourceSet&lt;/c1&gt;&lt;/a0&gt; 来实现的，它定义了一组 C 源文件以及可选的一组导出的头文件（用于库）。默认情况下，对于任何命名的组件，&lt;a2&gt;&lt;c3&gt;CSourceSet&lt;/c3&gt;&lt;/a2&gt; 包含了在 &lt;c5&gt;src/${name}/c&lt;/c5&gt; 中的 &lt;c4&gt;.c&lt;/c4&gt; 源文件，以及在 &lt;c6&gt;src/${name}/headers&lt;/c6&gt; 中的头文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C++</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021820Z" creationid="huanghaohang" creationdate="20190609T021820Z">
        <seg>C++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C++ language support is provided by means of the &lt;c0&gt;'cpp'&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T042649Z" creationid="huanghaohang" creationdate="20190609T042649Z">
        <seg>C++ 语言支持通过 &lt;c0&gt;'cpp'&lt;/c0&gt; 插件提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>C++ sources to be included in a native binary are provided via a &lt;a0&gt;&lt;c1&gt;CppSourceSet&lt;/c1&gt;&lt;/a0&gt;, which defines a set of C++ source files and optionally a set of exported header files (for a library). By default, for any named component the &lt;a2&gt;&lt;c3&gt;CppSourceSet&lt;/c3&gt;&lt;/a2&gt; contains &lt;c4&gt;.cpp&lt;/c4&gt; source files in &lt;c5&gt;src/${name}/cpp&lt;/c5&gt;, and header files in &lt;c6&gt;src/${name}/headers&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052157Z" creationid="huanghaohang" creationdate="20190609T042908Z">
        <seg>把 C++ 源码包含到本机二进制文件中，是通过 &lt;a0&gt;&lt;c1&gt;CppSourceSet&lt;/c1&gt;&lt;/a0&gt; 来实现的，它定义了一组 C++ 源文件以及可选的一组导出的头文件（用于库）。默认情况下，对于任何命名的组件，&lt;a2&gt;&lt;c3&gt;CppSourceSet&lt;/c3&gt;&lt;/a2&gt; 包含了在 &lt;c5&gt;src/${name}/cpp&lt;/c5&gt; 中的 &lt;c4&gt;.cpp&lt;/c4&gt; 源文件，以及在 &lt;c6&gt;src/${name}/headers&lt;/c6&gt; 中的头文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CU_add_test(pSuiteMath, "test_minus", test_minus);
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032633Z" creationid="huanghaohang" creationdate="20190611T032633Z">
        <seg>CU_add_test(pSuiteMath, "test_minus", test_minus);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CU_add_test(pSuiteMath, "test_plus", test_plus);</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032632Z" creationid="huanghaohang" creationdate="20190611T032632Z">
        <seg>CU_add_test(pSuiteMath, "test_plus", test_plus);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CU_pSuite pSuiteMath = CU_add_suite("operator tests", suite_init, suite_clean);</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032631Z" creationid="huanghaohang" creationdate="20190611T032631Z">
        <seg>CU_pSuite pSuiteMath = CU_add_suite("operator tests", suite_init, suite_clean);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CUnit support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091159Z" creationid="huanghaohang" creationdate="20190611T091159Z">
        <seg>CUnit 支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Caching</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034115Z" creationid="huanghaohang" creationdate="20180131T034115Z">
        <seg>缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Change</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T235105Z" creationid="huanghaohang" creationdate="20180406T235105Z">
        <seg>修改的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Changing what Gradle logs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140507Z" creationid="huanghaohang" creationdate="20180516T140507Z">
        <seg>更改 Gradle 日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 1. Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072252Z" creationid="haohang" creationdate="20170720T072252Z">
        <seg>第一章. 介绍</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 10, &lt;i0&gt;Web Application Quickstart&lt;/i0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T081015Z" creationid="95" creationdate="20170723T081015Z">
        <seg>第十章， &lt;i0&gt;Web 应用程序快速入门&lt;/i0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 10. Web Application Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T011058Z" creationid="huanghaohang" creationdate="20170908T052100Z">
        <seg>第十章. Web 应用程序快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 11. Using the Gradle Command-Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004301Z" creationid="huanghaohang" creationdate="20170909T004301Z">
        <seg>第十一章. 使用Gradle命令行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 12. Using the Gradle Graphical User Interface</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T030126Z" creationid="huanghaohang" creationdate="20170909T030126Z">
        <seg>第十二章. 使用Gradle 图形用户界面</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 13. Writing Build Scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143154Z" creationid="huanghaohang" creationdate="20170911T143154Z">
        <seg>第十三章. 编写构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 14. Tutorial - 'This and That'</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153557Z" creationid="huanghaohang" creationdate="20170914T153557Z">
        <seg>第十四章. 教程 - 杂七杂八</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 15. More about Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T131929Z" creationid="huanghaohang" creationdate="20170917T131929Z">
        <seg>第十五章. 任务详述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 16. Working With Files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T151611Z" creationid="huanghaohang" creationdate="20170918T151611Z">
        <seg>第十六章. 使用文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 17. Using Ant from Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171210T151108Z" creationid="huanghaohang" creationdate="20170923T051025Z">
        <seg>第十七章. 从 Gradle 中使用 Ant</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 18. Logging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T125101Z" creationid="huanghaohang" creationdate="20171014T125101Z">
        <seg>第十八章. 日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 19. The Gradle Daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T095020Z" creationid="huanghaohang" creationdate="20180105T095020Z">
        <seg>第十九章. Gradle 守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 2. Overview</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072513Z" creationid="haohang" creationdate="20170720T072513Z">
        <seg>第二章. 概述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 20. The Build Environment</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133212Z" creationid="huanghaohang" creationdate="20180108T133212Z">
        <seg>第二十章. 构建环境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 21. Gradle Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180123T123628Z" creationid="huanghaohang" creationdate="20180123T123628Z">
        <seg>第二十一章. Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 22. Standard Gradle plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T081455Z" creationid="huanghaohang" creationdate="20180130T081455Z">
        <seg>第二十二章. 标准的 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 23. The Java Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021928Z" creationid="huanghaohang" creationdate="20180201T021928Z">
        <seg>第二十三章. Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 24. The Groovy Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T153214Z" creationid="huanghaohang" creationdate="20180218T153214Z">
        <seg>第二十四章. Groovy 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 25. The Scala Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113553Z" creationid="huanghaohang" creationdate="20180406T113553Z">
        <seg>第二十五章. Scala 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 26. The War Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010050Z" creationid="huanghaohang" creationdate="20180407T010050Z">
        <seg>第二十六章. War 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 27. The Ear Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T080252Z" creationid="huanghaohang" creationdate="20180408T080252Z">
        <seg>第二十七章. Ear 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 28. The Jetty Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143518Z" creationid="huanghaohang" creationdate="20180408T143518Z">
        <seg>第二十八章. Jetty 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 29. The Checkstyle Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143657Z" creationid="huanghaohang" creationdate="20180416T143657Z">
        <seg>第二十九章. Checkstyle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 3. Tutorials</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072420Z" creationid="95" creationdate="20170721T165938Z">
        <seg>第三章. 教程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 30. The CodeNarc Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180424T134553Z" creationid="huanghaohang" creationdate="20180424T134553Z">
        <seg>第三十章. CodeNarc 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 31. The FindBugs Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140306Z" creationid="huanghaohang" creationdate="20180516T140306Z">
        <seg>第三十一章. FindBugs 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 32. The JDepend Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142157Z" creationid="huanghaohang" creationdate="20180516T142157Z">
        <seg>第三十二章. JDepend 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 33. The PMD Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142603Z" creationid="huanghaohang" creationdate="20180516T142603Z">
        <seg>第三十三章. PMD 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 34. The JaCoCo Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143110Z" creationid="huanghaohang" creationdate="20180516T143110Z">
        <seg>第三十四章. JaCoCo 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 35. The Sonar Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133251Z" creationid="huanghaohang" creationdate="20180712T133251Z">
        <seg>第三十五章. Sonar 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 36. The Sonar Runner Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094450Z" creationid="huanghaohang" creationdate="20180715T094450Z">
        <seg>第三十六章. Sonar Runner 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 37. The OSGi Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T090015Z" creationid="huanghaohang" creationdate="20181012T090015Z">
        <seg>第三十七章. OSGi 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 38. The Eclipse Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143650Z" creationid="huanghaohang" creationdate="20180416T143650Z">
        <seg>第三十八章. Eclipse 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 39. The IDEA Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033906Z" creationid="huanghaohang" creationdate="20181203T033906Z">
        <seg>第三十九章. IDEA 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 4, &lt;i0&gt;Installing Gradle&lt;/i0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072730Z" creationid="95" creationdate="20170723T072609Z">
        <seg>第四章，&lt;i0&gt; 安装Gradle&lt;/i0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 4. Installing Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072502Z" creationid="95" creationdate="20170723T072433Z">
        <seg>第四章. 安装Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 40. The ANTLR Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T125102Z" creationid="huanghaohang" creationdate="20171014T125102Z">
        <seg>第四十章. ANTLR 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 41. The Project Report Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013151Z" creationid="huanghaohang" creationdate="20190123T013151Z">
        <seg>第四十一章. 项目报告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 42. The Announce Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T034320Z" creationid="haohang" creationdate="20170720T072240Z">
        <seg>第四十二章. 公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 43. The Build Announcements Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T034314Z" creationid="huanghaohang" creationdate="20190124T034314Z">
        <seg>第四十三章. 构建公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 44. The Distribution Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092419Z" creationid="huanghaohang" creationdate="20190124T092419Z">
        <seg>第四十四章. 分发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 45. The Application Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093225Z" creationid="huanghaohang" creationdate="20190124T093225Z">
        <seg>第四十五章. 应用程序插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 46. The Java Library Distribution Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094104Z" creationid="huanghaohang" creationdate="20180715T094104Z">
        <seg>第46章. Java 库发布插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 47. Build Init Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T145809Z" creationid="huanghaohang" creationdate="20190124T092823Z">
        <seg>第四十七章. 构建初始化插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 48. Wrapper Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155533Z" creationid="huanghaohang" creationdate="20180408T143510Z">
        <seg>第四十八章. 包装器插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 49. The Build Dashboard Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155513Z" creationid="95" creationdate="20190201T155457Z">
        <seg>第四十九章. 构建仪表盘插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 5. Troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T081157Z" creationid="95" creationdate="20170723T081157Z">
        <seg>第五章. 疑难解答</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 50. Dependency Management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T232918Z" creationid="95" creationdate="20190201T232918Z">
        <seg>第五十章. 依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 51. Publishing artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T154001Z" creationid="95" creationdate="20190202T154001Z">
        <seg>第五十一章. 发布工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 52. The Maven Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T145111Z" creationid="huanghaohang" creationdate="20180416T145111Z">
        <seg>第五十二章. Maven 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 53. The Signing Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091009Z" creationid="huanghaohang" creationdate="20190606T091009Z">
        <seg>第五十三章. 签名插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 54. Building native binaries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011305Z" creationid="huanghaohang" creationdate="20190608T091845Z">
        <seg>第五十四章. 构建本机二进制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 55. The Build Lifecycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091001Z" creationid="huanghaohang" creationdate="20190606T091001Z">
        <seg>第五十五章. 构建的生命周期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 56. Multi-project Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091747Z" creationid="huanghaohang" creationdate="20190608T091747Z">
        <seg>第五十六章. 多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 57. Writing Custom Task Classes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T153129Z" creationid="huanghaohang" creationdate="20190613T153129Z">
        <seg>第五十七章. 编写自定义任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 58. Writing Custom Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153859Z" creationid="huanghaohang" creationdate="20190623T153859Z">
        <seg>第五十八章. 编写自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 59. Organizing Build Logic</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090823Z" creationid="huanghaohang" creationdate="20190611T090823Z">
        <seg>第五十九章. 组织构建逻辑</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 6, &lt;i0&gt;Build Script Basics&lt;/i0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072726Z" creationid="95" creationdate="20170723T072726Z">
        <seg>第六章， &lt;i0&gt;构建脚本基础&lt;/i0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 6. Build Script Basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T122508Z" creationid="95" creationdate="20170723T072427Z">
        <seg>第六章. 构建脚本基础</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 60. Initialization Scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190730T152649Z" creationid="huanghaohang" creationdate="20190730T152649Z">
        <seg>第六十章. 初始化脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 61. The Gradle Wrapper</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143320Z" creationid="huanghaohang" creationdate="20190707T143320Z">
        <seg>第六十一章. Gradle 包装器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 62. Embedding Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021654Z" creationid="huanghaohang" creationdate="20190606T021654Z">
        <seg>第六十二章. 嵌入 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 63. Comparing Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T152632Z" creationid="huanghaohang" creationdate="20190613T153035Z">
        <seg>第六十三章. 比较构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 64. Ivy Publishing (new)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T153855Z" creationid="huanghaohang" creationdate="20200604T143252Z">
        <seg>第六十四章. Ivy发布（新）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 65. Maven Publishing (new)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141901Z" creationid="huanghaohang" creationdate="20210515T141901Z">
        <seg>第六十五章. Maven 发布（新）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 7, &lt;i0&gt;Java Quickstart&lt;/i0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014527Z" creationid="95" creationdate="20170723T072829Z">
        <seg>第七章，  &lt;i0&gt;Java 快速入门&lt;/i0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 7. Java Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T031231Z" creationid="95" creationdate="20170723T122517Z">
        <seg>第七章. Java 快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 8, &lt;i0&gt;Dependency Management Basics&lt;/i0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080804Z" creationid="95" creationdate="20170723T080804Z">
        <seg>第八章， &lt;i0&gt;依赖管理基础&lt;/i0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 8. Dependency Management Basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130441Z" creationid="95" creationdate="20170729T031243Z">
        <seg>第八章. 依赖管理基础</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 9, &lt;i0&gt;Groovy Quickstart&lt;/i0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080844Z" creationid="95" creationdate="20170723T080844Z">
        <seg>第九章. &lt;i0&gt;Groovy快速入门&lt;/i0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chapter 9. Groovy Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130455Z" creationid="95" creationdate="20170803T130455Z">
        <seg>第九章. Groovy 快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checkstyle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135609Z" creationid="huanghaohang" creationdate="20180516T135609Z">
        <seg>Checkstyle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Checkstyle configuration file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140013Z" creationid="huanghaohang" creationdate="20180516T140013Z">
        <seg>Checkstyle 配置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choosing a log level</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140428Z" creationid="huanghaohang" creationdate="20180516T140428Z">
        <seg>选择一个日志级别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Clang</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022231Z" creationid="huanghaohang" creationdate="20190609T022231Z">
        <seg>Clang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class or a super class contain a method annotated with &lt;c0&gt;@Test&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155309Z" creationid="huanghaohang" creationdate="20180405T155309Z">
        <seg>类或超类含有一个带 &lt;c0&gt;@Test&lt;/c0&gt; 注解的方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class or a super class extends &lt;c0&gt;TestCase&lt;/c0&gt; or &lt;c1&gt;GroovyTestCase&lt;/c1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155234Z" creationid="huanghaohang" creationdate="20180405T155234Z">
        <seg>类或超类继承自 &lt;c0&gt;TestCase&lt;/c0&gt; 或 &lt;c1&gt;GroovyTestCase&lt;/c1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Class or a super class is annotated with &lt;c0&gt;@RunWith&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155258Z" creationid="huanghaohang" creationdate="20180405T155258Z">
        <seg>类或超类使用了 &lt;c0&gt;@RunWith&lt;/c0&gt; 注解</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Classpath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082550Z" creationid="huanghaohang" creationdate="20181210T082550Z">
        <seg>Classpath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Clean</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130048Z" creationid="huanghaohang" creationdate="20180517T130048Z">
        <seg>Clean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Client module dependencies allow to declare &lt;s0&gt;&lt;e1&gt;transitive&lt;/e1&gt;&lt;/s0&gt; dependencies directly in the build script. They are a replacement for a module descriptor in an external repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051409Z" creationid="huanghaohang" creationdate="20190531T051216Z">
        <seg>客户端模块依赖允许直接在构建脚本中声明 &lt;s0&gt;&lt;e1&gt;传递&lt;/e1&gt;&lt;/s0&gt; 依赖，它们是外部仓库中模块描述符的替代者。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Client module dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153950Z" creationid="huanghaohang" creationdate="20190527T153950Z">
        <seg>客户端模块依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Closure cl = { task -&gt; println &lt;s0&gt;"I'm $task.project.name"&lt;/s0&gt; }
task hello &lt;&lt; cl
project(&lt;s1&gt;':bluewhale'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154821Z" creationid="huanghaohang" creationdate="20190614T154821Z">
        <seg>Closure cl = { task -&gt; println &lt;s0&gt;"I'm $task.project.name"&lt;/s0&gt; }
task hello &lt;&lt; cl
project(&lt;s1&gt;':bluewhale'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CodeNarc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141830Z" creationid="huanghaohang" creationdate="20180516T141830Z">
        <seg>CodeNarc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CodeNarc configuration file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142030Z" creationid="huanghaohang" creationdate="20180516T142030Z">
        <seg>CodeNarc 配置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Collections.replaceAll(args, &lt;s1&gt;"CUSTOM"&lt;/s1&gt;, &lt;s2&gt;"-DFRENCH"&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093528Z" creationid="huanghaohang" creationdate="20190610T093528Z">
        <seg>Collections.replaceAll(args, &lt;s1&gt;"CUSTOM"&lt;/s1&gt;, &lt;s2&gt;"-DFRENCH"&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234030Z" creationid="huanghaohang" creationdate="20171206T234030Z">
        <seg>命令行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command line option "--tests" is provided to conveniently set the test filter. Especially useful for the classic 'single test method execution' use case. When the command line option is used, the inclusion filters declared in the build script are ignored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131118Z" creationid="huanghaohang" creationdate="20180405T131118Z">
        <seg>提供了“--tests”命令行选项，以方便设置测试过滤器。特别适用于传统的“单一测试方法执行”用例。当使用该命令行选项时，构建脚本中声明的包含过滤器将被忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compile time dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053736Z" creationid="haohang" creationdate="20180313T053736Z">
        <seg>编译时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compile time dependencies for the given source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054318Z" creationid="haohang" creationdate="20180313T054318Z">
        <seg>给定源集的编译时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CompileJava</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130057Z" creationid="huanghaohang" creationdate="20180517T130057Z">
        <seg>CompileJava</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles and jars your code, but does not run the unit tests. Other plugins add more artifacts to this task. For example, if you use the War plugin, this task will also build the WAR file for your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014612Z" creationid="95" creationdate="20170730T014612Z">
        <seg>编译代码并打成jar包，但不会运行单元测试。其他的插件会向这个任务添加更多的工件。例如，如果你使用 War 插件，这个任务也会对你的项目构建出 WAR 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles and tests your code. Other plugins add more checks to this task. For example, if you use the &lt;c0&gt;checkstyle&lt;/c0&gt; plugin, this task will also run Checkstyle against your source code.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014719Z" creationid="95" creationdate="20170730T014719Z">
        <seg>编译和测试代码。其他的插件会向这一任务添加更多的检查。例如，如果你使用 &lt;c0&gt;checkstyle&lt;/c0&gt; 插件，这一任务就会针对你的源代码运行 Checkstyle 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles production Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120822Z" creationid="huanghaohang" creationdate="20180406T120748Z">
        <seg>编译 Groovy 的生产源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles production Java source files using javac.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062332Z" creationid="haohang" creationdate="20180312T062332Z">
        <seg>使用 javac 编译 Java 生产源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles production Scala source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010525Z" creationid="huanghaohang" creationdate="20180407T010525Z">
        <seg>编译 Scala 的生产源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles test Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120838Z" creationid="huanghaohang" creationdate="20180406T120838Z">
        <seg>编译 Groovy 的测试源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles test Java source files using javac.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062811Z" creationid="haohang" creationdate="20180312T062811Z">
        <seg>使用 javac 编译 Java 测试源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles test Scala source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010533Z" creationid="huanghaohang" creationdate="20180407T010533Z">
        <seg>编译 Scala 的测试源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles the given source set's Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120905Z" creationid="huanghaohang" creationdate="20180406T120905Z">
        <seg>编译给定源集里的 Groovy 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles the given source set's Java source files using javac.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073410Z" creationid="haohang" creationdate="20180312T073410Z">
        <seg>使用 javac 编译给定的源集中的 Java 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiles the given source set's Scala source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010617Z" creationid="huanghaohang" creationdate="20180407T010617Z">
        <seg>编译给定源集里的 Scala 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiling in external process</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140318Z" creationid="huanghaohang" creationdate="20181201T140318Z">
        <seg>在外部进程中编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complete overwrite works equally well for individual files, for example by executing &lt;s0&gt;&lt;c1&gt;gradle cleanEclipseClasspath eclipseClasspath&lt;/c1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T081952Z" creationid="huanghaohang" creationdate="20181210T081952Z">
        <seg>完全覆盖同样可以用于个人文件，例如通过执行 &lt;s0&gt;&lt;c1&gt;gradle cleanEclipseClasspath eclipseClasspath&lt;/c1&gt;&lt;/s0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complete overwrite works equally well for individual files, for example by executing &lt;s0&gt;&lt;c1&gt;gradle cleanIdeaModule ideaModule&lt;/c1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T160524Z" creationid="huanghaohang" creationdate="20190121T160524Z">
        <seg>完全覆盖同样可以用于个人文件，例如通过执行&lt;s0&gt;&lt;c1&gt;gradle cleanIdeaModule ideaModule&lt;/c1&gt;&lt;/s0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Component Type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T031952Z" creationid="huanghaohang" creationdate="20190609T031952Z">
        <seg>组件类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Component model</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091101Z" creationid="huanghaohang" creationdate="20190611T091101Z">
        <seg>组件模型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conf2ScopeMappingContainer</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060601Z" creationid="huanghaohang" creationdate="20190607T060601Z">
        <seg>Conf2ScopeMappingContainer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142301Z" creationid="huanghaohang" creationdate="20181201T142301Z">
        <seg>配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration Properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092153Z" creationid="huanghaohang" creationdate="20190124T092153Z">
        <seg>配置属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration and execution of a single project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144842Z" creationid="huanghaohang" creationdate="20190708T144842Z">
        <seg>单项目构建的配置和执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration dependencies are very different to execution dependencies. Configuration dependencies are between projects whereas execution dependencies are always resolved to task dependencies. Another difference is that always all projects are configured, even when you start the build from a subproject. The default configuration order is top down, which is usually what is needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T145607Z" creationid="huanghaohang" creationdate="20190617T145315Z">
        <seg>配置依赖与执行依赖有很大不同。配置依赖是项目之间的，而执行依赖则总是被解析为任务依赖。另一个区别是，所有项目总是都会被配置，即使你是从子项目启动构建的。默认的配置顺序是通常所需要的从顶至下的顺序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration injection feature and access to the complete project model are possible because every project is configured before the execution phase. Yet, this approach may not be the most efficient in a very large multi-project builds. There are Gradle builds with a hierarchy of hundreds of subprojects. Configuration time of huge multi-project builds may become noticeable. Scalability is an important requirement for Gradle. Hence, starting from version 1.4 new incubating 'configuration on demand' mode is introduced.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T152721Z" creationid="huanghaohang" creationdate="20190614T152721Z">
        <seg>由于每个项目都在执行阶段开始之前配置，所以可以做到配置注入功能以及对完整项目模型的访问。然而，在一个非常大的多项目构建中，这种方法可能不是最有效的。有一些 Gradle 构建，它们在层次结构上会有上百个的子项目。对于大型的多项目，构建的配置时间可能会变得很明显。可扩展性是 Gradle 的一项重要需求，因此从 V1.4 开始，新引入了一个试验性的“按需配置”模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration of projects in parallel.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T144325Z" creationid="huanghaohang" creationdate="20190621T144325Z">
        <seg>并行配置项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration on demand mode attempts to configure only projects that are relevant for requested tasks. This way, the configuration time of a large multi-project build is greatly improved. In the long term, this mode will become the default mode, possibly the only mode for Gradle build execution. The configuration on demand feature is incubating so not every build is guaranteed to work correctly. The feature should work very well for multi-project builds that have decoupled projects (&lt;a0&gt;Section 56.9, “Decoupled Projects”&lt;/a0&gt;). In configuration on demand mode projects are configured as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T153318Z" creationid="huanghaohang" creationdate="20190614T153318Z">
        <seg>按需配置模式尝试只配置与所请求的任务相关的项目，这样就大大地改善了大型多项目构建的配置时间。长远来看，这种模式将成为默认模式，可能会是 Gradle 构建执行的唯一模式。按需配置功能还处于试验性阶段，因此无法保证每个构建都能正确。对于解耦的多项目构建（《&lt;a0&gt;第56.9节，解耦项目&lt;/a0&gt;》），这个功能部件应该非常有效。在按需配置的模式中，项目配置如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuration shared between subprojects can be configured in a &lt;c0&gt;subprojects&lt;/c0&gt; block.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042845Z" creationid="huanghaohang" creationdate="20181202T042845Z">
        <seg>子项目之间的共享配置可以配置在 &lt;c0&gt;subprojects&lt;/c0&gt; 块中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configure by DAG</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031936Z" creationid="huanghaohang" creationdate="20170927T031936Z">
        <seg>使用 DAG 配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configured a &lt;c0&gt;main&lt;/c0&gt; source set with default (i.e. conventional) values for properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024850Z" creationid="huanghaohang" creationdate="20180131T024850Z">
        <seg>通过属性的默认值（即约定值）配置了一个 &lt;c0&gt;main&lt;/c0&gt; 源码集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configured supporting tasks to use these properties to perform work</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024942Z" creationid="huanghaohang" creationdate="20180131T024942Z">
        <seg>配置了支持任务来使用这些属性执行工作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring Sonar Settings from the Command Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070154Z" creationid="huanghaohang" creationdate="20190205T070154Z">
        <seg>从命令行配置 Sonar 的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring a first level dependency as &lt;s0&gt;&lt;e1&gt;forced&lt;/e1&gt;&lt;/s0&gt;. This approach is useful if the dependency in conflict is already a first level dependency. See examples in &lt;a2&gt;&lt;c3&gt;DependencyHandler&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T142937Z" creationid="95" creationdate="20190316T131630Z">
        <seg>将第一级依赖配置为&lt;s0&gt;&lt;e1&gt;强制&lt;/e1&gt;&lt;/s0&gt;。如果冲突中的依赖已经是第一级依赖，那么这一方法会很有用。请参阅 &lt;a2&gt;&lt;c3&gt;DependencyHandler&lt;/c3&gt;&lt;/a2&gt;中的示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring an HTTP proxy (for example for downloading dependencies) is done via standard JVM system properties. These properties can be set directly in the build script; for example &lt;c0&gt; System.setProperty('http.proxyHost', 'www.somehost.org')&lt;/c0&gt; for the proxy host. Alternatively, the properties can be specified in a gradle.properties file, either in the build's root directory or in the Gradle home directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073459Z" creationid="huanghaohang" creationdate="20180130T073214Z">
        <seg>配置 HTTP 代理（例如用于下载依赖）是通过标准的 JVM 系统属性完成的。这些属性可以直接在构建脚本中设置；例如通过&lt;c0&gt; System.setProperty('http.proxyHost', 'www.somehost.org')&lt;/c0&gt; 来设置代理主机。或者，可以在构建的根目录或 Gradle 主目录中的 gradle.properties 文件中指定这些属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring any dependency (transitive or not) as &lt;s0&gt;&lt;e1&gt;forced&lt;/e1&gt;&lt;/s0&gt;. This approach is useful if the dependency in conflict is a transitive dependency. It also can be used to force versions of first level dependencies. See examples in &lt;a2&gt;&lt;c3&gt;ResolutionStrategy&lt;/c3&gt;&lt;/a2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T143120Z" creationid="huanghaohang" creationdate="20190411T141914Z">
        <seg>将任何依赖（传递依赖或非传递依赖）配置为&lt;s0&gt;&lt;e1&gt;强制&lt;/e1&gt;&lt;/s0&gt;。 如果冲突中的依赖是传递依赖，那么这种方法会很有用。 它还可用于强制第一级依赖的版本。请参阅 &lt;a2&gt;&lt;c3&gt;ResolutionStrategy&lt;/c3&gt;&lt;/a2&gt;中的示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring arbitrary objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034100Z" creationid="huanghaohang" creationdate="20180131T034100Z">
        <seg>配置任意对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring arbitrary objects using an external script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034110Z" creationid="huanghaohang" creationdate="20180131T034110Z">
        <seg>使用外部脚本配置任意对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021658Z" creationid="huanghaohang" creationdate="20180201T021658Z">
        <seg>配置任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the JaCoCo Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070050Z" creationid="huanghaohang" creationdate="20190205T070050Z">
        <seg>配置 JaCoCo 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the Sonar Runner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070220Z" creationid="huanghaohang" creationdate="20190205T070220Z">
        <seg>配置 Sonar Runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the build environment via gradle.properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034140Z" creationid="huanghaohang" creationdate="20180517T034140Z">
        <seg>通过 gradle.properties 配置构建环境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the compiler, assembler and linker</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091114Z" creationid="huanghaohang" creationdate="20190611T091114Z">
        <seg>配置编译器、汇编器和连接器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143356Z" creationid="huanghaohang" creationdate="20180516T143356Z">
        <seg>配置守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the project using an external build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034053Z" creationid="huanghaohang" creationdate="20180131T034053Z">
        <seg>使用外部构建脚本配置项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conflicting versions of the same jar should be detected and either resolved or cause an exception. If you don't use transitive dependency management, version conflicts are undetected and the often accidental order of the classpath will determine what version of a dependency will win. On a large project with many developers changing dependencies, successful builds will be few and far between as the order of dependencies may directly affect whether a build succeeds or fails (or whether a bug appears or disappears in production).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T222933Z" creationid="95" creationdate="20190315T221253Z">
        <seg> 相同的jar的冲突版本应该被检测到，并且要么解决要么抛出异常。 如果不使用传递依赖管理，版本冲突没被检测到，那以在类路径中的无法预测的顺序将决定最终使用哪个版本的依赖。在有许多开发者更改依赖的大型项目上，成功的构建将会少之又少，因为依赖的顺序可能直接影响构建是否成功（或者在生产中是否出现错误）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the case where another task is to consume the classes files. If this task is configured to use the value from &lt;c0&gt;sourceSets.main.output.classesDir&lt;/c0&gt;, then changing it in this location will update both the &lt;c1&gt;compileJava&lt;/c1&gt; task and this other consumer task whenever it is changed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032009Z" creationid="huanghaohang" creationdate="20180131T032009Z">
        <seg>考虑一下有另一个任务使用到类文件的情况。如果这个任务被配置为使用 &lt;c0&gt;sourceSets.main.output.classesDir&lt;/c0&gt; 的值，那么在这里修改它就会同时更新 &lt;c1&gt;compileJava&lt;/c1&gt; 任务和那另一个任务，不管它的值是什么时候改的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Console console = System.console()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133042Z" creationid="huanghaohang" creationdate="20190608T133042Z">
        <seg>Console console = System.console()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contains a sample class and unit test, if there are no existing source or test files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154703Z" creationid="95" creationdate="20190201T154703Z">
        <seg>如果没有源文件或测试文件，会包含一个示例类和单元测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contains a sample groovy class and an according Spock specification, if there are no existing source or test files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155005Z" creationid="95" creationdate="20190201T155005Z">
        <seg>如果不存在源文件或测试文件，会包含一个示例 groovy 类和一个相应的 Spock 规范</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contains a sample scala class and an according ScalaTest test suite, if there are no existing source or test files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154812Z" creationid="95" creationdate="20190201T154812Z">
        <seg>如果不存在源文件或测试文件，会包含一个示例 scala 类和一个相应的 ScalaTest 测试套件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Contains the project's source sets.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062406Z" creationid="haohang" creationdate="20180313T062406Z">
        <seg>包含项目的源集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Content assistance in the IDE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133945Z" creationid="huanghaohang" creationdate="20180108T133945Z">
        <seg>在 IDE 中的内容帮助</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Continuing the build when a failure occurs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233919Z" creationid="huanghaohang" creationdate="20171206T233919Z">
        <seg>失败后继续构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convention methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092016Z" creationid="huanghaohang" creationdate="20190608T092016Z">
        <seg>约定方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convention object</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070320Z" creationid="huanghaohang" creationdate="20190205T070320Z">
        <seg>公约对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130034Z" creationid="huanghaohang" creationdate="20180517T130034Z">
        <seg>约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conventions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034759Z" creationid="huanghaohang" creationdate="20180517T034759Z">
        <seg>约定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072426Z" creationid="haohang" creationdate="20170720T072343Z">
        <seg>本文件的副本，无论其是以印刷版本形式还是电子版本形式，也无论是您自用，还是分发给他人，均为免费，并且每一份副本均需带有版权声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies production resources into the production classes directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062402Z" creationid="haohang" creationdate="20180312T062402Z">
        <seg>把生产资源文件复制到生产类目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies test resources into the test classes directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062824Z" creationid="haohang" creationdate="20180312T062824Z">
        <seg>把测试资源文件拷贝到测试类目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copies the given source set's resources into the classes directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073435Z" creationid="haohang" creationdate="20180312T073435Z">
        <seg>将给定源集的资源文件复制到类目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062336Z" creationid="haohang" creationdate="20180312T062336Z">
        <seg>Copy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copy myCopy = task(myCopy, type: Copy)
myCopy.from &lt;s0&gt;'resources'&lt;/s0&gt;
myCopy.into &lt;s1&gt;'target'&lt;/s1&gt;
myCopy.include(&lt;s2&gt;'**/*.txt'&lt;/s2&gt;, &lt;s3&gt;'**/*.xml'&lt;/s3&gt;, &lt;s4&gt;'**/*.properties'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124321Z" creationid="huanghaohang" creationdate="20170919T124321Z">
        <seg>Copy myCopy = task(myCopy, type: Copy)
myCopy.from &lt;s0&gt;'resources'&lt;/s0&gt;
myCopy.into &lt;s1&gt;'target'&lt;/s1&gt;
myCopy.include(&lt;s2&gt;'**/*.txt'&lt;/s2&gt;, &lt;s3&gt;'**/*.xml'&lt;/s3&gt;, &lt;s4&gt;'**/*.properties'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copy specs form a hierarchy. A copy spec inherits its destination path, include patterns, exclude patterns, copy actions, name mappings and filters.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060911Z" creationid="huanghaohang" creationdate="20171126T060730Z">
        <seg>复制规范用于形成一个层次结构。一个复制规范继承其目标路径、包含模式、排除模式、复制操作、名称映射和过滤器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copying files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093056Z" creationid="huanghaohang" creationdate="20180218T093056Z">
        <seg>复制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Copyright © 2007-2012 Hans Dockter, Adam Murdoch</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072305Z" creationid="haohang" creationdate="20170720T072305Z">
        <seg>版权所有 © 2007-2012 Hans Dockter, Adam Murdoch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>CreateStartScripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135040Z" creationid="95" creationdate="20190131T135040Z">
        <seg>CreateStartScripts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates OS specific scripts to run the project as a JVM application.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135115Z" creationid="95" creationdate="20190131T135115Z">
        <seg>创建操作系统特定的脚本以作为 JVM 应用程序运行项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a TAR archive of the distribution contents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134018Z" creationid="huanghaohang" creationdate="20190127T134018Z">
        <seg>创建分发内容的 TAR 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a ZIP archive of the distribution contents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133902Z" creationid="huanghaohang" creationdate="20190127T133902Z">
        <seg>创建分发内容的 ZIP 存档</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a full distribution TAR archive including runtime libraries and OS specific scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135156Z" creationid="95" creationdate="20190131T135156Z">
        <seg>创建包含运行时库和操作系统特定的脚本的完整分发 TAR 归档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a full distribution ZIP archive including runtime libraries and OS specific scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135146Z" creationid="95" creationdate="20190131T135146Z">
        <seg>创建包含运行时库和操作系统特定的脚本的完整分发 ZIP 归档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creates a full distribution ZIP archive including runtime libraries.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143816Z" creationid="95" creationdate="20190131T143816Z">
        <seg>创建包含运行时库的完整分发 ZIP 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating archives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093126Z" creationid="huanghaohang" creationdate="20180218T093126Z">
        <seg>创建归档文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creation of advanced dependency reports tailored to your use case.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142548Z" creationid="huanghaohang" creationdate="20190602T142548Z">
        <seg>为你的用例定制创建高级的依赖报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cross project configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144854Z" creationid="huanghaohang" creationdate="20190708T144854Z">
        <seg>跨项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cross-compiling is possible with the &lt;a0&gt;&lt;c1&gt;Gcc&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Clang&lt;/c3&gt;&lt;/a2&gt; tool chains, by adding support for additional target platforms. This is done by specifying a target platform for a toolchain. For each targetted platform a custom configuration can be specified.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T024946Z" creationid="huanghaohang" creationdate="20190610T093636Z">
        <seg>通过添加对其他目标平台的支持，可以做到使用 &lt;a0&gt;&lt;c1&gt;Gcc&lt;/c1&gt;&lt;/a0&gt; 和 &lt;a2&gt;&lt;c3&gt;Clang&lt;/c3&gt;&lt;/a2&gt; 工具链进行交叉编译。这是通过为工具链指定目标平台来完成的。 对于每个目标平台，都可以指定一个自定义的配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Current Directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145901Z" creationid="huanghaohang" creationdate="20170911T145901Z">
        <seg>当前目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142210Z" creationid="huanghaohang" creationdate="20181201T142210Z">
        <seg>自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing the generated files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070336Z" creationid="huanghaohang" creationdate="20190205T070336Z">
        <seg>自定义生成的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>DEBUG</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221543Z" creationid="huanghaohang" creationdate="20180105T221543Z">
        <seg>DEBUG</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>DEBUG and higher (that is, all log messages)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221945Z" creationid="huanghaohang" creationdate="20180105T221945Z">
        <seg>DEBUG 及更高（即所有日志消息）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>DateServlet.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150812Z" creationid="huanghaohang" creationdate="20190617T150812Z">
        <seg>DateServlet.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Debug messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221544Z" creationid="huanghaohang" creationdate="20180105T221544Z">
        <seg>调试消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declarative builds and build-by-convention</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T015356Z" creationid="95" creationdate="20170722T015356Z">
        <seg>声明式的构建以及基于约定的构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091912Z" creationid="huanghaohang" creationdate="20190608T091912Z">
        <seg>声明工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032838Z" creationid="huanghaohang" creationdate="20180131T032838Z">
        <seg>声明变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring your dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233648Z" creationid="huanghaohang" creationdate="20171206T233648Z">
        <seg>声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decoupled Projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145115Z" creationid="huanghaohang" creationdate="20190708T145115Z">
        <seg>解耦的项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deep API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T023155Z" creationid="95" creationdate="20170722T023155Z">
        <seg>深度 API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default Value</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132110Z" creationid="huanghaohang" creationdate="20170913T132110Z">
        <seg>默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031922Z" creationid="huanghaohang" creationdate="20170927T031922Z">
        <seg>默认任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default value</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232616Z" creationid="huanghaohang" creationdate="20171206T232616Z">
        <seg>默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Define machine specific details, such as where JDKs are installed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142346Z" creationid="huanghaohang" creationdate="20191203T142346Z">
        <seg>定义机器的一些特定信息，比如 JDK 的安装位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defines the root directory of your Gradle project (typically where build.gradle is located).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150003Z" creationid="huanghaohang" creationdate="20170911T145903Z">
        <seg>定义了 Gradle 项目的根目录（通常是 build.gradle 所在的位置）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defining tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021646Z" creationid="huanghaohang" creationdate="20180201T021646Z">
        <seg>定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Delete</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063411Z" creationid="haohang" creationdate="20180312T063411Z">
        <seg>Delete</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deletes the &lt;c0&gt;build&lt;/c0&gt; directory, removing all built files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014417Z" creationid="95" creationdate="20170730T014417Z">
        <seg>删除&lt;c0&gt;build&lt;/c0&gt;目录，移除所有构建的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deletes the output files produced by the specified task. For example &lt;c0&gt;cleanJar&lt;/c0&gt; will delete the JAR file created by the &lt;c1&gt;jar&lt;/c1&gt; task, and &lt;c2&gt;cleanTest&lt;/c2&gt; will delete the test results created by the &lt;c3&gt;test&lt;/c3&gt; task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073237Z" creationid="haohang" creationdate="20180312T063424Z">
        <seg>删除指定任务生成的输出文件。例如 &lt;c0&gt;cleanJar&lt;/c0&gt; 将删除由该 &lt;c1&gt;jar&lt;/c1&gt; 任务创建的 JAR 文件，而 &lt;c2&gt;cleanTest&lt;/c2&gt; 将删除由该 &lt;c3&gt;test&lt;/c3&gt; 任务创建的测试结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deletes the project build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063420Z" creationid="haohang" creationdate="20180312T063420Z">
        <seg>删除项目的构建目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150611Z" creationid="huanghaohang" creationdate="20210518T150611Z">
        <seg>依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependencies - Which dependencies?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145101Z" creationid="huanghaohang" creationdate="20190708T145101Z">
        <seg>依赖——哪些依赖？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependencies for native components are binary libraries that export header files. The header files are used during compilation, with the compiled binary dependency being used during linking and execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022405Z" creationid="huanghaohang" creationdate="20190610T022405Z">
        <seg>本机组件的依赖是导出头文件的二进制库。这些头文件在编译期间使用，而已编译的二进制依赖则是在链接和执行的过程中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency Management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190410T003930Z" creationid="huanghaohang" creationdate="20190410T003930Z">
        <seg>依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency Management Basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233617Z" creationid="huanghaohang" creationdate="20171206T233617Z">
        <seg>依赖管理基础</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency Management Best Practices</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024235Z" creationid="huanghaohang" creationdate="20190411T141812Z">
        <seg>依赖管理最佳实践</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233656Z" creationid="huanghaohang" creationdate="20171206T233656Z">
        <seg>依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency configurations are also used to publish files.&lt;s0&gt;[&lt;a1&gt;3&lt;/a1&gt;]&lt;/s0&gt; We call these files &lt;e2&gt;publication artifacts&lt;/e2&gt;, or usually just &lt;e3&gt;artifacts&lt;/e3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050136Z" creationid="huanghaohang" creationdate="20170908T050044Z">
        <seg>依赖配置也用于发布文件。&lt;s0&gt;[&lt;a1&gt;3&lt;/a1&gt;]&lt;/s0&gt;我们称这些文件&lt;e2&gt;发布构件&lt;/e2&gt;，通常也叫做&lt;e3&gt;构件&lt;/e3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130027Z" creationid="huanghaohang" creationdate="20180517T130027Z">
        <seg>依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency management can be particularly challenging during a migration from one build system to another. If you are migrating from a tool like Ant or Maven to Gradle, you may be faced with some difficult situations. For example, one common pattern is an Ant project with version-less jar files stored in the filesystem. Other build systems require a wholesale replacement of this approach before migrating. With Gradle, you can adapt your new build to any existing source of dependencies or dependency metadata. This makes incremental migration to Gradle much easier than the alternative. On most large projects, build migrations and any change to development process is incremental because most organizations can't afford to stop everything and migrate to a build tool's idea of dependency management.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T103455Z" creationid="95" creationdate="20190204T010128Z">
        <seg>在从一个构建系统迁移到另一个构建系统的过程当中，对于依赖管理而方，可能特别具有挑战性。 如果你要从Ant或Maven之类的工具迁移到Gradle，那么可能会面临一些困难的情况。 例如一个常见的模式是Ant项目，其中包含了存储在文件系统中的无版本jar文件。 其他构建系统需要在迁移之前批量替换此方法。而使用Gradle，你可以让新构建调整为任何现有的依赖源或依赖元数据。这使得增量迁移到Gradle的难度比其他的规范方案要容易得多。 在大多数大型项目上，构建迁移以及对开发流程的任何更改都是增量进行的，因为大多数组织都无法停止所有的一切，并迁移到一个构建工具的依赖管理概念中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency management is a critical feature of every build, and Gradle has placed an emphasis on offering first-class dependency management that is both easy-to-understand and compatible with a wide variety of approaches. If you are familiar with the approach used by either Maven or Ivy you will be delighted to learn that Gradle is fully compatible with both approaches in addition to being flexible enough to support fully-customized approaches.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T154547Z" creationid="95" creationdate="20190202T154547Z">
        <seg>依赖关系管理是每个构建的一个关键特性，Gradle的重点在于提供易于理解且与各种方法兼容的一流的依赖管理。 如果您熟悉Maven或Ivy所使用的方法，那么你会很高兴知道Gradle完全兼容这两种方法，此外，它还具有足够的灵活性以支持完全自定义的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency resolution will fail if the required artifacts are not available in any repository specified by the build, regardless whether the local cache has retrieved this artifact from a different repository. Repository independence allows builds to be isolated from each other in an advanced way that no build tool has done before. This is a key feature to create builds that are reliable and reproducible in any environment.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T083537Z" creationid="huanghaohang" creationdate="20190605T083537Z">
        <seg>如果所需的构件，在构建所指定的任何仓库中都不可用，无论本地缓存是否已经从其他的仓库中获取到这个构件，依赖解析都会失败。仓库独立能够使构建之间用一种先进的方法彼此隔离，以前从没有构建工具能够做到。这是一个关键的功能，使得能够在任何环境中创建可靠且可复制的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency resolve rules are an &lt;a0&gt;incubating&lt;/a0&gt; feature introduced in Gradle 1.4 which give you fine-grained control over the version selected for a particular dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T143248Z" creationid="huanghaohang" creationdate="20190411T142942Z">
        <seg>依赖解析规则是一个在 Gradle 1.4 引进的&lt;a0&gt;实验性&lt;/a0&gt;功能，让你可以对特定的依赖选择的版本进行细粒度控制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency resolve rules give you the power to enforce releasable units in your build. Imagine a releasable unit defined by all libraries that have 'org.gradle' group. We can force all of these libraries to use a consistent version:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015335Z" creationid="huanghaohang" creationdate="20190605T015335Z">
        <seg>依赖解析规则使你能够在构建中强制指定可发布单元。设想一下，一个可发布单元，由有 “org.gradle” 组的所有库定义。我们可以强制所有这些库使用一致的版本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency resolve rules provide a mechanism for blacklisting a particular version of a dependency and providing a replacement version. This can be useful if a certain dependency version is broken and should not be used, where a dependency resolve rule causes this version to be replaced with a known good version. One example of a broken module is one that declares a dependency on a library that cannot be found in any of the public repositories, but there are many other reasons why a particular module version is unwanted and a different version is preferred.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T023815Z" creationid="huanghaohang" creationdate="20190605T022849Z">
        <seg>依赖解析规则提供了一种机制，用于将特定版本的依赖列入黑名单并提供替换版本。 如果某个依赖版本已损坏且不应使用，那么这就会很有用，因为依赖解析规则可以将这个版本替换为已知的好的版本。有关损坏模块的例子有，在一个库上所声明的依赖在任何公共仓库中都找不到。但是为什么不能使用特定的模块版本，而更希望另一个不同的版本，还有许多其他原因。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependency resolve rules provide a very powerful way to control the dependency resolution process, and can be used to implement all sorts of advanced patterns in dependency management. Some of these patterns are outlined below. For more information and code samples see &lt;a0&gt;&lt;c1&gt;ResolutionStrategy&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T040251Z" creationid="huanghaohang" creationdate="20190604T040251Z">
        <seg>依赖解析规则提供了一种非常强大的方法来控制依赖解析过程，并且可以用于实现依赖管理中的所有高级模式。下面是其中一些模式的概述。有关更多信息和代码示例，请参阅 &lt;a0&gt;&lt;c1&gt;ResolutionStrategy&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>DependencyReportTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040014Z" creationid="huanghaohang" creationdate="20190123T040014Z">
        <seg>DependencyReportTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depending on project size, the Sonar Runner may require a lot of memory. For this and other (mainly isolation) reasons, it is desirable to execute the Sonar Runner in a separate process. This feature will be provided once Sonar Runner 2.1 has been released and adopted by the Sonar Runner plugin. Until then, the Sonar Runner is executed in the main Gradle process. See &lt;a0&gt;Section 20.1, “Configuring the build environment via gradle.properties”&lt;/a0&gt; for how to manage memory settings for that process.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051927Z" creationid="huanghaohang" creationdate="20181202T051927Z">
        <seg>根据项目大小，Sonar Runner 可能需要大量内存。出于这个和其他（主要是隔离）的原因，希望在单独的过程中执行 Sonar Runner。一旦 Sonar Runner 2.1 发布并且被 Sonar Runner 插件彩，就会提供此功能。在此之前，Sonar Runner 在主 Gradle 进程中执行。有关如何管理该进程的内存设置，请参阅《&lt;a0&gt;第 20.1 节，“通过gradle.properties配置构建环境”&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depends on</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061334Z" creationid="haohang" creationdate="20180312T061334Z">
        <seg>依赖于</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depends on the archive type, and for TAR files, the compression type as well: &lt;c0&gt;zip&lt;/c0&gt;, &lt;c1&gt;jar&lt;/c1&gt;, &lt;c2&gt;war&lt;/c2&gt;, &lt;c3&gt;tar&lt;/c3&gt;, &lt;c4&gt;tgz&lt;/c4&gt; or &lt;c5&gt;tbz2&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233319Z" creationid="huanghaohang" creationdate="20171206T233319Z">
        <seg>依赖于归档类型，并且对于TAR文件，可以是以下压缩类型：&lt;c0&gt;zip&lt;/c0&gt;, &lt;c1&gt;jar&lt;/c1&gt;, &lt;c2&gt;war&lt;/c2&gt;, &lt;c3&gt;tar&lt;/c3&gt;, &lt;c4&gt;tgz&lt;/c4&gt; 或 &lt;c5&gt;tbz2&lt;/c5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Depends on the archive type. JARs and WARs are generated into &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;project.buildDir&lt;/c2&gt;&lt;/e1&gt;/libraries&lt;/c0&gt;. ZIPs and TARs are generated into &lt;c3&gt;&lt;e4&gt;&lt;c5&gt;project.buildDir&lt;/c5&gt;&lt;/e4&gt;/distributions&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233108Z" creationid="huanghaohang" creationdate="20171206T233108Z">
        <seg>依赖于存档类型。 JAR 和 WAR 会生成到&lt;c0&gt;&lt;e1&gt;&lt;c2&gt;project.buildDir&lt;/c2&gt;&lt;/e1&gt;/libraries&lt;/c0&gt;中。 ZIP 和 TAR 则会生成到&lt;c3&gt;&lt;e4&gt;&lt;c5&gt;project.buildDir&lt;/c5&gt;&lt;/e4&gt;/distributions&lt;/c3&gt;中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deploying to a Maven repository is only half the fun if you don't have a POM. Fortunately Gradle can generate this POM for you using the dependency information it has.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074730Z" creationid="huanghaohang" creationdate="20190607T074730Z">
        <seg>如果你没有 POM，部署到 Maven 仓库只有一半的乐趣。幸运的是 Gradle 可以使用它的依赖信息为你生成这个 POM。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Deploys your web application to a Jetty web container embedded in the build. See also &lt;a0&gt;Chapter 10, &lt;i1&gt;Web Application Quickstart&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143404Z" creationid="huanghaohang" creationdate="20180207T143256Z">
        <seg>在构建中将你的 web 应用程序部署到内嵌的 Jetty web 容器中。另请参阅《&lt;a0&gt;第十章，&lt;i1&gt;Web 应用程序快速入门&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Describes how to install Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072817Z" creationid="95" creationdate="20170723T072621Z">
        <seg>介绍如何安装Gradle。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Description</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232622Z" creationid="huanghaohang" creationdate="20171206T232622Z">
        <seg>描述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Did we mention faster builds? The daemon can potentially preemptively download dependencies or check for new versions of snapshot dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T141702Z" creationid="huanghaohang" creationdate="20180109T140348Z">
        <seg>我们提到更快的构建了吗？守护进程可以预先下载依赖项或检查 snapshot 依赖的新版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Different teams prefer different ways to manage their external dependencies. Gradle provides convenient support for any strategy. From transitive dependency management with remote Maven and Ivy repositories to jars or dirs on the local file system.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T034310Z" creationid="95" creationdate="20170723T034054Z">
        <seg>不同的团队喜欢使用不同的方式来管理他们的外部依赖。从远程Maven和Ivy仓库的传递依赖管理到本地文件系统上的jar包或目录，Gradle为任何策略都提供了方便的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052936Z" creationid="haohang" creationdate="20180313T052936Z">
        <seg>目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Directory creation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034017Z" creationid="huanghaohang" creationdate="20180131T034017Z">
        <seg>创建目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distribution contents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070453Z" creationid="huanghaohang" creationdate="20190205T070453Z">
        <seg>分发内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>DocBook XSL Stylesheets V1.75.2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072248Z" creationid="haohang" creationdate="20170720T072248Z">
        <seg>DocBook XSL Stylesheets V1.75.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Does the same as the eclipse plugin plus generates eclipse WTP (Web Tools Platform) configuration files. After importing to eclipse your war/ear projects should be configured to work with WTP. See also &lt;a0&gt;Chapter 7, &lt;i1&gt;Java Quickstart&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180210T140404Z" creationid="huanghaohang" creationdate="20180210T135921Z">
        <seg>与 eclipse 插件一样，但它还生成 eclipse WTP（Web 工具平台）的配置文件。你的 war/ear 项目在导入 eclipse 后，应配置为能在 WTP 中使用。另请参阅《&lt;a0&gt;第七章，&lt;i1&gt;Java 快速入门&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Don't forget that your build script is simply Groovy code that drives the Gradle API. And the &lt;a0&gt;&lt;c1&gt;Project&lt;/c1&gt;&lt;/a0&gt; interface is your starting point for accessing everything in the Gradle API. So, if you're wondering what 'tags' are available in your build script, you can start with the documentation for the &lt;c2&gt;Project&lt;/c2&gt; interface.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T125959Z" creationid="huanghaohang" creationdate="20170912T125959Z">
        <seg>不要忘了，你的构建脚本只是简单的可以调用Gradle API的Groovy代码。而且&lt;a0&gt;&lt;c1&gt;Project&lt;/c1&gt;&lt;/a0&gt;界面是你访问Gradle API中的所有内容的起点。所以，如果你想知道你的构建脚本中有什么“标签（tag）”可以使用，那么可以先从文档开始&lt;c2&gt;项目&lt;/c2&gt;接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Download</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013335Z" creationid="huanghaohang" creationdate="20170919T013335Z">
        <seg>下载</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dry Run</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233952Z" creationid="huanghaohang" creationdate="20171206T233952Z">
        <seg>演练</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Due to the overhead of dependency analysis, a clean compilation or a compilation after a larger code change may take longer than with the Ant based compiler. For CI builds and release builds, we currently recommend to use the Ant based compiler.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T140814Z" creationid="huanghaohang" creationdate="20180407T140637Z">
        <seg>由于依赖分析的开销，进行清理编译或者是在较大的代码更改之后进行编译可能耗时比基于 Ant 的编译器要更长。对于 CI 构建和发布构建，我们目前推荐使用基于 Ant 的编译器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Due to this mechanism, your CUnit sources may not contain a &lt;c0&gt;main&lt;/c0&gt; method since this will clash with the method provided by Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032725Z" creationid="huanghaohang" creationdate="20190611T032725Z">
        <seg>由于这一机制，你的 CUnit 源码可能不包含 &lt;c0&gt;main&lt;/c0&gt;方法，因为这会与 Gradle 所提供的方法冲突。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>During this phase the project objects are configured. The build scripts of &lt;s0&gt;&lt;e1&gt;all&lt;/e1&gt;&lt;/s0&gt; projects which are part of the build are executed. Gradle 1.4 introduces an &lt;a2&gt;incubating&lt;/a2&gt; opt-in feature called &lt;e3&gt;configuration on demand&lt;/e3&gt;. In this mode, Gradle configures only relevant projects (see &lt;a4&gt;Section 56.1.1.1, “Configuration on demand”&lt;/a4&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T104438Z" creationid="huanghaohang" creationdate="20190611T104354Z">
        <seg>在这一阶段，对项目对象进行配置。属于构建部分的&lt;s0&gt;&lt;e1&gt;所有&lt;/e1&gt;&lt;/s0&gt;项目的构建脚本都会被执行。Gradle 1.4 引入了一个&lt;a2&gt;试验性&lt;/a2&gt;的选择性加入功能，叫做&lt;e3&gt;按需配置&lt;/e3&gt;。在这个模式下，Gradle 只会配置相关的项目（请参阅&lt;a4&gt;第 56.1.1.1 节，“按需配置”&lt;/a4&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dynamic configuration from Gradle build scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150635Z" creationid="huanghaohang" creationdate="20181201T150635Z">
        <seg>通过 Gradle 构建脚本动态配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dynamic tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031826Z" creationid="huanghaohang" creationdate="20170927T031826Z">
        <seg>动态任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ERROR</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221517Z" creationid="huanghaohang" creationdate="20180105T221517Z">
        <seg>ERROR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each &lt;c0&gt;artifact&lt;/c0&gt; or &lt;c1&gt;ivy&lt;/c1&gt; specified for a repository adds an &lt;s2&gt;&lt;e3&gt;additional&lt;/e3&gt;&lt;/s2&gt; pattern to use. The patterns are used in the order that they are defined.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T024629Z" creationid="huanghaohang" creationdate="20190604T024629Z">
        <seg>一个仓库指定的每个 &lt;c0&gt;artifact&lt;/c0&gt; 或 &lt;c1&gt;ivy&lt;/c1&gt; 都添加了一个要使用的 &lt;s2&gt;&lt;e3&gt;其他&lt;/e3&gt;&lt;/s2&gt; 模式。这些模式按照它们被定义的顺序使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each binary is associated with a particular &lt;a0&gt;&lt;c1&gt;ToolChain&lt;/c1&gt;&lt;/a0&gt;, allowing settings to be targeted based on this value.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T011943Z" creationid="huanghaohang" creationdate="20190610T011943Z">
        <seg>每个二进制文件都与特定的 &lt;a0&gt;&lt;c1&gt;ToolChain&lt;/c1&gt;&lt;/a0&gt; 关联，允许设置基于此值进行针对性的配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each binary to be produced is associated with a set of compiler and linker settings, which include command-line arguments as well as macro definitions. These settings can be applied to all binaries, an individual binary, or selectively to a group of binaries based on some criteria.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053217Z" creationid="huanghaohang" creationdate="20190609T053217Z">
        <seg>要生成的每个二进制文件都与一组编译器和链接器设置相关联，这些设置包括命令行参数以及宏定义。这些设置可以应用于所有的二进制文件，单个二进制文件，或者根据某些条件有选择地应用于一组二进制文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each closure has a &lt;c0&gt;delegate&lt;/c0&gt; object, which Groovy uses to look up variable and method references which are not local variables or parameters of the closure. Gradle uses this for &lt;e1&gt;configuration closures&lt;/e1&gt;, where the &lt;c2&gt;delegate&lt;/c2&gt; object is set to the object to be configured.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153230Z" creationid="huanghaohang" creationdate="20170914T153230Z">
        <seg>每一个闭包都有一个&lt;c0&gt;委托&lt;/c0&gt;对象，Groovy使用它来查找不是局部变量或闭包参数的变量和方法引用。 Gradle使用它来作为&lt;e1&gt;配置闭包&lt;/e1&gt;，把&lt;c2&gt;委托&lt;/c2&gt;对象设置为被配置的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each component can have a set of named &lt;c0&gt;flavors&lt;/c0&gt;, and a separate binary variant can be produced for each flavor. While the &lt;c1&gt;build type&lt;/c1&gt; and &lt;c2&gt;target platform&lt;/c2&gt; variant dimensions have a defined meaning in Gradle, each project is free to define any number of flavors and apply meaning to them in any way.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052548Z" creationid="huanghaohang" creationdate="20190610T052206Z">
        <seg>每个组件都可以有一组命名的 &lt;c0&gt;flavor&lt;/c0&gt;，并且可以为每种风格生成单独的二进制变体。虽然 &lt;c1&gt;build type&lt;/c1&gt; 和 &lt;c2&gt;target platform&lt;/c2&gt; 变体维度在 Gradle 中是有定义的含义的，但每个项目都可以自由地定义任意数量的风格，并以任意的方式对它们应用含义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each init script also implements the &lt;a0&gt;&lt;c1&gt;Script&lt;/c1&gt;&lt;/a0&gt; interface.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143135Z" creationid="huanghaohang" creationdate="20191206T143049Z">
        <seg>每个初始化脚本也都实现了 &lt;a0&gt;&lt;c1&gt;Script&lt;/c1&gt;&lt;/a0&gt; 接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each jar or war object has a &lt;c0&gt;manifest&lt;/c0&gt; property with a separate instance of &lt;a1&gt;&lt;c2&gt;Manifest&lt;/c2&gt;&lt;/a1&gt;. When the archive is generated, a corresponding &lt;c3&gt;MANIFEST.MF&lt;/c3&gt; file is written into the archive.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111443Z" creationid="huanghaohang" creationdate="20180406T111443Z">
        <seg>每个 jar 或 war 对象都有一个 &lt;c0&gt;manifest&lt;/c0&gt; 属性，它是一个单独的 &lt;a1&gt;&lt;c2&gt;Manifest&lt;/c2&gt;&lt;/a1&gt; 属性。当生成档案时，相应的 &lt;c3&gt;MANIFEST.MF&lt;/c3&gt; 文件会被写入存档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each module (also called &lt;s0&gt;&lt;e1&gt;component&lt;/e1&gt;&lt;/s0&gt;) has metadata associated with it, such as its group, name, version, dependencies, and so on. This metadata typically originates in the module's descriptor. Metadata rules allow certain parts of a module's metadata to be manipulated from within the build script. They take effect after a module's descriptor has been downloaded, but before it has been selected among all candidate versions. This makes metadata rules another instrument for customizing dependency resolution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T033443Z" creationid="huanghaohang" creationdate="20190605T025858Z">
        <seg>每个模块（也称为&lt;s0&gt;&lt;e1&gt;组件&lt;/e1&gt;&lt;/s0&gt;），都有与其相关的元数据，比如说组、名称、版本、依赖，等等。这些元数据通常来源于模块的描述符。元数据规则能够在构建脚本中处理模块元数据的某些部分。它们在模块的描述符下载之后，但在所有候选版本之间选择它之前生效。这使得元数据规则成为自定义依赖解析方案的另一种手段。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each project in the hierarchy has its own project configuration. Common values can be set from a parent build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152821Z" creationid="huanghaohang" creationdate="20180811T152821Z">
        <seg>在这个层次结构中的每个项目都有其自己的项目配置。共同的值可以在父构建脚本中设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each project is made up of one or more &lt;e0&gt;tasks&lt;/e0&gt;. A task represents some atomic piece of work which a build performs. This might be compiling some classes, creating a JAR, generating javadoc, or publishing some archives to a repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T143544Z" creationid="95" creationdate="20170724T143343Z">
        <seg>每一个项目都由一个或多个&lt;e0&gt;任务&lt;/e0&gt;组成。一个任务表示构建执行的一些原子工作，比如编译一些类，创建一个JAR包，生成javadoc，或者是把一些档案发布到仓库中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each repository can have its own layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025808Z" creationid="huanghaohang" creationdate="20190604T025808Z">
        <seg>每个仓库都可以有其自己的布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each task has an &lt;c0&gt;inputs&lt;/c0&gt; and &lt;c1&gt;outputs&lt;/c1&gt; property, which you use to declare the inputs and outputs of the task. Below, we have changed our example to declare that it takes the source XML file as an input and produces output to a destination directory. Let's run it a couple of times.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003846Z" creationid="huanghaohang" creationdate="20170922T093754Z">
        <seg>每一个任务都有一个&lt;c0&gt;inputs&lt;/c0&gt;和&lt;c1&gt;outputs&lt;/c1&gt;属性，用来声明这个任务的输入和输出。下面，我们修改了我们的示例，声明它将 XML 源文件作为输入，并产生到目标目录的输出。让我们运行几次。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each time after that, before the task is executed, Gradle takes a new snapshot of the inputs and outputs. If the new snapshots are the same as the previous snapshots, Gradle assumes that the outputs are up to date and skips the task. If they are not the same, Gradle executes the task. Gradle persists both snapshots for next time the task is executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011207Z" creationid="huanghaohang" creationdate="20170923T011207Z">
        <seg>在这之后每一次执行任务之前，Gradle将输入和输出进行新的快照。如果新快照与以前的快照相同，则Gradle会假定输出是最新的，并跳过任务。如果它们不一样，则Gradle会执行任务。Gradle会保存这两个快照，用于这个任务的下一次执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each tool chain implementation allows for a certain degree of configuration (see the API documentation for more details).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085043Z" creationid="huanghaohang" creationdate="20190610T085043Z">
        <seg>每个工具链的实现都允许一定程度的配置（更多细节请参阅 API 文档）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Eager to try out this new feature? To configure on demand with every build run see &lt;a0&gt;Section 20.1, “Configuring the build environment via gradle.properties”&lt;/a0&gt;. To configure on demand just for given build please see &lt;a1&gt;Appendix D, &lt;i2&gt;Gradle Command Line&lt;/i2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154247Z" creationid="huanghaohang" creationdate="20190614T154247Z">
        <seg>想试试这个新功能吗？要在每次构建时都按需配置，请参阅《&lt;a0&gt;第20.1节，通过 gradle.properties 配置构建环境&lt;/a0&gt;》。 只对给定的构建按需配置，请参阅《&lt;a1&gt;附录D，&lt;i2&gt;Gradle 命令行&lt;/i2&gt;&lt;/a1&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ear</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145127Z" creationid="huanghaohang" creationdate="20180415T145127Z">
        <seg>Ear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ear resources, such as a META-INF directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145328Z" creationid="huanghaohang" creationdate="20180415T145328Z">
        <seg>Ear 资源，如 META-INF 目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ease of migration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T060917Z" creationid="95" creationdate="20170723T060917Z">
        <seg>易于迁移</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Eclipse Integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140336Z" creationid="huanghaohang" creationdate="20181201T140336Z">
        <seg>Eclipse 集成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>EclipseClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061715Z" creationid="huanghaohang" creationdate="20181210T061715Z">
        <seg>EclipseClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>EclipseJdt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061723Z" creationid="huanghaohang" creationdate="20181210T061723Z">
        <seg>EclipseJdt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>EclipseModel</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030128Z" creationid="huanghaohang" creationdate="20181210T030128Z">
        <seg>EclipseModel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>EclipseProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061709Z" creationid="huanghaohang" creationdate="20181210T061709Z">
        <seg>EclipseProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>EclipseWtpComponent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061754Z" creationid="huanghaohang" creationdate="20181210T061754Z">
        <seg>EclipseWtpComponent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>EclipseWtpFacet</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061814Z" creationid="huanghaohang" creationdate="20181210T061814Z">
        <seg>EclipseWtpFacet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Edit the build.gradle file. Note: this requires Java 1.6 or higher and requires that you have .gradle files associated in your OS.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144536Z" creationid="huanghaohang" creationdate="20170911T144536Z">
        <seg>编辑build.gradle文件。注意：这需要Java 1.6或更高的版本，并且要求你的操作系统关联了.gradle文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Element</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093634Z" creationid="huanghaohang" creationdate="20190607T093634Z">
        <seg>元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enables new incubating mode that makes Gradle selective when configuring projects. Only relevant projects are configured which results in faster builds for large multi-projects. See &lt;a0&gt;Section 56.1.1.1, “Configuration on demand”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T020534Z" creationid="huanghaohang" creationdate="20180126T020534Z">
        <seg>启用新的试验性的模式，该模式可以在配置项目时使 Gradle 具有选择性。只适用于相关的项目被配置为在大型多项目中更快地构建。请参阅《&lt;a0&gt;第 56.1.1.1 节，“按需配置”&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enabling the build logic to make decisions based on the content of the dependency graph.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142718Z" creationid="huanghaohang" creationdate="20190602T142718Z">
        <seg>启用构建逻辑以基于依赖图的内容来做决策。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enabling this option hides any output when a task is executed unless the build fails.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150222Z" creationid="huanghaohang" creationdate="20170911T150222Z">
        <seg>启用此选项后，除非构建失败，否则将在任务执行时隐藏任何输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enforce sequential ordering of tasks: eg. 'build' never runs before 'clean'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030142Z" creationid="huanghaohang" creationdate="20170922T030142Z">
        <seg>强制任务顺序排序：如“build”永远不会在“clean”之前运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enter the daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143332Z" creationid="huanghaohang" creationdate="20180516T143332Z">
        <seg>走进守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Entries in the &lt;c0&gt;properties&lt;/c0&gt; map can be read and written with the usual Groovy syntax. To facilitate their manipulation, values still have their "idiomatic" type (&lt;c1&gt;File&lt;/c1&gt;, &lt;c2&gt;List&lt;/c2&gt;, etc.). After the sonarProperties block has been evaluated, values are converted to Strings as follows: Collection values are (recursively) converted to comma-separated Strings, and all other values are converted by calling their &lt;c3&gt;toString()&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T044934Z" creationid="huanghaohang" creationdate="20181202T044934Z">
        <seg>在 &lt;c0&gt;properties&lt;/c0&gt; map 中的条目可以使用常见的 Groovy 语法来读写。为了方便它们的操纵，这些值仍然有它们的“惯用”类型（&lt;c1&gt;File&lt;/c1&gt;， &lt;c2&gt;List&lt;/c2&gt;等）。在 sonarProperties 块评估之后，值将转换为字符串，如下所示：集合的值会（递归地）转换为以逗号分隔的字符串，其他所有的值则通过调用它们 &lt;c3&gt;toString()&lt;/c3&gt; 方法来转换。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013347Z" creationid="huanghaohang" creationdate="20170919T013347Z">
        <seg>环境变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Error messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221520Z" creationid="huanghaohang" creationdate="20180105T221520Z">
        <seg>错误消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Establishes a rule to automatically create a &lt;a0&gt;&lt;c1&gt;GenerateIvyDescriptor&lt;/c1&gt;&lt;/a0&gt; task for each &lt;a2&gt;&lt;c3&gt;IvyPublication&lt;/c3&gt;&lt;/a2&gt; added (see &lt;a4&gt;Section 64.2, “Publications”&lt;/a4&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155701Z" creationid="huanghaohang" creationdate="20210516T155701Z">
        <seg>建立一个规则来为每个添加的&lt;a2&gt;&lt;c3&gt;IvyPublication&lt;/c3&gt; &lt;/a2&gt;自动创建 &lt;a0&gt; &lt;c1&gt;GenerateIvyDescriptor&lt;/c1&gt;&lt;/a0&gt;任务（见《&lt;a4&gt;第 64.2节，“发布”&lt;/a4&gt;》）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Establishes a rule to automatically create a &lt;a0&gt;&lt;c1&gt;PublishToIvyRepository&lt;/c1&gt;&lt;/a0&gt; task for the combination of each &lt;a2&gt;&lt;c3&gt;IvyPublication&lt;/c3&gt;&lt;/a2&gt; added (see &lt;a4&gt;Section 64.2, “Publications”&lt;/a4&gt;), with each &lt;a5&gt;&lt;c6&gt;IvyArtifactRepository&lt;/c6&gt;&lt;/a5&gt; added (see &lt;a7&gt;Section 64.3, “Repositories”&lt;/a7&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155902Z" creationid="huanghaohang" creationdate="20210516T155902Z">
        <seg>建立一个规则来为添加的每一个&lt;a2&gt;&lt;c3&gt;IvyPublication&lt;/c3&gt;&lt;/a2&gt;（见《&lt;a4&gt;第 64.2节，“发布”&lt;/a4&gt;》）和&lt;a5&gt;&lt;c6&gt;IvyArtifactRepository&lt;/c6&gt;&lt;/a5&gt;（见《&lt;a4&gt;第 64.3 节，“仓库”&lt;/a4&gt;》）的组合自动创建&lt;a0&gt; &lt;c1&gt;PublishToIvyRepository&lt;/c1&gt;&lt;/a0&gt;任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even faster builds: preemptively evaluate projects, so that the model is ready when the user next invokes Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T140343Z" creationid="huanghaohang" creationdate="20180109T140343Z">
        <seg>甚至更快的构建：预先评估项目，以便在用户下一次调用 Gradle 时，模型就已准备就绪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even if your project is using a custom dependency management system or something like an Eclipse .classpath file as master data for dependency management, it is very easy to write a Gradle plugin to use this data in Gradle. For migration purposes this is a common technique with Gradle. (But, once you've migrated, it might be a good idea to move away from a .classpath file and use Gradle's dependency management features directly.)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T103904Z" creationid="95" creationdate="20190210T103456Z">
        <seg>即使你的项目正在使用自定义的依赖管理系统，或或是一些像Eclipse.classpath文件作为依赖管理的主数据，也很容易编写Gradle插件在Gradle中使用此数据。 出于迁移目的，这是Gradle中的常见技术。（但是，如果你已经迁移，那么可以从.classpath文件中移出并直接使用Gradle的依赖管理功能可能是个好主意。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Eventually, most configuration is passed to the Sonar code analyzer in the form of key-value pairs known as Sonar properties. The &lt;a0&gt;&lt;c1&gt;SonarProperty&lt;/c1&gt;&lt;/a0&gt; annotations in the API documentation show how properties of the plugin's object model get mapped to the corresponding Sonar properties. The Sonar plugin offers hooks to post-process Sonar properties before they get passed to the code analyzer. The same hooks can be used to add additional properties which aren't covered by the plugin's object model.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135357Z" creationid="huanghaohang" creationdate="20180816T135357Z">
        <seg>最终，大多数配置都会以被称为 Sonar 属性的键值对的形式传递给 Sonar 代码分析器。在 API 文档中的 &lt;a0&gt;&lt;c1&gt;SonarProperty&lt;/c1&gt;&lt;/a0&gt; 注解显示了插件的对象模型的属性如何映射到相应的 Sonar 属性。Sonar 插件在传递给代码分析器之前提供了后置处理的 Sonar 属性的钩子。相同的钩子可以用来添加插件的对象模型所未涵盖的其他属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every Gradle build is made up of one or more &lt;e0&gt;projects&lt;/e0&gt;. What a project represents depends on what it is that you are doing with Gradle. For example, a project might represent a library JAR or a web application. It might represent a distribution ZIP assembled from the JARs produced by other projects. A project does not necessarily represent a thing to be built. It might represent a thing to be done, such as deploying your application to staging or production environments. Don't worry if this seems a little vague for now. Gradle's build-by-convention support adds a more concrete definition for what a project is.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T143530Z" creationid="95" creationdate="20170724T143309Z">
        <seg>任何一个Gradle构建都是由一个或多个&lt;e0&gt;项目&lt;/e0&gt;组成。一个项目代表着什么，取决于你想通过Gradle来做什么。比如，一个项目可能代表着一个JAR库，或者是一个Web应用程序。它也可能代表从其他项目所生成的JAR包组装起来的ZIP文件。一个项目不一定是代表一个要构建的东西，它也可能代表一个要完成的东西，比如把您的应用部署到预发布或生产环境。如果现在看得不是很明白，也不用担心。Gradle的按约定来构建的支持为项目提供了更具体的定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every entry in the metadata cache includes a record of the repository that provided the information as well as a timestamp that can be used for cache expiry.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T071410Z" creationid="huanghaohang" creationdate="20190605T071410Z">
        <seg>元数据缓存中的每个条目都包括了一条仓库记录，它提供了信息以及可用于缓存到期的时间戳。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every task has also an &lt;c0&gt;enabled&lt;/c0&gt; flag which defaults to &lt;c1&gt;true&lt;/c1&gt;. Setting it to &lt;c2&gt;false&lt;/c2&gt; prevents the execution of any of the task's actions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085322Z" creationid="huanghaohang" creationdate="20170922T085322Z">
        <seg>每一项任务有一个默认值为&lt;c1&gt;true&lt;/c1&gt;的&lt;c0&gt;enabled&lt;/c0&gt;标记。将它设置为&lt;c2&gt;false&lt;/c2&gt;，可以不让这个任务的任何操作执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Everything in Gradle sits on top of two basic concepts: &lt;e0&gt;projects&lt;/e0&gt; and &lt;e1&gt;tasks&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T142329Z" creationid="95" creationdate="20170724T142329Z">
        <seg>在整个Gradle，有两个最基础的概念：&lt;e0&gt;项目&lt;/e0&gt; 和 &lt;e1&gt;任务&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 10.1. War plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004613Z" creationid="huanghaohang" creationdate="20170909T004613Z">
        <seg>示例 10.1. 使用War 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 10.2. Running web application with Jetty plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005558Z" creationid="huanghaohang" creationdate="20170909T005558Z">
        <seg>示例10.2. 使用Jetty插件运行Web应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.1. Executing multiple tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031119Z" creationid="huanghaohang" creationdate="20170909T031119Z">
        <seg>示例 11.1. 执行多个任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.10. Changing the content of the task report</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012002Z" creationid="huanghaohang" creationdate="20170910T012002Z">
        <seg>示例11.10. 更改任务报告的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.11. Obtaining more information about tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012308Z" creationid="huanghaohang" creationdate="20170910T012308Z">
        <seg>示例11.11. 获取任务的更多相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.12. Obtaining detailed help for tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012828Z" creationid="huanghaohang" creationdate="20170910T012755Z">
        <seg>示例11.12. 获取任务的帮助信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.13. Obtaining information about dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T014039Z" creationid="huanghaohang" creationdate="20170910T014039Z">
        <seg>示例11.13. 获取依赖的相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.14. Filtering dependency report by configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T021651Z" creationid="huanghaohang" creationdate="20170910T021651Z">
        <seg>示例11.14. 按配置过滤依赖报告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.15. Getting the insight into a particular dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022143Z" creationid="huanghaohang" creationdate="20170910T022143Z">
        <seg>示例11.15. 查看特定的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.16. Information about properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023437Z" creationid="huanghaohang" creationdate="20170910T023437Z">
        <seg>示例11.16. 获取属性的相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.2. Excluding tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031953Z" creationid="huanghaohang" creationdate="20170909T031953Z">
        <seg>示例 11.2. 排除任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.3. Abbreviated task name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113243Z" creationid="huanghaohang" creationdate="20170909T112820Z">
        <seg>示例11.3. 缩写任务名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.4. Abbreviated camel case task name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113246Z" creationid="huanghaohang" creationdate="20170909T113231Z">
        <seg>示例11.4. 缩写驼峰任务名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.5. Selecting the project using a build file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114011Z" creationid="huanghaohang" creationdate="20170909T114011Z">
        <seg>示例11.5. 使用构建文件选择项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.6. Selecting the project using project directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114250Z" creationid="huanghaohang" creationdate="20170909T114250Z">
        <seg>示例11.6. 使用项目目录选择项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.7. Obtaining information about projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011117Z" creationid="huanghaohang" creationdate="20170910T011117Z">
        <seg>示例11.7. 获取项目的相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.8. Providing a description for a project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011416Z" creationid="huanghaohang" creationdate="20170910T011416Z">
        <seg>示例11.8. 提供项目描述信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 11.9. Obtaining information about tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011700Z" creationid="huanghaohang" creationdate="20170910T011700Z">
        <seg>示例11.9. 获取任务的相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 12.1. Launching the GUI</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143304Z" creationid="huanghaohang" creationdate="20170911T143304Z">
        <seg>示例12.1. 启动GUI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.1. Accessing property of the Project object</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130249Z" creationid="huanghaohang" creationdate="20170912T130249Z">
        <seg>示例 13.1. 访问 Project 对象的属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.2. Using local variables</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132952Z" creationid="huanghaohang" creationdate="20170913T132952Z">
        <seg>示例 13.2. 使用局部变量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.3. Using extra properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133527Z" creationid="huanghaohang" creationdate="20170913T133527Z">
        <seg>示例13.3. 使用额外属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.4. Groovy JDK methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135847Z" creationid="huanghaohang" creationdate="20170913T135847Z">
        <seg>示例 13.4. Groovy JDK 的方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.5. Property accessors</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141242Z" creationid="huanghaohang" creationdate="20170913T141242Z">
        <seg>示例 13.5. 属性访问器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.6. Method call without parentheses</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141435Z" creationid="huanghaohang" creationdate="20170913T141435Z">
        <seg>示例 13.6. 不带括号的方法调用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.7. List and map literals</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141556Z" creationid="huanghaohang" creationdate="20170913T141556Z">
        <seg>示例 13.7. List 和 Map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.8. Closure as method parameter</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141918Z" creationid="huanghaohang" creationdate="20170913T141918Z">
        <seg>示例 13.8. 作为方法参数的闭包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 13.9. Closure delegates</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153237Z" creationid="huanghaohang" creationdate="20170914T153237Z">
        <seg>示例 13.9. 闭包委托</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 14.1. Directory creation with mkdir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132404Z" creationid="huanghaohang" creationdate="20170917T132404Z">
        <seg>示例 14.1.  使用 mkdir 创建目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 14.2. Setting properties with a gradle.properties file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135018Z" creationid="huanghaohang" creationdate="20170917T135018Z">
        <seg>示例 14.2. 使用 gradle.properties 文件设置属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 14.3. Configuring the project using an external build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145335Z" creationid="huanghaohang" creationdate="20170918T145335Z">
        <seg>示例14.3. 使用外部构建脚本配置项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 14.4. Configuring arbitrary objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145817Z" creationid="huanghaohang" creationdate="20170918T145817Z">
        <seg>示例 14.4. 配置任意对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 14.5. Configuring arbitrary objects using a script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145956Z" creationid="huanghaohang" creationdate="20170918T145956Z">
        <seg>示例14.5. 使用脚本配置任意对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.1. Defining tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120829Z" creationid="huanghaohang" creationdate="20170919T120829Z">
        <seg>示例 15.1. 定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.10. Defining a task with closure</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124929Z" creationid="huanghaohang" creationdate="20170919T124929Z">
        <seg>示例 15.10. 使用闭包定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.11. Adding dependency on task from another project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130121Z" creationid="huanghaohang" creationdate="20170919T130121Z">
        <seg>示例 15.11. 添加对另一个项目的任务的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.12. Adding dependency using task object</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130248Z" creationid="huanghaohang" creationdate="20170919T130248Z">
        <seg>示例 15.12. 使用任务对象添加依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.13. Adding dependency using closure</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130914Z" creationid="huanghaohang" creationdate="20170919T130914Z">
        <seg>示例 15.13. 使用闭包添加依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.14. Adding a 'must run after' task ordering</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T032020Z" creationid="huanghaohang" creationdate="20170922T032020Z">
        <seg>示例15.14. 添加“必须在之后运行”的任务排序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.15. Adding a 'should run after' task ordering</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035716Z" creationid="huanghaohang" creationdate="20170922T035716Z">
        <seg>示例 15.15. 添加 “应该在之后运行”的任务排序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.16. Task ordering does not imply task execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035744Z" creationid="huanghaohang" creationdate="20170922T035744Z">
        <seg>示例 15.16. 任务排序并不意味着任务执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.17. A 'should run after' task ordering is ignored if it introduces an ordering cycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081550Z" creationid="huanghaohang" creationdate="20170922T081508Z">
        <seg>示例 15.17. 当引入循环时，“应该在之后运行”的任务排序会被忽略</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.18. Adding a description to a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082259Z" creationid="huanghaohang" creationdate="20170922T082259Z">
        <seg>示例 15.18. 向任务添加描述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.19. Overwriting a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083318Z" creationid="huanghaohang" creationdate="20170922T083318Z">
        <seg>示例 15.19. 重写任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.2. Defining tasks - using strings for task names</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121052Z" creationid="huanghaohang" creationdate="20170919T121052Z">
        <seg>示例 15.2. 定义任务 —— 使用字符串作为任务名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.20. Skipping a task using a predicate</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084154Z" creationid="huanghaohang" creationdate="20170922T084154Z">
        <seg>示例 15.20. 使用断言跳过一个任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.21. Skipping tasks with StopExecutionException</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084832Z" creationid="huanghaohang" creationdate="20170922T084832Z">
        <seg>示例 15.21. 使用 StopExecutionException 跳过任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.22. Enabling and disabling tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085324Z" creationid="huanghaohang" creationdate="20170922T085324Z">
        <seg>示例 15.22. 启用和禁用任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.23. A generator task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085706Z" creationid="huanghaohang" creationdate="20170922T085706Z">
        <seg>示例 15.23. 一个生成任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.24. Declaring the inputs and outputs of a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003852Z" creationid="huanghaohang" creationdate="20170923T003852Z">
        <seg>示例 15.24. 声明一个任务的输入和输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.25. Task rule</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011922Z" creationid="huanghaohang" creationdate="20170923T011922Z">
        <seg>示例 15.25. 任务规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.26. Dependency on rule based tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043835Z" creationid="huanghaohang" creationdate="20170923T043835Z">
        <seg>示例 15.26. 依赖于基于规则的任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.27. Adding a task finalizer</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044038Z" creationid="huanghaohang" creationdate="20170923T044038Z">
        <seg>示例 15.27. 添加一个任务析构器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.28. Task finalizer for a failing task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044102Z" creationid="huanghaohang" creationdate="20170923T044102Z">
        <seg>示例 15.28. 执行失败的任务的任务析构器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.3. Defining tasks with alternative syntax</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121134Z" creationid="huanghaohang" creationdate="20170919T121134Z">
        <seg>示例 15.3. 使用替代语法定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.4. Accessing tasks as properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121722Z" creationid="huanghaohang" creationdate="20170919T121722Z">
        <seg>示例 15.4. 以属性方式访问任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.5. Accessing tasks via tasks collection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121736Z" creationid="huanghaohang" creationdate="20170919T121736Z">
        <seg>示例 15.5. 通过tasks集合访问任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.6. Accessing tasks by path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121951Z" creationid="huanghaohang" creationdate="20170919T121951Z">
        <seg>示例 15.6. 通过路径访问任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.7. Creating a copy task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122240Z" creationid="huanghaohang" creationdate="20170919T122240Z">
        <seg>示例 15.7. 创建一个复制任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.8. Configuring a task - various ways</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124318Z" creationid="huanghaohang" creationdate="20170919T124318Z">
        <seg>示例 15.8. 配置任务——多种方式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 15.9. Configuring a task - with closure</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124608Z" creationid="huanghaohang" creationdate="20170919T124608Z">
        <seg>示例 15.9. 配置任务——使用闭包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.1. Locating files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T125031Z" creationid="huanghaohang" creationdate="20170923T125031Z">
        <seg>示例 16.1. 查找文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.10. Copying files using the copy task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T135606Z" creationid="huanghaohang" creationdate="20171002T135606Z">
        <seg>实施例16.10. 使用复制任务复制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.11. Specifying copy task source files and destination directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075012Z" creationid="huanghaohang" creationdate="20171015T075012Z">
        <seg>示例 16.11. 指定复制任务的源文件和目标目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.12. Selecting the files to copy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075114Z" creationid="huanghaohang" creationdate="20171015T075114Z">
        <seg>示例 16.12. 选择要复制的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.13. Copying files using the copy() method without up-to-date check</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T125015Z" creationid="huanghaohang" creationdate="20171015T094218Z">
        <seg>例16.13. 使用没有最新状态检查的copy()方法复制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.14. Copying files using the copy() method with up-to-date check</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T125030Z" creationid="huanghaohang" creationdate="20171015T124923Z">
        <seg>例16.14. 使用有最新状态检查的copy()方法复制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.15. Renaming files as they are copied</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060234Z" creationid="huanghaohang" creationdate="20171126T060234Z">
        <seg>示例 16.15. 重命名复制的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.16. Filtering files as they are copied</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060337Z" creationid="huanghaohang" creationdate="20171126T060337Z">
        <seg>示例 16.16. 在复制时过滤文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.17. Nested copy specs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060918Z" creationid="huanghaohang" creationdate="20171126T060918Z">
        <seg>示例 16.17. 嵌套的复制规范</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.18. Using the Sync task to copy dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125145Z" creationid="huanghaohang" creationdate="20171126T125145Z">
        <seg>示例 16.18. 使用同步任务复制依赖项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.19. Creating a ZIP archive</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135304Z" creationid="huanghaohang" creationdate="20171126T135304Z">
        <seg>示例 16.19. 创建一个 ZIP 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.2. Creating a file collection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T131613Z" creationid="huanghaohang" creationdate="20170923T131613Z">
        <seg>示例 16.2. 创建文件集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.20. Creation of ZIP archive</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140713Z" creationid="huanghaohang" creationdate="20171126T140713Z">
        <seg>示例 16.20. 创建 ZIP 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.21. Configuration of archive task - custom archive name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232529Z" creationid="huanghaohang" creationdate="20171206T232529Z">
        <seg>示例 16.21. 配置归档任务-自定义归档名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.22. Configuration of archive task - appendix &amp; classifier</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232556Z" creationid="huanghaohang" creationdate="20171206T232556Z">
        <seg>示例 16.22. 配置归档任务 - appendix &amp; classifier</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.3. Using a file collection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T132328Z" creationid="huanghaohang" creationdate="20170923T132328Z">
        <seg>示例 16.3. 使用文件集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.4. Implementing a file collection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150001Z" creationid="huanghaohang" creationdate="20170927T150001Z">
        <seg>示例 16.4. 实现一个文件集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.5. Creating a file tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023413Z" creationid="huanghaohang" creationdate="20171002T023413Z">
        <seg>示例 16.5. 创建一个文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.6. Using a file tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023624Z" creationid="huanghaohang" creationdate="20171002T023624Z">
        <seg>示例 16.6. 使用文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.7. Using an archive as a file tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133514Z" creationid="huanghaohang" creationdate="20171002T133514Z">
        <seg>示例 16.7. 使用归档文件作为文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.8. Specifying a set of files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134047Z" creationid="huanghaohang" creationdate="20171002T134047Z">
        <seg>示例 16.8. 指定一组文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 16.9. Specifying a set of files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134312Z" creationid="huanghaohang" creationdate="20171002T134312Z">
        <seg>示例 16.9. 指定一组文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.1. Using an Ant task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022447Z" creationid="huanghaohang" creationdate="20171216T022447Z">
        <seg>示例 17.1. 使用 Ant 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.10. Adding behaviour to an Ant target</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084805Z" creationid="huanghaohang" creationdate="20180105T084805Z">
        <seg>示例 17.10. 将行为添加到 Ant 目标</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.11. Ant target that depends on Gradle task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084836Z" creationid="huanghaohang" creationdate="20180105T084836Z">
        <seg>示例 17.11. 依赖于 Gradle 任务的 Ant 目标</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.12. Setting an Ant property</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094349Z" creationid="huanghaohang" creationdate="20180105T094349Z">
        <seg>示例 17.12. 设置一个 Ant 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.13. Getting an Ant property</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094610Z" creationid="huanghaohang" creationdate="20180105T094610Z">
        <seg>示例 17.13. 获取 Ant 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.14. Setting an Ant reference</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094658Z" creationid="huanghaohang" creationdate="20180105T094658Z">
        <seg>示例 17.14. 设置一个 Ant 引用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.15. Getting an Ant reference</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094714Z" creationid="huanghaohang" creationdate="20180105T094714Z">
        <seg>示例 17.15. 获取 Ant 引用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.2. Passing nested text to an Ant task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022605Z" creationid="huanghaohang" creationdate="20171216T022605Z">
        <seg>示例 17.2. 向 Ant 任务传入嵌套文本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.3. Passing nested elements to an Ant task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090752Z" creationid="huanghaohang" creationdate="20171219T090752Z">
        <seg>示例 17.3. 向 Ant 任务传入嵌套元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.4. Using an Ant type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T091121Z" creationid="huanghaohang" creationdate="20171219T091121Z">
        <seg>示例 17.4. 使用 Ant 类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.5. Using a custom Ant task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083826Z" creationid="huanghaohang" creationdate="20180105T083826Z">
        <seg>示例 17.5. 使用自定义 Ant 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.6. Declaring the classpath for a custom Ant task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084250Z" creationid="huanghaohang" creationdate="20180105T084250Z">
        <seg>示例 17.6. 声明用于自定义 Ant 任务的类路径</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.7. Using a custom Ant task and dependency management together</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084331Z" creationid="huanghaohang" creationdate="20180105T084331Z">
        <seg>示例 17.7. 同时使用自定义 Ant 任务和依赖管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.8. Importing an Ant build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084606Z" creationid="huanghaohang" creationdate="20180105T084606Z">
        <seg>示例 17.8. 导入 Ant 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 17.9. Task that depends on Ant target</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084636Z" creationid="huanghaohang" creationdate="20180105T084636Z">
        <seg>示例 17.9. 依赖于 Ant 目标的任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 18.1. Using stdout to write log messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T011940Z" creationid="huanghaohang" creationdate="20180107T011940Z">
        <seg>示例18.1. 使用标准输出写日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 18.2. Writing your own log messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T012426Z" creationid="huanghaohang" creationdate="20180107T012426Z">
        <seg>示例 18.2. 编写自己的日志消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 18.3. Using SLF4J to write log messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T024343Z" creationid="huanghaohang" creationdate="20180107T024343Z">
        <seg>示例 18.3. 使用 SLF4J 写入日志消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 18.4. Configuring standard output capture</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025326Z" creationid="huanghaohang" creationdate="20180107T025326Z">
        <seg>示例 18.4. 配置标准输出捕获</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 18.5. Configuring standard output capture for a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025422Z" creationid="huanghaohang" creationdate="20180107T025422Z">
        <seg>示例 18.5. 为任务配置标准输出捕获</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 18.6. Customizing what Gradle logs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144024Z" creationid="huanghaohang" creationdate="20180107T144024Z">
        <seg>示例 18.6 的例子. 自定义 Gradle 日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 20.1. Configuring an HTTP proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073508Z" creationid="huanghaohang" creationdate="20180130T073508Z">
        <seg>示例 20.1. 配置 HTTP 代理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 20.2. Configuring an HTTPS proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073538Z" creationid="huanghaohang" creationdate="20180130T073538Z">
        <seg>示例 20.1. 配置 HTTPS 代理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 21.1. Applying a plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092911Z" creationid="huanghaohang" creationdate="20180130T092911Z">
        <seg>示例 21.1. 应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 21.2. Applying a plugin by type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093207Z" creationid="huanghaohang" creationdate="20180130T093207Z">
        <seg>示例 21.2. 通过类型应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 21.3. Applying a plugin by type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093310Z" creationid="huanghaohang" creationdate="20180130T093310Z">
        <seg>示例 21.2. 通过类型应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 21.4. Tasks added by a plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100158Z" creationid="huanghaohang" creationdate="20180130T100158Z">
        <seg>示例 21.4. 通过插件添加任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 21.5. Changing plugin defaults</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022548Z" creationid="huanghaohang" creationdate="20180131T022548Z">
        <seg>示例 21.5. 更改插件的默认设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 21.6. Plugin convention object</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024635Z" creationid="huanghaohang" creationdate="20180131T024635Z">
        <seg>示例 21.6. 插件约定对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.1. Using the Java plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T153526Z" creationid="huanghaohang" creationdate="20180218T153438Z">
        <seg>示例 23.1. 使用 Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.10. Running tests in a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095452Z" creationid="haohang" creationdate="20180326T095452Z">
        <seg>示例 23.10. 运行源集里的测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.11. Filtering tests in the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131631Z" creationid="huanghaohang" creationdate="20180405T131631Z">
        <seg>示例 23.11. 在构建脚本中过滤测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.12. JUnit Categories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T041814Z" creationid="huanghaohang" creationdate="20180406T041814Z">
        <seg>示例 23.12. JUnit 类别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.13. Grouping TestNG tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042042Z" creationid="huanghaohang" creationdate="20180406T042042Z">
        <seg>示例 23.13. 对 TestNG 测试分组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.14. Creating a unit test report for subprojects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T043949Z" creationid="huanghaohang" creationdate="20180406T043949Z">
        <seg>示例 23.14. 为多个子项目创建一个单元测试报告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.15. Customization of MANIFEST.MF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111448Z" creationid="huanghaohang" creationdate="20180406T111448Z">
        <seg>示例 7.5. 自定义的 MANIFEST.MF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.16. Creating a manifest object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111608Z" creationid="huanghaohang" creationdate="20180406T111608Z">
        <seg>示例 23.16. 创建一个清单对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.17. Separate MANIFEST.MF for a particular archive</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111939Z" creationid="huanghaohang" creationdate="20180406T111939Z">
        <seg>示例 23.17. 指定档案的单独 MANIFEST.MF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.18. Separate MANIFEST.MF for a particular archive</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113343Z" creationid="huanghaohang" creationdate="20180406T113343Z">
        <seg>示例 23.18. 指定档案的单独 MANIFEST.MF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.2. Custom Java source layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053342Z" creationid="haohang" creationdate="20180313T053342Z">
        <seg>示例 23.2. 自定义 Java 源代码布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.3. Accessing a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094613Z" creationid="haohang" creationdate="20180320T094613Z">
        <seg>示例 23.3. 访问源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.4. Configuring the source directories of a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094924Z" creationid="haohang" creationdate="20180320T094924Z">
        <seg>示例 23.4. 配置源集的源代码目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.5. Defining a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094626Z" creationid="haohang" creationdate="20180326T094626Z">
        <seg>示例 23.5. 定义一个源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.6. Defining source set dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094839Z" creationid="haohang" creationdate="20180326T094839Z">
        <seg>示例 23.6. 定义源集依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.7. Compiling a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095229Z" creationid="haohang" creationdate="20180326T095229Z">
        <seg>示例 23.7. 编译源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.8. Assembling a JAR for a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095351Z" creationid="haohang" creationdate="20180326T095351Z">
        <seg>示例 23.8. 为一个源集组装一个 JAR 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 23.9. Generating the Javadoc for a source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095402Z" creationid="haohang" creationdate="20180326T095402Z">
        <seg>示例 23.9. 为一个源集生成 Javadoc：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 24.1. Using the Groovy plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120704Z" creationid="huanghaohang" creationdate="20180406T120704Z">
        <seg>示例 24.1. 使用 Groovy 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 24.2. Custom Groovy source layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121937Z" creationid="huanghaohang" creationdate="20180406T121937Z">
        <seg>示例 24.2. 自定义 Groovy 的源文件布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 24.3. Configuration of Groovy dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122529Z" creationid="huanghaohang" creationdate="20180406T122529Z">
        <seg>示例 24.3. Groovy 的依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 24.4. Configuration of Groovy test dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122630Z" creationid="huanghaohang" creationdate="20180406T122630Z">
        <seg>示例 24.4.  Groovy 的测试依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 24.5. Configuration of bundled Groovy dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122900Z" creationid="huanghaohang" creationdate="20180406T122900Z">
        <seg>示例 24.5. 配置捆绑的 Groovy 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 24.6. Configuration of Groovy file dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123327Z" creationid="huanghaohang" creationdate="20180406T123327Z">
        <seg>示例 24.6. Groovy 的文件依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.1. Using the Scala plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010156Z" creationid="huanghaohang" creationdate="20180407T010156Z">
        <seg>示例 25.1. 使用 Scala 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.2. Custom Scala source layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011246Z" creationid="huanghaohang" creationdate="20180407T011246Z">
        <seg>示例 25.2. 自定义 Scala 源文件布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.3. Declaring a Scala dependency for production code</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015443Z" creationid="huanghaohang" creationdate="20180407T015443Z">
        <seg>示例 25.3. 为生产代码定义一个 Scala 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.4. Declaring a Scala dependency for test code</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015520Z" creationid="huanghaohang" creationdate="20180407T015520Z">
        <seg>示例 25.4. 为测试代码声明一个 Scala 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.5. Enabling the Fast Scala Compiler</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T021841Z" creationid="huanghaohang" creationdate="20180407T021841Z">
        <seg>示例 25.5. 启用 Fast Scala Compiler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.6. Adjusting memory settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053845Z" creationid="huanghaohang" creationdate="20180407T053845Z">
        <seg>示例 25.6. 调整内存设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 25.7. Activating the Zinc based compiler</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110858Z" creationid="huanghaohang" creationdate="20180407T110858Z">
        <seg>示例 25.7. 激活基于 Zinc 的编译器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 26.1. Using the War plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140149Z" creationid="huanghaohang" creationdate="20180408T140149Z">
        <seg>示例 26.1. 使用 War 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 26.2. Customization of war plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143050Z" creationid="huanghaohang" creationdate="20180408T143050Z">
        <seg>示例 26.2. war 插件的自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 27.1. Using the Ear plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145016Z" creationid="huanghaohang" creationdate="20180415T145016Z">
        <seg>示例 27.1. 使用 Ear 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 27.2. Customization of ear plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142948Z" creationid="huanghaohang" creationdate="20180416T142948Z">
        <seg>示例 27.2. ear 插件的自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 28.1. Using the Jetty plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143956Z" creationid="huanghaohang" creationdate="20180416T143956Z">
        <seg>示例 28.1. 使用 Jetty 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 29.1. Using the Checkstyle plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180424T134705Z" creationid="huanghaohang" creationdate="20180424T134705Z">
        <seg>示例 29.1. 使用 Checkstyle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 30.1. Using the CodeNarc plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141757Z" creationid="huanghaohang" creationdate="20180516T141757Z">
        <seg>示例 30.1. 使用 CodeNarc 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 31.1. Using the FindBugs plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142235Z" creationid="huanghaohang" creationdate="20180516T142235Z">
        <seg>示例 31.1. 使用 FindBugs 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 32.1. Using the JDepend plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142627Z" creationid="huanghaohang" creationdate="20180516T142627Z">
        <seg>示例 32.1. 使用 JDepend 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 33.1. Using the PMD plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143133Z" creationid="huanghaohang" creationdate="20180516T143133Z">
        <seg>示例 33.1. 使用 PMD 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 34.1. Applying the JaCoCo plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133845Z" creationid="huanghaohang" creationdate="20180712T133845Z">
        <seg>示例 34.1. 应用 JaCoCo 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 34.2. Configuring JaCoCo plugin settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135241Z" creationid="huanghaohang" creationdate="20180712T135241Z">
        <seg>示例 34.2. 配置 JaCoCo 插件设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 34.3. Configuring test task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093007Z" creationid="huanghaohang" creationdate="20180715T093007Z">
        <seg>示例 34.3. 配置测试任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 34.4. Configuring test task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093221Z" creationid="huanghaohang" creationdate="20180715T093221Z">
        <seg>示例 34.3. 配置测试任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 34.5. Using application plugin to generate code coverage data</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093755Z" creationid="huanghaohang" creationdate="20180715T093755Z">
        <seg>示例 34.5. 使用 application 插件来生成代码覆盖率数据</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 34.6. Coverage reports generated by applicationCodeCoverageReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093826Z" creationid="huanghaohang" creationdate="20180715T093826Z">
        <seg>示例 34.6. 由 applicationCodeCoverageReport 生成的覆盖率报告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.1. Applying the Sonar plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100051Z" creationid="huanghaohang" creationdate="20180715T100051Z">
        <seg>示例 35.1. 应用 Sonar 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.10. Analyzing languages other than Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072340Z" creationid="huanghaohang" creationdate="20180812T072340Z">
        <seg>示例 35.10. 分析非 Java 语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.11. Setting custom global properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135435Z" creationid="huanghaohang" creationdate="20180816T135435Z">
        <seg>示例 35.11. 设置自定义的全局属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.12. Setting custom project properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135518Z" creationid="huanghaohang" creationdate="20180816T135518Z">
        <seg>示例 35.12. 设置自定义的项目属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.13. Implementing custom command line properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085352Z" creationid="huanghaohang" creationdate="20181012T085352Z">
        <seg>示例 35.13. 实现自定义命令行属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.2. Configuring Sonar connection settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100111Z" creationid="huanghaohang" creationdate="20180715T100111Z">
        <seg>示例 35.2. 配置 Sonar 连接设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.3. Configuring Sonar project settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151331Z" creationid="huanghaohang" creationdate="20180811T151331Z">
        <seg>示例 35.3. 配置 Sonar 项目的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.4. Global configuration in a multi-project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152255Z" creationid="huanghaohang" creationdate="20180811T152255Z">
        <seg>示例 35.4. 在多项目构建中的全局配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.5. Common project configuration in a multi-project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152828Z" creationid="huanghaohang" creationdate="20180811T152828Z">
        <seg>示例 35.5. 多项目构建中的共同项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.6. Individual project configuration in a multi-project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153057Z" creationid="huanghaohang" creationdate="20180811T153057Z">
        <seg>示例 35.6. 多项目构建中的单独项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.7. Configuring the language to be analyzed</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153258Z" creationid="huanghaohang" creationdate="20180811T153258Z">
        <seg>示例 35.7. 配置要分析的语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.8. Using property syntax</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153320Z" creationid="huanghaohang" creationdate="20180811T153320Z">
        <seg>示例 35.8. 使用属性语法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 35.9. Analyzing custom source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072214Z" creationid="huanghaohang" creationdate="20180812T072214Z">
        <seg>示例 35.9. 分析自定义的源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.1. Applying the Sonar Runner plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T015432Z" creationid="huanghaohang" creationdate="20181202T015432Z">
        <seg>示例 36.1. 配置使用 Sonar Runner 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.2. Configuring Sonar connection settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022143Z" creationid="huanghaohang" creationdate="20181202T022143Z">
        <seg>示例 36.2. 配置 Sonar 连接设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.3. Global configuration settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042741Z" creationid="huanghaohang" creationdate="20181202T042741Z">
        <seg>示例 36.3. 全局配置设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.4. Shared configuration settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042850Z" creationid="huanghaohang" creationdate="20181202T042850Z">
        <seg>示例 36.4. 共享的配置设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.5. Individual configuration settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042909Z" creationid="huanghaohang" creationdate="20181202T042909Z">
        <seg>示例 36.5. 个别配置设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.6. Skipping analysis of a project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042932Z" creationid="huanghaohang" creationdate="20181202T042932Z">
        <seg>示例 36.6. 跳过项目分析</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.7. Analyzing custom source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043321Z" creationid="huanghaohang" creationdate="20181202T043321Z">
        <seg>示例 36.7. 分析自定义的源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 36.8. Analyzing languages other than Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043419Z" creationid="huanghaohang" creationdate="20181202T043419Z">
        <seg>示例 36.8. 分析 Java 以外的语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 37.1. Using the OSGi plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025906Z" creationid="huanghaohang" creationdate="20181203T025906Z">
        <seg>示例 37.1. 使用 OSGi 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 37.2. Configuration of OSGi MANIFEST.MF file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033554Z" creationid="huanghaohang" creationdate="20181203T033554Z">
        <seg>示例 37.2. OSGi MANIFEST.MF 文件配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 38.1. Using the Eclipse plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025658Z" creationid="huanghaohang" creationdate="20181210T025658Z">
        <seg>示例 38.1. 使用 Eclipse 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 38.2. Partial Overwrite for Classpath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084112Z" creationid="huanghaohang" creationdate="20181210T084112Z">
        <seg>示例 38.2. Classpath 的部分覆盖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 38.3. Partial Overwrite for Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084529Z" creationid="huanghaohang" creationdate="20181210T084529Z">
        <seg>示例 38.3. Project 的部分覆盖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 38.4. Export Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085150Z" creationid="huanghaohang" creationdate="20181210T085150Z">
        <seg>示例 38.4. 导出依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 38.5. Customizing the XML</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085530Z" creationid="huanghaohang" creationdate="20181210T085530Z">
        <seg>示例 38.5. 自定义 XML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 39.1. Using the IDEA plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031106Z" creationid="huanghaohang" creationdate="20181212T031106Z">
        <seg>示例 39.1. 使用 IDEA 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 39.2. Partial Overwrite for Module</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012637Z" creationid="huanghaohang" creationdate="20190123T012637Z">
        <seg>示例 39.2. 部分覆盖模块</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 39.3. Partial Overwrite for Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012756Z" creationid="huanghaohang" creationdate="20190123T012756Z">
        <seg>示例 39.3. 项目的部分覆盖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 39.4. Export Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012903Z" creationid="huanghaohang" creationdate="20190123T012903Z">
        <seg>示例 39.4. 导出依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 39.5. Customizing the XML</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012914Z" creationid="huanghaohang" creationdate="20190123T012914Z">
        <seg>示例 39.5. 自定义 XML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 40.1. Using the ANTLR plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013445Z" creationid="huanghaohang" creationdate="20190123T013445Z">
        <seg>示例 40.1. 使用 ANTLR 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 40.2. Declare ANTLR version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013858Z" creationid="huanghaohang" creationdate="20190123T013858Z">
        <seg>示例 40.2. 声明 ANTLR 版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 42.1. Using the announce plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085747Z" creationid="huanghaohang" creationdate="20190124T085737Z">
        <seg>示例 42.1. 使用公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 42.2. Configure the announce plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092008Z" creationid="huanghaohang" creationdate="20190124T092008Z">
        <seg>示例 42.2. 配置公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 42.3. Using the announce plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092056Z" creationid="huanghaohang" creationdate="20190124T092056Z">
        <seg>示例 42.3. 使用公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 43.1. Using the build announcements plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092631Z" creationid="huanghaohang" creationdate="20190124T092631Z">
        <seg>示例 43.1. 使用构建公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 43.2. Using the build announcements plugin from an init script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092752Z" creationid="huanghaohang" creationdate="20190124T092739Z">
        <seg>示例 43.2. 在 init 脚本中使用构建公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 44.1. Using the distribution plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093713Z" creationid="huanghaohang" creationdate="20190124T093713Z">
        <seg>示例 44.1. 使用分发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 44.2. Adding extra distributions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134031Z" creationid="huanghaohang" creationdate="20190127T134031Z">
        <seg>示例 44.2. 添加额外的分发</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 44.3. Configuring the main distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061242Z" creationid="huanghaohang" creationdate="20190128T061242Z">
        <seg>示例 44.3. 配置 main distribution</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 45.1. Using the application plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233614Z" creationid="95" creationdate="20190130T233614Z">
        <seg>示例 45.1. 使用应用程序插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 45.2. Configure the application main class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233803Z" creationid="95" creationdate="20190130T233803Z">
        <seg>示例 45.2. 配置应用程序的主类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 45.3. Configure default JVM settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T134915Z" creationid="95" creationdate="20190131T134915Z">
        <seg>示例 45.3. 配置默认 JVM 设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 45.4. Include output from other tasks in the application distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140537Z" creationid="95" creationdate="20190131T140537Z">
        <seg>示例 45.4. 在应用程序的分发中包含其他任务的输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 45.5. Automatically creating files for distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141034Z" creationid="95" creationdate="20190131T141034Z">
        <seg>示例 45.5. 自动创建要分发的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 46.1. Using the java library distribution plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141614Z" creationid="95" creationdate="20190131T141614Z">
        <seg>示例 46.1. 使用 Java 库分发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 46.2. Configure the distribution name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143516Z" creationid="95" creationdate="20190131T143516Z">
        <seg>示例 46.2. 配置分发的名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 46.3. Include files in the distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T144000Z" creationid="95" creationdate="20190131T144000Z">
        <seg>示例 46.3. 在分发包中包含文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 49.1. Using the Build Dashboard plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T233135Z" creationid="95" creationdate="20190201T233135Z">
        <seg>示例 49.1 使用 Build Dashboard 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.1. Definition of a configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153605Z" creationid="huanghaohang" creationdate="20190527T153605Z">
        <seg>示例 50.1. 配置的定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.10. File dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105446Z" creationid="huanghaohang" creationdate="20190602T105446Z">
        <seg>示例 50.10. 文件依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.11. Generated file dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105519Z" creationid="huanghaohang" creationdate="20190602T105519Z">
        <seg>示例 50.11. 生成文件依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.12. Gradle API dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105557Z" creationid="huanghaohang" creationdate="20190602T105557Z">
        <seg>示例 50.12. Gradle API 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.13. Gradle's Groovy dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105630Z" creationid="huanghaohang" creationdate="20190602T105630Z">
        <seg>示例 50.13. Gradle 的 Groovy 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.14. Excluding transitive dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105649Z" creationid="huanghaohang" creationdate="20190602T105649Z">
        <seg>示例 50.14. 排除传递依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.15. Optional attributes of dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140740Z" creationid="huanghaohang" creationdate="20190602T140740Z">
        <seg>示例 50.15. 依赖的可选属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.16. Collections and arrays of dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140938Z" creationid="huanghaohang" creationdate="20190602T140938Z">
        <seg>示例 50.16. 依赖的集合和数组</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.17. Dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141434Z" creationid="huanghaohang" creationdate="20190602T141434Z">
        <seg>示例 50.17. 依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.18. Dependency configurations for project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141438Z" creationid="huanghaohang" creationdate="20190602T141438Z">
        <seg>示例 50.18. 项目的依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.19. Configuration.copy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142758Z" creationid="huanghaohang" creationdate="20190602T142758Z">
        <seg>示例 50.19. Configuration.copy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.2. Accessing a configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153618Z" creationid="huanghaohang" creationdate="20190527T153618Z">
        <seg>示例 50.2. 访问配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.20. Accessing declared dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143018Z" creationid="huanghaohang" creationdate="20190602T143018Z">
        <seg>示例 50.20. 访问已声明的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.21. Configuration.files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143251Z" creationid="huanghaohang" creationdate="20190602T143251Z">
        <seg>示例 50.21. Configuration.files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.22. Configuration.files with spec</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143712Z" creationid="huanghaohang" creationdate="20190602T143712Z">
        <seg>示例 50.22. 特殊的 Configuration.files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.23. Configuration.copy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152837Z" creationid="huanghaohang" creationdate="20190602T152837Z">
        <seg>示例 50.23. Configuration.copy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.24. Configuration.copy vs. Configuration.files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153123Z" creationid="huanghaohang" creationdate="20190602T153123Z">
        <seg>示例 50.24. Configuration.copy 与 Configuration.files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.25. Declaring a Maven and Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030655Z" creationid="huanghaohang" creationdate="20190603T030655Z">
        <seg>示例50.25. 声明 Maven 和 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.26. Providing credentials to a Maven and Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030848Z" creationid="huanghaohang" creationdate="20190603T030848Z">
        <seg>示例50.26. 向 Maven 和 Ivy 仓库提供凭证</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.27. Adding central Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031031Z" creationid="huanghaohang" creationdate="20190603T031031Z">
        <seg>示例 50.27. 添加 Maven 中央仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.28. Adding Bintray's JCenter Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031544Z" creationid="huanghaohang" creationdate="20190603T031544Z">
        <seg>示例 50.28. 添加 Bintray 的 Jcenter Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.29. Adding the local Maven cache as a repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031704Z" creationid="huanghaohang" creationdate="20190603T031704Z">
        <seg>示例 50.29. 将本地 Maven 缓存添加为仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.3. Configuration of a configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153654Z" creationid="huanghaohang" creationdate="20190527T153654Z">
        <seg>示例 50.3. 配置的配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.30. Adding custom Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033627Z" creationid="huanghaohang" creationdate="20190603T033627Z">
        <seg>示例 50.30. 添加一个自定义的 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.31. Adding additional Maven repositories for JAR files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033842Z" creationid="huanghaohang" creationdate="20190603T033842Z">
        <seg>示例 50.31. 为 JAR 文件添加额外的 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.32. Accessing password protected Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034059Z" creationid="huanghaohang" creationdate="20190603T034059Z">
        <seg>示例 50.32. 访问受密码保护的 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.33. Flat repository resolver</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040556Z" creationid="huanghaohang" creationdate="20190603T040556Z">
        <seg>示例 50.33. 平面仓库解析器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.34. Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041115Z" creationid="huanghaohang" creationdate="20190603T041115Z">
        <seg>示例 50.34. Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.35. Ivy repository with named layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041505Z" creationid="huanghaohang" creationdate="20190603T041505Z">
        <seg>示例50.35. 使用指定名称的布局的 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.36. Ivy repository with pattern layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T023841Z" creationid="huanghaohang" creationdate="20190604T023841Z">
        <seg>示例 50.36. 使用模式而已的 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.37. Ivy repository with multiple custom patterns</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T024710Z" creationid="huanghaohang" creationdate="20190604T024710Z">
        <seg>示例50.37. 使用多个定制模式的 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.38. Ivy repository with Maven compatible layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025121Z" creationid="huanghaohang" creationdate="20190604T025121Z">
        <seg>示例50.38. 使用 Maven 兼容布局的 Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.39. Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025225Z" creationid="huanghaohang" creationdate="20190604T025225Z">
        <seg>示例 50.39. Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.4. Module dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160752Z" creationid="huanghaohang" creationdate="20190527T160752Z">
        <seg>示例 50.4. 模块依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.40. Accessing a repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025309Z" creationid="huanghaohang" creationdate="20190604T025255Z">
        <seg>示例 50.40. 访问一个仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.41. Configuration of a repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025328Z" creationid="huanghaohang" creationdate="20190604T025311Z">
        <seg>示例 50.41. 仓库配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.42. Definition of a custom repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030429Z" creationid="huanghaohang" creationdate="20190604T030429Z">
        <seg>示例 50.42. 定制仓库的定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.43. Forcing consistent version for a group of libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015339Z" creationid="huanghaohang" creationdate="20190605T015339Z">
        <seg>示例 50.43. 强制一个组的所有库使用一致的版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.44. Using a custom versioning scheme</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022637Z" creationid="huanghaohang" creationdate="20190605T022637Z">
        <seg>示例 50.44. 使用自定义的版本方案</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.45. Blacklisting a version with a replacement</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024434Z" creationid="huanghaohang" creationdate="20190605T024434Z">
        <seg>示例 50.45. 通过替换把版本列入黑名单</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.46. Changing dependency group and/or name at the resolution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025001Z" creationid="huanghaohang" creationdate="20190605T025001Z">
        <seg>示例 50.46. 在解析中更改依赖组及名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.47. Enabling dynamic resolve mode</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025829Z" creationid="huanghaohang" creationdate="20190605T025829Z">
        <seg>示例 50.47. 启用动态解析模式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.48. 'Latest' version selector</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040715Z" creationid="huanghaohang" creationdate="20190605T040715Z">
        <seg>示例 50.48，“最新的”版本选择器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.49. Custom status scheme</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041003Z" creationid="huanghaohang" creationdate="20190605T040955Z">
        <seg>示例 50.49. 自定义状态模式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.5. Artifact only notation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044310Z" creationid="huanghaohang" creationdate="20190531T044310Z">
        <seg>示例50.5. 仅工件表示法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.50. Dynamic version cache control</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151202Z" creationid="huanghaohang" creationdate="20190605T151202Z">
        <seg>示例 50.50. 动态版本缓存控制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.51. Changing module cache control</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151329Z" creationid="huanghaohang" creationdate="20190605T151329Z">
        <seg>示例 50.51. 变化模块缓存控制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.6. Dependency with classifier</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T045247Z" creationid="huanghaohang" creationdate="20190531T045247Z">
        <seg>示例 50.6. 使用分类器的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.7. Iterating over a configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051141Z" creationid="huanghaohang" creationdate="20190531T051141Z">
        <seg>示例 50.7. 遍历一个配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.8. Client module dependencies - transitive dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051417Z" creationid="huanghaohang" creationdate="20190531T051417Z">
        <seg>示例 50.8. 客户端模块依赖——传递依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 50.9. Project dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112307Z" creationid="huanghaohang" creationdate="20190601T112307Z">
        <seg>示例 50.9. 项目依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 51.1. Defining an artifact using an archive task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075217Z" creationid="huanghaohang" creationdate="20190606T075217Z">
        <seg>示例 51.1. 使用归档任务定义一个工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 51.2. Defining an artifact using a file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075436Z" creationid="huanghaohang" creationdate="20190606T075436Z">
        <seg>示例 51.2. 使用文件定义工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 51.3. Customizing an artifact</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075535Z" creationid="huanghaohang" creationdate="20190606T075535Z">
        <seg>示例 51.3. 自定义工件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 51.4. Map syntax for defining an artifact using a file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075754Z" creationid="huanghaohang" creationdate="20190606T075754Z">
        <seg>示例 51.4. 用于使用文件定义工件的映射语法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 51.5. Configuration of the upload task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080207Z" creationid="huanghaohang" creationdate="20190606T080207Z">
        <seg>示例 51.5. 上传任务的配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.1. Using the Maven plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091211Z" creationid="huanghaohang" creationdate="20190606T091211Z">
        <seg>示例 52.1. 使用 Maven 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.10. Accessing a mapping configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T090854Z" creationid="huanghaohang" creationdate="20190608T090854Z">
        <seg>示例 52.10. 访问映射配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.2. Creating a stand alone pom.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061315Z" creationid="huanghaohang" creationdate="20190607T061315Z">
        <seg>示例 52.2. 创建一个单独的 pom。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.3. Upload of file to remote Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074826Z" creationid="huanghaohang" creationdate="20190607T074826Z">
        <seg>示例 52.3. 上传文件到远程 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.4. Upload of file via SSH</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092636Z" creationid="huanghaohang" creationdate="20190607T092636Z">
        <seg>示例 52.4. 通过 SSH 上传文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.5. Customization of pom</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100654Z" creationid="huanghaohang" creationdate="20190607T100654Z">
        <seg>示例 52.5. pom 的定制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.6. Builder style customization of pom</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100857Z" creationid="huanghaohang" creationdate="20190607T100857Z">
        <seg>示例 52.6. pom 的构建器样式自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.7. Modifying auto-generated content</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111040Z" creationid="huanghaohang" creationdate="20190607T111040Z">
        <seg>示例 52.7. 修改自动生成的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.8. Customization of Maven installer</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111339Z" creationid="huanghaohang" creationdate="20190607T111339Z">
        <seg>示例 52.8. Maven 安装器的自定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 52.9. Generation of multiple poms</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084748Z" creationid="huanghaohang" creationdate="20190608T084748Z">
        <seg>示例 52.9. 多个 pom 的生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.1. Using the Signing plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130430Z" creationid="huanghaohang" creationdate="20190608T130430Z">
        <seg>示例 53.1. 使用 Signing 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.2. Signing a configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134450Z" creationid="huanghaohang" creationdate="20190608T134450Z">
        <seg>示例53.2. 签署配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.3. Signing a configuration output</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135036Z" creationid="huanghaohang" creationdate="20190608T135036Z">
        <seg>示例 53.3. 签署配置的输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.4. Signing a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135233Z" creationid="huanghaohang" creationdate="20190608T135233Z">
        <seg>示例 53.4. 签名任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.5. Signing a task output</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140458Z" creationid="huanghaohang" creationdate="20190608T140458Z">
        <seg>示例 53.5. 签名任务的输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.6. Conditional signing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T161309Z" creationid="huanghaohang" creationdate="20190608T161309Z">
        <seg>示例 53.6. 条件签名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 53.7. Signing a POM for deployment</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010430Z" creationid="huanghaohang" creationdate="20190609T010430Z">
        <seg>示例 53.7. 为部署签名 POM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.1. Defining a library component</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030611Z" creationid="huanghaohang" creationdate="20190609T030611Z">
        <seg>示例 54.1. 定义库组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.10. Settings that apply to all binaries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053252Z" creationid="huanghaohang" creationdate="20190609T053252Z">
        <seg>示例 54.10. 应用于所有二进制文件的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.11. Settings that apply to all shared libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012010Z" creationid="huanghaohang" creationdate="20190610T012010Z">
        <seg>示例 54.11. 应用于所有共享库的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.12. Settings that apply to all binaries produced for the 'main' executable component</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012141Z" creationid="huanghaohang" creationdate="20190610T012141Z">
        <seg>示例 54.12. 应用于“main”可执行组件所产生的所有二进制文件的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.13. Settings that apply only to shared libraries produced for the 'main' library component</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012518Z" creationid="huanghaohang" creationdate="20190610T012518Z">
        <seg>示例 54.13. 仅应用于“main” library 组件所产生的共享库的设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.14. The 'windows-resources' plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012935Z" creationid="huanghaohang" creationdate="20190610T012935Z">
        <seg>示例 54.14. 'windows-resources' 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.15. Configuring the location of Windows resource sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013420Z" creationid="huanghaohang" creationdate="20190610T013420Z">
        <seg>示例 54.15. 配置 Windows 资源源文件的位置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.16. Building a resource-only dll</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013910Z" creationid="huanghaohang" creationdate="20190610T013910Z">
        <seg>示例 54.16. 构建纯资源 dll</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.17. Providing a library dependency to the source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022759Z" creationid="huanghaohang" creationdate="20190610T022759Z">
        <seg>示例 54.17. 向源集提供库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.18. Providing a library dependency to the binary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022900Z" creationid="huanghaohang" creationdate="20190610T022900Z">
        <seg>示例 54.18. 向二进制文件提供库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.19. Declaring project dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023016Z" creationid="huanghaohang" creationdate="20190610T023016Z">
        <seg>示例 54.19. 定义项目依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.2. Defining executable components</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030734Z" creationid="huanghaohang" creationdate="20190609T030734Z">
        <seg>示例 54.2. 定义可执行组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.20. Defining build types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035433Z" creationid="huanghaohang" creationdate="20190610T035433Z">
        <seg>示例 54.20. 定义构建类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.21. Configuring debug binaries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035729Z" creationid="huanghaohang" creationdate="20190610T035729Z">
        <seg>示例 54.21. 配置调试的二进制文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.22. Defining platforms</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045615Z" creationid="huanghaohang" creationdate="20190610T045615Z">
        <seg>示例 54.22. 定义平台</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.23. Defining flavors</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052709Z" creationid="huanghaohang" creationdate="20190610T052709Z">
        <seg>示例 54.23. 定义风格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.24. Targeting a component at particular platforms</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053328Z" creationid="huanghaohang" creationdate="20190610T053328Z">
        <seg>示例 54.24. 针对特定平台上的组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.25. Building all possible variants</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084309Z" creationid="huanghaohang" creationdate="20190610T084309Z">
        <seg>示例 54.25. 构建所有可能的变体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.26. Defining tool chains</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084909Z" creationid="huanghaohang" creationdate="20190610T084909Z">
        <seg>示例 54.26. 定义工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.27. Reconfigure tool arguments</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093522Z" creationid="huanghaohang" creationdate="20190610T093522Z">
        <seg>示例 54.27. 重新配置工具参数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.28. Defining target platforms</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T024955Z" creationid="huanghaohang" creationdate="20190611T024955Z">
        <seg>示例54.28. 定义目标平台</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.29. Registering CUnit tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032617Z" creationid="huanghaohang" creationdate="20190611T032617Z">
        <seg>示例 54.29. 注册 CUnit 测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.3. The 'cpp' plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T042713Z" creationid="huanghaohang" creationdate="20190609T042713Z">
        <seg>示例 54.3. 'cpp' 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.30. Registering CUnit tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T061714Z" creationid="huanghaohang" creationdate="20190611T061714Z">
        <seg>示例 54.30. 注册 CUnit 测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.31. Running CUnit tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090219Z" creationid="huanghaohang" creationdate="20190611T090219Z">
        <seg>示例 54.31. 运行 CUnit 测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.4. C++ source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043353Z" creationid="huanghaohang" creationdate="20190609T043353Z">
        <seg>示例 54.4. C++ 源码集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.5. The 'c' plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051331Z" creationid="huanghaohang" creationdate="20190609T051331Z">
        <seg>示例 54.5. 'C' 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.6. C source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051618Z" creationid="huanghaohang" creationdate="20190609T051618Z">
        <seg>示例 54.4. C 源码集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.7. The 'assembler' plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051850Z" creationid="huanghaohang" creationdate="20190609T051850Z">
        <seg>示例 54.7. 'assembler' 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.8. The 'objective-c' plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052321Z" creationid="huanghaohang" creationdate="20190609T052321Z">
        <seg>示例 54.8. 'objective-c' 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 54.9. The 'objective-cpp' plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052544Z" creationid="huanghaohang" creationdate="20190609T052544Z">
        <seg>示例 54.9. 'objective-cpp' 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.1. Single project build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145512Z" creationid="huanghaohang" creationdate="20190612T145512Z">
        <seg>示例 55.1. 单项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.2. Hierarchical layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143233Z" creationid="huanghaohang" creationdate="20190612T151514Z">
        <seg>示例 55.2. 层次布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.3. Flat layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143630Z" creationid="huanghaohang" creationdate="20190612T152539Z">
        <seg>示例 55.3. 平面布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.4. Modification of elements of the project tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152957Z" creationid="huanghaohang" creationdate="20190612T152957Z">
        <seg>示例 55.4. 修改项目树中的元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.5. Modification of elements of the project tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153100Z" creationid="huanghaohang" creationdate="20190612T153100Z">
        <seg>示例 55.5. 修改项目树中的元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.6. Adding of test task to each project which has certain property set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145903Z" creationid="huanghaohang" creationdate="20190613T145903Z">
        <seg>示例 55.6. 向每个包含某些属性集的项目添加测试任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.7. Notifications</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150827Z" creationid="huanghaohang" creationdate="20190613T150827Z">
        <seg>示例 55.7. 通知</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.8. Setting of certain property to all tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151255Z" creationid="huanghaohang" creationdate="20190613T151255Z">
        <seg>示例 55.8. 对所有任务设置特定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 55.9. Logging of start and end of each task execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152618Z" creationid="huanghaohang" creationdate="20190613T152618Z">
        <seg>示例55.9. 在每个任务执行开始及结束时打印日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.1. Multi-project tree - water &amp; bluewhale projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154421Z" creationid="huanghaohang" creationdate="20190614T154421Z">
        <seg>示例 56.1. 多项目树——water &amp; bluewhale 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.10. Running build from subproject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T161733Z" creationid="huanghaohang" creationdate="20190615T161733Z">
        <seg>示例 56.10. 从子项目运行构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.11. Evaluation and execution of projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162428Z" creationid="huanghaohang" creationdate="20190615T162428Z">
        <seg>示例 56.11. 项目的评估和执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.12. Evaluation and execution of projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162542Z" creationid="huanghaohang" creationdate="20190615T162542Z">
        <seg>示例 56.12. 项目的评估和执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.13. Running tasks by their absolute path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T111226Z" creationid="huanghaohang" creationdate="20190616T111226Z">
        <seg>示例 56.13. 按绝对路径运行任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.14. Dependencies and execution order</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140206Z" creationid="huanghaohang" creationdate="20190616T140206Z">
        <seg>示例 56.14. 依赖和执行顺序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.15. Dependencies and execution order</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140810Z" creationid="huanghaohang" creationdate="20190616T140758Z">
        <seg>示例 56.15. 依赖和执行顺序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.16. Dependencies and execution order</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141259Z" creationid="huanghaohang" creationdate="20190616T141259Z">
        <seg>示例 56.16. 依赖和执行顺序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.17. Declaring dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141728Z" creationid="huanghaohang" creationdate="20190616T141728Z">
        <seg>示例 56.17. 声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.18. Declaring dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141939Z" creationid="huanghaohang" creationdate="20190616T141939Z">
        <seg>示例 56.18. 声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.19. Cross project task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152754Z" creationid="huanghaohang" creationdate="20190616T152754Z">
        <seg>示例 56.19. 跨项目任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.2. Build script of water (parent) project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154820Z" creationid="huanghaohang" creationdate="20190614T154820Z">
        <seg>示例 56.2. water（父）项目的构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.20. Configuration time dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153140Z" creationid="huanghaohang" creationdate="20190616T153140Z">
        <seg>示例 56.20. 配置时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.21. Configuration time dependencies - evaluationDependsOn</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153655Z" creationid="huanghaohang" creationdate="20190616T153655Z">
        <seg>示例 56.21. 配置时依赖——evaluationDependsOn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.22. Configuration time dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T145251Z" creationid="huanghaohang" creationdate="20190617T145251Z">
        <seg>示例 56.22. 配置时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.23. Dependencies - real life example - crossproject configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150802Z" creationid="huanghaohang" creationdate="20190617T150802Z">
        <seg>示例 56.23. 依赖——真实生活示例——跨项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.24. Project lib dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160323Z" creationid="huanghaohang" creationdate="20190617T160323Z">
        <seg>示例 56.24. 项目库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.25. Project lib dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160618Z" creationid="huanghaohang" creationdate="20190617T160618Z">
        <seg>示例 56.25. 项目库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.26. Fine grained control over dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162736Z" creationid="huanghaohang" creationdate="20190617T162736Z">
        <seg>示例 56.26. 对依赖的细粒度控制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.27. Build and Test Single Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T135455Z" creationid="huanghaohang" creationdate="20190622T135455Z">
        <seg>示例 56.27. 构建和测试单个项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.28. Partial Build and Test Single Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141013Z" creationid="huanghaohang" creationdate="20190622T141013Z">
        <seg>示例 56.28. 部分构建和测试单个项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.29. Build and Test Depended On Projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141703Z" creationid="huanghaohang" creationdate="20190622T141703Z">
        <seg>示例 56.29. 构建和测试所依赖的项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.3. Multi-project tree - water, bluewhale &amp; krill projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155531Z" creationid="huanghaohang" creationdate="20190614T155531Z">
        <seg>示例 56.3. 多项目树——water &amp; bluewhale &amp; krill 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.30. Build and Test Dependent Projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T142332Z" creationid="huanghaohang" creationdate="20190622T142332Z">
        <seg>示例 56.29. 构建和测试依赖它的项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.4. Water project build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155643Z" creationid="huanghaohang" creationdate="20190614T155643Z">
        <seg>示例 56.4. Water 项目构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.5. Defining common behaviour of all projects and subprojects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142147Z" creationid="huanghaohang" creationdate="20190615T142147Z">
        <seg>示例 56.5. 定义所有项目以及子项目的共同行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.6. Defining specific behaviour for particular project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142642Z" creationid="huanghaohang" creationdate="20190615T142642Z">
        <seg>示例 56.6. 定义特定项目的特定行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.7. Defining specific behaviour for project krill</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142858Z" creationid="huanghaohang" creationdate="20190615T142858Z">
        <seg>示例 56.7. 为 krill 项目定义特定行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.8. Adding custom behaviour to some projects (filtered by project name)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143633Z" creationid="huanghaohang" creationdate="20190615T143633Z">
        <seg>示例 56.8. 将自定义行为添加到某些项目中（按项目名称过滤）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 56.9. Adding custom behaviour to some projects (filtered by project properties)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T144907Z" creationid="huanghaohang" creationdate="20190615T144907Z">
        <seg>示例 56.9. 向某些项目添加自定义行为（按项目属性过滤）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.1. Defining a custom task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T154109Z" creationid="huanghaohang" creationdate="20190704T154109Z">
        <seg>示例 57.1. 定义一个自定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.10. Running the incremental task with unchanged inputs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142112Z" creationid="huanghaohang" creationdate="20190707T142112Z">
        <seg>示例 57.10. 在输入不变时运行增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.11. Running the incremental task with updated input files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142249Z" creationid="huanghaohang" creationdate="20190707T142249Z">
        <seg>示例 57.11. 有输入文件更新时运行增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.12. Running the incremental task with an input file removed</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142525Z" creationid="huanghaohang" creationdate="20190707T142525Z">
        <seg>示例 57.12. 当输入文件被删除时运行增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.13. Running the incremental task with an output file removed</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143006Z" creationid="huanghaohang" creationdate="20190707T143006Z">
        <seg>示例 57.13. 当输出文件被删除时运行增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.14. Running the incremental task with an input property changed</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143247Z" creationid="huanghaohang" creationdate="20190707T143247Z">
        <seg>示例 57.14. 当输入属性被更改时运行增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.2. A hello world task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142808Z" creationid="huanghaohang" creationdate="20190705T142808Z">
        <seg>示例 57.2. 一个 hello world 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.3. A customizable hello world task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122510Z" creationid="huanghaohang" creationdate="20190706T122313Z">
        <seg>示例 57.3. 一个自定义的 hello world 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.4. A build for a custom task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122933Z" creationid="huanghaohang" creationdate="20190706T122919Z">
        <seg>示例 57.4. 一个自定义任务的构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.5. A custom task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123351Z" creationid="huanghaohang" creationdate="20190706T123351Z">
        <seg>示例 57.5. 自定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.6. Using a custom task in another project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123738Z" creationid="huanghaohang" creationdate="20190706T123738Z">
        <seg>示例 57.6. 在另一个项目中使用自定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.7. Testing a custom task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124007Z" creationid="huanghaohang" creationdate="20190706T124007Z">
        <seg>示例 57.7. 测试自定义任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.8. Defining an incremental task action</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134811Z" creationid="huanghaohang" creationdate="20190706T134811Z">
        <seg>示例 57.8. 定义增量任务操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 57.9. Running the incremental task for the first time</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141856Z" creationid="huanghaohang" creationdate="20190707T141856Z">
        <seg>示例 57.9. 首次运行增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.1. A custom plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150920Z" creationid="huanghaohang" creationdate="20190719T150920Z">
        <seg>示例 58.1. 自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.2. A custom plugin extension</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155819Z" creationid="huanghaohang" creationdate="20190719T155819Z">
        <seg>示例 58.2. 一个自定义插件扩展</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.3. A custom plugin with configuration closure</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151628Z" creationid="huanghaohang" creationdate="20190726T151628Z">
        <seg>示例 58.3. 有配置闭包的自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.4. Evaluating file properties lazily</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151152Z" creationid="huanghaohang" creationdate="20190727T151152Z">
        <seg>示例 58.4. 文件属性的惰性评估</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.5. A build for a custom plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153128Z" creationid="huanghaohang" creationdate="20190727T153128Z">
        <seg>示例 58.5. 对自定义插件的构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.6. Wiring for a custom plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153524Z" creationid="huanghaohang" creationdate="20190727T153524Z">
        <seg>示例 58.6. 连接自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.7. Using a custom plugin in another project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130732Z" creationid="huanghaohang" creationdate="20190728T130732Z">
        <seg>示例 58.7. 在另一个项目中使用一个自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.8. Testing a custom plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130840Z" creationid="huanghaohang" creationdate="20190728T130840Z">
        <seg>示例 58.8. 测试自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 58.9. Managing domain objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130953Z" creationid="huanghaohang" creationdate="20190728T130953Z">
        <seg>示例 58.9. 管理域对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.1. Using inherited properties and methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145006Z" creationid="huanghaohang" creationdate="20190817T145006Z">
        <seg>示例59.1. 使用继承的属性和方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.2. Using injected properties and methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132522Z" creationid="huanghaohang" creationdate="20191201T132522Z">
        <seg>示例 59.2. 使用注入的属性和方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.3. Custom buildSrc build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T134735Z" creationid="huanghaohang" creationdate="20191201T134735Z">
        <seg>示例 59.3. 自定义 buildSrc 构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.4. Adding subprojects to the root buildSrc project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135440Z" creationid="huanghaohang" creationdate="20191201T135440Z">
        <seg>示例 59.4. 将子项目添加到根 buildSrc 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.5. Running another build from a build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135703Z" creationid="huanghaohang" creationdate="20191201T135703Z">
        <seg>示例 59.5. 从一个构建运行另一个构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.6. Declaring external dependencies for the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T140933Z" creationid="huanghaohang" creationdate="20191201T140933Z">
        <seg>示例 59.6. 声明构建脚本的外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.7. A build script with external dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141049Z" creationid="huanghaohang" creationdate="20191202T141049Z">
        <seg>示例 59.7. 具有外部依赖的构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 59.8. Ant optional dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141254Z" creationid="huanghaohang" creationdate="20191202T141254Z">
        <seg>示例 59.8. Ant 的可选依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.1. The first build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144942Z" creationid="95" creationdate="20170724T144942Z">
        <seg>示例 6.1. 第一个构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.10. Accessing a task via API - adding behaviour</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133108Z" creationid="95" creationdate="20170727T133108Z">
        <seg>示例6.10. 通过API访问任务——添加行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.11. Accessing task as a property of the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141334Z" creationid="95" creationdate="20170727T141334Z">
        <seg>示例6.11. 以构建脚本的属性的方式访问任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.12. Adding extra properties to a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141956Z" creationid="95" creationdate="20170727T141956Z">
        <seg>示例6.12. 为任务添加额外的属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.13. Using AntBuilder to execute ant.loadfile target</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153752Z" creationid="95" creationdate="20170728T153752Z">
        <seg>示例6.13. 使用AntBuilder 执行 ant.loadfile 目标</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.14. Using methods to organize your build logic</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023454Z" creationid="95" creationdate="20170729T023454Z">
        <seg>示例6.14. 在构建逻辑中使用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.15. Defining a default tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023907Z" creationid="95" creationdate="20170729T023907Z">
        <seg>示例6.15. 定义一个默认任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.16. Different outcomes of build depending on chosen tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025301Z" creationid="95" creationdate="20170729T025301Z">
        <seg>示例6.16. 根据所选择的任务输出不同的构建结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.2. Execution of a build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T145831Z" creationid="95" creationdate="20170724T145831Z">
        <seg>示例 6.2. 执行构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.3. A task definition shortcut</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155313Z" creationid="95" creationdate="20170726T155313Z">
        <seg>示例6.3. 任务定义的快捷方式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.4. Using Groovy in Gradle's tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155816Z" creationid="95" creationdate="20170726T155709Z">
        <seg>示例6.4. 在Gradle任务中使用Groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.5. Using Groovy in Gradle's tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155854Z" creationid="95" creationdate="20170726T155854Z">
        <seg>示例6.5. 在Gradle任务中使用Groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.6. Declaration of dependencies between tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160115Z" creationid="95" creationdate="20170726T160115Z">
        <seg>示例6.6. 声明任务之间的依赖关系</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.7. Lazy dependsOn - the other task does not exist (yet)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160342Z" creationid="95" creationdate="20170726T160335Z">
        <seg>示例6.7. 延迟依赖——另一个任务（暂）不存在</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.8. Dynamic creation of a task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132722Z" creationid="95" creationdate="20170727T132722Z">
        <seg>示例6.8. 任务的动态创建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 6.9. Accessing a task via API - adding a dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133005Z" creationid="95" creationdate="20170727T133005Z">
        <seg>示例6.9. 通过API访问任务——添加依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 60.1. Using init script to perform extra configuration before projects are evaluated</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143626Z" creationid="huanghaohang" creationdate="20191206T143626Z">
        <seg>示例 60.1. 使用初始化脚本在项目评估之前执行额外的配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 60.2. Declaring external dependencies for an init script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T150735Z" creationid="huanghaohang" creationdate="20191206T150735Z">
        <seg>示例 60.2. 声明构建脚本的外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 60.3. An init script with external dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151031Z" creationid="huanghaohang" creationdate="20191206T151031Z">
        <seg>示例 60.3. 具有外部依赖的初始化脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 60.4. Using plugins in init scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151212Z" creationid="huanghaohang" creationdate="20191206T151212Z">
        <seg>示例 60.4. 在初始化脚本中使用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 61.1. Wrapper task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130037Z" creationid="huanghaohang" creationdate="20191219T130037Z">
        <seg>示例 61.1. Wrapper 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 61.2. Wrapper generated files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130148Z" creationid="huanghaohang" creationdate="20191219T130148Z">
        <seg>示例 61.2. 包装器生成的文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 64.1. Applying the “ivy-publish” plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155543Z" creationid="huanghaohang" creationdate="20210516T155543Z">
        <seg>示例 64.1. 应用“ivy-publish”插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.1. Using the Java plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012449Z" creationid="95" creationdate="20170730T012449Z">
        <seg>示例 7.1. 使用 Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.10. Multi-project build - hierarchical layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154450Z" creationid="95" creationdate="20170731T154425Z">
        <seg>示例7.10. 多项目构建——层次布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.11. Multi-project build - settings.gradle file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123537Z" creationid="95" creationdate="20170803T123537Z">
        <seg>示例7.11. 多项目构建——settings.gradle文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.12. Multi-project build - common configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124421Z" creationid="95" creationdate="20170803T124421Z">
        <seg>示例7.12. 多项目构建——公共配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.13. Multi-project build - dependencies between projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125326Z" creationid="95" creationdate="20170803T125259Z">
        <seg>示例7.13. 多项目构建——项目间的依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.14. Multi-project build - distribution file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125715Z" creationid="95" creationdate="20170803T125715Z">
        <seg>示例7.14. 多项目构建——分发文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.2. Building a Java project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014257Z" creationid="95" creationdate="20170730T013858Z">
        <seg>示例7.2. 构建Java项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.3. Adding Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124330Z" creationid="95" creationdate="20170730T124330Z">
        <seg>示例 7.3. 添加 Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.4. Adding dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124731Z" creationid="95" creationdate="20170730T124731Z">
        <seg>示例 7.4. 添加 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.5. Customization of MANIFEST.MF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132601Z" creationid="95" creationdate="20170730T132601Z">
        <seg>示例 7.5. 自定义的MANIFEST.MF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.6. Adding a test system property</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T150114Z" creationid="95" creationdate="20170731T150114Z">
        <seg>示例 7.6. 添加一个系统属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.7. Publishing the JAR file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153704Z" creationid="95" creationdate="20170731T153704Z">
        <seg>示例7.7. 发布JAR文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.8. Eclipse plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153830Z" creationid="95" creationdate="20170731T153830Z">
        <seg>示例 7.8. Eclipse插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 7.9. Java example - complete build file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154050Z" creationid="95" creationdate="20170731T154050Z">
        <seg>示例7.9. Java示例——完整的构建文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.1. Declaring dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170908T013226Z" creationid="haohang" creationdate="20170908T013226Z">
        <seg>示例 8.1. 依赖声明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.2. Definition of an external dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043317Z" creationid="huanghaohang" creationdate="20170908T043317Z">
        <seg>示例8.2. 外部依赖的定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.3. Shortcut definition of an external dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043905Z" creationid="huanghaohang" creationdate="20170908T043905Z">
        <seg>示例8.3. 外部依赖的定义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.4. Usage of Maven central repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044750Z" creationid="huanghaohang" creationdate="20170908T044750Z">
        <seg>示例8.4. 使用Maven中央仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.5. Usage of a remote Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044837Z" creationid="huanghaohang" creationdate="20170908T044837Z">
        <seg>示例8.5. 使用远程的Maven仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.6. Usage of a remote Ivy directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044924Z" creationid="huanghaohang" creationdate="20170908T044924Z">
        <seg>示例8.6. 使用远程Ivy目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.7. Usage of a local Ivy directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T045133Z" creationid="huanghaohang" creationdate="20170908T045133Z">
        <seg>示例8.7. 使用本地Ivy目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.8. Publishing to an Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050445Z" creationid="huanghaohang" creationdate="20170908T050445Z">
        <seg>示例8.8. 发布到Ivy仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 8.9. Publishing to a Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051000Z" creationid="huanghaohang" creationdate="20170908T051000Z">
        <seg>示例8.9. 发布到Maven仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 9.1. Groovy plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T001650Z" creationid="huanghaohang" creationdate="20170909T001650Z">
        <seg>示例9.1. Groovy插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 9.2. Dependency on Groovy 2.2.0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002719Z" creationid="huanghaohang" creationdate="20170909T002719Z">
        <seg>示例 9.2. 依赖 Groovy 2.2.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Example 9.3. Groovy example - complete build file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002842Z" creationid="huanghaohang" creationdate="20170909T002842Z">
        <seg>示例9.3. Groovy示例 - 完整的构建文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Except where noted in the&lt;a0&gt;API documentation&lt;/a0&gt;, the Zinc based compiler supports exactly the same configuration options as the Ant based compiler. Note, however, that the Zinc compiler requires Java 6 or higher to run. This means that Gradle itself has to be run with Java 6 or higher.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T134651Z" creationid="huanghaohang" creationdate="20180407T110906Z">
        <seg>除非在 &lt;a0&gt;API 文档&lt;/a0&gt;中另有说明，否则基于 Zinc 的编译器支持与基于 Ant 的编译器完全相同的配置选项。但是请注意，Zinc 编译器需要 Java 6 或更高的版本。这意味着 Gradle 本身也必须使用 Java 6 或更高版本来运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Excluding tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233907Z" creationid="huanghaohang" creationdate="20171206T233907Z">
        <seg>排除任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ExecutableBinary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032057Z" creationid="huanghaohang" creationdate="20190609T032057Z">
        <seg>ExecutableBinary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Execute ignoring dependencies. This does not require dependent projects to be rebuilt (same as the -a option).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144348Z" creationid="huanghaohang" creationdate="20170911T144145Z">
        <seg>执行忽略的依赖。它不需要所依赖的项目重新构建（与-a选项一样）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executing Sonar Runner in a separate process</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070253Z" creationid="huanghaohang" creationdate="20190205T070253Z">
        <seg>在一个单独的进程中执行 Sonar Runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executing multiple tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233856Z" creationid="huanghaohang" creationdate="20171206T233856Z">
        <seg>执行多个任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T142408Z" creationid="huanghaohang" creationdate="20190612T142408Z">
        <seg>执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Execution rules for multi-project builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145023Z" creationid="huanghaohang" creationdate="20190708T145023Z">
        <seg>多项目构建的执行规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extends</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053711Z" creationid="haohang" creationdate="20180313T053711Z">
        <seg>继承自</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extensive configuration defaults</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150741Z" creationid="huanghaohang" creationdate="20181201T150741Z">
        <seg>广泛的默认配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extensive samples, including the examples referenced in the user guide, along with some complete and more complex builds you can use the starting point for your own build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114843Z" creationid="95" creationdate="20170723T114843Z">
        <seg>大量的样例，包括用户指南里的例子，以及一些完整的和更加复杂的构建。您可以把它们作为您自己的构建的基础。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>External dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233706Z" creationid="huanghaohang" creationdate="20171206T233706Z">
        <seg>外部依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>External module dependencies are the most common dependencies. They refer to a module in an external repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160749Z" creationid="huanghaohang" creationdate="20190527T160749Z">
        <seg>外部模块依赖是最常见的依赖。它们引用外部仓库中的模块。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>External module dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153750Z" creationid="huanghaohang" creationdate="20190527T153750Z">
        <seg>外部模块依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extra properties aren't limited to tasks. You can read more about them in &lt;a0&gt;Section 13.4.2, “Extra properties”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T142130Z" creationid="95" creationdate="20170727T142016Z">
        <seg>额外属性并不局限于任务，你可以在 &lt;a0&gt;第13.4.2节，“额外属性”&lt;/a0&gt;中了解更多关于它们的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extra task properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031848Z" creationid="huanghaohang" creationdate="20170927T031848Z">
        <seg>额外的任务属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fast Scala Compiler</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140311Z" creationid="huanghaohang" creationdate="20181201T140311Z">
        <seg>Fast Scala Compiler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fast and accurate bash tab completion.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T142030Z" creationid="huanghaohang" creationdate="20180109T142030Z">
        <seg>快速准确的 bash 的 tab 键完成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Favorites</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234024Z" creationid="huanghaohang" creationdate="20171206T234024Z">
        <seg>收藏夹</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Features</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072448Z" creationid="haohang" creationdate="20170720T072448Z">
        <seg>特性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 11.1. Task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031036Z" creationid="huanghaohang" creationdate="20170909T031036Z">
        <seg>图11.1. 任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 12.1. GUI Task Tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143517Z" creationid="huanghaohang" creationdate="20170911T143517Z">
        <seg>图12.1. GUI任务树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 12.2. GUI Setup</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145849Z" creationid="huanghaohang" creationdate="20170911T145849Z">
        <seg>图 12.2. GUI 设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 23.1. Java plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T040047Z" creationid="haohang" creationdate="20180313T040047Z">
        <seg>图 23.1. Java 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 23.2. Java plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054201Z" creationid="haohang" creationdate="20180313T054201Z">
        <seg>图 23.2. Java 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 24.1. Groovy plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121113Z" creationid="huanghaohang" creationdate="20180406T121113Z">
        <seg>图 24.1. Groovy 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 25.1. Scala plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010741Z" creationid="huanghaohang" creationdate="20180407T010741Z">
        <seg>图 25.1. Scala 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 26.1. War plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140255Z" creationid="huanghaohang" creationdate="20180408T140255Z">
        <seg>图 26.1. War 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 28.1. Jetty plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144330Z" creationid="huanghaohang" creationdate="20180416T144330Z">
        <seg>图 28.1. Jetty 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Figure 59.1. Default buildSrc build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T133911Z" creationid="huanghaohang" creationdate="20191201T133852Z">
        <seg>图 59.1. 默认的 buildSrc 构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132209Z" creationid="huanghaohang" creationdate="20170913T132209Z">
        <seg>File</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File (read-only)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060518Z" creationid="huanghaohang" creationdate="20190607T060518Z">
        <seg>文件(只读)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File collections</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093018Z" creationid="huanghaohang" creationdate="20180218T093018Z">
        <seg>文件集合</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File dependencies allow you to directly add a set of files to a configuration, without first adding them to a repository. This can be useful if you cannot, or do not want to, place certain files in a repository. Or if you do not want to use any repositories at all for storing your dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105432Z" creationid="huanghaohang" creationdate="20190601T112427Z">
        <seg>文件依赖可以让你直接将一组文件添加到配置中，而不首先把它们添加到仓库。如果你无法或不想将某些文件放在仓库里，或者是如果你不想使用任何仓库来存储依赖的话，这会很有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File dependencies are not included in the published dependency descriptor for your project. However, file dependencies are included in transitive project dependencies within the same build. This means they cannot be used outside the current build, but they can be used with the same build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105503Z" creationid="huanghaohang" creationdate="20190602T105503Z">
        <seg>项目发布的依赖描述符不包含文件依赖，但同一个构建内的传递项目依赖会包含它。这意味着，文件依赖可以在同一个构建内使用，但不能在当前构建之外使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153925Z" creationid="huanghaohang" creationdate="20190527T153925Z">
        <seg>文件依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File explodedDist = mkdir(&lt;s5&gt;"$buildDir/explodedDist"&lt;/s5&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150909Z" creationid="huanghaohang" creationdate="20190617T150909Z">
        <seg>File explodedDist = mkdir(&lt;s5&gt;"$buildDir/explodedDist"&lt;/s5&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File getDestination() {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151155Z" creationid="huanghaohang" creationdate="20190727T151155Z">
        <seg>File getDestination() {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File sourceFile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131004Z" creationid="huanghaohang" creationdate="20190728T131004Z">
        <seg>File sourceFile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File srcDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150349Z" creationid="huanghaohang" creationdate="20170927T150349Z">
        <seg>File srcDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File srcDir = getSrcDir(project)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145013Z" creationid="huanghaohang" creationdate="20190817T145013Z">
        <seg>File srcDir = getSrcDir(project)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File srcDir = srcDir()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132528Z" creationid="huanghaohang" creationdate="20191201T132528Z">
        <seg>File srcDir = srcDir()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>File trees</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093024Z" creationid="huanghaohang" creationdate="20180218T093024Z">
        <seg>文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>FileCollection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150455Z" creationid="huanghaohang" creationdate="20170927T150455Z">
        <seg>FileCollection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>FileCollection collection = files(&lt;s0&gt;'src/file1.txt'&lt;/s0&gt;, &lt;s1&gt;new&lt;/s1&gt; File(&lt;s2&gt;'src/file2.txt'&lt;/s2&gt;), [&lt;s3&gt;'src/file3.txt'&lt;/s3&gt;, &lt;s4&gt;'src/file4.txt'&lt;/s4&gt;])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T131616Z" creationid="huanghaohang" creationdate="20170923T131616Z">
        <seg>FileCollection collection = files(&lt;s0&gt;'src/file1.txt'&lt;/s0&gt;, &lt;s1&gt;new&lt;/s1&gt; File(&lt;s2&gt;'src/file2.txt'&lt;/s2&gt;), [&lt;s3&gt;'src/file3.txt'&lt;/s3&gt;, &lt;s4&gt;'src/file4.txt'&lt;/s4&gt;])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Filtering at the level of specific test methods; executing a single test method</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T100432Z" creationid="huanghaohang" creationdate="20180405T100330Z">
        <seg>在指定的测试方法级别上过滤；执行单个测试方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Filtering based on custom annotations (future)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T130704Z" creationid="huanghaohang" creationdate="20180405T100440Z">
        <seg>基于自定义注解进行过滤（以后实现）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Filtering based on some custom runtime rule, e.g. particular value of a system property or some static state (future)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T130727Z" creationid="huanghaohang" creationdate="20180405T130727Z">
        <seg>基于一些自定义的运行时规则进行过滤，例如某个系统属性或一些静态的特定值（以后实现）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Filtering based on test hierarchy; executing all tests that extend ceratain base class (future)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T130657Z" creationid="huanghaohang" creationdate="20180405T130657Z">
        <seg>基于测试层次结构进行过滤；执行所有继承了某一基类的测试（以后实现）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizer task will be executed even if the finalized task fails.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044058Z" creationid="huanghaohang" creationdate="20170923T044058Z">
        <seg>即使最终的任务执行失败，析构器任务也会被执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizer tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021758Z" creationid="huanghaohang" creationdate="20180201T021758Z">
        <seg>析构器任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizer tasks are automatically added to the task graph when the finalized task is scheduled to run.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044021Z" creationid="huanghaohang" creationdate="20170923T044021Z">
        <seg>析构器任务会在最终的任务准备运行时，自动地添加到任务图中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizer tasks are useful in situations where build creates a resource that has to be cleaned up regardless of the build failing or succeeding. An example of such resource is a web container started before an integration test task and which should be always shut down, even if some of the tests fail.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044558Z" creationid="huanghaohang" creationdate="20170923T044558Z">
        <seg>在不管构建是否成功都必须清理所创建的资源的情况下，析构任务很有用。这种资源的一个例子是，在集成测试任务前开始启动的Web容器，即使有些测试失败也始终应该关闭。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finalizers tasks are an &lt;e0&gt;incubating&lt;/e0&gt; feature (see &lt;a1&gt;Section C.1.2, “Incubating”&lt;/a1&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043926Z" creationid="huanghaohang" creationdate="20170923T043926Z">
        <seg>析构器任务是一个 &lt;e0&gt;孵化中&lt;/e0&gt; 的功能 (请参阅 &lt;a1&gt; C.1.2 节， “孵化”&lt;/a1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, send announcements with the &lt;c0&gt;announce&lt;/c0&gt; method:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092043Z" creationid="huanghaohang" creationdate="20190124T092043Z">
        <seg>最后，使用&lt;c0&gt;announce&lt;/c0&gt;方法发送公告：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, since build scripts are Groovy scripts, you can always execute an Ant build as an external process. Your build script may contain statements like:&lt;c0&gt;"ant clean compile".execute()&lt;/c0&gt;. &lt;s1&gt;[&lt;a2&gt;8&lt;/a2&gt;]&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171213T135909Z" creationid="huanghaohang" creationdate="20171213T135909Z">
        <seg>最后，由于构建脚本是 Groovy 脚本，因此你始终可以将 Ant 构建作为一个外部进程来执行 Ant 构建。你的构建脚本可能包含有类似这样的语句：&lt;c0&gt;"ant clean compile".execute()&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, you may want to build and test everything in all projects. Any task you run in the root project folder will cause that same named task to be run on all the children. So you can just run &lt;c0&gt;gradle build&lt;/c0&gt; to build and test all projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T142650Z" creationid="huanghaohang" creationdate="20190622T142351Z">
        <seg>最后，你可能想要构建和测试所有项目中的所有内容。在根项目文件夹中运行的任何任务，都会导致所有子项目中的同名任务也被运行。因此，你可以只运行 &lt;c0&gt;gradle build&lt;/c0&gt; 来构建和测试所有项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>FindBugs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142321Z" creationid="huanghaohang" creationdate="20180516T142321Z">
        <seg>FindBugs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fine-tuning the dependency resolution process</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024119Z" creationid="huanghaohang" creationdate="20190606T024119Z">
        <seg>微调依赖解析过程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, consider the &lt;c0&gt;IncrementalReverseTask&lt;/c0&gt; executed against a set of inputs for the first time. In this case, all inputs will be considered "out of date":</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141844Z" creationid="huanghaohang" creationdate="20190707T141624Z">
        <seg>首先，考虑到 &lt;c0&gt;IncrementalReverseTask&lt;/c0&gt; 第一次针对一组输入执行。在这种情况下，所有输入都将认为是“过时的”：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Flat directory repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030034Z" creationid="huanghaohang" creationdate="20190603T030034Z">
        <seg>Flat 目录仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For Gradle the two &lt;c0&gt;action&lt;/c0&gt; tasks are just not related. If you execute the build from the &lt;c1&gt;messages&lt;/c1&gt; project Gradle executes them both because they have the same name and they are down the hierarchy. In the last example only one &lt;c2&gt;action&lt;/c2&gt; was down the hierarchy and therefore it was the only task that got executed. We need something better than this hack.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141717Z" creationid="huanghaohang" creationdate="20190616T141717Z">
        <seg>对于 Gradle 而言，这两个 &lt;c0&gt;action&lt;/c0&gt; 任务没有关联。如果你从 &lt;c1&gt;messages&lt;/c1&gt; 项目执行构建，Gradle 将同时执行它们两个，因为它们有相同的名称并且都在层次结构下。在最后一个示例中，只有一个 &lt;c2&gt;action&lt;/c2&gt; 是在这个层次结构下，因此它是唯一一个被执行的任务。我们需要比这种方式更好的实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For Java teams which share also Python or Ruby knowledge or are happy to learn it, the above arguments don't apply. The Gradle design is well-suited for creating another build script engine in JRuby or Jython. It just doesn't have the highest priority for us at the moment. We happily support any community effort to create additional build script engines.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072131Z" creationid="95" creationdate="20170723T071728Z">
        <seg>对于分享Python或Ruby知识并且乐于学习它们的Java团队来说，上面的论据并不适用。Gradle设计非常适全于在JRuby或Jython中创建另一种构建脚本引擎。目前我们并没有最高的优先级，我们很高兴任何社区来努力创建其他的构建脚本引擎。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a build script, the property access and method calls are delegated to a project object. Similarly property access and method calls within the settings file is delegated to a settings object. Have a look at &lt;a0&gt;&lt;c1&gt;Settings&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145715Z" creationid="huanghaohang" creationdate="20190612T145715Z">
        <seg>对于一个构建脚本，属性访问和方法调用会委托给一个项目对象。同样，设置文件中的属性访问和方法调用也会委派给设置对象。可以看一下 &lt;a0&gt;&lt;c1&gt;Settings&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a build type, a Gradle project will typically define a set of compiler/linker flags per tool chain.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035711Z" creationid="huanghaohang" creationdate="20190610T035711Z">
        <seg>对于一个构建类型，一个 Gradle 项目通常会为每个工具链定义一组编译器或链接器标志。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a complete list of standard Sonar properties, consult the &lt;a0&gt;Sonar documentation&lt;/a0&gt;. If you happen to use additional Sonar plugins, consult their documentation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023012Z" creationid="huanghaohang" creationdate="20181202T023012Z">
        <seg>有关标准 Sonar 属性的完整列表，请参阅 &lt;a0&gt;Sonar 文档&lt;/a0&gt;。如果你碰巧使用其他 Sonar 插件，请查阅它们的文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a component produced in a different Gradle project, the notation is similar.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023013Z" creationid="huanghaohang" creationdate="20190610T023013Z">
        <seg>对于在不同的 Gradle 项目产生的组件，表示方法是类似的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a default component, Gradle will attempt to create a native binary variant for each and every combination of &lt;c0&gt;buildType&lt;/c0&gt;, &lt;c1&gt;platform&lt;/c1&gt; and &lt;c2&gt;flavor&lt;/c2&gt; defined for the project. It is possible to override this on a per-component basis, by specifying the set of &lt;c3&gt;targetBuildTypes&lt;/c3&gt;, &lt;c4&gt;targetPlatforms&lt;/c4&gt; and/or &lt;c5&gt;targetFlavors&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053306Z" creationid="huanghaohang" creationdate="20190610T053306Z">
        <seg>对于一个默认组件，Gradle 将尝试为项目定义的每个 &lt;c0&gt;buildType&lt;/c0&gt;，&lt;c1&gt;platform&lt;/c1&gt; 和 &lt;c2&gt;flavor&lt;/c2&gt; 及它们的每一种组合创建本机二进制变体。通过指定 &lt;c3&gt;targetBuildTypes&lt;/c3&gt;，&lt;c4&gt;targetPlatforms&lt;/c4&gt; 或 &lt;c5&gt;targetFlavor&lt;/c5&gt;的集合，是可以在项目的每个组件的基础上重写的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a dynamic version, a 'higher' static version is preferred over a 'lower' version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T032940Z" creationid="huanghaohang" creationdate="20190604T032940Z">
        <seg>对于动态版本，“较高”的静态版本优先于“较低”的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a given variant, Gradle will attempt to find a &lt;a0&gt;&lt;c1&gt;ToolChain&lt;/c1&gt;&lt;/a0&gt; that is able to build for the target platform. Available tool chains are searched in the order defined. See the &lt;a2&gt;tool chain&lt;/a2&gt; section below for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052151Z" creationid="huanghaohang" creationdate="20190610T052151Z">
        <seg>对于给定的变体，Gradle 将尝试查找能够为目标平台构建的 &lt;a0&gt;&lt;c1&gt;ToolChain&lt;/c1&gt;&lt;/a0&gt; 。所有可用的工具链将按照定义的顺序进行查找。更多细节请参阅下面的&lt;a2&gt;工具链&lt;/a2&gt;部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a library named 'main', files in &lt;c0&gt;src/main/headers&lt;/c0&gt; are considered the “public” or “exported” headers. Header files that should not be exported (but are used internally) should be placed inside the &lt;c1&gt;src/main/c&lt;/c1&gt; directory (though be aware that such header files should always be referenced in a manner relative to the file including them).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051715Z" creationid="huanghaohang" creationdate="20190609T051715Z">
        <seg>对于名为“main”的库，&lt;c0&gt;src/main/headers&lt;/c0&gt; 中的文件都被视为“public”或“exported”头。不应导出（但内部使用）的头文件应放在 &lt;c1&gt;src/main/c&lt;/c1&gt; 目录内（不过请注意，应该始终以包含它们的文件的相对路径这样一种方式来引用这些头文件）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a library named 'main', files in &lt;c0&gt;src/main/headers&lt;/c0&gt; are considered the “public” or “exported” headers. Header files that should not be exported (but are used internally) should be placed inside the &lt;c1&gt;src/main/cpp&lt;/c1&gt; directory (though be aware that such header files should always be referenced in a manner relative to the file including them).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051237Z" creationid="huanghaohang" creationdate="20190609T043410Z">
        <seg>对于名为“main”的库，&lt;c0&gt;src/main/headers&lt;/c0&gt; 中的文件都被视为“public”或“exported”头。不应导出（但内部使用）的头文件应放在 &lt;c1&gt;src/main/cpp&lt;/c1&gt; 目录内（不过请注意，应该始终以包含它们的文件的相对路径这样一种方式来引用这些头文件）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a simple transformer task like this, the task action simply needs to generate output files for any out-of-date inputs, and delete output files for any removed inputs.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T135110Z" creationid="huanghaohang" creationdate="20190706T135110Z">
        <seg>对于像这样的简单转换任务，任务操作只需要对任何过时的输入生成输出文件，并删除任何已移除的输入的输出文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a single project build, the workflow of the &lt;s0&gt;&lt;e1&gt;after initialization&lt;/e1&gt;&lt;/s0&gt; phases are pretty simple. The build script is executed against the project object that was created during the initialization phase. Then Gradle looks for tasks with names equal to those passed as command line arguments. If these task names exist, they are executed as a separate build in the order you have passed them. The configuration and execution for multi-project builds is discussed in &lt;a2&gt;Chapter 56, &lt;i3&gt;Multi-project Builds&lt;/i3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145126Z" creationid="huanghaohang" creationdate="20190613T145126Z">
        <seg>对于单项目构建， &lt;s0&gt;&lt;e1&gt;初始化后&lt;/e1&gt;&lt;/s0&gt; 阶段的工作流程相当简单。构建脚本会针对初始化阶段期间创建的项目对象执行。然后 Gradle 会查找与作为命令行参数传进来的名称相同的任务名。如果这些任务名存在，那么会按参数的顺序将这些任务作为单独的构建执行。关于多项目构建的配置与执行，在《&lt;a2&gt;第五十六章，&lt;i3&gt;多项目构建&lt;/i3&gt;&lt;/a2&gt;》中有论述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a task to be “signable”, it must produce an archive of some type. Tasks that do this are the &lt;a0&gt;&lt;c1&gt;Tar&lt;/c1&gt;&lt;/a0&gt;, &lt;a2&gt;&lt;c3&gt;Zip&lt;/c3&gt;&lt;/a2&gt;, &lt;a4&gt;&lt;c5&gt;Jar&lt;/c5&gt;&lt;/a4&gt;, &lt;a6&gt;&lt;c7&gt;War&lt;/c7&gt;&lt;/a6&gt; and &lt;a8&gt;&lt;c9&gt;Ear&lt;/c9&gt;&lt;/a8&gt; tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140750Z" creationid="huanghaohang" creationdate="20190608T140750Z">
        <seg>一个“可签名”的任务，必须输出某种类型的归档。这样的任务是 &lt;a0&gt;&lt;c1&gt;Tar&lt;/c1&gt;&lt;/a0&gt;， &lt;a2&gt;&lt;c3&gt;Zip&lt;/c3&gt;&lt;/a2&gt;， &lt;a4&gt;&lt;c5&gt;Jar&lt;/c5&gt;&lt;/a4&gt;， &lt;a6&gt;&lt;c7&gt;War&lt;/c7&gt;&lt;/a6&gt; 及 &lt;a8&gt;&lt;c9&gt;Ear&lt;/c9&gt;&lt;/a8&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For a task to process inputs incrementally, that task must contain an &lt;e0&gt;incremental task action&lt;/e0&gt;. This is a task action method that contains a single &lt;a1&gt;&lt;c2&gt;IncrementalTaskInputs&lt;/c2&gt;&lt;/a1&gt; parameter, which indicates to Gradle that the action will process the changed inputs only.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134437Z" creationid="huanghaohang" creationdate="20190706T134437Z">
        <seg>对于一个要增量处理输入的任务，它必须包含一个&lt;e0&gt;增量任务操作&lt;/e0&gt;。这是一个任务操作方法，它包含了一个 &lt;a1&gt;&lt;c2&gt;IncrementalTaskInputs&lt;/c2&gt;&lt;/a1&gt; 参数，该参数提示 Gradle 这个操作将只处理那些更改的输入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For above sorts of workflows, it is important that the startup cost of invoking Gradle is as small as possible.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133759Z" creationid="huanghaohang" creationdate="20180108T133759Z">
        <seg>对以上各种工作流来说，让调用 Gradle 的启动成本尽可能小是很重要的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For adding a custom Maven repository you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033632Z" creationid="huanghaohang" creationdate="20190603T033612Z">
        <seg>要添加自定义 Maven 仓库，你可以如下操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For all the details of dependency resolution, see &lt;a0&gt;Chapter 50, &lt;i1&gt;Dependency Management&lt;/i1&gt;&lt;/a0&gt;, and for artifact publication see &lt;a2&gt;Chapter 51, &lt;i3&gt;Publishing artifacts&lt;/i3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051234Z" creationid="huanghaohang" creationdate="20170908T051234Z">
        <seg>有关依赖解析的所有细节，请参阅《&lt;a0&gt;第五十章，&lt;i1&gt;依赖管理&lt;/i1&gt;&lt;/a0&gt;》；而关于构件发布则请参阅《&lt;a2&gt;第五十一章， &lt;i3&gt;发布构件&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For an archive to be a candidate for comparison, it must be added as an artifact of the archives configuration. Take a look at &lt;a0&gt;Chapter 51, &lt;i1&gt;Publishing artifacts&lt;/i1&gt;&lt;/a0&gt; for more information on how to configure and add artifacts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141536Z" creationid="huanghaohang" creationdate="20210515T141425Z">
        <seg>对于要用于比较的归档文件，它必须被添加为archives配置的构件。有关如何配置和添加构建件的更多信息，请参阅《&lt;a0&gt;第51章，&lt;i1&gt;发布构件&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For command line usage take a look dedicated section in &lt;a0&gt;Appendix D, &lt;i1&gt;Gradle Command Line&lt;/i1&gt;&lt;/a0&gt;. If you are tired of using the same command line options again and again, take a look at &lt;a2&gt;Section 20.1, “Configuring the build environment via gradle.properties”&lt;/a2&gt;. The section contains information on how to configure certain behavior of the daemon (including turning on the daemon by default) in a more 'persistent' way.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025344Z" creationid="huanghaohang" creationdate="20180120T025344Z">
        <seg>对于命令行的用法，可以看看专题《&lt;a0&gt;附录 D，&lt;i1&gt;Gradle 命令行&lt;/i1&gt;&lt;/a0&gt;》。如果你已经厌倦了一次又一次地使用相同的命令行选项，可以看《&lt;a2&gt;第 20.1 节，“通过 gradle.properties 配置构建环境”&lt;/a2&gt;》。这一章节包含了有关如何以一种"持久化"的方式配置守护进程某些行为（包括默认情况下开启守护进程）的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each &lt;a0&gt;&lt;c1&gt;NativeBinary&lt;/c1&gt;&lt;/a0&gt; that can be produced by a build, a single &lt;e2&gt;lifecycle task&lt;/e2&gt; is constructed that can be used to create that binary, together with a set of other tasks that do the actual work of compiling, linking or assembling the binary.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T031949Z" creationid="huanghaohang" creationdate="20190609T031949Z">
        <seg>对于由构建产生的每一个 &lt;a0&gt;&lt;c1&gt;NativeBinary&lt;/c1&gt;&lt;/a0&gt;，我们构造了一个&lt;e2&gt;生命周期任务&lt;/e2&gt;，以及一组其他任务用于创建该二进制文件。这组任务执行编译，链接或组装二进制文件的实际工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each &lt;a0&gt;&lt;c1&gt;TestSuiteExecutableBinary&lt;/c1&gt;&lt;/a0&gt;, Gradle will create a task to execute this binary, which will run all of the registered CUnit tests. The generated test results will be located in the &lt;c2&gt;&lt;e3&gt;&lt;c4&gt;${build.dir}&lt;/c4&gt;&lt;/e3&gt;/test-results&lt;/c2&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T094008Z" creationid="huanghaohang" creationdate="20190611T090211Z">
        <seg>对于每个 &lt;a0&gt;&lt;c1&gt;TestSuiteExecutableBinary&lt;/c1&gt;&lt;/a0&gt;， Gradle 将创建一个任务来执行此二进制文件，这个任务将运行所有已注册的 CUnit 测试。 生成的测试结果将位于 &lt;c2&gt;&lt;e3&gt;&lt;c4&gt;{build.dir}&lt;/c4&gt;&lt;/e3&gt;/test-results&lt;/c2&gt; 目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each configuration in your project, Gradle provides the tasks &lt;c0&gt;upload&lt;e1&gt;&lt;c2&gt;ConfigurationName&lt;/c2&gt;&lt;/e1&gt;&lt;/c0&gt; and &lt;c3&gt;build&lt;e4&gt;&lt;c5&gt;ConfigurationName&lt;/c5&gt;&lt;/e4&gt;&lt;/c3&gt;. &lt;s6&gt;[&lt;a7&gt;18&lt;/a7&gt;]&lt;/s6&gt; Execution of these tasks will build or upload the artifacts belonging to the respective configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T072223Z" creationid="huanghaohang" creationdate="20190606T072115Z">
        <seg>对于项目中的每个配置，Gradle 提供了 &lt;c0&gt;upload&lt;e1&gt;&lt;c2&gt;ConfigurationName&lt;/c2&gt;&lt;/e1&gt;&lt;/c0&gt; 和 &lt;c3&gt;build&lt;e4&gt;&lt;c5&gt;ConfigurationName&lt;/c5&gt;&lt;/e4&gt;&lt;/c3&gt; 任务。&lt;s6&gt;[&lt;a7&gt;18&lt;/a7&gt;]&lt;/s6&gt; 执行这些任务会构建或上传属于各自配置的工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each executable binary produced, the &lt;c0&gt;cpp&lt;/c0&gt; plugin provides an &lt;c1&gt;install${binary.name}&lt;/c1&gt; task, which creates a development install of the executable, along with the shared libraries it requires. This allows you to run the executable without needing to install the shared libraries in their final locations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T033416Z" creationid="huanghaohang" creationdate="20190609T033416Z">
        <seg>对于生成的每个可执行二进制文件，&lt;c0&gt;cpp&lt;/c0&gt; 插件提供了 &lt;c1&gt;install${binary.name}&lt;/c1&gt; 任务，该任务将创建可执行文件的开发安装，以及它所需要的共享库。 它允许你在不需要在其最终位置安装共享库的情况下运行可执行文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each executable or library defined, Gradle is able to build a number of different native binary variants. Examples of different variants include debug vs release binaries, 32-bit vs 64-bit binaries, and binaries produced with different custom preprocessor flags.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023527Z" creationid="huanghaohang" creationdate="20190610T023527Z">
        <seg>对于每个定义的可执行文件或库，Gradle 能够构建多个不同的本机二进制变体。这样的示例包括调试与发布的二进制文件，32位与64位的二进制文件，以及使用不同的自定义预处理器标志生成的二进制文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each extra distribution set you add to the project, the distribution plugin adds the following tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134001Z" creationid="huanghaohang" creationdate="20190127T134001Z">
        <seg>对于你向项目中添加的每一个额外的分发集，分发插件都会添加以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each source set you add to the project, the Java plugin adds the following compilation tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073302Z" creationid="haohang" creationdate="20180312T073302Z">
        <seg>对于你添加到项目中的每一个源集，Java 插件将添加以下的编译任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each source set you add to the project, the Java plugins adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054236Z" creationid="haohang" creationdate="20180313T054236Z">
        <seg>对于你添加到项目中的每个源集，Java 插件都会添加以下的依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example you can configure your build to generate code coverage using the &lt;c0&gt;application&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093749Z" creationid="huanghaohang" creationdate="20180715T093749Z">
        <seg>例如，你可以配置你的构建使用 &lt;c0&gt;application&lt;/c0&gt; 插件来生成代码覆盖率。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For further details on extra properties and their API, see &lt;a0&gt;&lt;c1&gt;ExtraPropertiesExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135510Z" creationid="huanghaohang" creationdate="20170913T135510Z">
        <seg>有关额外属性和其 API 的详细信息，请参阅&lt;a0&gt;&lt;c1&gt;ExtraPropertiesExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For global Sonar properties, use the &lt;c0&gt;withGlobalProperties&lt;/c0&gt; hook on &lt;a1&gt;&lt;c2&gt;SonarRootModel&lt;/c2&gt;&lt;/a1&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135427Z" creationid="huanghaohang" creationdate="20180816T135427Z">
        <seg>对于全局的 Sonar 属性，可以使用 &lt;a1&gt;&lt;c2&gt;SonarRootModel&lt;/c2&gt;&lt;/a1&gt; 上的 &lt;c0&gt;withGlobalProperties&lt;/c0&gt; 钩子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For grouping JUnit test classes and methods JUnit 4.8 introduces the concept of categories. &lt;s0&gt;[&lt;a1&gt;9&lt;/a1&gt;]&lt;/s0&gt; The &lt;c2&gt;test&lt;/c2&gt; task allows the specification of the JUnit categories you want to include and exclude.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T041811Z" creationid="huanghaohang" creationdate="20180405T155943Z">
        <seg>为对 JUnit 的测试类和方法进行分组，JUnit 4.8 引入了类别的概念。 &lt;s0&gt;[&lt;a1&gt;9&lt;/a1&gt;]&lt;/s0&gt;&lt;c2&gt;test&lt;/c2&gt; 任务允许指定要包含和排除的 JUnit 类别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For many projects there is not one right set of dependencies (as more or less imposed by the POM format).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T152131Z" creationid="huanghaohang" creationdate="20190605T152131Z">
        <seg>对于许多项目而言，没有一组正确依赖（因 POM 格式的影响会多或少）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more advanced uses, you can define a task dependency using a closure. When evaluated, the closure is passed the task whose dependencies are being calculated. The closure should return a single &lt;c0&gt;Task&lt;/c0&gt; or collection of &lt;c1&gt;Task&lt;/c1&gt; objects, which are then treated as dependencies of the task. The following example adds a dependency from &lt;c2&gt;taskX&lt;/c2&gt; to all the tasks in the project whose name starts with &lt;c3&gt;lib&lt;/c3&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130910Z" creationid="huanghaohang" creationdate="20170919T130910Z">
        <seg>对于更高级的用法，你可以使用闭包来定义任务依赖。在Gradle评估时，这个闭包会被传入正在计算依赖的任务。这个闭包应该返回一个&lt;c0&gt;Task&lt;/c0&gt;或&lt;c1&gt;Task&lt;/c1&gt;对象的集合，然后返回值会被当作任务的依赖。以下示例添加了&lt;c2&gt;taskX&lt;/c2&gt;对名称以&lt;c3&gt;lib&lt;/c3&gt;开头的所有任务的依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more details and examples please see the &lt;a0&gt;&lt;c1&gt;TestFilter&lt;/c1&gt;&lt;/a0&gt; reference.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131723Z" creationid="huanghaohang" creationdate="20180405T131723Z">
        <seg>有关更多的详细信息和示例，请参阅 &lt;a0&gt;&lt;c1&gt;TestFilter&lt;/c1&gt;&lt;/a0&gt; 的文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more details, take a look at the API documentation for&lt;a0&gt;&lt;c1&gt;ResolutionStrategy&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151349Z" creationid="huanghaohang" creationdate="20190605T151349Z">
        <seg>更多详细信息请参阅 &lt;a0&gt;&lt;c1&gt;ResolutionStrategy&lt;/c1&gt;&lt;/a0&gt; 的 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about task dependencies, see the &lt;a0&gt;&lt;c1&gt;Task&lt;/c1&gt;&lt;/a0&gt; API.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130931Z" creationid="huanghaohang" creationdate="20170919T130931Z">
        <seg>有关任务依赖的详细信息，请参阅&lt;a0&gt;&lt;c1&gt;Task&lt;/c1&gt;&lt;/a0&gt;的 API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information see the API documentation for &lt;a0&gt;&lt;c1&gt;ProjectDependency&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112323Z" creationid="huanghaohang" creationdate="20190601T112323Z">
        <seg>详细信息请参阅&lt;a0&gt;&lt;c1&gt;ProjectDependency&lt;/c1&gt;&lt;/a0&gt;的 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more on writing your own plugins, see &lt;a0&gt;Chapter 58, &lt;i1&gt;Writing Custom Plugins&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T095813Z" creationid="huanghaohang" creationdate="20180130T095813Z">
        <seg>关于编写自己的插件的详细信息，请参阅《&lt;a0&gt;第 58章，&lt;i1&gt;编写自定义插件&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For most multi-project builds, there is some configuration which is common to all projects. In our sample, we will define this common configuration in the root project, using a technique called &lt;e0&gt;configuration injection&lt;/e0&gt;. Here, the root project is like a container and the &lt;c1&gt;subprojects&lt;/c1&gt; method iterates over the elements of this container - the projects in this instance - and injects the specified configuration. This way we can easily define the manifest content for all archives, and some common dependencies:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124401Z" creationid="95" creationdate="20170803T123813Z">
        <seg>对于大多数的多项目构建，会有一些共同的配置。在我们的例子中，将会在根项目中使用一种叫做&lt;e0&gt;配置注入&lt;/e0&gt;的技术来定义这些公共配置。在这里，这个根项目就像一个容器，&lt;c1&gt;subprojects&lt;/c1&gt; 的方法会遍历这个容器的一些元素——这个实例中的所有子项目，并且注入指定的配置。这样我们就可以轻松地定义所有存档的清单内容，以及一些公共的依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For multi-project builds there can be only one &lt;c0&gt;buildSrc&lt;/c0&gt; directory, which has to be in the root project directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T133755Z" creationid="huanghaohang" creationdate="20191201T133755Z">
        <seg>对于多项目构建，只能有一个在根项目目录中的 &lt;c0&gt;buildSrc&lt;/c0&gt; 目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For multi-project builds, the dependencies declared in the a project's build script, are available to the build scripts of all sub-projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141141Z" creationid="huanghaohang" creationdate="20191202T141141Z">
        <seg>对于多项目构建，定义在一个项目的构建脚本中的依赖，可用于所有子项目的构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For now, we will look at defining some simple tasks in a build with one project. Later chapters will look at working with multiple projects and more about working with projects and tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T143910Z" creationid="95" creationdate="20170724T143910Z">
        <seg>现在，我们来看一下如何在一个项目的构建中定义一些简单的任务。后续的章节将更多的关注多项目的构建，以及多项目和多任务的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For per-project Sonar properties, use the &lt;c0&gt;withProjectProperties&lt;/c0&gt; hook on &lt;a1&gt;&lt;c2&gt;SonarProject&lt;/c2&gt;&lt;/a1&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135512Z" creationid="huanghaohang" creationdate="20180816T135512Z">
        <seg>对于每个项目的 Sonar 属性，使用 &lt;a1&gt;&lt;c2&gt;SonarProject&lt;/c2&gt;&lt;/a1&gt; 上的 &lt;c0&gt;withProjectProperties&lt;/c0&gt; 钩子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For projects that also apply the Java Plugin, The JaCoCo plugin automatically adds the following tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093919Z" creationid="huanghaohang" creationdate="20180715T093850Z">
        <seg>对于同时也应用了 Java 插件的项目，JaCoCo 插件会自动添加以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks. But you can easily do it in another way. &lt;s0&gt;[&lt;a1&gt;26&lt;/a1&gt;]&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141250Z" creationid="huanghaohang" creationdate="20191202T141250Z">
        <seg>出于我们尚未完全理解的原因，Ant 的可选任务不会选取外部依赖，但你可以很容易地用用另一种方式来实现。&lt;s0&gt;[&lt;a1&gt;26&lt;/a1&gt;]&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For running Gradle, add &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;GRADLE_HOME&lt;/c2&gt;&lt;/e1&gt;/bin&lt;/c0&gt; to your &lt;c3&gt;PATH&lt;/c3&gt; environment variable. Usually, this is sufficient to run Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T115222Z" creationid="95" creationdate="20170723T115222Z">
        <seg>要运行Gradle，您需要将 &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;GRADLE_HOME&lt;/c2&gt;&lt;/e1&gt;/bin&lt;/c0&gt; 添加到您的 &lt;c3&gt;PATH&lt;/c3&gt;环境变量中。通常添加了之后就可以运行Gradle了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For the details on how to configure the wrapper, see &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T140104Z" creationid="huanghaohang" creationdate="20191219T140104Z">
        <seg>有关如何配置包装器的详细信息，请参见 &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For the examples below we have the following dependencies setup:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142751Z" creationid="huanghaohang" creationdate="20190602T142751Z">
        <seg>下面的示例我们使用以下的依赖设置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For the “&lt;c0&gt;ivy-publish&lt;/c0&gt;” plugin to have any effect, a &lt;a1&gt;&lt;c2&gt;IvyPublication&lt;/c2&gt;&lt;/a1&gt; must be added to the set of publications. This publication determines which artifacts are actually published as well as the details included in the associated Ivy module descriptor file. A publication can be configured by adding components, customizing artifacts, and by modifying the generated module descriptor file directly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150405Z" creationid="huanghaohang" creationdate="20210518T150405Z">
        <seg>要使“&lt;c0&gt;ivy-publish&lt;/c0&gt;”插件起作用，必须将一个 &lt;a1&gt;&lt;c2&gt;IvyPublication&lt;/c2&gt;&lt;/a1&gt; 添加到publications集合里。这个publications决定了实际要发布的工件，以及在关联的Ivy模块描述符文件中包含的详细信息。通过添加组件，自定义工件以及直接修改生成的模块描述符文件，可以配置一个publication。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Force versions can also be used to deal with rogue metadata of transitive dependencies. If a transitive dependency has poor quality metadata that leads to problems at dependency resolution time, you can force Gradle to use a newer, fixed version of this dependency. For an example, see &lt;a0&gt;&lt;c1&gt;ResolutionStrategy&lt;/c1&gt;&lt;/a0&gt;. Note that 'dependency resolve rules' (outlined below) provide a more powerful mechanism for replacing a broken module dependency. See &lt;a2&gt;Section 50.8.2.3, “Blacklisting a particular version with a replacement”&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T034854Z" creationid="huanghaohang" creationdate="20190604T034854Z">
        <seg>强制版本也可用于处理传递依赖的恶意元数据。如果传递依赖的元数据质量有问题，导致依赖解析时出现问题，那么可以强制 Gradle 使用这个依赖较新的修复版本。有关示例，请参见 &lt;a0&gt;&lt;c1&gt;ResolutionStrategy&lt;/c1&gt;&lt;/a0&gt;。注意，“依赖解析规则”（见下文）提供了一种更强大的机制来取代已损坏的模块依赖。请参阅 &lt;a2&gt;第 50.8.2.3 节，《将特定版本列入黑名单并替换》&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Forcing a module version tells Gradle to always use a specific version for given dependency (transitive or not), overriding any version specified in a published module descriptor. This can be very useful when tackling version conflicts - for more information see &lt;a0&gt;Section 50.2.3, “Resolve version conflicts”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T034334Z" creationid="huanghaohang" creationdate="20190604T033920Z">
        <seg>强制使用一个模块版本，是指示 Gradle 对于给定的依赖（传递或非传递），始终使用一个特定的版本，并覆盖在发布的模块描述符中所指定的任何版本。当处理版本冲突时，这非常有用——有关详细信息，请参阅 &lt;a0&gt;第 50.2.3 节，《解决版本冲突》&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Free and open source</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T065551Z" creationid="95" creationdate="20170723T065551Z">
        <seg>自由开源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From being a pleasure to be used embedded to its many hooks over the whole lifecycle of build execution, Gradle allows you to monitor and customize its configuration and execution behavior to its very core.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T041546Z" creationid="95" creationdate="20170722T041546Z">
        <seg>来自于惯在整个构建执行的生命周期中习嵌入钩子的乐趣，Gradle允许你监视以及对它的配置和它核心的执行行为进行定制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Full support for your existing Maven or Ivy repository infrastructure.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T135843Z" creationid="95" creationdate="20170721T135843Z">
        <seg>完全支持已有的Maven或Ivy仓库结构。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fully qualified class name or fully qualified method name is supported, e.g. "org.gradle.SomeTest", "org.gradle.SomeTest.someMethod"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T130803Z" creationid="huanghaohang" creationdate="20180405T130803Z">
        <seg>支持完整的限定类名称或完整的限定方法名称，例如“org.gradle.SomeTest”、“org.gradle.SomeTest.someMethod”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Further Information</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092156Z" creationid="huanghaohang" creationdate="20190124T092156Z">
        <seg>补充信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Further things to consider</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070351Z" creationid="huanghaohang" creationdate="20190205T070351Z">
        <seg>还需要考虑的事情</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Furthermore, it is possible to specify settings that apply to all binaries produces for a particular &lt;c0&gt;executable&lt;/c0&gt; or &lt;c1&gt;library&lt;/c1&gt; component:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012112Z" creationid="huanghaohang" creationdate="20190610T012112Z">
        <seg>此外，还可以指定设置应用于某个特定的 &lt;c0&gt;executable&lt;/c0&gt; 或 &lt;c1&gt;library&lt;/c1&gt; 组件产生的所有二进制文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Future versions will provide support for comparing outcomes such as test execution (i.e. which tests were executed, which tests failed, etc.)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T142343Z" creationid="huanghaohang" creationdate="20210513T142343Z">
        <seg>未来的版本会提供对类似于测试执行（例如哪些测试被执行了，哪些测试失败了，等等）的构建结果比较的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Future versions will provide support for executing builds from other build systems such as Apache Ant or Apache Maven, as well as support for executing arbitrary processes (e.g. shell script based builds)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T140656Z" creationid="huanghaohang" creationdate="20210513T140656Z">
        <seg>未来的版本会支持从其他构建系统执行的构建，比如Apache Ant或Apache Maven，以及支持执行任意进程（比如基于shell脚本的构建）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GCC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022230Z" creationid="huanghaohang" creationdate="20190609T022230Z">
        <seg>GCC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GUI Setup</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145854Z" creationid="huanghaohang" creationdate="20170911T145854Z">
        <seg>GUI 设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GUI Task Tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143525Z" creationid="huanghaohang" creationdate="20170911T143525Z">
        <seg>GUI 任务树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gcc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084857Z" creationid="huanghaohang" creationdate="20190610T084857Z">
        <seg>Gcc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateBuildDashboard</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153742Z" creationid="95" creationdate="20190202T153742Z">
        <seg>GenerateBuildDashboard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateEclipseClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025953Z" creationid="huanghaohang" creationdate="20181210T025953Z">
        <seg>GenerateEclipseClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateEclipseJdt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030004Z" creationid="huanghaohang" creationdate="20181210T030004Z">
        <seg>GenerateEclipseJdt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateEclipseProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025941Z" creationid="huanghaohang" creationdate="20181210T025941Z">
        <seg>GenerateEclipseProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateEclipseWtpComponent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030017Z" creationid="huanghaohang" creationdate="20181210T030017Z">
        <seg>GenerateEclipseWtpComponent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateEclipseWtpFacet</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030039Z" creationid="huanghaohang" creationdate="20181210T030039Z">
        <seg>GenerateEclipseWtpFacet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateIdeaModule</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061120Z" creationid="huanghaohang" creationdate="20181212T061120Z">
        <seg>GenerateIdeaModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateIdeaProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061054Z" creationid="huanghaohang" creationdate="20181212T061054Z">
        <seg>GenerateIdeaProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GenerateIdeaWorkspace</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061128Z" creationid="huanghaohang" creationdate="20181212T061128Z">
        <seg>GenerateIdeaWorkspace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generated POMs can be found in &lt;c0&gt;&lt;buildDir&gt;/poms&lt;/c0&gt;. They can be further customized via the &lt;a1&gt;&lt;c2&gt;MavenPom&lt;/c2&gt;&lt;/a1&gt; API. For example, you might want the artifact deployed to the Maven repository to have a different version or name than the artifact generated by Gradle. To customize these you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100648Z" creationid="huanghaohang" creationdate="20190607T100648Z">
        <seg>生成的 POM 可以在 &lt;c0&gt;&lt;buildDir&gt;/poms&lt;/c0&gt; 中找到。它们可以通过 &lt;a1&gt;&lt;c2&gt;MavenPom&lt;/c2&gt;&lt;/a1&gt; API 进一步自定义。比如，你可能希望部署到 Maven 仓库的工件版本或名称与 Gradle 生成的工件不同。要自定义这些内容，你可以这样做：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates API documentation for the production Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120956Z" creationid="huanghaohang" creationdate="20180406T120956Z">
        <seg>为 Groovy 的生产源文件生成 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates API documentation for the production Java source, using Javadoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063009Z" creationid="haohang" creationdate="20180312T063009Z">
        <seg>使用 Javadoc 生成生产的 Java 源代码的API文档</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates API documentation for the production Scala source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010633Z" creationid="huanghaohang" creationdate="20180407T010633Z">
        <seg>为 Scala 生产源文件生成 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates Gradle wrapper files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213749Z" creationid="95" creationdate="20190131T213749Z">
        <seg>生成 Gradle wrapper 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates a Gradle project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213738Z" creationid="95" creationdate="20190131T213738Z">
        <seg>生成一个 Gradle 项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates all Eclipse configuration files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025848Z" creationid="huanghaohang" creationdate="20181210T025832Z">
        <seg>生成所有的 Eclipse 配置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates all IDEA configuration files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061029Z" creationid="huanghaohang" creationdate="20181212T061029Z">
        <seg>生成所有的 IDEA 配置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates all project reports.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040353Z" creationid="huanghaohang" creationdate="20190123T040353Z">
        <seg>生成所有项目报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates an HTML dependency and dependency insight report for the project or a set of projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040320Z" creationid="huanghaohang" creationdate="20190123T040320Z">
        <seg>为项目或项目集生成 HTML 依赖和依赖洞察报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates an IDEA module file. Also generates an IDEA project and workspace file if the project is the root project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031010Z" creationid="huanghaohang" creationdate="20181212T031010Z">
        <seg>生成一个 IDEA 模块文件。如果该项目是根项目，还会生成一个 IDEA 项目和工作区文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates build dashboard report.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090210Z" creationid="huanghaohang" creationdate="20180211T090210Z">
        <seg>生成构建仪表板报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates code coverage report for the test task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093932Z" creationid="huanghaohang" creationdate="20180715T093932Z">
        <seg>为测试任务生成代码覆盖率报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates dependencies (both external and inter-module)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145452Z" creationid="95" creationdate="20190201T145452Z">
        <seg>生成依赖（包括外部的和模块间的）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates download repositories (inc. local Maven repository)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145558Z" creationid="95" creationdate="20190201T145558Z">
        <seg>生成下载仓库（包括本地Maven仓库）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates files that are used by &lt;a0&gt;Eclipse IDE&lt;/a0&gt;, thus making it possible to import the project into Eclipse. See also &lt;a1&gt;Chapter 7, &lt;i2&gt;Java Quickstart&lt;/i2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180210T135845Z" creationid="huanghaohang" creationdate="20180210T135845Z">
        <seg>生成 &lt;a0&gt;Eclipse IDE&lt;/a0&gt; 所用到的文件，从而使项目能够导入到 Eclipse。另请参阅《&lt;a1&gt;第七章，&lt;i2&gt;Java 快速入门&lt;/i2&gt;&lt;/a1&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates files that are used by &lt;a0&gt;Intellij IDEA IDE&lt;/a0&gt;, thus making it possible to import the project into IDEA.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085811Z" creationid="huanghaohang" creationdate="20180211T085811Z">
        <seg>生成 &lt;a0&gt;Intellij IDEA IDE&lt;/a0&gt; 所用到的文件，从而使项目能够导入到 IDEA。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates general metadata - id, description and version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145341Z" creationid="95" creationdate="20190201T145341Z">
        <seg>生成通用元数据——id，description 和 version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates global exclusions from Maven enforcer plugin settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145700Z" creationid="95" creationdate="20190201T145700Z">
        <seg>从 Maven enforcer 插件设置生成全局的 exclusions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates minimal &lt;c0&gt;.project&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025225Z" creationid="huanghaohang" creationdate="20181210T025225Z">
        <seg>生成最小的 &lt;c0&gt;.project&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates reports containing useful information about your Gradle build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085957Z" creationid="huanghaohang" creationdate="20180211T085957Z">
        <seg>生成包括了关于你的 Gradle 构建的有用信息的报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.classpath&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030000Z" creationid="huanghaohang" creationdate="20181210T030000Z">
        <seg>生成 &lt;c0&gt;.classpath&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.iml&lt;/c0&gt; file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061124Z" creationid="huanghaohang" creationdate="20181212T061124Z">
        <seg>生成 &lt;c0&gt;.iml&lt;/c0&gt; 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.ipr&lt;/c0&gt; file. This task is only added to the root project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061117Z" creationid="huanghaohang" creationdate="20181212T061117Z">
        <seg>生成 &lt;c0&gt;.ipr&lt;/c0&gt; 文件。此任务仅添加到根项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.iws&lt;/c0&gt; file. This task is only added to the root project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061149Z" creationid="huanghaohang" creationdate="20181212T061149Z">
        <seg>生成 &lt;c0&gt;.iws&lt;/c0&gt; 文件。此任务仅添加到根项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.project&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025949Z" creationid="huanghaohang" creationdate="20181210T025949Z">
        <seg>生成 &lt;c0&gt;.project&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.settings/org.eclipse.jdt.core.prefs&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030014Z" creationid="huanghaohang" creationdate="20181210T030014Z">
        <seg>生成 &lt;c0&gt;.settings/org.eclipse.jdt.core.prefs&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.settings/org.eclipse.wst.common.component&lt;/c0&gt; file only if &lt;c1&gt;eclipse-wtp&lt;/c1&gt; plugin was applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030036Z" creationid="huanghaohang" creationdate="20181210T030036Z">
        <seg>只有当 &lt;c1&gt;eclipse-wtp&lt;/c1&gt; 插件被应用的时候，生成 &lt;c0&gt;.settings/org.eclipse.wst.common.component&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the &lt;c0&gt;.settings/org.eclipse.wst.common.project.facet.core.xml&lt;/c0&gt; file only if &lt;c1&gt;eclipse-wtp&lt;/c1&gt; plugin was applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030050Z" creationid="huanghaohang" creationdate="20181210T030050Z">
        <seg>只有当 &lt;c1&gt;eclipse-wtp&lt;/c1&gt; 插件应用的时候，生成 &lt;c0&gt;.settings/org.eclipse.wst.common.project.facet.core.xml&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the project dependency report.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040016Z" creationid="huanghaohang" creationdate="20190123T040016Z">
        <seg>生成项目依赖项报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the project property report.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040331Z" creationid="huanghaohang" creationdate="20190123T040331Z">
        <seg>生成项目属性报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the project task report.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040336Z" creationid="huanghaohang" creationdate="20190123T040336Z">
        <seg>生成项目任务报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the source files for all ANTLR grammars for the given source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013634Z" creationid="huanghaohang" creationdate="20190123T013634Z">
        <seg>为给定源集的所有 ANTLR 语法生成源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the source files for all production ANTLR grammars.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013559Z" creationid="huanghaohang" creationdate="20190123T013559Z">
        <seg>为所有生产 ANTLR 语法生成源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generates the source files for all test ANTLR grammars.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013606Z" creationid="huanghaohang" creationdate="20190123T013606Z">
        <seg>为所有测试 ANTLR 语法生成源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generating Javadoc for a source set:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095358Z" creationid="haohang" creationdate="20180326T095358Z">
        <seg>为一个源集生成 Javadoc：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generating the POM file without publishing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T132923Z" creationid="95" creationdate="20170721T132923Z">
        <seg>-不发布的情况下生成POM文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Get feedback faster by running quick verification tasks before long verification tasks: eg. unit tests should run before integration tests.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030445Z" creationid="huanghaohang" creationdate="20170922T030445Z">
        <seg>在耗时较长的验证任务之前先运行较快的验证任务，可以更快地获得反馈：如，单元测试应在集成测试之前运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting Started</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014546Z" creationid="haohang" creationdate="20170801T014546Z">
        <seg>入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting help</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013439Z" creationid="huanghaohang" creationdate="20170919T013439Z">
        <seg>获取帮助</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting help writing build scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T125228Z" creationid="huanghaohang" creationdate="20170912T125228Z">
        <seg>获取有关编写构建脚本的帮助</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting input from the build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132344Z" creationid="huanghaohang" creationdate="20190728T132344Z">
        <seg>从构建中获取输入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a parameterized test method named &lt;c0&gt;aParameterizedTestMethod&lt;/c0&gt; that takes two parameters, it will be reported with the name: &lt;c1&gt;aParameterizedTestMethod(toStringValueOfParam1, toStringValueOfParam2)&lt;/c1&gt;. This makes identifying the parameter values for a particular iteration easy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104618Z" creationid="huanghaohang" creationdate="20180406T104618Z">
        <seg>给定一个带有两个参数，名为 &lt;c0&gt;aParameterizedTestMethod&lt;/c0&gt; 的参数化测试方法，它将使用这个名称进行报告 ：&lt;c1&gt;aParameterizedTestMethod(toStringValueOfParam1, toStringValueOfParam2)&lt;/c1&gt;。这使得在特定的迭代中，很容易识别参数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a required dependency, Gradle first attempts to resolve the &lt;s0&gt;&lt;e1&gt;module&lt;/e1&gt;&lt;/s0&gt; for that dependency. Each repository is inspected in order, searching first for a &lt;s2&gt;&lt;e3&gt;module descriptor&lt;/e3&gt;&lt;/s2&gt; file (POM or Ivy file) that indicates the presence of that module. If no module descriptor is found, Gradle will search for the presence of the primary &lt;s4&gt;&lt;e5&gt;module artifact&lt;/e5&gt;&lt;/s4&gt; file indicating that the module exists in the repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T032312Z" creationid="huanghaohang" creationdate="20190604T032312Z">
        <seg>给定一个所需要的依赖，Gradle 首先尝试解析该依赖的&lt;s0&gt;&lt;e1&gt;模块&lt;/e1&gt;&lt;/s0&gt;。每个仓库都按顺序进行检查，首先搜索指示该模块存在的 &lt;s2&gt;&lt;e3&gt;模块描述符&lt;/e3&gt;&lt;/s2&gt; 文件（POM 或 Ivy 文件）。如果没找到模块描述符，Gradle 将搜索表示模块存在于仓库中的主要 &lt;s4&gt;&lt;e5&gt;模块工件&lt;/e5&gt;&lt;/s4&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given that the project name is "&lt;c0&gt;myproject&lt;/c0&gt;" and version "&lt;c1&gt;1.2&lt;/c1&gt;", running "&lt;s2&gt;&lt;c3&gt;gradle customDistZip&lt;/c3&gt;&lt;/s2&gt;" will produce a ZIP file named "&lt;c4&gt;myproject-custom-1.2.zip&lt;/c4&gt;".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T060902Z" creationid="huanghaohang" creationdate="20190128T011911Z">
        <seg>鉴于项目的名称是“&lt;c0&gt;myproject&lt;/c0&gt;”，版本为“&lt;c1&gt;1.2&lt;/c1&gt;”，运行“&lt;s2&gt;&lt;c3&gt;gradle customDistZip&lt;/c3&gt;&lt;/s2&gt;”将会产生一个名为“&lt;c4&gt;myproject-custom-1.2.zip&lt;/c4&gt;”的 ZIP 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given the incremental task implementation &lt;a0&gt;above&lt;/a0&gt;, we can explore the various change scenarios by example. Note that the various mutation tasks ('updateInputs', 'removeInput', etc) are only present for demonstration purposes: these would not normally be part of your build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141618Z" creationid="huanghaohang" creationdate="20190707T141618Z">
        <seg>考虑到&lt;a0&gt;上面的&lt;/a0&gt;增量任务实现，我们可以通过示例探讨各种更改场景。请注意，各种变化的任务（“updateInputs”，“removeInput”等）仅用于演示：它们通常不会在构建脚本中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle API dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160202Z" creationid="huanghaohang" creationdate="20190527T160202Z">
        <seg>Gradle API 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034153Z" creationid="huanghaohang" creationdate="20180517T034153Z">
        <seg>Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle User Guide</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072244Z" creationid="haohang" creationdate="20170720T072244Z">
        <seg>Gradle 用户指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle allows any project to access any other project during both the configuration and execution phases. While this provides a great deal of power and flexibility to the build author, it also limits the flexibility that Gradle has when building those projects. For instance, this tight &lt;s0&gt;&lt;e1&gt;coupling&lt;/e1&gt;&lt;/s0&gt; of projects effectively prevents Gradle from building multiple projects in parallel, or from substituting a pre-built artifact in place of a project dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T150640Z" creationid="huanghaohang" creationdate="20190621T150640Z">
        <seg>Gradle 允许任何项目在配置和执行阶段期间访问其他项目。虽然这为构建作者提供了很大的控制性和灵活性，但也限制了 Gradle 在构建这些项目时本身所具有的灵活性。例如，项目的紧&lt;s0&gt;&lt;e1&gt;耦合&lt;/e1&gt;&lt;/s0&gt;会阻碍 Gradle 以并行方式构建多项目，或阻碍以预构建的工件替代项目依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle allows you to access any project of the multi-project build from any build script. The Project API provides a method called &lt;c0&gt;project()&lt;/c0&gt;, which takes a path as an argument and returns the Project object for this path. The capability to configure a project build from any build script we call &lt;e1&gt;cross project configuration&lt;/e1&gt;. Gradle implements this via &lt;e2&gt;configuration injection&lt;/e2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155248Z" creationid="huanghaohang" creationdate="20190614T155248Z">
        <seg>Gradle 允许你从任何构建脚本中访问多项目构建的任何项目。Project API 提供了一个叫做 &lt;c0&gt;project()&lt;/c0&gt; 的方法，它将路径作为参数，返回此路径的 Project 对象。这种从任何构建脚本中配置项目构建的功能，我们称之为&lt;e1&gt;跨项目配置&lt;/e1&gt;。Gradle 通过&lt;e2&gt;配置注入&lt;/e2&gt;来实现它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle allows you to define one or more default tasks for your build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023856Z" creationid="95" creationdate="20170729T023856Z">
        <seg>Gradle允许您在构建中定义一个或多个的默认任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle already has much of the information needed for Sonar Runner to successfully analyze a project. By preconfiguring the Sonar Runner based on that information, the need for manual configuration is reduced significantly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150929Z" creationid="huanghaohang" creationdate="20181201T150743Z">
        <seg>Gradle 已经拥有很多 Sonar Runner 成功分析一个项目所需的信息。通过基于这些信息对 Sonar Runner 进行预配置，显著降低了对手动配置的需求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle also provides a &lt;c0&gt;logger&lt;/c0&gt; property to a build script, which is an instance of &lt;a1&gt;&lt;c2&gt;Logger&lt;/c2&gt;&lt;/a1&gt;. This interface extends the SLF4J &lt;c3&gt;Logger&lt;/c3&gt; interface and adds a few Gradle specific methods to it. Below is an example of how this is used in the build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T012421Z" creationid="huanghaohang" creationdate="20180107T012421Z">
        <seg>Gradle还提供了一个 &lt;c0&gt;logger&lt;/c0&gt; 属性给构建脚本，它是一个 &lt;a1&gt;&lt;c2&gt;Logger&lt;/c2&gt;&lt;/a1&gt; 实例。该接口扩展了 SLF4J &lt;c3&gt;Logger&lt;/c3&gt; 接口，并添加了一些 Gradle 的特有方法。下面是关于如何在构建脚本中使用它的示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle also provides integration with the Java Util Logging, Jakarta Commons Logging and Log4j logging toolkits. Any log messages which your build classes write using these logging toolkits will be redirected to Gradle's logging system.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025704Z" creationid="huanghaohang" creationdate="20180107T025704Z">
        <seg>Gradle 还提供了对 Java Util Logging，Jakarta Commons Logging 和 Log4j 的日志工具的集成。构建中的类使用这些日志记录工具所输出的所有日志消息，都将被重定向到 Gradle 的日志系统上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle at its core intentionally provides little useful functionality for real world automation. All of the useful features, such as the ability to compile Java code for example, are added by &lt;s0&gt;&lt;e1&gt;plugins&lt;/e1&gt;&lt;/s0&gt;. Plugins add new tasks (e.g. &lt;a2&gt;&lt;c3&gt;JavaCompile&lt;/c3&gt;&lt;/a2&gt;), domain objects (e.g. &lt;a4&gt;&lt;c5&gt;SourceSet&lt;/c5&gt;&lt;/a4&gt;), conventions (e.g. main Java source is located at &lt;c6&gt;src/main/java&lt;/c6&gt;) as well as extending core objects and objects from other plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092739Z" creationid="huanghaohang" creationdate="20180130T090731Z">
        <seg>Gradle 在它的核心中有意地为真实世界的自动化提供一些有用的功能。所有有用的功能，例如能够编译 Java代码，都是通过&lt;s0&gt;&lt;e1&gt;插件&lt;/e1&gt;&lt;/s0&gt;来添加的。插件添加了新任务（如 &lt;a2&gt;&lt;c3&gt;JavaCompile&lt;/c3&gt;&lt;/a2&gt;），域对象（如 &lt;a4&gt;&lt;c5&gt;SourceSet&lt;/c5&gt;&lt;/a4&gt;），约定（如主要的 Java 源码是位于 &lt;c6&gt;的src/main/java&lt;/c6&gt;），以及从扩展的核心对象和其他插件的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle can adapt to any structure you have. Therefore you can always develop your Gradle build in the same branch where your production build lives and both can evolve in parallel. We usually recommend to write tests that make sure that the produced artifacts are similar. That way migration is as less disruptive and as reliable as possible. This is following the best-practices for refactoring by applying baby steps.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T063535Z" creationid="95" creationdate="20170723T060933Z">
        <seg>Gradle可以适应您现在任何结构的项目。因此您可以在生产构建所在的分支上随时开发你的Gradle构建，并且它们可以并行演进。我们通常建议编写测试用例，以确保生成的工件是类似的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle contains a highly sophisticated dependency caching mechanism, which seeks to minimise the number of remote requests made in dependency resolution, while striving to guarantee that the results of dependency resolution are correct and reproducible.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041246Z" creationid="huanghaohang" creationdate="20190605T041246Z">
        <seg>Gradle 包含了一种高度复杂的依赖缓存机制，它力求减少依赖解析中的远程请求数，同时努力保证依赖解析结果正确且可重现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle default</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135300Z" creationid="huanghaohang" creationdate="20180712T135300Z">
        <seg>Gradle 默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle determines the subset of the tasks, created and configured during the configuration phase, to be executed. The subset is determined by the task name arguments passed to the &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; command and the current directory. Gradle then executes each of the selected tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T142848Z" creationid="huanghaohang" creationdate="20190612T142848Z">
        <seg>Gradle 确定在配置阶段中创建和配置的要执行的任务子集。这个子集是由传给 &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; 命令的任务名称参数和当前目录所决定的。然后，Gradle 将执行每个选定的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle distinguishes between external dependencies and dependencies on projects which are part of the same multi-project build. For the latter you can declare &lt;e0&gt;Project Dependencies&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112301Z" creationid="huanghaohang" creationdate="20190601T112125Z">
        <seg>对于多项目构建，Gradle 能区分外部依赖与作为多项目构建的一部分的某个子项目上的依赖。对于后者，你可以声明&lt;e0&gt;项目依赖&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle exclude rules are converted to Maven excludes if possible. Such a conversion is possible if in the Gradle exclude rule the group as well as the module name is specified (as Maven needs both in contrast to Ivy). Per-configuration excludes are also included in the Maven POM, if they are convertible.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091248Z" creationid="huanghaohang" creationdate="20190608T091248Z">
        <seg>如果有可能，Gradle 的排除规会转换为 Maven 的排除规则。如果在 Gradle 排除规则中指定了组及模块名称的话（与 Ivy 相反，Maven对这两个都需要），那么这种转换是可能的。对配置的排除规则如果可以被转换的话，也会包含在 Maven POM 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle expects to find your production source code under &lt;c0&gt;src/main/java&lt;/c0&gt; and your test source code under &lt;c1&gt;src/test/java&lt;/c1&gt;. In addition, any files under &lt;c2&gt;src/main/resources&lt;/c2&gt; will be included in the JAR file as resources, and any files under &lt;c3&gt;src/test/resources&lt;/c3&gt; will be included in the classpath used to run the tests. All output files are created under the &lt;c4&gt;build&lt;/c4&gt; directory, with the JAR file ending up in the &lt;c5&gt;build/libs&lt;/c5&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T013543Z" creationid="95" creationdate="20170730T013013Z">
        <seg>Gradle会在 &lt;c0&gt;src/main/java&lt;/c0&gt; and your test source code under和 &lt;c1&gt;src/test/java&lt;/c1&gt;能分别找你的生产 源码和测试源码。并且，在 &lt;c2&gt;src/main/resources&lt;/c2&gt;的所有文件都会作为资源被打包进JAR包，任何在 &lt;c3&gt;src/test/resources&lt;/c3&gt;下的资源文件都会被包含到类路径中用于执行测试。所有输出的文件都会在 &lt;c4&gt;build&lt;/c4&gt; 目录里创建，而JAR包会被输出在&lt;c5&gt;build/libs&lt;/c5&gt; 目录里。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle fully supports your existing Maven or Ivy repository infrastructure for publishing and retrieving dependencies. Gradle also provides a converter for turning a Maven &lt;c0&gt;pom.xml&lt;/c0&gt; into a Gradle script. Runtime imports of Maven projects will come soon.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T060851Z" creationid="95" creationdate="20170723T060851Z">
        <seg>对于您用于发布和检索依赖的现有的Maven或Ivy仓库基础架构，Gradle完全支持。并且Gradle也提供了一个转换器，用于将一个Maven的&lt;c0&gt;pom.xml&lt;/c0&gt;转换为一个Gradle脚本。Maven项目的运行时导入即将推出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle has the ability to generate Visual Studio project and solution files for the native components defined in your build. This ability is added by the &lt;c0&gt;visual-studio&lt;/c0&gt; plugin. For a multi-project build, all projects with native components should have this plugin applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031023Z" creationid="huanghaohang" creationdate="20190611T031023Z">
        <seg>Gradle 能够为构建中定义的本机组件生成 Visual Studio 项目和解决方案文件。这个功能是通过 &lt;c0&gt;visual-studio&lt;/c0&gt; 插件添加的。对于多项目构建，所有有本机组件的项目都应该应用这个插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle is an open source project, and is licensed under the &lt;a0&gt;ASL&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T065609Z" creationid="95" creationdate="20170723T065609Z">
        <seg>Gradle是一个开源项目，并且使用&lt;a0&gt;ASL&lt;/a0&gt;开源协议。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle is the first build integration tool</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T034327Z" creationid="95" creationdate="20170723T034327Z">
        <seg>Gradle是第一个构建集成工具</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle keeps a record of various aspects of dependency resolution in binary format in the metadata cache. The information stored in the metadata cache includes:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T043145Z" creationid="huanghaohang" creationdate="20190605T043145Z">
        <seg>Gradle 在元数据缓存中以二进制格式保留了依赖解析各方面的记录。存在元数据缓存的信息包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers a variety of ways to add properties to your build. With the &lt;c0&gt;-D&lt;/c0&gt; command line option you can pass a system property to the JVM which runs Gradle. The &lt;c1&gt;-D&lt;/c1&gt; option of the &lt;s2&gt;&lt;s3&gt;gradle&lt;/s3&gt;&lt;/s2&gt; command has the same effect as the &lt;c4&gt;-D&lt;/c4&gt; option of the &lt;s5&gt;&lt;s6&gt;java&lt;/s6&gt;&lt;/s5&gt; command.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132831Z" creationid="huanghaohang" creationdate="20170917T132831Z">
        <seg>Gradle提供了多种方式可以向构建添加属性。使用&lt;c0&gt;-D&lt;/c0&gt;命令行选项可以将系统属性传给运行Gradle的JVM。&lt;s2&gt;&lt;s3&gt;gradle&lt;/s3&gt;&lt;/s2&gt;命令的&lt;c1&gt;-D&lt;/c1&gt;选项与&lt;s5&gt;&lt;s6&gt;java&lt;/s6&gt;&lt;/s5&gt;命令的&lt;c4&gt;-D&lt;/c4&gt;选项具有同样的效果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers a variety of ways to organize your build logic. First of all you can put your build logic directly in the action closure of a task. If a couple of tasks share the same logic you can extract this logic into a method. If multiple projects of a multi-project build share some logic you can define this method in the parent project. If the build logic gets too complex for being properly modeled by methods you want have an OO Model. &lt;s0&gt;[&lt;a1&gt;25&lt;/a1&gt;]&lt;/s0&gt; Gradle makes this very easy. Just drop your classes in a certain directory and Gradle automatically compiles them and puts them in the classpath of your build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T142503Z" creationid="huanghaohang" creationdate="20190817T142503Z">
        <seg>Gradle提供了多种方法来组织构建逻辑。首先，你可以直接将构建逻辑置于任务的操作闭包中。如果有多个任务使用相同的逻辑，那么可以将这段逻辑抽取到一个方法中。如果多项目构建的多个项目有相同的逻辑，你可以把这个方法定义在父项目中。如果构建逻辑过于复杂，无法通过方法进行正确建模，你就要使用面向对象模型了。&lt;s0&gt;[&lt;a1&gt;25&lt;/a1&gt;]&lt;/s0&gt;这对 Gradle 来说很简单，只需要把你的类放到某个目录中，Gradle 就会自动编译它们并将它们加入构建脚本的类路径中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers multiple ways to skip the execution of a task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083659Z" creationid="huanghaohang" creationdate="20170922T083659Z">
        <seg>Gradle 提供了多种方式来跳过任务的执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers the ability to execute the same build using different tool chains. You can control which tool chain will be used to build by changing the operating system PATH to include the desired tool chain compiler. Alternatively, you can configure the tool chains directly, as described in &lt;a0&gt;Section 54.10, “Tool chains”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022201Z" creationid="huanghaohang" creationdate="20190609T022201Z">
        <seg>Gradle 提供了使用不同工具链执行相同构建的能力。你可以通过将操作系统的 PATH 更改为包含所需的工具链编译器，来控制使用哪个工具链进行构建。或者，你可以直接配置工具链，如&lt;a0&gt;第 54.10 节，《工具链》&lt;/a0&gt;中所述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers the following conflict resolution strategies:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T130053Z" creationid="95" creationdate="20190316T130053Z">
        <seg>Gradle 提供了以下的冲突解决策略：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers you a variety of ways of organizing your build logic. You can choose what is right for your domain and find the right balance between unnecessary indirections, and avoiding redundancy and a hard to maintain code base. It is our experience that even very complex custom build logic is rarely shared between different builds. Other build tools enforce a separation of this build logic into a separate project. Gradle spares you this unnecessary overhead and indirection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142647Z" creationid="huanghaohang" creationdate="20191202T142647Z">
        <seg>Gradle 提供了多种方法来组织构建逻辑。你可以选择适合你的领域的方式，并在不必要的方向之间找到合适的平衡，避免冗余和使代码库难以维护。我们的经验是，即使非常复杂的定制构建逻辑，也很少在不同构建之间共享。其他构建工具强制将此构建逻辑分隔为单独的项目，Gradle 则给你节省了这些不必要的开销和间接性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle offers you different ways to express first-level and transitive dependencies. With Gradle you can mix and match approaches; for example, you could store your jars in an SCM without XML descriptor files and still use transitive dependency management.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T221228Z" creationid="95" creationdate="20190315T221150Z">
        <seg>Gradle为你提供了不同的表达第一级和传递依赖的方法。 通过Gradle，你可以混合使用和适配一些方法；例如，你可以在 SCM 中存储 jar而不需要 XML描述符文件，并且仍然使用传递依赖管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle plugins typically need to be &lt;e0&gt;applied&lt;/e0&gt; to a project before they can be used (see &lt;a1&gt;Section 21.1, “Applying plugins”&lt;/a1&gt;). The Build Init plugin is an automatically applied plugin, which means you do not need to apply it explicitly. To use the plugin, simply execute the task named &lt;c2&gt;init&lt;/c2&gt; where you would like to create the Gradle build. There is no need to create a “stub” &lt;c3&gt;build.gradle&lt;/c3&gt; file in order to apply the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214420Z" creationid="95" creationdate="20190131T212933Z">
        <seg>通常情况下，Gradle插件需要在 &lt;e0&gt;应用&lt;/e0&gt; 在项目之后才能使用（请参阅 &lt;a1&gt;第 21.1节， 《应用插件》&lt;/a1&gt;）。构建初始化插件是一个自动应用的插件，这意味着你不需要显式地应用该插件。 要使用这个插件，只需要在你想要创建Gradle构建的地方执行 &lt;c2&gt;init&lt;/c2&gt; 任务。 在这里，你不需要创建一个“存根” &lt;c3&gt;build.gradle&lt;/c3&gt; 文件来应用这个插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle properties and system properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034025Z" creationid="huanghaohang" creationdate="20180131T034025Z">
        <seg>Gradle 属性和系统属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides a &lt;e0&gt;domain specific language&lt;/e0&gt;, or DSL, for describing builds. This build language is based on Groovy, with some additions to make it easier to describe a build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T124610Z" creationid="huanghaohang" creationdate="20170912T124610Z">
        <seg>Gradle 提供了一种&lt;e0&gt;领域特定语言&lt;/e0&gt;，或者说是 DSL，用于描述构建。这种构建语言基于 Groovy 中，并进行了一些补充，使得更容易地描述构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides a &lt;e0&gt;hook&lt;/e0&gt; that allows the build author to control the exact set of arguments passed to a tool chain executable. This enables the build author to work around any limitations in Gradle, or assumptions that Gradle makes. The arguments hook should be seen as a 'last-resort' mechanism, with preference given to truly modelling the underlying domain.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093502Z" creationid="huanghaohang" creationdate="20190610T092713Z">
        <seg>Gradle 提供了一个&lt;e0&gt;钩子&lt;/e0&gt;，允许构建者控制传给可执行的工具链的确切参数集。这使得构建者能够围绕 Gradle 中的任何限制或做出的假定去使用。这个参数钩子应该被当作是一种“最后手段”的机制，我们更倾向于对基本领域真正地进行建模。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides a powerful mechanism to allow customizing the build based on the current environment. This mechanism also supports tools that wish to integrate with Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T141850Z" creationid="huanghaohang" creationdate="20191203T141850Z">
        <seg>Gradle 提供了一种强大的机制，能让你根据当前环境自定义构建。这种机制还支持希望与 Gradle 集成的工具。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides different notations for module dependencies. There is a string notation and a map notation. A module dependency has an API which allows for further configuration. Have a look at &lt;a0&gt;&lt;c1&gt;ExternalModuleDependency&lt;/c1&gt;&lt;/a0&gt; to learn all about the API. This API provides properties and configuration methods. Via the string notation you can define a subset of the properties. With the map notation you can define all properties. To have access to the complete API, either with the map or with the string notation, you can assign a single dependency to a configuration together with a closure.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190528T021906Z" creationid="huanghaohang" creationdate="20190527T161253Z">
        <seg>Gradle 为模块依赖提供了不同的标记法，有字符串表示法和映射表示法。模块依赖有 API 可以让你进一步配置，请查看 &lt;a0&gt;&lt;c1&gt;ExternalModuleDependency&lt;/c1&gt;&lt;/a0&gt; 了解有关该 API 的所有内容。该 API 提供了属性和配置方法。通过字符串表示法，你可以定义一个属性子集。而通过映射表示法，你可以定义所有属性。要访问完整的 API（包括映射或字符串表示法），你可以通过一个闭包将一个依赖指定给配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides excellent integration with Ant. You can use individual Ant tasks or entire Ant builds in your Gradle builds. In fact, you will find that it's far easier and more powerful using Ant tasks in a Gradle build script, than it is to use Ant's XML format. You could even use Gradle simply as a powerful Ant task scripting tool.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171210T151402Z" creationid="huanghaohang" creationdate="20171031T071604Z">
        <seg>Gradle 对 Ant 提供了极好的集成。你可以在你的 Gradle 构建中使用单独的 Ant 任务，或者是整个 Ant 构建。实际上，你会发现在 Gradle 构建脚本中使用 Ant 任务比使用 Ant 的 XML 格式要容易得多，功能也更强大。你甚至可以把 Gradle 当作是一个强大的 Ant 任务脚本工具。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides partial builds. If you build a single subproject Gradle takes care of building all the subprojects that subproject depends on. You can also choose to rebuild the subprojects that depend on a particular subproject. Together with incremental builds this is a big time saver for larger builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T034026Z" creationid="95" creationdate="20170723T034026Z">
        <seg>Gradle提供了部分构建。如果你是在构建一个子项目，Gradle将负责构建这个子项目所依赖的所有子项目。你也可以选择重新构建依赖于特定子项目的所有子项目。这和增量构建一起为大型的构建省下了不少的时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides several built-in tasks which show particular details of your build. This can be useful for understanding the structure and dependencies of your build, and for debugging problems.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T010749Z" creationid="huanghaohang" creationdate="20170910T010749Z">
        <seg>Gradle提供了一些内置任务能展示构建的相关特定信息。这对于了解构建的结构和依赖以及调试问题可能很有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides several options that make it easy to configure the Java process that will be used to execute your build. While it's possible to configure these in your local environment via GRADLE_OPTS or JAVA_OPTS, certain settings like JVM memory settings, Java home, daemon on/off can be more useful if they can versioned with the project in your VCS so that the entire team can work with consistent environment. Setting up a consistent environment for your build is as simple as placing those settings into a &lt;c0&gt;gradle.properties&lt;/c0&gt; file. The configuration is applied in following order (in case an option is configured in multiple locations the last one wins):</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180124T144616Z" creationid="huanghaohang" creationdate="20180124T144616Z">
        <seg>Gradle提供了几个选项，可以很容易地配置用于执行构建的 Java 进程。尽管可以通过 GRADLE_OPTS 或 JAVA_OPTS 在本地环境中配置这些设置，但是如果某些设置，像 JVM 内存设置，Java home，守护进程开启/关闭等特定设置可以提交到 VCS 的话会更有用，这样整个团队就能使用一致的环境。为你的构建建立一个一致的环境就像将这些设置放入一个 &lt;c0&gt;gradle.properties&lt;/c0&gt; 文件一样简单。这些配置将按以下顺序被应用（以防一个选项在多个位置都有配置时只有最后一个生效）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides some utility classes for maintaining collections of object, which work well with the Gradle build language.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130949Z" creationid="huanghaohang" creationdate="20190728T130949Z">
        <seg>Gradle 提供了一些维护对象集合的实用工具类，能够良好地在 Gradle 构建语言中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides support for comparing the &lt;e0&gt;outcomes&lt;/e0&gt; (e.g. the produced binary archives) of two builds. There are several reasons why you may want to compare the outcomes of two builds. You may want to compare:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152234Z" creationid="huanghaohang" creationdate="20200604T143555Z">
        <seg>Gradle 提供了用于比较两个构建的&lt;e0&gt;结果&lt;/e0&gt;（例如生成的二进制归档 ) 的支持。让你可能想要比较两个构建的结果的原因有几个。你可能想要比较：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T133756Z" creationid="95" creationdate="20170721T133756Z">
        <seg>它提供了：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle repository management, based on Apache Ivy, gives you a lot of freedom regarding repository layout and retrieval policies. Additionally Gradle provides various convenience method to add pre-configured repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T160419Z" creationid="huanghaohang" creationdate="20190602T160419Z">
        <seg>基于Apache Ivy 的 Gradle 仓库管理对仓库布局和检索策略的有很大的灵活性。 此外，Gradle 还提供了多种便捷的方法来添加预配置的仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle requires a Java JDK or JRE to be installed. Gradle requires a Java version 6 or higher. Gradle ships with its own Groovy library, therefore no Groovy needs to be installed. Any existing Groovy installation is ignored by Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114013Z" creationid="95" creationdate="20170723T114013Z">
        <seg>Gradle需要安装Java6或更高以上版本的JDK或JRE。Gradle自带了Groovy库，因此不需要安装Groovy。已经安装的Groovy会被Gradle所忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle scales</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T041724Z" creationid="95" creationdate="20170722T041724Z">
        <seg>Gradle 的效率提升</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle scales in how you can organize your build logic. The first level of organizing your build logic for the example above, is extracting a method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023442Z" creationid="95" creationdate="20170729T023442Z">
        <seg> Gradle的内向扩展取决于您如何组织您的构建逻辑。在上面的例子中，组织您的构建逻辑的第一个层次是抽取出方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle scales very well. It significantly increases your productivity, from simple single project builds up to huge enterprise multi-project builds. This is true for structuring the build. With the state-of-art incremental build function, this is also true for tackling the performance pain many large enterprise builds suffer from.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T042048Z" creationid="95" creationdate="20170722T042048Z">
        <seg>Gradle能够带大显著的效率提升。从简单的单项目构建，到大型的企业多项目构建，它都能大大地提高您的生产力。这是结构化构建所带来的。凭借最先进的增量构建功能，对于解决许多大型企业构建所遭遇的性能难题也是如此。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle supports single and multi-project builds. During the initialization phase, Gradle determines which projects are going to take part in the build, and creates a &lt;a0&gt;&lt;c1&gt;Project&lt;/c1&gt;&lt;/a0&gt; instance for each of these projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T102900Z" creationid="huanghaohang" creationdate="20190611T102900Z">
        <seg>Gradle 支持单项目及多项目的构建。在初始化阶段，Gradle 确定哪些项目是需要构建的，并为每个项目创建一个 &lt;a0&gt;&lt;c1&gt;Project&lt;/c1&gt;&lt;/a0&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle supports two types of task. One such type is the simple task, where you define the task with an action closure. We have seen these in &lt;a0&gt;Chapter 6, &lt;i1&gt;Build Script Basics&lt;/i1&gt;&lt;/a0&gt;. For this type of task, the action closure determines the behaviour of the task. This type of task is good for implementing one-off tasks in your build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T145138Z" creationid="huanghaohang" creationdate="20190626T144615Z">
        <seg>Gradle 支持两种类型的任务。一种是简单任务，你可以使用一个动作闭包来定义它。我们在《&lt;a0&gt;第六章，&lt;i1&gt;构建脚本基础&lt;/i1&gt;&lt;/a0&gt;》中已经看到过。对于这种类型的任务，动作闭包确定了任务的行为。这种类型的任务便于实现构建脚本中只执行一次的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle takes your dependency declarations and repository definitions and attempts to download all of your dependencies by a process called &lt;s0&gt;&lt;e1&gt;dependency resolution&lt;/e1&gt;&lt;/s0&gt;. Below is a brief outline of how this process works.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T031806Z" creationid="huanghaohang" creationdate="20190604T031503Z">
        <seg>Gradle 将获取你的依赖声明和仓库定义，并尝试通过称为 &lt;s0&gt;&lt;e1&gt;依赖解析&lt;/e1&gt;&lt;/s0&gt;的过程来下载所有依赖。以下是该过程如何工作的简要概述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle tries best to filter the tests given limitations of particular test framework API. Some advanced, synthetic tests may not be fully compatible with filtering. However, vast majority of tests and use cases should be handled neatly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131356Z" creationid="huanghaohang" creationdate="20180405T131356Z">
        <seg>鉴于特定测试框架 API 的限制，Gradle 会尽最大努力过滤测试。一些高级的、综合的测试可能不完全符合过滤条件。但是，绝大多数测试和用例都应该能被较好地处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle uses the same logic as Maven to identify the location of your local Maven cache. If a local repository location is defined in a &lt;c0&gt;settings.xml&lt;/c0&gt;, this location will be used. The &lt;c1&gt;settings.xml&lt;/c1&gt; in &lt;c2&gt;&lt;e3&gt;&lt;c4&gt;USER_HOME&lt;/c4&gt;&lt;/e3&gt;/.m2&lt;/c2&gt; takes precedence over the &lt;c5&gt;settings.xml&lt;/c5&gt; in &lt;c6&gt;&lt;e7&gt;&lt;c8&gt;M2_HOME&lt;/c8&gt;&lt;/e7&gt;/conf&lt;/c6&gt;. If no &lt;c9&gt;settings.xml&lt;/c9&gt; is available, Gradle uses the default location &lt;c10&gt;&lt;e11&gt;&lt;c12&gt;USER_HOME&lt;/c12&gt;&lt;/e11&gt;/.m2/repository&lt;/c10&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040833Z" creationid="huanghaohang" creationdate="20190603T033554Z">
        <seg>Gradle 使用与 Maven 相同的逻辑来标识本地 Maven 缓存的位置。如果在 &lt;c0&gt;settings.xml&lt;/c0&gt; 中定义了本地仓库位置，那么将使用此位置。 &lt;c2&gt;&lt;e3&gt;&lt;c4&gt;USER_HOME&lt;/c4&gt;&lt;/e3&gt;/.m2&lt;/c2&gt; 中的 &lt;c1&gt;settings.xml&lt;/c1&gt; 优先级高于 &lt;c6&gt;&lt;e7&gt;&lt;c8&gt;M2_HOME&lt;/c8&gt;&lt;/e7&gt;/conf&lt;/c6&gt; 中的 &lt;c5&gt;settings.xml&lt;/c5&gt;。如果没有 &lt;c9&gt;settings.xml&lt;/c9&gt; 可用，Gradle将使用默认位置 &lt;c10&gt;&lt;e11&gt;&lt;c12&gt;USER_HOME&lt;/c12&gt;&lt;/e11&gt;/.m2/repository&lt;/c10&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle uses whichever JDK it finds in your path (to check, use &lt;s0&gt;&lt;c1&gt;java -version&lt;/c1&gt;&lt;/s0&gt;). Alternatively, you can set the &lt;c2&gt;JAVA_HOME&lt;/c2&gt; environment variable to point to the install directory of the desired JDK.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114331Z" creationid="95" creationdate="20170723T114023Z">
        <seg>Gradle会使用在您的path环境变量中找到的JDK（可以使用&lt;s0&gt;&lt;c1&gt;java -version&lt;/c1&gt;&lt;/s0&gt;命令来检查自己的JDK版本）。 另外，您也可以设置 &lt;c2&gt;JAVA_HOME&lt;/c2&gt; 环境变量来指向你想要的JDK的安装目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle will create a &lt;a0&gt;&lt;c1&gt;CSourceSet&lt;/c1&gt;&lt;/a0&gt; named 'cunit' for each &lt;a2&gt;&lt;c3&gt;CUnitTestSuite&lt;/c3&gt;&lt;/a2&gt; component in the project. This source set should contain the cunit test files for the component sources. Source files can be located in the conventional location (&lt;c4&gt;src/${component.name}Test/cunit&lt;/c4&gt;) or can be configured like any other source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032145Z" creationid="huanghaohang" creationdate="20190611T032145Z">
        <seg>Gradle 将为项目中的每个 &lt;a2&gt;&lt;c3&gt;CUnitTestSuite&lt;/c3&gt;&lt;/a2&gt; 组件创建名为“cunit”的 &lt;a0&gt;&lt;c1&gt;CSourceSet&lt;/c1&gt;&lt;/a0&gt;。这个源码集应该包含组件源码的 cunit 测试文件。源码文件可以位于约定位置（&lt;c4&gt;src/${component.name}Test/cunit&lt;/c4&gt;），也可以像其他源集一样进行配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle will figure out the properties of the artifact based on the name of the file. You can customize these properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075530Z" creationid="huanghaohang" creationdate="20190606T075530Z">
        <seg>Gradle 将基于文件的名字确定工件的属性。你可以自定义这些属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle will look at the first URL for the POM and the JAR. If the JAR can't be found there, the artifact URLs are used to look for JARs.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033945Z" creationid="huanghaohang" creationdate="20190603T033913Z">
        <seg>Gradle 将会在第一个 URL 查找 POM 和 JAR 文件。如果那里找不到 JAR，那么会使用工件 URL 来查找 JAR。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle's Ivy repository implementations support the equivalent to Ivy's dynamic resolve mode. Normally, Gradle will use the &lt;c0&gt;rev&lt;/c0&gt; attribute for each dependency definition included in an &lt;c1&gt;ivy.xml&lt;/c1&gt; file. In dynamic resolve mode, Gradle will instead prefer the &lt;c2&gt;revConstraint&lt;/c2&gt; attribute over the &lt;c3&gt;rev&lt;/c3&gt; attribute for a given dependency definition. If the &lt;c4&gt;revConstraint&lt;/c4&gt; attribute is not present, the &lt;c5&gt;rev&lt;/c5&gt; attribute is used instead.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025611Z" creationid="huanghaohang" creationdate="20190605T025611Z">
        <seg>Gradle 的 Ivy 仓库实现支持相当于 Ivy 的动态解析模式。通常情况下，Gradle 将 &lt;c0&gt;rev&lt;/c0&gt; 属性用于 &lt;c1&gt;ivy.xml&lt;/c1&gt; 文件中包含的每个依赖定义。在动态解析模式下，对于一个给定的依赖定义，Gradle 对 &lt;c2&gt;revConstraint&lt;/c2&gt; 属性的使用优先于 &lt;c3&gt;rev&lt;/c3&gt; 属性。如果 &lt;c4&gt;revConstraint&lt;/c4&gt; 属性不存在，则使用 &lt;c5&gt;rev&lt;/c5&gt; 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle's build scripts are written in Groovy, not XML. But unlike other approaches this is not for simply exposing the raw scripting power of a dynamic language. That would just lead to a very difficult to maintain build. The whole design of Gradle is oriented towards being used as a language, not as a rigid framework. And Groovy is our glue that allows you to tell your individual story with the abstractions Gradle (or you) provide. Gradle provides some standard stories but they are not privileged in any form. This is for us a major distinguishing features compared to other declarative build systems. Our Groovy support is also not just some simple coating sugar layer. The whole Gradle API is fully groovynized. Only by that using Groovy is the fun and productivity gain it can be.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T065134Z" creationid="95" creationdate="20170723T063603Z">
        <seg>Gradle的构建脚本是使用Groovy来编写的，而不是使用XML。但是与其他方法不同，这不仅仅是暴露了一门动态语言的原始脚本的能力，那样只会导致构建难以维护。Gradle的整个设计是面向一门语言，而不是一个僵化的框架。并且Groovy作为胶水语言，可以使您通过使用Gradle（或您）所提供的抽象概念，来讲述您的个别故事。Gradle提供了一些标准的故事，但它们没有任何特权。与其他的声明式构建系统相比，这对于我们来说是一个主要的区别。我们的Groovy支持也不只是简单的糖层，整个的Gradle API都是完全的Groovy化的。只有使用Groovy才能获得乐趣和生产力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle's build scripts expose to you the full power of Groovy. As an appetizer, have a look at this:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155756Z" creationid="95" creationdate="20170726T155707Z">
        <seg>Gradle的构建脚本向您开放了Groovy的全部功能。作为开胃菜，可以看看下这个例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle's multi-project features are driven by real life use cases. The first example for describing such a use case, consists of two webapplication projects and a parent project that creates a distribution out of them. &lt;s0&gt;[&lt;a1&gt;21&lt;/a1&gt;]&lt;/s0&gt; For the example we use only one build script and do &lt;s2&gt;&lt;e3&gt;cross project configuration&lt;/e3&gt;&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150744Z" creationid="huanghaohang" creationdate="20190617T150744Z">
        <seg>Gradle 的多项目功能是由真实生活用例所驱动的。描述这种用例的第一个示例包括了两个 webapplication 项目，以及一个创建分发的父项目。&lt;s0&gt;[&lt;a1&gt;21&lt;/a1&gt;]&lt;/s0&gt; 对于这个例子，我们只使用一个构建脚本，并执行&lt;s2&gt;&lt;e3&gt;跨项目配置&lt;/e3&gt;&lt;/s2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle's support for multi-project build is outstanding. Project dependencies are first class citizens. We allow you to model the project relationships in a multi-project build as they really are for your problem domain. Gradle follows your layout not vice versa.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T033707Z" creationid="95" creationdate="20170722T042113Z">
        <seg>Gradle对多项目构建的支持非常出色。项目依赖是第一公民。我们允许您在一个多项目构建中为项目关系进行建模，因为它们真的适用于您的问题域。Gradle遵循您的布局，而非相反。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle, thanks to Ivy under its hood, is extremely flexible regarding repositories:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025634Z" creationid="huanghaohang" creationdate="20190604T025634Z">
        <seg>Gradle 得益于其幕后的 Ivy，它在仓库方面非常灵活。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T063538Z" creationid="95" creationdate="20170723T063538Z">
        <seg>Groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233745Z" creationid="huanghaohang" creationdate="20171206T233745Z">
        <seg>Groovy 快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy adds lots of useful methods to the standard Java classes. For example, &lt;c0&gt;Iterable&lt;/c0&gt; gets an &lt;c1&gt;each&lt;/c1&gt; method, which iterates over the elements of the &lt;c2&gt;Iterable&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135834Z" creationid="huanghaohang" creationdate="20170913T135657Z">
        <seg>Groovy对标准的Java类添加了许多有用的方法。例如，&lt;c0&gt;Iterable&lt;/c0&gt;新增了&lt;c1&gt;each&lt;/c1&gt;方法，可以对&lt;c2&gt;Iterable&lt;/c2&gt;的元素进行遍历：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy automatically converts a property reference into a call to the appropriate getter or setter method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141229Z" creationid="huanghaohang" creationdate="20170913T141229Z">
        <seg>Groovy 会自动地把属性的引用转换为适当的 getter 或 setter 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121119Z" creationid="huanghaohang" creationdate="20180406T121119Z">
        <seg>Groovy 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy provides plenty of features for creating DSLs, and the Gradle build language takes advantage of these. Understanding how the build language works will help you when you write your build script, and in particular, when you start to write custom plugins and tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135638Z" creationid="huanghaohang" creationdate="20170913T135638Z">
        <seg>Groovy提供了大量功能来创建DSL，而Gradle构建语言则利用了这些功能。了解构建语言的工作原理将有助于你编写构建脚本，特别是在开始编写自定义插件和任务的时候。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy provides some shortcuts for defining &lt;c0&gt;List&lt;/c0&gt; and &lt;c1&gt;Map&lt;/c1&gt; instances.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141544Z" creationid="huanghaohang" creationdate="20170913T141544Z">
        <seg>Groovy 提供了一些定义&lt;c0&gt;List&lt;/c0&gt;和&lt;c1&gt;Map&lt;/c1&gt;实例的快捷写法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy sources for the given source set. May also contain Java sources for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121819Z" creationid="huanghaohang" creationdate="20180406T121819Z">
        <seg>给定源集的 Groovy 源代码。也可能包含联合编译的 Java 源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy web applications</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005200Z" creationid="huanghaohang" creationdate="20170909T005200Z">
        <seg>Groovy web 应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>GroovyCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120747Z" creationid="huanghaohang" creationdate="20180406T120747Z">
        <seg>GroovyCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovydoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120927Z" creationid="huanghaohang" creationdate="20180406T120927Z">
        <seg>Groovydoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Has directories in the conventional locations for source code</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154640Z" creationid="95" creationdate="20190201T154640Z">
        <seg>在源代码中的约定位置有目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Have a look at &lt;a0&gt;&lt;c1&gt;ProjectDescriptor&lt;/c1&gt;&lt;/a0&gt; for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153228Z" creationid="huanghaohang" creationdate="20190612T153228Z">
        <seg>更多信息请参阅 &lt;a0&gt;&lt;c1&gt;ProjectDescriptor&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Have a look at &lt;a0&gt;&lt;c1&gt;TaskContainer&lt;/c1&gt;&lt;/a0&gt; for more options for locating tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122048Z" creationid="huanghaohang" creationdate="20170919T122048Z">
        <seg>有关查找任务的更多选项，可以看一下&lt;a0&gt;&lt;c1&gt;TaskContainer&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Have a look at &lt;a0&gt;http://groovy.codehaus.org/groovy-jdk/&lt;/a0&gt; for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135926Z" creationid="huanghaohang" creationdate="20170913T135926Z">
        <seg>更多详细可参阅&lt;a0&gt;http://groovy.codehaus.org/groovy-jdk/&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Have also a look at &lt;a0&gt;&lt;c1&gt;War&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143011Z" creationid="huanghaohang" creationdate="20180408T143011Z">
        <seg>另请参阅 &lt;a0&gt;&lt;c1&gt;War&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Having declared the build script classpath, you can use the classes in your build script as you would any other classes on the classpath. The following example adds to the previous example, and uses classes from the build script classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141044Z" creationid="huanghaohang" creationdate="20191202T140723Z">
        <seg>声明了构建脚本类路径后，你可以在构建脚本中使用这些类，就像使用其他在类路径上的类一样。以下示例是在上一示例的基础上，增加了使用构建脚本类路径中的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Having declared the init script classpath, you can use the classes in your init script as you would any other classes on the classpath. The following example adds to the previous example, and uses classes from the init script classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151004Z" creationid="huanghaohang" creationdate="20191206T151004Z">
        <seg>声明了初始化脚本类路径后，你可以在初始化脚本中使用这些类，就像使用其他在类路径上的类一样。以下示例是在上一示例的基础上，增加了使用初始化脚本类路径中的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hello world</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031755Z" creationid="huanghaohang" creationdate="20170927T031755Z">
        <seg>Hello world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>HelloServlet.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150826Z" creationid="huanghaohang" creationdate="20190617T150826Z">
        <seg>HelloServlet.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Helper.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160336Z" creationid="huanghaohang" creationdate="20190617T160336Z">
        <seg>Helper.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are the major highlights of Gradle's support for dependency management:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T154613Z" creationid="95" creationdate="20190202T154613Z">
        <seg>以下是 Gradle 支持的依赖管理的主要亮点：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a complete example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085314Z" creationid="huanghaohang" creationdate="20181012T085314Z">
        <seg>下面是一个完整的例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a list of some of Gradle's features.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T015227Z" creationid="95" creationdate="20170722T015227Z">
        <seg>以下是Gradle的一些特性列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a summary of the ways you can organise your build logic:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T142532Z" creationid="huanghaohang" creationdate="20190817T142532Z">
        <seg>下面可以组织构建逻辑的方法摘要：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example which maintains a copy of the project's runtime dependencies in the &lt;c0&gt;build/libs&lt;/c0&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125140Z" creationid="huanghaohang" creationdate="20171126T125140Z">
        <seg>下面是一个例子，维护在&lt;c0&gt;build/libs&lt;/c0&gt;目录中的项目运行时依赖的副本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example with the most important customization options:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143044Z" creationid="huanghaohang" creationdate="20180408T143018Z">
        <seg>下面是最重要的自定义选项的一个示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is our complete build file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002815Z" creationid="huanghaohang" creationdate="20170909T002815Z">
        <seg>这里是我们的完整构建文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here the output without the &lt;c0&gt;-q&lt;/c0&gt; option:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162535Z" creationid="huanghaohang" creationdate="20190615T162535Z">
        <seg>不使用 &lt;c0&gt;-q&lt;/c0&gt; 选项的输出结果︰</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here we add tasks to the &lt;c0&gt;tasks&lt;/c0&gt; collection. Have a look at &lt;a1&gt;&lt;c2&gt;TaskContainer&lt;/c2&gt;&lt;/a1&gt; for more variations of the &lt;c3&gt;create()&lt;/c3&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121353Z" creationid="huanghaohang" creationdate="20170919T121141Z">
        <seg>在这里我们将任务添加到&lt;c0&gt;tasks&lt;/c0&gt;集合。关于&lt;c3&gt;create()&lt;/c3&gt;方法&lt;a1&gt;的其他重载方法，可以看一下&lt;c2&gt;TaskContainer&lt;/c2&gt;&lt;/a1&gt;接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here we have three projects. Project &lt;c0&gt;api&lt;/c0&gt; produces a JAR file which is shipped to the client to provide them a Java client for your XML webservice. Project &lt;c1&gt;webservice&lt;/c1&gt; is a webapp which returns XML. Project &lt;c2&gt;shared&lt;/c2&gt; contains code used both by &lt;c3&gt;api&lt;/c3&gt; and &lt;c4&gt;webservice&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123142Z" creationid="95" creationdate="20170731T154521Z">
        <seg>在这里我们有三个项目。项目&lt;c0&gt;api&lt;/c0&gt;会生成一个JAR文件给一个客户端，为您的XML webservice提供一个Java客户端，项目 &lt;c1&gt;webservice&lt;/c1&gt; 是一个返回XML的webapp。项目&lt;c2&gt;shared&lt;/c2&gt; 包含了在 &lt;c3&gt;api&lt;/c3&gt; 和 &lt;c4&gt;webservice&lt;/c4&gt;中都会用到的代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here we replace a task of type &lt;c0&gt;Copy&lt;/c0&gt; with a simple task. When creating the simple task, you have to set the &lt;c1&gt;overwrite&lt;/c1&gt; property to true. Otherwise Gradle throws an exception, saying that a task with such a name already exists.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083650Z" creationid="huanghaohang" creationdate="20170922T083325Z">
        <seg>这里我们把一个&lt;c0&gt;Copy&lt;/c0&gt;类型的任务替换为一个简单的任务。当创建这个简单任务时，你必须把&lt;c1&gt;overwrite&lt;/c1&gt;属性设置为true。否则，Gradle会抛出一个异常，称这个名称的任务已经存在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here you can see that the &lt;a0&gt;&lt;c1&gt;TargetedNativeComponent.targetPlatforms()&lt;/c1&gt;&lt;/a0&gt; method is used to select the set of platforms to target for &lt;c2&gt;executables.main&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053623Z" creationid="huanghaohang" creationdate="20190610T053341Z">
        <seg>在这里你可以看到 &lt;a0&gt;&lt;c1&gt;TargetedNativeComponent.targetPlatforms()&lt;/c1&gt;&lt;/a0&gt; 方法被用于为 &lt;c2&gt;executables.main&lt;/c2&gt;选择一组目标平台。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here're all situations in which we fork a new daemon process:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180115T142800Z" creationid="huanghaohang" creationdate="20180115T142800Z">
        <seg>以下是我们 fork 一个新的守护进程的所有情况：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here's the complete build file for our sample:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154035Z" creationid="95" creationdate="20170731T154035Z">
        <seg>以下是我们的例子中的完全的构建文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, &lt;c0&gt;uploadTask&lt;/c0&gt; and &lt;c1&gt;archiveTask&lt;/c1&gt; refer to the tasks used for uploading and generating the archive, respectively (for example &lt;c2&gt;uploadArchives&lt;/c2&gt; and &lt;c3&gt;jar&lt;/c3&gt;). &lt;c4&gt;archiveTask.baseName&lt;/c4&gt; defaults to &lt;c5&gt;project.archivesBaseName&lt;/c5&gt; which in turn defaults to &lt;c6&gt;project.name&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100057Z" creationid="huanghaohang" creationdate="20190607T100057Z">
        <seg>在这里，&lt;c0&gt;uploadTask&lt;/c0&gt; 和 &lt;c1&gt;archiveTask&lt;/c1&gt; 分别指的是用于上传和生成归档的任务（例如，&lt;c2&gt;uploadArchives&lt;/c2&gt; 和 &lt;c3&gt;jar&lt;/c3&gt;）。&lt;c4&gt;archiveTask.baseName&lt;/c4&gt; 默认为 &lt;c5&gt;project.archivesBaseName&lt;/c5&gt; ，后者默认为 &lt;c6&gt;project.name&lt;/c6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Hide the selected tasks. This adds them to the filter.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144441Z" creationid="huanghaohang" creationdate="20170911T144441Z">
        <seg>隐藏所选择的任务。这将会把它们添加到过滤器中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How dependency resolution works</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141849Z" creationid="huanghaohang" creationdate="20190411T141849Z">
        <seg>依赖解析的工作原理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How does Gradle find the files for external dependencies? Gradle looks for them in a &lt;e0&gt;repository&lt;/e0&gt;. A repository is really just a collection of files, organized by &lt;c1&gt;group&lt;/c1&gt;, &lt;c2&gt;name&lt;/c2&gt; and &lt;c3&gt;version&lt;/c3&gt;. Gradle understands several different repository formats, such as Maven and Ivy, and several different ways of accessing the repository, such as using the local file system or HTTP.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044633Z" creationid="huanghaohang" creationdate="20170908T044250Z">
        <seg>Gradle是如何找到外部依赖的文件的呢？它通过在一个&lt;e0&gt;仓库&lt;/e0&gt;去查找它们。仓库只是文件的一个集合，由&lt;c1&gt;group&lt;/c1&gt;， &lt;c2&gt;name&lt;/c2&gt;和&lt;c3&gt;version&lt;/c3&gt;来组织。 Gradle支持几种不同的仓库格式，例如Maven和Ivy；以及访问仓库的几种不同方法，例如使用本地文件系统或HTTP。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How does Gradle know whether to do a single or multiproject build? If you trigger a multiproject build from the directory where the settings file is, things are easy. But Gradle also allows you to execute the build from within any subproject taking part in the build. &lt;s0&gt;[&lt;a1&gt;20&lt;/a1&gt;]&lt;/s0&gt; If you execute Gradle from within a project that has no &lt;c2&gt;settings.gradle&lt;/c2&gt; file, Gradle does the following:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153610Z" creationid="huanghaohang" creationdate="20190612T153610Z">
        <seg>Gradle 是怎么知道要构建单个或多项目呢？如果你在一个有设置文件的目录中触发多项目构建，那么情况很简单。但 Gradle 也允许你在参与构建的任意子项目中执行构建。&lt;s0&gt;[&lt;a1&gt;20&lt;/a1&gt;]&lt;/s0&gt; 如果你在没有 &lt;c2&gt;settings.gradle&lt;/c2&gt; 文件的项目中执行 Gradle，Gradle 将执行以下操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How does the parallel execution work? First, you need to tell Gradle to use the parallel mode. You can use the command line argument (&lt;a0&gt;Appendix D, &lt;i1&gt;Gradle Command Line&lt;/i1&gt;&lt;/a0&gt;) or configure your build environment (&lt;a2&gt;Section 20.1, “Configuring the build environment via gradle.properties”&lt;/a2&gt;). Unless you provide specific number of parallel threads Gradle attempts to choose the right number based on available CPU cores. Every parallel worker exclusively owns a given project while executing a task. This means that 2 tasks from the same project are never executed in parallel. Therefore only multi-project builds can take advantage of parallel execution. Task dependencies are fully supported and parallel workers will start executing upstream tasks first. Bear in mind that the alphabetical scheduling of decoupled tasks, known from the sequential execution, does not really work in parallel mode. You need to make sure the task dependencies are declared correctly to avoid ordering issues.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T145922Z" creationid="huanghaohang" creationdate="20190621T145922Z">
        <seg>并行执行是怎么做的？首先，你需要告诉 Gradle 使用并行模式。你可以使用命令行参数（《&lt;a0&gt;附录D，&lt;i1&gt;Gradle 命令行&lt;/i1&gt;&lt;/a0&gt;》），或者是配置你的构建环境（《&lt;a2&gt;第20.1节，通过 gradle.properties 配置构建环境&lt;/a2&gt;》）。除非你指定并行线程的个数，否则 Gradle 将根据可用的 CPU 内核来选择正确的线程数。当执行一个任务时，每个并行的工作线程都专用于一个给定的项目。这意味着同一项目中的两个任务永远不会并行执行。因此，只有多项目构建可以利用并行执行。并行执行完全支持任务依赖，并且并行线程将首先开始执行上游任务。记住，解耦的任务按字母顺序调度，且顺序执行，并不是真正的以并行模式执行。你需要确保正确声明了任务依赖，以避免排序问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How to declare your dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141820Z" creationid="huanghaohang" creationdate="20190411T141820Z">
        <seg>如何声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How to upload your archives is described in &lt;a0&gt;Chapter 51, &lt;i1&gt;Publishing artifacts&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113650Z" creationid="huanghaohang" creationdate="20180406T113424Z">
        <seg>关于如何上传档案，将在《&lt;a0&gt;第五十一章，&lt;i1&gt;发布构件&lt;/i1&gt;&lt;/a0&gt;》中描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, keep in mind that it is usually best to keep configuration in the build script and under source control.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085446Z" creationid="huanghaohang" creationdate="20181012T085446Z">
        <seg>但是，请记住，通常最好将配置保留在构建脚本中，并在源代码管理下。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the &lt;c0&gt;compileJava&lt;/c0&gt; task is likely to not be the only task that needs to know where the class files are.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022630Z" creationid="huanghaohang" creationdate="20180131T022630Z">
        <seg>然而，&lt;c0&gt;compileJava&lt;/c0&gt; 任务可能不是唯一需要知道类文件位置的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, there are many cases where Gradle is unable to determine which input files need to be reprocessed. Examples include:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140358Z" creationid="huanghaohang" creationdate="20190707T140358Z">
        <seg>然而，有许多情况下，Gradle 还是无法确定需要重新处理哪些输入文件。包括比如：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>HtmlDependencyReportTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040039Z" creationid="huanghaohang" creationdate="20190123T040039Z">
        <seg>HtmlDependencyReportTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>IDEA plugin provides hooks and behavior for customizing the generated content. The workspace file can effectively only be manipulated via the &lt;c0&gt;withXml&lt;/c0&gt; hook because its corresponding domain object is essentially empty.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T155821Z" creationid="huanghaohang" creationdate="20190121T155821Z">
        <seg>IDEA插件提供了一些钩子和行为，用于自定义生成的内容。工作区文件可以有效地只通过&lt;c0&gt;withXml&lt;/c0&gt;钩子来操作，因为它对应的域对象本质上是空的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>INFO</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221535Z" creationid="huanghaohang" creationdate="20180105T221535Z">
        <seg>INFO</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>INFO and higher</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221922Z" creationid="huanghaohang" creationdate="20180105T221922Z">
        <seg>INFO 及更高</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>IdeaModel</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061204Z" creationid="huanghaohang" creationdate="20181212T061204Z">
        <seg>IdeaModel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>IdeaModule</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061225Z" creationid="huanghaohang" creationdate="20181212T061225Z">
        <seg>IdeaModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>IdeaProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061221Z" creationid="huanghaohang" creationdate="20181212T061221Z">
        <seg>IdeaProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>IdeaWorkspace</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061230Z" creationid="huanghaohang" creationdate="20181212T061230Z">
        <seg>IdeaWorkspace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If Groovy is only used for test code, the Groovy dependency should be added to the &lt;c0&gt;testCompile&lt;/c0&gt; configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122559Z" creationid="huanghaohang" creationdate="20180406T122559Z">
        <seg>如果 Groovy 仅用于测试代码，应该将 Groovy 的依赖添加到 &lt;c0&gt;testCompile&lt;/c0&gt; 配置中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If Groovy is used for production code, the Groovy dependency should be added to the &lt;c0&gt;compile&lt;/c0&gt; configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122521Z" creationid="huanghaohang" creationdate="20180406T122521Z">
        <seg>如果 Groovy 用于生产代码，应该将 Groovy 依赖添加到 &lt;c0&gt;compile&lt;/c0&gt; 配置中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If Scala is only used for test code, the &lt;c0&gt;scala-library&lt;/c0&gt; dependency should be added to the &lt;c1&gt;testCompile&lt;/c1&gt; configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015500Z" creationid="huanghaohang" creationdate="20180407T015500Z">
        <seg>如果 Scala 仅用于测试代码，&lt;c0&gt;scala-library&lt;/c0&gt; 依赖应被添加到 &lt;c1&gt;testCompile&lt;/c1&gt; 配置中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If Scala is used for production code, the &lt;c0&gt;scala-library&lt;/c0&gt; dependency should be added to the &lt;c1&gt;compile&lt;/c1&gt; configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015435Z" creationid="huanghaohang" creationdate="20180407T015435Z">
        <seg>如果 Scala 用于生产代码， &lt;c0&gt;scala-library&lt;/c0&gt; 依赖应该添加到 &lt;c1&gt;compile&lt;/c1&gt; 的配置中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a &lt;c0&gt;--type&lt;/c0&gt; parameter is not supplied, Gradle will attempt to infer the type from the environment. For example, it will infer a type value of "&lt;c1&gt;pom&lt;/c1&gt;" if it finds a &lt;c2&gt;pom.xml&lt;/c2&gt; to convert to a Gradle build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214247Z" creationid="95" creationdate="20190131T214247Z">
        <seg>如果没有提供 &lt;c0&gt;--type&lt;/c0&gt; 参数，Gradle将尝试从环境中推断类型。例如，如果它发现 &lt;c2&gt;pom.xml&lt;/c2&gt;，那么它将推断出一个“&lt;c1&gt;pom&lt;/c1&gt;”的类型值，来转换为Gradle构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a &lt;c0&gt;groovy(-indy)&lt;/c0&gt; Jar is found on &lt;c1&gt;classpath&lt;/c1&gt;, and the project has at least one repository declared, a corresponding &lt;c2&gt;groovy(-indy)&lt;/c2&gt; repository dependency will be added to &lt;c3&gt;groovyClasspath&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132803Z" creationid="huanghaohang" creationdate="20180406T132803Z">
        <seg>如果在 &lt;c1&gt;classpath&lt;/c1&gt; 中找到 &lt;c0&gt;groovy(-indy)&lt;/c0&gt; Jar ，并且该项目已经至少有一个仓库声明，那么相应的 &lt;c2&gt;groovy(-indy)&lt;/c2&gt; 仓库依赖将添加到 &lt;c3&gt;groovyClasspath&lt;/c3&gt; 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a &lt;c0&gt;groovy-all(-indy)&lt;/c0&gt; Jar is found on &lt;c1&gt;classpath&lt;/c1&gt;, the same Jar will be added to &lt;c2&gt;groovyClasspath&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132620Z" creationid="huanghaohang" creationdate="20180406T132620Z">
        <seg>如果在 &lt;c1&gt;classpath&lt;/c1&gt; 中找到 &lt;c0&gt;groovy-all(-indy)&lt;/c0&gt; Jar，相同的 Jar 将添加到 &lt;c2&gt;groovyClasspath&lt;/c2&gt; 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a &lt;c0&gt;scala-library&lt;/c0&gt; Jar is found on &lt;c1&gt;classpath&lt;/c1&gt;, and the project has at least one repository declared, a corresponding &lt;c2&gt;scala-compiler&lt;/c2&gt; repository dependency will be added to &lt;c3&gt;scalaClasspath&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020016Z" creationid="huanghaohang" creationdate="20180407T020016Z">
        <seg>如果在 &lt;c1&gt;classpath&lt;/c1&gt; 中找到 &lt;c0&gt;scala-library&lt;/c0&gt; Jar ，并且该项目已经在至少一个仓库中声明了它，那么相应的 &lt;c2&gt;scala-compiler&lt;/c2&gt; 的仓库依赖将添加到 &lt;c3&gt;scalaClasspath&lt;/c3&gt; 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a &lt;c0&gt;settings.gradle&lt;/c0&gt; file is found, Gradle checks if the current project is part of the multiproject hierarchy defined in the found &lt;c1&gt;settings.gradle&lt;/c1&gt; file. If not, the build is executed as a single project build. Otherwise a multiproject build is executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T161034Z" creationid="huanghaohang" creationdate="20190612T154114Z">
        <seg>如果找到了&lt;c0&gt;settings.gradle&lt;/c0&gt; 文件，那么 Gradle 会检查当前项目是否为所找到的&lt;c1&gt;settings.gradle&lt;/c1&gt; 文件中定义的多项目层次结构的一部分。如果不是，这个构建还是作为单项目构建执行；否则作为多项目构建执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a binary variant cannot be built for any reason, then the &lt;a0&gt;&lt;c1&gt;NativeBinary&lt;/c1&gt;&lt;/a0&gt; associated with that variant will not be &lt;c2&gt;buildable&lt;/c2&gt;. It is possible to use this property to create a task to generate all possible variants on a particular machine.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084304Z" creationid="huanghaohang" creationdate="20190610T084304Z">
        <seg>如果一个二进制变体因为某种原因而不能构建，那么与之关联的 &lt;a0&gt;&lt;c1&gt;NativeBinary&lt;/c1&gt;&lt;/a0&gt; 将不再是 &lt;c2&gt;buildable&lt;/c2&gt;。可以使用这个属性来创建一个任务，生成在特定机器上所有可能的变体。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a task fails, any subsequent tasks that were depending on it will not be executed, as it is not safe to do so. For example, tests will not run if there is a compilation failure in the code under test; because the test task will depend on the compilation task (either directly or indirectly).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T075102Z" creationid="huanghaohang" creationdate="20170909T075102Z">
        <seg>如果任务失败了，则依赖于它的所有后续任务将不会被执行，因为那样做是不安全的。例如，如果在测试代码中存在编译失败，测试将不会运行;因为测试任务会（直接或间接地）依赖于编译任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If an upload repository is defined with multiple patterns, Gradle must choose a pattern to use for uploading each file. By default, Gradle will upload to the pattern defined by the &lt;c0&gt;url&lt;/c0&gt; parameter, combined with the optional &lt;c1&gt;layout&lt;/c1&gt; parameter. If no &lt;c2&gt;url&lt;/c2&gt; parameter is supplied, then Gradle will use the first defined &lt;c3&gt;artifactPattern&lt;/c3&gt; for uploading, or the first defined &lt;c4&gt;ivyPattern&lt;/c4&gt; for uploading Ivy files, if this is set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T085305Z" creationid="huanghaohang" creationdate="20190606T085305Z">
        <seg>如果一个上传仓库定义了多个模式，Gradle 必须选择用于上传每个文件的模式。默认情况下，Gradle 会上传到由 &lt;c0&gt;url&lt;/c0&gt; 及可选的 &lt;c1&gt;layout&lt;/c1&gt; 参数一起定义的模式。如果没有提供 &lt;c2&gt;url&lt;/c2&gt; 参数，Gradle 将使用第一个定义的 &lt;c3&gt;artifactPattern&lt;/c3&gt; 进行上传；或者对于上传 Ivy 文件，将使用第一个定义的&lt;c4&gt;ivyPattern&lt;/c4&gt;（如果有设置）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If any of these properties is empty the trailing &lt;c0&gt;-&lt;/c0&gt; is not added to the name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232752Z" creationid="huanghaohang" creationdate="20171206T232752Z">
        <seg>如果这些属性中的任何一个为空，那其跟随的&lt;c0&gt;-&lt;/c0&gt;不会被添加到该名称中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If authentication is required for a repository, the relevant credentials can be provided. The following example shows how to provide username/password-based authentication for SFTP repositories:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030832Z" creationid="huanghaohang" creationdate="20190603T030703Z">
        <seg>如果仓库需要认证，那么可以提供相关的凭证。以下示例展示了如何为 SFTP 仓库提供基于用户名/密码的认证：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If more than one init script is found they will all be executed, in the order specified above. Scripts in a given directory are executed in alphabetical order. This allows, for example, a tool to specify an init script on the command line and the user to put one in their home directory for defining the environment and both scripts will run when Gradle is executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T135735Z" creationid="huanghaohang" creationdate="20191204T135735Z">
        <seg>如果 Gradle 找到了多个初始化脚本，那么将按照上面指定的顺序执行这些脚本。而给定目录的脚本，则按照字母顺序执行。这样使得一个工具可以在命令行上指定初始化脚本，并且用户可以放一个初始化脚本在他们的主目录中用于定义环境，而当 Gradle 执行时，这两个脚本会运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no &lt;c0&gt;settings.gradle&lt;/c0&gt; file is found, the build is executed as a single project build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153828Z" creationid="huanghaohang" creationdate="20190612T153828Z">
        <seg>如果还是没有找到&lt;c0&gt;settings.gradle&lt;/c0&gt;文件，那么会将这个构建作为一个单项目构建来执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no &lt;c0&gt;settings.gradle&lt;/c0&gt; is found, it searches the parent directories for the existence of a &lt;c1&gt;settings.gradle&lt;/c1&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153747Z" creationid="huanghaohang" creationdate="20190612T153747Z">
        <seg>如果找不到&lt;c0&gt;settings.gradle&lt;/c0&gt;，它将在父目录里搜索&lt;c1&gt;settings.gradle&lt;/c1&gt;文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no build types are defined in a project, then a single, default build type called 'debug' is added.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035551Z" creationid="huanghaohang" creationdate="20190610T035551Z">
        <seg>如果在项目中未定义任何构建类型，那么会添加一个默认的“debug”构建类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no flavor is defined for a component, then a single default flavor named 'default' is used.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053008Z" creationid="huanghaohang" creationdate="20190610T053008Z">
        <seg>如果一个组件没有定义任何的风格，那么会使用一个叫“default”的默认风格。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If no target platforms are defined for a project, then all binaries are built to target a default platform named 'current'. This default platform does not specify any &lt;c0&gt;architecture&lt;/c0&gt; or &lt;c1&gt;operatingSystem&lt;/c1&gt; value, hence using the default values of the first available tool chain.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T092658Z" creationid="huanghaohang" creationdate="20190610T092658Z">
        <seg>如果没有为项目定义目标平台，那么所有的二进制文件将针对默认平台“current”进行构建。这个默认平台不指定任何的 &lt;c0&gt;architecture&lt;/c0&gt; 或 &lt;c1&gt;operatingSystem&lt;/c1&gt; 值，因此会使用第一个可用工具链的默认值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If someone wants to use your project as a library, she simply needs to declare on which configuration of the dependency to depend on. A Gradle dependency offers the &lt;c0&gt;configuration&lt;/c0&gt; property to declare this. If this is not specified, the &lt;c1&gt;default&lt;/c1&gt; configuration is used (see &lt;a2&gt;Section 50.4.9, “Dependency configurations”&lt;/a2&gt;). Using your project as a library can either happen from within a multi-project build or by retrieving your project from a repository. In the latter case, an &lt;c3&gt;ivy.xml&lt;/c3&gt; descriptor in the repository is supposed to contain all the necessary information. If you work with Maven repositories you don't have the flexibility as described above. For how to publish to a Maven repository, see the section &lt;a4&gt;Section 52.6, “Interacting with Maven repositories”&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T090813Z" creationid="huanghaohang" creationdate="20190606T090813Z">
        <seg>如果有人希望把你的项目作为一个库使用，那么她只需要在要依赖的依赖配置上声明。Gradle 依赖提供了 &lt;c0&gt;configuration&lt;/c0&gt; 属性来声明它。如果这个属性没有指定，则使用 &lt;c1&gt;default&lt;/c1&gt; 配置（见 &lt;a2&gt;第 50.4.9 节，《依赖配置》&lt;/a2&gt;）。把一个项目作为库使用，可能是因为多项目构建，也可能是从仓库中获取项目。在后一种情况下，仓库中的 &lt;c3&gt;ivy.xml&lt;/c3&gt; 描述符应该包含所有必要的信息。如果你使用 Maven 仓库，则没有如上所述的灵活性。有关如何发布到 Maven 仓库，请参阅&lt;a4&gt;第 52.6 节，《与 Maven 存储库交互》&lt;/a4&gt;一节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If something's not working for you, posting a question or problem report to the forums is the fastest way to get help. It's also the place to post improvement suggestions or new ideas. The development team frequently posts news items and announces releases via the forum, making it a great way to stay up to date with the latest Gradle developments.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T122322Z" creationid="95" creationdate="20170723T122322Z">
        <seg>如果出了问题，到论坛上提问或上报问题是获取帮助的最佳方式。有什么改进的建议或是新想法，也可以到论坛上发帖。开发团队会经常地通过论坛发布一些新闻和发表更新，使其成为与最新的Gradle开发保持更新的最佳方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If specifying this information in the user &lt;c0&gt;gradle.properties&lt;/c0&gt; file is not feasible for your environment, you can source the information however you need to and set the project properties manually.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133037Z" creationid="huanghaohang" creationdate="20190608T133037Z">
        <seg>如果在用户的 &lt;c0&gt;gradle.properties&lt;/c0&gt; 文件中指定的信息不适合你的环境，你可以读取需要的这些信息并手动设置项目属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the Java plugin is also applied to your project, a new task named &lt;c0&gt;jacocoTestReport&lt;/c0&gt; is created that depends on the &lt;c1&gt;test&lt;/c1&gt; task. The report is available at &lt;c2&gt;&lt;e3&gt;&lt;c4&gt;$buildDir&lt;/c4&gt;&lt;/e3&gt;/reports/jacoco/test&lt;/c2&gt;. By default, a HTML report is generated.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T134811Z" creationid="huanghaohang" creationdate="20180712T133917Z">
        <seg>如果你的项目同时也应用了 Java 插件，那么会创建一个名为 &lt;c0&gt;jacocoTestReport&lt;/c0&gt; 的新任务，并且这个新任务依赖于 &lt;c1&gt;test&lt;/c1&gt; 任务。该报告可以在 &lt;c2&gt;&lt;e3&gt;&lt;c4&gt;$buildDir&lt;/c4&gt;&lt;/e3&gt;/report/jacoco/test&lt;/c2&gt; 中看到。默认情况下，会生成一个 HTML 报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the daemon process is currently busy running some job, a brand new daemon process will be started.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180115T142902Z" creationid="huanghaohang" creationdate="20180115T142902Z">
        <seg>如果该守护进程当前正忙于运行一些作业，则将启动一个全新的守护进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the dependency is declared as a dynamic version (like &lt;c0&gt;1.+&lt;/c0&gt;), Gradle will resolve this to the newest available static version (like &lt;c1&gt;1.2&lt;/c1&gt;) in the repository. For Maven repositories, this is done using the &lt;c2&gt;maven-metadata.xml&lt;/c2&gt; file, while for Ivy repositories this is done by directory listing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T032615Z" creationid="huanghaohang" creationdate="20190604T032314Z">
        <seg>如果依赖被声明为一个动态版本（如 &lt;c0&gt;1.+&lt;/c0&gt;），Gradle 将会把它解析为仓库中最新的静态版本（如 &lt;c1&gt;1.2&lt;/c1&gt;）。对于 Maven 存储库，它是通过 &lt;c2&gt;maven-metadata.xml&lt;/c2&gt; 文件来实现的；而对于 Ivy 存储库，则是通过目录列表来实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the module descriptor is a POM file that has a parent POM declared, Gradle will recursively attempt to resolve each of the parent modules for the POM.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T032722Z" creationid="huanghaohang" creationdate="20190604T032618Z">
        <seg>如果模块描述符是一个有父 POM 声明的 POM 文件，Gradle 将以递归方式尝试解析该 POM 文件的每个父模块。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the rules for skipping a task can't be expressed with predicate, you can use the &lt;a0&gt;&lt;c1&gt;StopExecutionException&lt;/c1&gt;&lt;/a0&gt;. If this exception is thrown by an action, the further execution of this action as well as the execution of any following action of this task is skipped. The build continues with executing the next task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084828Z" creationid="huanghaohang" creationdate="20170922T084210Z">
        <seg>如果跳过任务的规则不能用断言来表达，你可以使用&lt;a0&gt;&lt;c1&gt;StopExecutionException&lt;/c1&gt;&lt;/a0&gt;。如果一个操作抛出此异常，则此操作的接下来的执行以及该任务的任何后续操作都会跳过。构建会继续执行下一个任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the type could not be inferred, the type "&lt;c0&gt;basic&lt;/c0&gt;" will be used.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214310Z" creationid="95" creationdate="20190131T214310Z">
        <seg>如果类型无法推断，将使用“&lt;c0&gt;basic&lt;/c0&gt;”类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there are any differences between the &lt;e0&gt;compared outcomes&lt;/e0&gt;, the task will fail. The location of the HTML report providing insight into the comparison will be given. If all compared outcomes are found to be identical, and there are no uncompared outcomes, and there are no unknown build outcomes the task will succeed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141303Z" creationid="huanghaohang" creationdate="20210515T141303Z">
        <seg>如果在&lt;e0&gt;比较结果&lt;/e0&gt;之间存在任何的差异，那么任务就会失败，然后会给出一个对比较深入分析的HTML报告的位置。如果所有比较结果都相同，并且没有未比较的结果和未知的构建结果，那么这个任务就会执行成功。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If versions are unclear you can introduce subtle bugs which are very hard to find. For example there might be a project which uses Hibernate 2.5. Think about a developer who decides to install version 3.0.5 of Hibernate on her machine to fix a critical security bug but forgets to notify others in the team of this change. She may address the security bug successfully, but she also may have introduced subtle bugs into a codebase that was using a now-deprecated feature from Hibernate. Weeks later there is an exception on the integration machine which can't be reproduced on anyone's machine. Multiple developers then spend days on this issue only finally realising that the error would have easy to uncover if they knew that Hibernate had been upgraded from 2.5 to 3.0.5.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T162408Z" creationid="95" creationdate="20190210T145957Z">
        <seg>如果版本不清楚，你可能会引入一些很难找以的微妙错误。例如可能有一个项目使用 Hibernate 2.5，想一下一个开发者决定在她的机器上安装 3.0.5 的版本，以修复一个关键的安全 bug，但她忘记通知其他团队这个变化。她可能成功地解决了这个安全 bug，但她也可能引入一些 bug 到代码库中，如项目用到了 Hibernate 现在弃用的功能。一周后，在集成的机器上可能会有一个异常，而这个异常无法在任何人的机器上复现。然后多个开发者花了数天的时间去查这个问题，最终才意识到，如果他们知道 Hibernate 已经从 2.5 升级到 3.0.5，这个错误会很容易发现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are coming from Ant, such an enhanced Gradle task as &lt;s0&gt;&lt;e1&gt;Copy&lt;/e1&gt;&lt;/s0&gt; looks like a mixture between an Ant target and an Ant task. And this is actually the case. The separation that Ant does between tasks and targets is not done by Gradle. The simple Gradle tasks are like Ant's targets and the enhanced Gradle tasks also include the Ant task aspects. All of Gradle's tasks share a common API and you can create dependencies between them. Such a task might be nicer to configure than an Ant task. It makes full use of the type system, is more expressive and easier to maintain.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T045708Z" creationid="huanghaohang" creationdate="20170923T045708Z">
        <seg>如果你是从 Ant 转过来的，像&lt;s0&gt;&lt;e1&gt;Copy&lt;/e1&gt;&lt;/s0&gt;这种增强的Gradle任务，看起来就像一个Ant目标和Ant任务之间的混合。实际上确实是这样子。Gradle 不像Ant那样对任务和目标进行分离。简单的Gradle任务就像Ant的目标，而增强的Gradle任务也包含了Ant任务方面的内容。所有的Gradle任务共享一个通用的API，你可以创建它们之间的依赖关系。这样的任务可能比Ant任务更好配置，它充分利用了类型系统，更具表现力也更易于维护。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are encountering problems, one of the first things to try is using the very latest release of Gradle. New versions of Gradle are released frequently with bug fixes and new features. The problem you are having may have been fixed in a new release.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121207Z" creationid="95" creationdate="20170723T121006Z">
        <seg>当您遇到问题时，首先确认一下是否使用的最新版本的Gradle。新版本的Gradle总是会更加完善并且带有新特性。有可能遇到的问题在一个新的版本中已经被修复。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are interested in the DSL elements mentioned here, have a look at &lt;a0&gt;&lt;c1&gt;Project.configurations{}&lt;/c1&gt;&lt;/a0&gt;, &lt;a2&gt;&lt;c3&gt;Project.repositories{}&lt;/c3&gt;&lt;/a2&gt; and &lt;a4&gt;&lt;c5&gt;Project.dependencies{}&lt;/c5&gt;&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051447Z" creationid="huanghaohang" creationdate="20170908T051314Z">
        <seg>如果对这里提到的DSL元素感兴趣，请查看&lt;a0&gt;&lt;c1&gt;Project.configurations{}&lt;/c1&gt;&lt;/a0&gt;，&lt;a2&gt;&lt;c3&gt;Project.repositories{}&lt;/c3&gt;&lt;/a2&gt;和&lt;a4&gt;&lt;c5&gt;Project.dependencies{}&lt;/c5&gt;&lt;/a4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are looking for documentation on the original Ivy publishing support using the &lt;c0&gt;Upload&lt;/c0&gt; task please see &lt;a1&gt;Chapter 51, &lt;i2&gt;Publishing artifacts&lt;/i2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T154353Z" creationid="huanghaohang" creationdate="20210516T154156Z">
        <seg>如果你正在查找关于使用 &lt;c0&gt;Upload&lt;/c0&gt; 任务的原始的Ivy发布支持的文档，请查阅《&lt;a1&gt;第五十一章，&lt;i2&gt;发布构件&lt;/i2&gt;&lt;/a1&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are not familiar with project artifacts and configurations, you should read the &lt;a0&gt;Chapter 51, &lt;i1&gt;Publishing artifacts&lt;/i1&gt;&lt;/a0&gt; that introduces these concepts. This chapter also describes “publishing artifacts” using a different mechanism than what is described in this chapter. The publishing functionality described here will eventually supersede that functionality.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210517T161507Z" creationid="huanghaohang" creationdate="20210517T161507Z">
        <seg>如果你不熟悉项目工件和配置，你应该阅读介绍这些概念的《&lt;a0&gt;第五十一章，&lt;i1&gt;发布工件&lt;/i1&gt;&lt;/a0&gt;》。本章还介绍了使用另一种不同的机制的“发布工件 ”。这里描述的发布功能最终会取代那一功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are using one of the tasks that come with Gradle, such as a task added by the Java plugin, you might have noticed that Gradle will skip tasks that are up-to-date. This behaviour is also available for your tasks, not just for built-in tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T093751Z" creationid="huanghaohang" creationdate="20170922T085425Z">
        <seg>如果你使用 Gradle 自带的任务，如 Java 插件所添加的任务的话，你可能已经注意到 Gradle 将跳过最新的任务。这种行为也可以用于你的任务，而不仅仅是内置任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are using the Gradle Daemon, try temporarily disabling the daemon (you can pass the command line switch &lt;c0&gt;--no-daemon&lt;/c0&gt;). More information about troubleshooting daemon is located in &lt;a1&gt;Chapter 19, &lt;i2&gt;The Gradle Daemon&lt;/i2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121452Z" creationid="95" creationdate="20170723T121210Z">
        <seg>如果您正在使用Gradle守护进程，尝试禁掉守护进程（通过向命令行中传入&lt;c0&gt;--no-daemon&lt;/c0&gt;参数）。更多的内容可参阅 《&lt;a1&gt;第十九章， &lt;i2&gt;Gradle 守护进程&lt;/i2&gt;&lt;/a1&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are working with a distributed version control system like Git you probably don't want to use the version control system to store libraries as people check out the whole history. But even here the flexibility of Gradle can make your life easier. For example you can use a shared flat directory without XML descriptors and yet you can have full transitive dependency management as described above.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T014736Z" creationid="huanghaohang" creationdate="20190606T010319Z">
        <seg>如果你正在使用像 Git 一样的分布式版本控制系统，由于人们会检出整个历史，那么你可能不希望使用版本控制系统来保存这些库。但即使是这样，Gradle 的灵活性也可以让你更轻松。例如，你可以使用不带 XML 描述符的共享平面目录，但是却能如上所述有完整的传递依赖管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you build via the wrapper, any existing Gradle distribution installed on the machine is ignored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141301Z" creationid="huanghaohang" creationdate="20191219T141301Z">
        <seg>如果你通过包装器构建，这台机器上已安装的任何 Gradle 分发包都会被忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you come from Maven land you might be perfectly happy with this. If you come from Ivy land, you might expect some more fine grained control. Gradle offers this to you:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162643Z" creationid="huanghaohang" creationdate="20190617T162643Z">
        <seg>如果你是从 Maven 转过来的，你会对这一点很满意的。如果你是从 Ivy 转过来，你可能还想要一些更细粒度的控制。Gradle 向你提供了这种控制：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you declare a module dependency, Gradle looks for a corresponding module descriptor file (&lt;c0&gt;pom.xml&lt;/c0&gt; or &lt;c1&gt;ivy.xml&lt;/c1&gt;) in the repositories. If such a module descriptor file exists, it is parsed and the artifacts of this module (e.g. &lt;c2&gt;hibernate-3.0.5.jar&lt;/c2&gt;) as well as its dependencies (e.g. cglib) are downloaded. If no such module descriptor file exists, Gradle looks for a file called &lt;c3&gt;hibernate-3.0.5.jar&lt;/c3&gt; to retrieve. In Maven, a module can have one and only one artifact. In Gradle and Ivy, a module can have multiple artifacts. Each artifact can have a different set of dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190528T022308Z" creationid="huanghaohang" creationdate="20190528T021912Z">
        <seg>如果你定义了一个模块依赖，Gradle 将在仓库中查找相应的模块描述符文件（&lt;c0&gt;pom.xml&lt;/c0&gt; 或 &lt;c1&gt;ivy.xml&lt;/c1&gt;）。如果存在这样的模块描述符文件，它会进行解析，并下载此模块的工件（如 &lt;c2&gt;hibernate-3.0.5.jar&lt;/c2&gt;）及其依赖（如 cglib）。如果不存在这样的模块描述符文件，Gradle将查找名为 &lt;c3&gt;hibernate-3.0.5.jar&lt;/c3&gt; 的文件。在 Maven 中，一个模块只能有一个工件。在 Gradle 和 Ivy 中，一个模块可以有多个工件。每个工件都可以有一组不同的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you define an exclude for a particular configuration, the excluded transitive dependency will be filtered for all dependencies when resolving this configuration or any inheriting configuration. If you want to exclude a transitive dependency from all your configurations you can use the Groovy spread-dot operator to express this in a concise way, as shown in the example. When defining an exclude, you can specify either only the organization or only the module name or both. Have also a look at the API documentation of &lt;a0&gt;&lt;c1&gt;Dependency&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Configuration&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T112946Z" creationid="huanghaohang" creationdate="20190602T105701Z">
        <seg>如果你为一个特定配置定义了排除，那么解析这个配置或任何继承的配置时，所有依赖的被排除的传递依赖都会被过滤掉。如果你要从所有配置中排除传递依赖，那么可以使用一种简明的方式，使用 Groovy 的 spread-dot 运算符来表示此操作，如示例中所示。定义排除时，你可以只指定组织或只指定模块名称，或者两者都指定。另请查看 &lt;a0&gt;&lt;c1&gt;Dependency&lt;/c1&gt;&lt;/a0&gt; 和 &lt;a2&gt;&lt;c3&gt;Configuration&lt;/c3&gt;&lt;/a2&gt; 的 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you don't want any download to happen when your project is build via &lt;s0&gt;&lt;s1&gt;gradlew&lt;/s1&gt;&lt;/s0&gt;, simply add the Gradle distribution zip to your version control at the location specified by your wrapper configuration. A relative URL is supported - you can specify a distribution file relative to the location of &lt;c2&gt;gradle-wrapper.properties&lt;/c2&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141246Z" creationid="huanghaohang" creationdate="20191219T140107Z">
        <seg>如果你不想项目在通过 &lt;s0&gt;&lt;s1&gt;gradlew&lt;/s1&gt;&lt;/s0&gt; 构建时进行下载，那么只需将 Gradle 分发包的 zip 文件添加到版本控制中包装器配置所指定的位置上。它支持相对 URL——你可以通过相对于 &lt;c2&gt;gradle-wrapper.properties&lt;/c2&gt; 文件的位置指定一个分发文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you have a problem with your build, try temporarily disabling the daemon (you can pass the command line switch &lt;c0&gt;--no-daemon&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025433Z" creationid="huanghaohang" creationdate="20180120T025433Z">
        <seg>如果你的构建有问题，请尝试暂时禁用守护进程（可以通过使用命令行开关 &lt;c0&gt;--no-daemon&lt;/c0&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you have just gotten the latest version of source from your version control system which included changes in other projects that :api depends on, you might want to not only build all the projects you depend on, but test them as well. The &lt;c0&gt;buildNeeded&lt;/c0&gt; task also tests all the projects from the project lib dependencies of the testRuntime configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141649Z" creationid="huanghaohang" creationdate="20190622T141649Z">
        <seg>如果你刚从版本控制系统中获取到最新的代码，其中包含了 :api 所依赖的其他项目的修改，那么你可能不只想构建所依赖的所有项目，还要对其进行测试。&lt;c0&gt;buildNeeded&lt;/c0&gt; 任务也用于测试 testRuntime 配置中项目库依赖所配置的所有项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you have more than one artifact to publish, things work a little bit differently. See&lt;a0&gt;Section 52.6.4.1, “Multiple artifacts per project”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111219Z" creationid="huanghaohang" creationdate="20190607T111219Z">
        <seg>如果要发布多个工件，那么要做的事情会有些不同。请参阅&lt;a0&gt;第 52.6.4.1 节，“每个项目多个工件”&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you haven't had to deal with the curse of conflicting versions of jars on a classpath, here is a small anecdote of the fun that awaits you. In a large project with 30 submodules, adding a dependency to a subproject changed the order of a classpath, swapping Spring 2.5 for an older 2.4 version. While the build continued to work, developers were starting to notice all sorts of surprising (and surprisingly awful) bugs in production. Worse yet, this unintentional downgrade of Spring introduced several security vulnerabilities into the system, which now required a full security audit throughout the organization.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T124940Z" creationid="95" creationdate="20190316T124940Z">
        <seg>如果你还没有处理过在类路径中 jar 包版本冲突的麻烦，这里有一个小趣闻等着你。在一个有30个子模块的大型项目中，向子项目添加的一个依赖改变了类路径的顺序，Spring 2.5与老的2.4版本 顺序被调换了。虽然可以继续构建，开发者会开始注意到在生产中出现了各种令人惊讶（和惊人可怕）的bug。然而，更糟糕的是，无意降低版本的Spring向系统引入了几个安全缺陷，现在需要整个组织进行全面的安全审计。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need more flexibility, you can provide your own &lt;c0&gt;build.gradle&lt;/c0&gt;. Gradle applies the default build script regardless of whether there is one specified. This means you only need to declare the extra things you need. Below is an example. Notice that this example does not need to declare a dependency on the Gradle API, as this is done by the default build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T134728Z" creationid="huanghaohang" creationdate="20191201T134233Z">
        <seg>如果你想更灵活，那么可以提供自己的 &lt;c0&gt;build.gradle&lt;/c0&gt;。Gradle 会应用默认的构建脚本，不管是否另有脚本被指定。这意味着你只需要声明你所需要的额外内容。以下是一个例子。请注意，此示例不需要声明对 Gradle API 的依赖，因为这已由默认的构建脚本完成：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you need to set other properties from the command line, you can use system properties to do so:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085342Z" creationid="huanghaohang" creationdate="20181012T085342Z">
        <seg>如果你需要从命令行设置其他属性，可以使用系统属性来做：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you run Gradle with &lt;s0&gt;&lt;s1&gt;gradlew&lt;/s1&gt;&lt;/s0&gt;, the wrapper checks if a Gradle distribution for the wrapper is available. If not it tries to download it, otherwise it delegates to the &lt;s2&gt;&lt;s3&gt;gradle&lt;/s3&gt;&lt;/s2&gt; command of this distribution with all the arguments passed originally to the &lt;s4&gt;&lt;s5&gt;gradlew&lt;/s5&gt;&lt;/s4&gt; command.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T135731Z" creationid="huanghaohang" creationdate="20191219T135519Z">
        <seg>如果你使用 &lt;s0&gt;&lt;s1&gt;gradlew&lt;/s1&gt;&lt;/s0&gt; 运行 Gradle ，那么包装器会检查要使用的 Gradle 分发是否可用。如果不可用，会尝试下载它，可用的话会将传给 &lt;s4&gt;&lt;s5&gt;gradlew&lt;/s5&gt;&lt;/s4&gt; 命令的所有参数都委托给这个分发包的 &lt;s2&gt;&lt;s3&gt;gradle&lt;/s3&gt;&lt;/s2&gt; 命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you run this from your Gradle project working directory, you should see a tree of tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143505Z" creationid="huanghaohang" creationdate="20170911T143505Z">
        <seg>如果你在Gradle项目目录下运行Gradle GUI，你应该会看到一个任务树。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you think this looks similar to Ant's targets, well, you are right. Gradle tasks are the equivalent to Ant targets. But as you will see, they are much more powerful. We have used a different terminology than Ant as we think the word &lt;s0&gt;&lt;e1&gt;task&lt;/e1&gt;&lt;/s0&gt; is more expressive than the word &lt;s2&gt;&lt;e3&gt;target&lt;/e3&gt;&lt;/s2&gt;. Unfortunately this introduces a terminology clash with Ant, as Ant calls its commands, such as &lt;c4&gt;javac&lt;/c4&gt; or &lt;c5&gt;copy&lt;/c5&gt;, tasks. So when we talk about tasks, we &lt;s6&gt;&lt;e7&gt;always&lt;/e7&gt;&lt;/s6&gt; mean Gradle tasks, which are the equivalent to Ant's targets. If we talk about Ant tasks (Ant commands), we explicitly say &lt;s8&gt;&lt;e9&gt;ant task&lt;/e9&gt;&lt;/s8&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T151624Z" creationid="95" creationdate="20170724T151624Z">
        <seg>如果你认为它看上去和Ant的目标很像，那就对了。Gradle的任务相当于Ant的目标。但是，正如你所见，它们更加强大。我们使用与Ant不同的术语，是因为我们认为&lt;s0&gt;&lt;e1&gt;任务&lt;/e1&gt;&lt;/s0&gt;这个词比&lt;s2&gt;&lt;e3&gt;目标&lt;/e3&gt;&lt;/s2&gt;的含义更丰富。不过不幸的是，这也导致了与Ant的术语冲突。Ant会调用它自己的一些命令，比如像&lt;c4&gt;javac&lt;/c4&gt; 或是 &lt;c5&gt;copy&lt;/c5&gt;任务。因为，当我们讨论任务时，&lt;s6&gt;&lt;e7&gt;通常&lt;/e7&gt;&lt;/s6&gt;指的是Gradle的任务，相当于Ant的目标。当我们讨论Ant 的任务时，我们会明确地说是 &lt;s8&gt;&lt;e9&gt;ant 任务&lt;/e9&gt;&lt;/s8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to switch to a new version of Gradle you don't need to rerun the wrapper task. It is good enough to change the respective entry in the &lt;c0&gt;gradle-wrapper.properties&lt;/c0&gt; file. But if there is for example an improvement in the gradle-wrapper functionality you need to regenerate the wrapper files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T135512Z" creationid="huanghaohang" creationdate="20191219T135512Z">
        <seg>如果要切换到新版本的 Gradle，不用重新运行包装器任务，只要修改 &lt;c0&gt;gradle-wrapper.properties&lt;/c0&gt; 文件中的相应属性就可以了。但是，如果有例如 gradle 包装器功能提升的情况的话，你还是需要重新生成包装器文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to use a (flat) filesystem directory as a repository, simply type:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040522Z" creationid="huanghaohang" creationdate="20190603T040447Z">
        <seg>如果想要把一个（平面）文件系统目录用作仓库，只需简单输入：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you'd like to optimise your build so that only out-of-date inputs are processed, you can do so with an &lt;e0&gt;incremental task&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134547Z" creationid="huanghaohang" creationdate="20190706T134040Z">
        <seg>如果你想优化你的构建，以便只处理已过时的输入，你可以使用&lt;e0&gt;增量任务&lt;/e0&gt;执行此操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you're embedding Gradle and you're looking for exact set of dependencies the tooling API Jar requires please look at one of the samples in &lt;c0&gt;$gradleHome/samples/toolingApi&lt;/c0&gt;. The dependencies are declared in the Gradle build scripts. You can also find the repository declarations where the Jars are obtained from.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T152503Z" creationid="huanghaohang" creationdate="20200106T152503Z">
        <seg>如果你正在嵌入 Gradle，并且正在寻找 tooling API 所需要的确切依赖，那么请查看 &lt;c0&gt;$gradleHome/samples/toolingApi&lt;/c0&gt; 中的样本。依赖是在 Gradle 构建脚本中声明的。你还可以找到获取 Jar 的仓库声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your Java application requires a specific set of JVM settings or system properties, you can configure the &lt;c0&gt;applicationDefaultJvmArgs&lt;/c0&gt; property. These JVM arguments are applied to the &lt;c1&gt;run&lt;/c1&gt; task and also considered in the generated start scripts of your distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T134908Z" creationid="95" creationdate="20190131T134243Z">
        <seg>如果你的 Java 应用程序需要一组特定的 JVM 设置或系统属性，你可以配置&lt;c0&gt;applicationDefaultJvmArgs&lt;/c0&gt; 属性。这些 JVM 参数会被应用于 &lt;c1&gt;run&lt;/c1&gt; 任务，并且在你的分发生成的启动脚本也会考虑到它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your build script needs to use external libraries, you can add them to the script's classpath in the build script itself. You do this using the &lt;c0&gt;buildscript()&lt;/c0&gt; method, passing in a closure which declares the build script classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T140926Z" creationid="huanghaohang" creationdate="20191201T140926Z">
        <seg>如果构建脚本需要使用外部库，那么可以将它们添加到构建脚本本身的脚本类路径中。你可以通过使用 &lt;c0&gt;buildscript()&lt;/c0&gt; 方法，并传入一个声明构建脚本类路径的闭包来完成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your project generates files to be included in the distribution, e.g. documentation, you can add these files to the distribution by adding to the &lt;c0&gt;applicationDistribution&lt;/c0&gt; copy spec.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140504Z" creationid="95" creationdate="20190131T140504Z">
        <seg>如果你的项目生成要在分发中的文件，比如文档，你可以通过把它们添加到&lt;c0&gt;applicationDistribution&lt;/c0&gt;副本规范来将这些文件添加到分发中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your project is supposed to be used as a library, you need to define what are the artifacts of this library and what are the dependencies of these artifacts. The Java plugin adds a &lt;c0&gt;runtime&lt;/c0&gt; configuration for this purpose, with the implicit assumption that the &lt;c1&gt;runtime&lt;/c1&gt; dependencies are the dependencies of the artifact you want to publish. Of course this is fully customizable. You can add your own custom configuration or let the existing configurations extend from other configurations. You might have different group of artifacts which have a different set of dependencies. This mechanism is very powerful and flexible.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T085943Z" creationid="huanghaohang" creationdate="20190606T085943Z">
        <seg>如果你的项目是作为一个库使用，那么你需要定义这个库的工件以及这些工件的依赖。Java 插件为此添加了一个 &lt;c0&gt;runtime&lt;/c0&gt; 配置，并隐式地假定 &lt;c1&gt;runtime&lt;/c1&gt; 依赖是你要发布的工件的依赖。当然，这是可以完全自定义的。你可以添加自己的自定义配置，或者让现有的配置从其他配置中扩展。你可以有不同组的工件，并且这些工件有不同的依赖。这一机制非常强大和灵活。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your project relies on the Maven Central repository you are likely to need an additional custom repository, because:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T152208Z" creationid="huanghaohang" creationdate="20190605T152208Z">
        <seg>如果你的项目依赖于 Maven 中央仓库，你很可能需要额外的自定义仓库，因为：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your proxy requires NTLM authentication, you may need to provide the authentication domain as well as the username and password. There are 2 ways that you can provide the domain for authenticating to a NTLM proxy:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T080854Z" creationid="huanghaohang" creationdate="20180130T080854Z">
        <seg>如果你的代理需要 NTLM 身份验证，则可能需要提供身份验证域以及用户名和密码。有两种方法可以向 NTLM 代理提供进行身份验证的域：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implementing your own custom task class in Gradle is easy. You can implement a custom task class in pretty much any language you like, provided it ends up compiled to bytecode. In our examples, we are going to use Groovy as the implementation language, but you could use, for example, Java or Scala. In general, using Groovy is the easiest option, because the Gradle API is designed to work well with Groovy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T150742Z" creationid="huanghaohang" creationdate="20190626T150742Z">
        <seg>在 Gradle 中实现自己的自定义任务类并不难。你可以使用你喜欢的任何语言来实现一个自定义任务类，只要它最终会被编译成字节码。在我们的示例中，我们将使用 Groovy 作为实现语言，但你也可以使用 Java 或 Scala。通常来说，使用 Groovy 是一种最简单的选择，因为 Gradle API 就是被设计为方便使用 Groovy 的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implicitly applied plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070308Z" creationid="huanghaohang" creationdate="20190205T070308Z">
        <seg>隐式应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Important information messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221524Z" creationid="huanghaohang" creationdate="20180105T221524Z">
        <seg>重要的信息消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Importing an Ant build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015206Z" creationid="huanghaohang" creationdate="20180314T015206Z">
        <seg>导入 Ant 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Improved HTML reporting, similar to that available for JUnit.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090711Z" creationid="huanghaohang" creationdate="20190611T090711Z">
        <seg>改进 HTML 报告，类似于 JUnit 那样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;a0&gt;Chapter 2, &lt;i1&gt;Overview&lt;/i1&gt;&lt;/a0&gt; you will find a detailed overview of Gradle. Otherwise, the &lt;a2&gt;tutorials&lt;/a2&gt; are waiting, have fun :)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T142020Z" creationid="95" creationdate="20170721T142020Z">
        <seg>在 《&lt;a0&gt;第二章，&lt;i1&gt;概述&lt;/i1&gt;&lt;/a0&gt;》，你将会看到有关Gradle的详细介绍。另一方面， &lt;a2&gt;教程&lt;/a2&gt; 在等你，开始吧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;a0&gt;Section 59.5, “External dependencies for the build script”&lt;/a0&gt; is was explained how to add external dependencies to a build script. Init scripts can similarly have external dependencies defined. You do this using the &lt;c1&gt;initscript()&lt;/c1&gt; method, passing in a closure which declares the init script classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T150729Z" creationid="huanghaohang" creationdate="20191206T150729Z">
        <seg>在 &lt;a0&gt;第 59.5 节，《构建脚本的外部依赖》&lt;/a0&gt; 中，已经解释了如何向构建脚本添加外部依赖。初始化脚本同样可以定义外部依赖。通过使用 &lt;c1&gt;initscript()&lt;/c1&gt; 方法，传入一个声明了初始化脚本类路径的闭包就可以了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Gradle a dependency can have different configurations (as your project can have different configurations). If you don't specify anything explicitly, Gradle uses the default configuration of the dependency. For dependencies from a Maven repository, the default configuration is the only available one anyway. If you work with Ivy repositories and want to declare a non-default configuration for your dependency you have to use the map notation and declare:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141431Z" creationid="huanghaohang" creationdate="20190602T141431Z">
        <seg>在 Gradle 中，一个依赖可以有不同的配置（就像你的项目可以有不同的配置）。如果未显式指定任何内容，那么 Gradle 会使用依赖的默认配置。对于 Maven 仓库的依赖，默认配置是唯一可用的配置。 如果你使用 Ivy 仓库并且想为依赖声明一个非默认配置，那么必须使用映射表示法并声明：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Gradle dependencies are grouped into &lt;e0&gt;configurations&lt;/e0&gt;. A configuration is simply a named set of dependencies. We will refer to them as &lt;e1&gt;dependency configurations&lt;/e1&gt;. You can use them to declare the external dependencies of your project. As we will see later, they are also used to declare the publications of your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T032324Z" creationid="huanghaohang" creationdate="20170908T032324Z">
        <seg>在Gradle中依赖会被分为几组&lt;e0&gt;配置&lt;/e0&gt;。配置只是一组依赖的命名，我们会把它们称为&lt;e1&gt;依赖配置&lt;/e1&gt;。你可以使用它们来声明项目的外部依赖。我们稍后会看到，它们也被用来声明你的项目的发布内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Gradle dependencies are grouped into configurations. Configurations have a name, a number of other properties, and they can extend each other. Many Gradle plugin add pre-defined configurations to your project. The Java plugin, for example, adds some configurations to represent the various classpaths it needs. see &lt;a0&gt;Section 23.5, “Dependency management”&lt;/a0&gt; for details. Of course you can add custom configurations on top of that. There are many use cases for custom configurations. This is very handy for example for adding dependencies not needed for building or testing your software (e.g. additional JDBC drivers to be shipped with your distribution).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T124627Z" creationid="huanghaohang" creationdate="20190521T110245Z">
        <seg>在Gradle中，依赖将被分组到配置。配置有一个名称和许多其他属性，并且可以相互扩展。许多Gradle插件会向项目添加了预定义的配置。例如，Java插件添加了一些配置来表示它需要的各种类路径。有关详细信息，请参阅 &lt;a0&gt;第23.5节，《依赖管理》&lt;/a0&gt; 。当然，你可以在此基础上添加自定义配置。有关自定义配置的用例很多。这是非常方便的，例如添加依赖时不需要再去构建或测试你的软件（比如，要随分发一起提供的其他JDBC驱动程序）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Maven you can define repositories and optionally snapshot repositories. If no snapshot repository is defined, releases and snapshots are both deployed to the &lt;c0&gt;repository&lt;/c0&gt; element. Otherwise snapshots are deployed to the &lt;c1&gt;snapshotRepository&lt;/c1&gt; element.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093610Z" creationid="huanghaohang" creationdate="20190607T093610Z">
        <seg>在 Maven 中，你可以定义普通仓库和可选的快照仓库。如果没有定义快照仓库，那么发行版和快照都会部署到 &lt;c0&gt;repository&lt;/c0&gt; 元素中。否则，快照将部署到 &lt;c1&gt;snapshotRepository&lt;/c1&gt; 元素。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a command-line shell, enter into the containing directory and execute the build script by running &lt;s0&gt;&lt;c1&gt;gradle -q hello&lt;/c1&gt;&lt;/s0&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T145113Z" creationid="95" creationdate="20170724T144952Z">
        <seg>然后在命令行shell里，进入到当前目录并运行&lt;s0&gt;&lt;c1&gt;gradle -q hello&lt;/c1&gt;&lt;/s0&gt;来执行这个构建脚本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to supporting a traditional command line interface, Gradle offers a graphical user interface. This is a stand alone user interface that can be launched with the &lt;s0&gt;&lt;s1&gt;--gui&lt;/s1&gt;&lt;/s0&gt; option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143251Z" creationid="huanghaohang" creationdate="20170911T143251Z">
        <seg>除了支持传统的命令行界面，Gradle也提供了一个图形用户界面（GUI）。它是一个独立的用户界面，可以使用&lt;s0&gt;&lt;s1&gt;--gui&lt;/s1&gt;&lt;/s0&gt;选项来启动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to the built-in tasks shown below, you can also use the &lt;a0&gt;project report plugin&lt;/a0&gt; to add tasks to your project which will generate these reports.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T010826Z" creationid="huanghaohang" creationdate="20170910T010826Z">
        <seg>除了下面所示的内置任务之外，还可以使用&lt;a0&gt;项目报告插件&lt;/a0&gt;将一些任务添加到项目中，以生成这些报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, user interfaces can provide some interesting features if the Gradle model can be built relatively quickly. For example, the daemon might be useful for following scenarios:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133939Z" creationid="huanghaohang" creationdate="20180108T133939Z">
        <seg>此外，如果可以相对较快地建立 Gradle 模型，用户界面可以提供一些有趣的功能。例如，守护进程可能对以下情况有用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In any of these cases, Gradle will consider all of the input files to be &lt;c0&gt;outOfDate&lt;/c0&gt;. The &lt;a1&gt;&lt;c2&gt;IncrementalTaskInputs.outOfDate()&lt;/c2&gt;&lt;/a1&gt; action will be executed for every input file, and the &lt;a3&gt;&lt;c4&gt;IncrementalTaskInputs.removed()&lt;/c4&gt;&lt;/a3&gt; action will not be executed at all.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141012Z" creationid="huanghaohang" creationdate="20190707T141012Z">
        <seg>在以上所述的任一情况下，Gradle 将把所有输入文件视为 &lt;c0&gt;outOfDate&lt;/c0&gt;，然后会对每个输入文件执行 &lt;a1&gt;&lt;c2&gt;IncrementalTaskInputs.outOfDate()&lt;/c2&gt;&lt;/a1&gt; 操作，并且将不再执行 &lt;a3&gt;&lt;c4&gt;IncrementalTaskInputs.removremoval()&lt;/c4&gt;&lt;/a3&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In case you don't want to use the test class detection, you can disable it by setting &lt;c0&gt;scanForTestClasses&lt;/c0&gt; to false. This will make the test task only use the includes / excludes to find test classes. If &lt;c1&gt;scanForTestClasses&lt;/c1&gt; is disabled and no include or exclude patterns are specified, the respective defaults are used. For include this is &lt;c2&gt;"**/*Tests.class", "**/*Test.class"&lt;/c2&gt; and the for exclude it is &lt;c3&gt;"**/Abstract*.class"&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155855Z" creationid="huanghaohang" creationdate="20180405T155855Z">
        <seg>如果您不想使用测试类检测，则可以通过设置 &lt;c0&gt;scanForTestClasses&lt;/c0&gt; 为 false 来禁用它。这将使测试任务仅使用包含或排除来查找测试类。如果 &lt;c1&gt;scanForTestClasses&lt;/c1&gt; 被禁用，并且没有指定包含或排除模式，则使用相应的默认值。对于包含的默认值是 &lt;c2&gt;“**/*Tests.class”，“**/*Test.class”&lt;/c2&gt;，而排除的默认值是 &lt;c3&gt;“**/Abstract*.class”&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In example below, imagine that version &lt;c0&gt;1.2.1&lt;/c0&gt; contains important fixes and should always be used in preference to &lt;c1&gt;1.2&lt;/c1&gt;. The rule provided will enforce just this: any time version &lt;c2&gt;1.2&lt;/c2&gt; is encountered it will be replaced with &lt;c3&gt;1.2.1&lt;/c3&gt;. Note that this is different from a forced version as described above, in that any other versions of this module would not be affected. This means that the 'newest' conflict resolution strategy would still select version &lt;c4&gt;1.3&lt;/c4&gt; if this version was also pulled transitively.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024355Z" creationid="huanghaohang" creationdate="20190605T024355Z">
        <seg>在下面的示例中，假设版本 &lt;c0&gt;1.2.1&lt;/c0&gt; 包含了重要的修复，并且应该始终优先于 &lt;c1&gt;1.2&lt;/c1&gt; 使用。提供的规则将仅强制执行如下操作：在任何时间，遇到了版本 &lt;c2&gt;1.2&lt;/c2&gt; 时，都把它替换为 &lt;c3&gt;1.2.1&lt;/c3&gt;。请注意，这与上面描述的强制版本有所区别，因为这个模块的其他版本都不受影响。这意味着，如果版本 &lt;c4&gt;1.3&lt;/c4&gt; 也由于依赖传递被获取到，那么"最新的"冲突解决策略还是会选择这个新的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In future the daemon will offer more features:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T135840Z" creationid="huanghaohang" creationdate="20180109T135840Z">
        <seg>未来，该守护进程还会提供更多的功能：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In future we may support other interesting features:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T143327Z" creationid="huanghaohang" creationdate="20191220T143327Z">
        <seg>将来我们可能会支持一些其他有趣的功能：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In general, snappy behavior of the build tool is always handy. If you try using the daemon for your local builds it's going to be hard for you to go back to regular use of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T135120Z" creationid="huanghaohang" creationdate="20180108T134044Z">
        <seg>一般来说，构建工具的敏捷行为总是方便的。如果你尝试在你的本地构建中使用守护进程的话，那么你将很难再回到 Gradle 的常规使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In many cases, more than one native binary can be produced for a component. These binaries may vary based on the tool chain used to build, the compiler/linker flags supplied, the dependencies provided, or additional source files provided. Each native binary produced for a component is referred to as &lt;c0&gt;variant&lt;/c0&gt;. Binary variants are discussed in detail below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T031233Z" creationid="huanghaohang" creationdate="20190609T030806Z">
        <seg>在许多情况下，一个组件可以生成多个本机二进制文件。基于用于构建的工具链，提供的编译器或链接器标志，提供的依赖或其他源文件，这些二进制文件可能会有变化。一个组件生成的每个本机二进制都称为 &lt;c0&gt;variant&lt;/c0&gt;。二进制文件变体下面再进行详细讨论。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, Gradle's default dependency management will resolve the dependencies that you want in your build. In some cases, however, it can be necessary to tweak dependency resolution to ensure that your build receives exactly the right dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033837Z" creationid="huanghaohang" creationdate="20190604T033458Z">
        <seg>在大多数情况下，Gradle 默认的依赖管理会解析你构建中所需要的依赖。但是，在某些情况下，可能需要轻微调整依赖解析，以确保你的构建能精确得到正确的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In order to create PGP signatures, you will need a key pair (instructions on creating a key pair using the &lt;a0&gt;GnuPG tools&lt;/a0&gt; can be found in the &lt;a1&gt;GnuPG HOWTOs&lt;/a1&gt;). You need to provide the signing plugin with your key information, which means three things:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T131939Z" creationid="huanghaohang" creationdate="20190608T131939Z">
        <seg>要创建 PGP 签名，你需要一个密钥对（有关使用 &lt;a0&gt;GnuPG 工具&lt;/a0&gt;创建密钥对的介绍可以在 &lt;a1&gt;GnuPG HOWTOs&lt;/a1&gt;中找到）。你需要向签名插件提供你的密钥信息，即如下三项事情：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In our examples, we will start with the plugin in the build script, to keep things simple. Then we will look at creating a standalone project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150215Z" creationid="huanghaohang" creationdate="20190719T150215Z">
        <seg>在我们的例子中，我们将从在构建脚本中定义插件开始，以保持简单。随后我们会着眼于创建一个独立的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In our examples, we will start with the task class in the build script, to keep things simple. Then we will look at creating a standalone project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T153941Z" creationid="huanghaohang" creationdate="20190704T153941Z">
        <seg>在我们的例子中，为了简单，我们将从在构建脚本中定义任务类开始。然后我们看一下创建一个独立的项目的方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In short, version conflicts are bad, and you should manage your transitive dependencies to avoid them. You might also want to learn where conflicting versions are used and consolidate on a particular version of a dependency across your organization. With a good conflict reporting tool like Gradle, that information can be used to communicate with the entire organization and standardize on a single version. &lt;s0&gt;&lt;e1&gt;If you think version conflicts don't happen to you, think again.&lt;/e1&gt;&lt;/s0&gt; It is very common for different first-level dependencies to rely on a range of different overlapping versions for other dependencies, and the JVM doesn't yet offer an easy way to have different versions of the same jar in the classpath (see &lt;a2&gt;Section 50.1.2, “Dependency management and Java”&lt;/a2&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T130044Z" creationid="95" creationdate="20190316T124945Z">
        <seg>简而言之，版本冲突是很不好的，你应该管理您的传递依赖以避免版本冲突。你可能还希望了解使用冲突版本的位置，并在整个组织中统一依赖的指定版本。有了类似于Gradle的良好冲突报告工具，这些信息可 用于与整个组织进行通信，并在单个版本上实现标准化。&lt;s0&gt;&lt;e1&gt;如果你觉得你不会发生版本冲突，那就再想想。&lt;/e1&gt;&lt;/s0&gt;不同的第一级依赖，依赖于其他依赖的不同重叠范围的版本非常常见，并且JVM还不能提供简单的方法，使是能在类路径中让相同的 jar 包可以有不同的版本（请参阅 《&lt;a2&gt;第50.1.2节，“依赖管理与Java”&lt;/a2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some cases it is useful to control the &lt;s0&gt;&lt;e1&gt;order&lt;/e1&gt;&lt;/s0&gt; in which 2 tasks will execute, without introducing an explicit dependency between those tasks. The primary difference between a task &lt;s2&gt;&lt;e3&gt;ordering&lt;/e3&gt;&lt;/s2&gt; and a task &lt;s4&gt;&lt;e5&gt;dependency&lt;/e5&gt;&lt;/s4&gt; is that an ordering rule does not influence which tasks will be executed, only the order in which they will be executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030029Z" creationid="huanghaohang" creationdate="20170922T030029Z">
        <seg>在某些情况下，控制两个任务的执行&lt;s0&gt;&lt;e1&gt;顺序&lt;/e1&gt;&lt;/s0&gt;，而不引入这些任务之间的依赖，是很有用的。任务&lt;s2&gt;&lt;e3&gt;排序&lt;/e3&gt;&lt;/s2&gt;和任务&lt;s4&gt;&lt;e5&gt;依赖&lt;/e5&gt;&lt;/s4&gt;之间的主要区别是，排序规则不会影响执行哪些任务，只会影响任务执行的顺序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some cases the artifact that you need to sign may not be part of a configuration. In this case you can directly sign the task that produces the artifact to sign.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135223Z" creationid="huanghaohang" creationdate="20190608T135223Z">
        <seg>在某些情况下，你需要签名的工件可能不在配置中。在这种情况下，你可以直接对生成要签名的工件的任务进行签名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In some corporate environments, the list of module versions that can be declared in Gradle builds is maintained and audited externally. Dependency resolve rules provide a neat implementation of this pattern:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T020344Z" creationid="huanghaohang" creationdate="20190605T020045Z">
        <seg>在某些企业环境中，可以在 Gradle 构建中声明的模块版本列表，是在外部进行维护和审计的。依赖解析规则提供了这种模式的整洁实现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the build file of the &lt;c0&gt;water&lt;/c0&gt; project we use an &lt;c1&gt;afterEvaluate&lt;/c1&gt; notification. This means that the closure we are passing gets evaluated &lt;s2&gt;&lt;e3&gt;after&lt;/e3&gt;&lt;/s2&gt; the build scripts of the subproject are evaluated. As the property &lt;c4&gt;arctic&lt;/c4&gt; is set in those build scripts, we have to do it this way. You will find more on this topic in &lt;a5&gt;Section 56.6, “Dependencies - Which dependencies?”&lt;/a5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T151322Z" creationid="huanghaohang" creationdate="20190615T151322Z">
        <seg>在 &lt;c0&gt;water&lt;/c0&gt; 项目的构建文件中，我们使用了一个 &lt;c1&gt;afterEvaluate&lt;/c1&gt; 通知。这意味着，我们所传的闭包将在子项目的构建脚本评估&lt;s2&gt;&lt;e3&gt;之后&lt;/e3&gt;&lt;/s2&gt;才进行评估。由于属性 &lt;c4&gt;arctic&lt;/c4&gt; 设置在这些构建脚本中，所以我们必须这样做。在《&lt;a5&gt;第56.6节，依赖——哪些依赖？&lt;/a5&gt;》中，你可以看到更多有关这个主题的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the build script, the developer declares dependencies with the module group and name, but uses a placeholder version, for example: '&lt;c0&gt;default&lt;/c0&gt;'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T020425Z" creationid="huanghaohang" creationdate="20190605T020425Z">
        <seg>在构建脚本中，开发人员使用模块组和名称声明依赖，但版本使用占位符，例如：“&lt;c0&gt;default&lt;/c0&gt;”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the context of build comparison, a build is not necessarily a Gradle build. It can be any invokable “process” that produces observable “outcomes”. At least one of the builds in a comparison will be a Gradle build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152900Z" creationid="huanghaohang" creationdate="20200604T152713Z">
        <seg>在构建比较的上下文中，一个构建不一定是一个 Gradle 构建。它可以是任何可调用的“进程”，产生可观察的“结果”。在比较中，至少有一个构建将是 Gradle 构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the current release client modules have one limitation. Let's say your project is a library and you want this library to be uploaded to your company's Maven or Ivy repository. Gradle uploads the jars of your project to the company repository together with the XML descriptor file of the dependencies. If you use client modules the dependency declaration in the XML descriptor file is not correct. We will improve this in a future release of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112105Z" creationid="huanghaohang" creationdate="20190531T051832Z">
        <seg>当前版本的客户端模块中有一个限制。假设你的项目是一个库，你想要将这个库上传到公司的 Maven 或 Ivy 仓库，Gradle 会将项目的 jar 包与依赖的 XML 描述符文件一起上传到公司仓库中。如果你使用了客户端模块，那么 XML 描述符文件中的依赖声明就会不正确。我们会在 Gradle 的未来版本中改善这一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, &lt;c0&gt;orca&lt;/c0&gt; has a dependency on &lt;c1&gt;seal-1.0&lt;/c1&gt; whereas &lt;c2&gt;shark&lt;/c2&gt; has a dependency on&lt;c3&gt;seal-2.0&lt;/c3&gt;. The original configuration has therefore a version conflict which is resolved to the newer &lt;c4&gt;seal-2.0&lt;/c4&gt; version. The &lt;c5&gt;files&lt;/c5&gt; method therefore returns &lt;c6&gt;seal-2.0&lt;/c6&gt; as a transitive dependency of&lt;c7&gt;orca&lt;/c7&gt;. The copied configuration only has &lt;c8&gt;orca&lt;/c8&gt; as a dependency and therefore there is no version conflict and &lt;c9&gt;seal-1.0&lt;/c9&gt; is returned as a transitive dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153553Z" creationid="huanghaohang" creationdate="20190602T153157Z">
        <seg>在上面的例子中，&lt;c0&gt;orca&lt;/c0&gt; 依赖于 &lt;c1&gt;seal-1.0&lt;/c1&gt; ，而 &lt;c2&gt;shark&lt;/c2&gt; 依赖于 &lt;c3&gt;seal-2.0&lt;/c3&gt;。 原配置因此有版本冲突，所以解析为较新的 &lt;c4&gt;seal-2.0&lt;/c4&gt; 版本。 &lt;c5&gt;&lt;/c5&gt; 方法也因此返回 &lt;c6&gt;seal-2.0&lt;/c6&gt; 作为 &lt;c7&gt;orca&lt;/c7&gt; 的传递依赖。而复制的配置只有 &lt;c8&gt;orca&lt;/c8&gt; 依赖，故而不存在版本冲突，所以 &lt;c9&gt;seal-1.0&lt;/c9&gt; 作为传递依赖被返回。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, a library is defined with a 'english' and 'french' flavor. When compiling the 'french' variant, a separate macro is defined which leads to a different binary being produced.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052935Z" creationid="huanghaohang" creationdate="20190610T052935Z">
        <seg>在上面的示例中，这个库定义了 'english' 和 'french' 两个风格。当编译 'french' 变体时，定义了一个单独的宏，使其生成不同的二进制文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, the content of the "&lt;c0&gt;src/readme&lt;/c0&gt;" directory will be included in the distribution (along with the files in the "&lt;c1&gt;src/dist/main&lt;/c1&gt;" directory which are added by default).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061322Z" creationid="huanghaohang" creationdate="20190128T061322Z">
        <seg>在上面的示例中，“&lt;c0&gt;src/readme&lt;/c0&gt;”目录的内容将被包含进 distribution（与默认添加的“&lt;c1&gt;src/dist/main&lt;/c1&gt;”目录中的文件一起）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, we applied the Java plugin which, among other things, did the following:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024734Z" creationid="huanghaohang" creationdate="20180131T024734Z">
        <seg>在上面的示例中，我们应用了 Java 插件，除此之外还做了下列操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the examples above, it is still possible to execute &lt;c0&gt;taskY&lt;/c0&gt; without causing &lt;c1&gt;taskX&lt;/c1&gt; to run:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035738Z" creationid="huanghaohang" creationdate="20170922T035738Z">
        <seg>在上面的例子中，它仍有可能执行&lt;c0&gt;taskY&lt;/c0&gt;而不会造成&lt;c1&gt;taskX&lt;/c1&gt;也运行：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, execution of the &lt;c0&gt;distribution&lt;/c0&gt; and &lt;c1&gt;release&lt;/c1&gt; tasks results in different value of the &lt;c2&gt;version&lt;/c2&gt; variable.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025155Z" creationid="95" creationdate="20170729T025155Z">
        <seg>在下面的例子中，&lt;c0&gt;distribution&lt;/c0&gt;和&lt;c1&gt;release&lt;/c1&gt; 任务的执行会导致&lt;c2&gt;version&lt;/c2&gt; 变量有不同的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the introductory tutorial (&lt;a0&gt;Chapter 6, &lt;i1&gt;Build Script Basics&lt;/i1&gt;&lt;/a0&gt;) you have learned how to create simple tasks. You have also learned how to add additional behavior to these tasks later on. And you have learned how to create dependencies between tasks. This was all about simple tasks. But Gradle takes the concept of tasks further. Gradle supports &lt;e2&gt;enhanced tasks&lt;/e2&gt;, that is, tasks which have their own properties and methods. This is really different to what you are used to with Ant targets. Such enhanced tasks are either provided by you or are provided by Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120437Z" creationid="huanghaohang" creationdate="20170918T151706Z">
        <seg>在入门教程（《&lt;a0&gt;第六章，&lt;i1&gt;构建脚本基础&lt;/i1&gt;&lt;/a0&gt;》）中，你已经学会了如何创建简单的任务。之后你还学习了如何在向任务添加额外的行为。你也已经学会了如何创建任务之间的依赖。这都是简单的任务。但是Gradle将任务的概念推得更深远。 Gradle支持&lt;e2&gt;增强任务&lt;/e2&gt;，也就是有自己的属性和方法的任务。这是真正的与你所使用的Ant目标（target）的不同之处。这些增强的任务可以由你或者是Gradle提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the settings file you can use a set of methods to build the project tree. Hierarchical and flat physical layouts get special support.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143639Z" creationid="huanghaohang" creationdate="20190612T151450Z">
        <seg>在设置文件中，你可以使用一组方法来构建项目树。其中，层次和平面的物理布局有特别的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the tutorial in &lt;a0&gt;Chapter 7, &lt;i1&gt;Java Quickstart&lt;/i1&gt;&lt;/a0&gt; we used, for example, the &lt;c2&gt;apply()&lt;/c2&gt; method. Where does this method come from? We said earlier that the build script defines a project in Gradle. For each project in the build, Gradle creates an object of type &lt;a3&gt;&lt;c4&gt;Project&lt;/c4&gt;&lt;/a3&gt; and associates this &lt;c5&gt;Project&lt;/c5&gt; object with the build script. As the build script executes, it configures this &lt;c6&gt;Project&lt;/c6&gt; object:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T125213Z" creationid="huanghaohang" creationdate="20170912T124812Z">
        <seg>在教程《&lt;a0&gt;第七章，&lt;i1&gt;Java快速入门&lt;/i1&gt;&lt;/a0&gt;》中，我们使用了&lt;c2&gt;apply()&lt;/c2&gt;方法。这种方法从何而来？我们以前说过，构建脚本在Gradle中定义了一个项目。对于构建中的每个项目，Gradle都会创建一个&lt;a3&gt;&lt;c4&gt;Project&lt;/c4&gt;&lt;/a3&gt;类型的对象，并把这一&lt;c5&gt;Project&lt;/c5&gt;对象与构建脚本相关联。当构建脚本执行时，它会配置这个&lt;c6&gt;Project&lt;/c6&gt;对象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter we will discuss how to use plugins and the terminology and concepts surrounding plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092810Z" creationid="huanghaohang" creationdate="20180130T092810Z">
        <seg>在本章中，我们将讨论如何使用插件以及有关插件的术语和概念。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter, we have had a first look at tasks. But this is not the end of the story for tasks. If you want to jump into more of the details, have a look at &lt;a0&gt;Chapter 15, &lt;i1&gt;More about Tasks&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030800Z" creationid="95" creationdate="20170729T030627Z">
        <seg>在本章中，我们已经对任务有了初步的了解。但是关于任务的内容还不仅仅是这些，如果你想了解更多的细节，请参阅 &lt;a0&gt;第十五章，&lt;i1&gt;任务进阶&lt;/i1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter, you have seen how to do some of the things you commonly need to build a Java based project. This chapter is not exhaustive, and there are many other things you can do with Java projects in Gradle. You can find out more about the Java plugin in &lt;a0&gt;Chapter 23, &lt;i1&gt;The Java Plugin&lt;/i1&gt;&lt;/a0&gt;, and you can find more sample Java projects in the &lt;c2&gt;samples/java&lt;/c2&gt; directory in the Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130337Z" creationid="95" creationdate="20170803T130337Z">
        <seg>在本章中，你已经学习了如何构建一个基于Java的项目。本章节只是简单介绍，Gradle对Java项目可以做的事情还有很多。你可以在《&lt;a0&gt;第二十三章，&lt;i1&gt;Java插件&lt;/i1&gt;&lt;/a0&gt;》中对Java插件进行进一步了解，更多的Java项目示例请在Gradle分发包中的&lt;c2&gt;samples/java&lt;/c2&gt;目录中查看。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter, you have seen some of the things you can do with Gradle from the command-line. You can find out more about the &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; command in &lt;a2&gt;Appendix D, &lt;i3&gt;Gradle Command Line&lt;/i3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031935Z" creationid="huanghaohang" creationdate="20170910T031935Z">
        <seg>在本章中，你已经学到了许多可以从命令行做的事情。关于&lt;s0&gt;&lt;s1&gt;gradle这&lt;/s1&gt;&lt;/s0&gt;命令的更多信息，可以参考《&lt;a2&gt;附录D，&lt;i3&gt;Gradle命令行&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;GreetingPluginExtension&lt;/c0&gt; is a plain old Groovy object with a field called &lt;c1&gt;message&lt;/c1&gt;. The extension object is added to the plugin list with the name &lt;c2&gt;greeting&lt;/c2&gt;. This object then becomes available as a project property with the same name as the extension object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T160318Z" creationid="huanghaohang" creationdate="20190719T155917Z">
        <seg>在这个示例中，&lt;c0&gt;GreetingPluginExtension&lt;/c0&gt; 是一个普通的旧 Groovy 对象，它有一个叫 &lt;c1&gt;message&lt;/c1&gt;的字段。这个扩展对象以 &lt;c2&gt;greeting&lt;/c2&gt; 名字添加到插件列表中。然后该对象变为一个有效的项目属性，属性名称与这个扩展对象相同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, an &lt;c0&gt;ext&lt;/c0&gt; block adds two extra properties to the &lt;c1&gt;project&lt;/c1&gt; object. Additionally, a property named &lt;c2&gt;purpose&lt;/c2&gt; is added to each source set by setting &lt;c3&gt;ext.purpose&lt;/c3&gt; to &lt;c4&gt;null&lt;/c4&gt; (&lt;c5&gt;null&lt;/c5&gt; is a permissible value). Once the properties have been added, they can be read and set like predefined properties.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135016Z" creationid="huanghaohang" creationdate="20170913T133607Z">
        <seg>在这个例子中，&lt;c0&gt;ext&lt;/c0&gt;块将两个额外属性添加到&lt;c1&gt;project&lt;/c1&gt;对象中。此外，通过把&lt;c3&gt;ext.purpose&lt;/c3&gt;设置为&lt;c4&gt;null&lt;/c4&gt;（&lt;c5&gt;null&lt;/c5&gt;是允许的值），将&lt;c2&gt;purpose&lt;/c2&gt;属性添加到每个源码集（source set）中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, several settings can be grouped together within the &lt;c0&gt;greeting&lt;/c0&gt; closure. The name of the closure block in the build script (&lt;c1&gt;greeting&lt;/c1&gt;) needs to match the extension object name. Then, when the closure is executed, the fields on the extension object will be mapped to the variables within the closure based on the standard Groovy closure delegate feature.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T150533Z" creationid="huanghaohang" creationdate="20190726T151637Z">
        <seg>在此示例中，可以将多个设置分组到 &lt;c0&gt;greeting&lt;/c0&gt; 闭包中。构建脚本中的这个闭包块的名字（&lt;c1&gt;greeting&lt;/c1&gt;）需要与扩展对象的名字匹配。然后，当执行闭包时，扩展对象上的字段将根据标准 Groovy 闭包委托功能映射到闭包内的变量上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, we configure the &lt;c0&gt;greet&lt;/c0&gt; task &lt;c1&gt;destination&lt;/c1&gt; property as a closure, which is evaluated with the &lt;a2&gt;&lt;c3&gt;Project.file()&lt;/c3&gt;&lt;/a2&gt; method to turn the return value of the closure into a file object at the last minute. You will notice that in the example above we specify the &lt;c4&gt;greetingFile&lt;/c4&gt; property value after we have configured to use it for the task. This kind of lazy evaluation is a key benefit of accepting any value when setting a file property, then resolving that value when reading the property.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T152842Z" creationid="huanghaohang" creationdate="20190727T151307Z">
        <seg>在这个例子中，我们将 &lt;c0&gt;greet&lt;/c0&gt; 任务的 &lt;c1&gt;destination&lt;/c1&gt; 属性作为闭包配置，它将在最后通过 &lt;a2&gt;&lt;c3&gt;Project.file()&lt;/c3&gt;&lt;/a2&gt; 方法将闭包中的返回值转换为一个文件对象。你会注意到，在上面例子中，我们是配置在任务中使用 &lt;c4&gt;greettingFile&lt;/c4&gt; 属性之后才指定它的值。这种惰性求值的主要好处是在设置文件属性时它能够接收任何值，然后在读取属性时才解析这个值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, we only want to require signing if we are building a release version and we are going to publish it. Because we are inspecting the task graph to determine if we are going to be publishing, we must set the &lt;c0&gt;signing.required&lt;/c0&gt; property to a closure to defer the evaluation. See &lt;a1&gt;&lt;c2&gt;SigningExtension.setRequired()&lt;/c2&gt;&lt;/a1&gt; for more information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T005622Z" creationid="huanghaohang" creationdate="20190609T005622Z">
        <seg>在此示例中，只有在我们构建发布版本并且要发布它时，才需要签名。由于我们正在检查任务图以确定是否要发布，因此必须将 &lt;c0&gt;signing.requiree&lt;/c0&gt; 属性设置为一个闭包，以延迟求值。更多信息请参阅 &lt;a1&gt;&lt;c2&gt;SigningExtension.setRequired()&lt;/c2&gt;&lt;/a1&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In your build script, a property called &lt;c0&gt;ant&lt;/c0&gt; is provided by Gradle. This is a reference to an &lt;a1&gt;&lt;c2&gt;AntBuilder&lt;/c2&gt;&lt;/a1&gt; instance. This &lt;c3&gt;AntBuilder&lt;/c3&gt; is used to access Ant tasks, types and properties from your build script. There is a very simple mapping from Ant's &lt;c4&gt;build.xml&lt;/c4&gt; format to Groovy, which is explained below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171213T142456Z" creationid="huanghaohang" creationdate="20171213T140910Z">
        <seg>在构建脚本中，Gradle 提供了一个叫 &lt;c0&gt;ant&lt;/c0&gt; 的属性，它是一个指向 &lt;a1&gt;&lt;c2&gt;AntBuilder&lt;/c2&gt;&lt;/a1&gt; 实例的引用。这个 &lt;c3&gt;AntBuilder&lt;/c3&gt; 用于从构建脚本中访问 Ant 任务，类型和属性。从 Ant 的 &lt;c4&gt;build.xml&lt;/c4&gt; 格式到 Groovy 之间有一个非常简单的映射，这将在下面解释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Including other resources in the distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070506Z" creationid="huanghaohang" creationdate="20190205T070506Z">
        <seg>在分发中包含其他资源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incremental compilation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140327Z" creationid="huanghaohang" creationdate="20181201T140327Z">
        <seg>增量编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incremental compilation requires dependency analysis of the source code. The results of this analysis are stored in the file designated by &lt;c0&gt;scalaCompileOptions.incrementalOptions.analysisFile&lt;/c0&gt; (which has a sensible default). In a multi-project build, analysis files are passed on to downstream &lt;c1&gt;ScalaCompile&lt;/c1&gt; tasks to enable incremental compilation across project boundaries. For &lt;c2&gt;ScalaCompile&lt;/c2&gt; tasks added by the Scala plugin, no configuration is necessary to make this work. For other &lt;c3&gt;ScalaCompile&lt;/c3&gt; tasks, &lt;c4&gt;scalaCompileOptions.incrementalOptions.publishedCode&lt;/c4&gt; needs to be configured to point to the classes folder or Jar archive by which the code is passed on to compile class paths of downstream &lt;c5&gt;ScalaCompile&lt;/c5&gt; tasks. Note that if &lt;c6&gt;publishedCode&lt;/c6&gt; is not set correctly, downstream tasks may not recompile code affected by upstream changes, leading to incorrect compilation results.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T140636Z" creationid="huanghaohang" creationdate="20180407T135239Z">
        <seg>增量编译需要对源代码进行依赖性分析，这个分析的结果存于由 &lt;c0&gt;scalaCompileOptions.incrementalOptions.analysisFile&lt;/c0&gt; 所指定的文件中（它有一个合理的默认值）。在多项目构建中，分析文件被传给下游的 &lt;c1&gt;ScalaCompile&lt;/c1&gt; 任务，以启用跨项目的增量编译。对于由 Scala 插件添加的 &lt;c2&gt;ScalaCompile&lt;/c2&gt; 任务，无需对这一点进行配置。而如果是其他的 &lt;c3&gt;ScalaCompile&lt;/c3&gt; 任务，需要根据类文件夹或 Jar 档案中，是哪一个的代码被传给下游的 &lt;c5&gt;ScalaCompile&lt;/c5&gt; 任务的类路径，把 &lt;c4&gt;scalaCompileOptions.incrementalOptions.publishedCode&lt;/c4&gt; 配置为指向它们。请注意，如果 &lt;c6&gt;publishedCode&lt;/c6&gt; 设置不正确，上游代码发生变化时下游任务可能不会重新编译，从而导致编译结果不正确。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incremental tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145335Z" creationid="huanghaohang" creationdate="20190708T145335Z">
        <seg>增量任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incremental tasks are an &lt;a0&gt;incubating&lt;/a0&gt; feature.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124219Z" creationid="huanghaohang" creationdate="20190706T124219Z">
        <seg>增量任务还是一个&lt;a0&gt;实验性&lt;/a0&gt; 功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incubating integration plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035006Z" creationid="huanghaohang" creationdate="20180517T035006Z">
        <seg>试验性的集成插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incubating language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034954Z" creationid="huanghaohang" creationdate="20180517T034954Z">
        <seg>试验性的语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incubating software development plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035018Z" creationid="huanghaohang" creationdate="20180517T035018Z">
        <seg>试验性的软件开发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Information messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221542Z" creationid="huanghaohang" creationdate="20180105T221542Z">
        <seg>信息消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>InitBuild</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213731Z" creationid="95" creationdate="20190131T213731Z">
        <seg>InitBuild</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T102744Z" creationid="huanghaohang" creationdate="20190611T102744Z">
        <seg>初始化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Initialization scripts (a.k.a. &lt;e0&gt;init scripts&lt;/e0&gt;) are similar to other scripts in Gradle. These scripts, however, are run before the build starts. Here are several possible uses:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142053Z" creationid="huanghaohang" creationdate="20191203T142053Z">
        <seg>初始化脚本类似于 Gradle 中的其他脚本，但是这些脚本在构建启动之前就运行。以下是几种可能的用法：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Installing Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013318Z" creationid="huanghaohang" creationdate="20170919T013318Z">
        <seg>安装 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Installs the application into a specified directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135123Z" creationid="95" creationdate="20190131T135123Z">
        <seg>将应用程序安装到指定的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Installs the associated artifacts to the local Maven cache, including Maven metadata generation. By default the install task is associated with the &lt;c0&gt;archives&lt;/c0&gt; configuration. This configuration has by default only the default jar as an element. To learn more about installing to the local repository, see: &lt;a1&gt;Section 52.6.3, “Installing to the local repository”&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060345Z" creationid="huanghaohang" creationdate="20190607T060345Z">
        <seg>将相关的工件安装到本地的 Maven 缓存，包括Maven 元数据的生成。默认情况下，安装任务是与 &lt;c0&gt;archives&lt;/c0&gt; 配置相关联的。这个配置在默认情况下只将默认的 jar 作为元素。要了解有关安装到本地仓库的更多信息，请参阅：&lt;a1&gt;第 52.6.3 节，《安装到本地存储库》&lt;/a1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of using a task name, you can define a dependency using a &lt;c0&gt;Task&lt;/c0&gt; object, as shown in this example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130233Z" creationid="huanghaohang" creationdate="20170919T130203Z">
        <seg>可以使用一个&lt;c0&gt;Task&lt;/c0&gt;对象而不是任务名称来定义依赖，如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instructions for mapping Gradle configurations to Maven scopes. See &lt;a0&gt;Section 52.6.4.2, “Dependency mapping”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091434Z" creationid="huanghaohang" creationdate="20190607T060725Z">
        <seg>将 Gradle 配置映射到 Maven 作用域的说明。见&lt;a0&gt;第 52.6.4.2 节，《依赖映射》&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integer</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144624Z" creationid="huanghaohang" creationdate="20180416T144624Z">
        <seg>Integer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Integration plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034959Z" creationid="huanghaohang" creationdate="20180517T034959Z">
        <seg>集成插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>IntelliJ IDEA Integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140343Z" creationid="huanghaohang" creationdate="20181201T140343Z">
        <seg>IntelliJ IDEA 集成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Interacting with Maven repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092024Z" creationid="huanghaohang" creationdate="20190608T092024Z">
        <seg>与 Maven 仓库的交互</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Internally, Gradle uses Ant and Ivy. Both have their own logging system. Gradle redirects their logging output into the Gradle logging system. There is a 1:1 mapping from the Ant/Ivy log levels to the Gradle log levels, except the Ant/Ivy &lt;c0&gt;TRACE&lt;/c0&gt; log level, which is mapped to Gradle &lt;c1&gt;DEBUG&lt;/c1&gt; log level. This means the default Gradle log level will not show any Ant/Ivy output unless it is an error or a warning.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T024845Z" creationid="huanghaohang" creationdate="20180107T024822Z">
        <seg>Gradle 内部使用 Ant 和 Ivy，它们都有自己的日志系统。Gradle 将它们的日志输出重定向到 Gradle 的日志记录系统上。从 Ant 或 Ivy 的日志级别到 Gradle 的日志级别，除了Ant 或 Ivy 的 &lt;c0&gt;TRACE&lt;/c0&gt; 是被映射到 Gradle 的 &lt;c1&gt;DEBUG&lt;/c1&gt;日志级别之外，其他的都是一对一的映射。这意味着默认的 Gradle 日志级别不会显示任何 Ant 或 Ivy 输出，除非是错误或警告信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Introduces the basic build script elements: &lt;e0&gt;projects&lt;/e0&gt; and &lt;e1&gt;tasks&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T015153Z" creationid="95" creationdate="20170723T072802Z">
        <seg>介绍了基本的构建脚本元素：&lt;e0&gt;项目&lt;/e0&gt; 和 &lt;e1&gt;任务&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024124Z" creationid="haohang" creationdate="20170720T072431Z">
        <seg>导言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Is this cool or is this cool? And how does this work? The Project API provides a property &lt;c0&gt;allprojects&lt;/c0&gt; which returns a list with the current project and all its subprojects underneath it. If you call &lt;c1&gt;allprojects&lt;/c1&gt; with a closure, the statements of the closure are delegated to the projects associated with &lt;c2&gt; allprojects&lt;/c2&gt;. You could also do an iteration via &lt;c3&gt;allprojects.each&lt;/c3&gt;, but that would be more verbose.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T141859Z" creationid="huanghaohang" creationdate="20190615T141624Z">
        <seg>是刚才那个酷还是现在这个酷？它又是怎么实现的呢？Project API 提供了一个 &lt;c0&gt;allprojects&lt;/c0&gt; 属性，它返回一个包含当前项目及其下面的所有子项目的列表。如果你使用一个闭包调用 &lt;c1&gt;allprojects&lt;/c1&gt; ，那么闭包的语句将委派给与 &lt;c2&gt; allprojects&lt;/c2&gt; 相关联的项目。你也可以通过 &lt;c3&gt;allprojects.each&lt;/c3&gt; 来执行迭代，但这样写会比较冗长。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also leverages the &lt;c0&gt;wrapper&lt;/c0&gt; task from the Wrapper plugin (see &lt;a1&gt;Chapter 48, &lt;i2&gt;Wrapper Plugin&lt;/i2&gt;&lt;/a1&gt;), which means that the Gradle Wrapper will also be installed into the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213650Z" creationid="95" creationdate="20190131T213650Z">
        <seg>它还利用了 Wrapper 插件中的 &lt;c0&gt;wrapper&lt;/c0&gt; 任务（见&lt;a1&gt;第 48章，《&lt;i2&gt;Wrapper 插件&lt;/i2&gt;&lt;/a1&gt;》），这意味着 Gradle Wrapper 也将被安装到该项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It has the following features:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154519Z" creationid="95" creationdate="20190201T154519Z">
        <seg>它具有以下功能：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is advisable to keep your username and password in &lt;c0&gt;gradle.properties&lt;/c0&gt; rather than directly in the build file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034142Z" creationid="huanghaohang" creationdate="20190603T034142Z">
        <seg>建议把你的用户名和密码写在 &lt;c0&gt;gradle.properties&lt;/c0&gt; 中，而不是直接写在构建文件上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is also possible for an Ant target to depend on a Gradle task:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084830Z" creationid="huanghaohang" creationdate="20180105T084830Z">
        <seg>它也可以用于一个依赖于 Gradle 任务的 Ant 目标：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is also possible to receive notifications when any project is evaluated. This example performs some custom logging of project evaluation. Notice that the &lt;c0&gt;afterProject&lt;/c0&gt; notification is received regardless of whether the project evaluates successfully or fails with an exception.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150823Z" creationid="huanghaohang" creationdate="20190613T150823Z">
        <seg>你也可以在每一个项目评估之后都收到通知。下面的例子是执行项目评估的一些自定义日志记录。注意，无论项目评估是成功还是因异常而失败，都会收到 &lt;c0&gt;afterProject&lt;/c0&gt; 通知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is common to want to sign the artifacts of a configuration. For example, the &lt;a0&gt;Java plugin&lt;/a0&gt; configures a jar to built and this jar artifact is added to the &lt;c1&gt;archives&lt;/c1&gt; configuration. Using the Signing DSL, you can specify that all of the artifacts of this configuration should be signed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134431Z" creationid="huanghaohang" creationdate="20190608T134431Z">
        <seg>想对配置中的工件进行签名是很常见的情况。例如，&lt;a0&gt;Java 插件&lt;/a0&gt;配置了要构建的 jar，并把这个 jar 文件添加到 &lt;c1&gt;archives&lt;/c1&gt; 配置。通过使用 Signing DSL，你可以指定这个配置的所有工件都应该被签名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is easy to apply settings to all binaries of a particular type:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012004Z" creationid="huanghaohang" creationdate="20190610T012004Z">
        <seg>让设置应用于特定类型的所有二进制文件很容易：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is easy to iterate over the dependency artifacts of a configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051129Z" creationid="huanghaohang" creationdate="20190531T051038Z">
        <seg>要遍历一个配置的依赖工件很容易：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is important to note that the content of a file collection is evaluated lazily, when it is needed. This means you can, for example, create a &lt;c0&gt;FileCollection&lt;/c0&gt; that represents files which will be created in the future by, say, some task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150849Z" creationid="huanghaohang" creationdate="20170927T150849Z">
        <seg>要注意的一个地方是，一个文件集合的内容是懒评估的，它只在需要的时候才计算。这意味着你可以创建一个&lt;c0&gt;FileCollection&lt;/c0&gt; 对象来表示一些会在以后才创建的文件，比方说在一些任务中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is important to note that the custom archives you are creating as part of your build are not automatically assigned to any configuration. You have to explicitly do this assignment.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075350Z" creationid="huanghaohang" creationdate="20190606T075350Z">
        <seg>请务必注意，你所创建的作为构建一部分的自定义归档不会自动分配给任何配置，必须进行显式的指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is important to note that the returned files of the copied configuration are often but not always the same than the returned files of the dependency subset of the original configuration. In case of version conflicts between dependencies of the subset and dependencies not belonging to the subset the resolve result might be different.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153121Z" creationid="huanghaohang" creationdate="20190602T152849Z">
        <seg>请务必注意，复制的配置所返回的文件，通常并不总是与原配置的依赖子集所返回的文件相同。 如果子集的依赖与不属于子集的依赖发生版本冲突，那么解析结果可能会不同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is ironic that in a language known for its rich library of open source components that Java has no concept of libraries or versions. In Java, there is no standard way to tell the JVM that you are using version 3.0.5 of Hibernate, and there is no standard way to say that &lt;c0&gt;foo-1.0.jar&lt;/c0&gt; depends on &lt;c1&gt;bar-2.0.jar&lt;/c1&gt;. This has led to external solutions often based on build tools. The most popular ones at the moment are Maven and Ivy. While Maven provides a complete build system, Ivy focuses solely on dependency management.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T104429Z" creationid="95" creationdate="20190210T103914Z">
        <seg>具有讽刺意味的是，以丰富的开源组件库著称的语言，Java竟然没有库或者版本的概念。在Java中，没有标准的方法来告知JVM你正在使用Hibernate V3.0.5，也没有标准的方法来表示 &lt;c0&gt;foo-1.0.jar&lt;/c0&gt; 依赖于 &lt;c1&gt;bar-2.0.jar&lt;/c1&gt;。 这导致了外部的解决方案通常都会基于构建工具。 目前最受欢迎的解决方案是Maven和Ivy。 Maven提供了完整的构建系统，而Ivy则只着眼于依赖管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is not a big deal to set-up a custom repository. &lt;s0&gt;[&lt;a1&gt;17&lt;/a1&gt;]&lt;/s0&gt; But it can be tedious, to keep it up to date. For a new version, you have always to create the new XML descriptor and the directories. And your custom repository is another infrastructure element which might have downtimes and needs to be updated. To enable historical builds, you need to keep all the past libraries and you need a backup. It is another layer of indirection. Another source of information you have to lookup. All this is not really a big deal but in its sum it has an impact. Repository Manager like Artifactory or Nexus make this easier. But for example open source projects don't usually have a host for those products. This is changing with new services like &lt;a2&gt;Bintray&lt;/a2&gt; that let developers host and distribute their release binaries using a self-service repository platform. Bintray also supports sharing approved artifacts though the &lt;a3&gt;JCenter&lt;/a3&gt; public repository to provide a single resolution address for all popular OSS java artifacts (see &lt;a4&gt;Section 50.6.3, “Maven JCenter repository”&lt;/a4&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T000929Z" creationid="huanghaohang" creationdate="20190606T000929Z">
        <seg>设置一个自定义的仓库并不算什么，&lt;s0&gt;[&lt;a1&gt;17&lt;/a1&gt;]&lt;/s0&gt; 但想让这个仓库保持最新的态可能就会很烦人。对于一个新的版本，总是要创建新的 XML 描述符和目录。你的自定义仓库是另一个基础结构元素，可能会宕机，并且需要进行更新。 要启用历史构建，你需要保留所有之前的库，并且需要备份。这是另一个间接层，你必须查找的另一个信息源。所有这些都不是大问题，但累加起来就有影响了。仓库管理器（如 Artifactory 或 Nexus ）把这些事情变得轻松些。但是，举个例子，开源项目通常没有主机用于这些产品。而通过一些新服务，这种状况也改了，比如 &lt;a2&gt;Bintray&lt;/a2&gt; ，它可以让开发者使用自助服务仓库平台来托管和分发他们发布的二进制文件。通过 &lt;a3&gt;JCenter&lt;/a3&gt; 公共仓库，Bintray 还支持共享通过他们审核的工件，为所有常用的 OSS Java 工件提供一个单一的解析地址（请参阅 &lt;a4&gt;第 50.6.3 节，《Maven JCenter 仓库》&lt;/a4&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is not necessary or possible to specify the tool chain that should be used to build. For a given variant, Gradle will attempt to locate a &lt;a0&gt;&lt;c1&gt;ToolChain&lt;/c1&gt;&lt;/a0&gt; that is able to build for the target platform. Available tool chains are searched in the order defined.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085358Z" creationid="huanghaohang" creationdate="20190610T085358Z">
        <seg>我们没有必要也不可能指定应该用于构建的工具链。对于给定的变体，Gradle 将尝试查找能够为目标平台构建的 &lt;a0&gt;&lt;c1&gt;ToolChain&lt;/c1&gt;&lt;/a0&gt; 。可用的工具链是按定义的顺序来查找的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is possible for different repositories to provide a different binary artifact in response to the same artifact identifier. This is often the case with Maven SNAPSHOT artifacts, but can also be true for any artifact which is republished without changing it's identifier. By caching artifacts based on their SHA1 checksum, Gradle is able to maintain multiple versions of the same artifact. This means that when resolving against one repository Gradle will never overwrite the cached artifact file from a different repository. This is done without requiring a separate artifact file store per repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T144838Z" creationid="huanghaohang" creationdate="20190605T144838Z">
        <seg>对于相同的工件标识，不同的仓库可能会提供不同的二进制工件。这种情况常见的是 Maven SNAPSHOT 工件，但是对于任何工件，都可以不更改其标识而重新发布。通过缓存基于 SHA1 校验和的工件，Gradle 能够维护同一工件的多个版本。意味着，当解析一个仓库时，Gradle 不会从其他仓库中覆盖已缓存的工件文件。它不需要一个单独的工件文件在每个仓库都存储就可以做到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is possible to execute tasks &lt;c0&gt;A&lt;/c0&gt; and &lt;c1&gt;B&lt;/c1&gt; independently. The ordering rule only has an effect when both tasks are scheduled for execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081344Z" creationid="huanghaohang" creationdate="20170922T081344Z">
        <seg>任务&lt;c0&gt;A&lt;/c0&gt;和&lt;c1&gt;B&lt;/c1&gt;可以独立执行。排序规则只有在两个任务都计划执行时才有作用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is preferable to run this command from your Gradle project directory so that the settings of the UI will be stored in your project directory. However, you can run it then change the working directory via the Setup tab in the UI.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143722Z" creationid="huanghaohang" creationdate="20170911T143535Z">
        <seg>最好是在Gradle项目目录运行此命令，这样对UI的设置就可以保存在项目的目录中。不过，你也可以先运行它，然后通过UI中的“设置”选项卡来更改工作目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is preferable to use the &lt;c0&gt;Copy&lt;/c0&gt; task wherever possible, as it support incremental building and task dependency inference without any extra effort on your part. The &lt;c1&gt;copy()&lt;/c1&gt; method can be used to copy files as &lt;s2&gt;&lt;e3&gt;part&lt;/e3&gt;&lt;/s2&gt; of a task's implementation. That is, the copy method is intended to be used by custom tasks (see &lt;a4&gt;Chapter 57, &lt;i5&gt;Writing Custom Task Classes&lt;/i5&gt;&lt;/a4&gt;) that need to copy files as part of their function. In such a scenario, the custom task should sufficiently declare the inputs/outputs relevant to the copy action.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060218Z" creationid="huanghaohang" creationdate="20171031T071359Z">
        <seg>在可能的情况下，最好是使用 &lt;c0&gt;Copy&lt;/c0&gt; 任务，因为它支持增量构建和任务依赖关系推理，而不需要你的额外付出。该 &lt;c1&gt;copy()&lt;/c1&gt; 方法可以作为一个任务的实现的 &lt;s2&gt;&lt;e3&gt;一部分&lt;/e3&gt;&lt;/s2&gt; 来复制文件。也就是说，这个复制方法旨在用于自定义任务（&lt;a4&gt;《第五十七章，&lt;i5&gt;编写自定义任务类&lt;/i5&gt;》&lt;/a4&gt;)中，需要把文件复制作为其中一部分功能的时候。在这种情况下，自定义任务应充分声明与复制操作相关的输入和输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It searches for a &lt;c0&gt;settings.gradle&lt;/c0&gt; in a directory called &lt;c1&gt;master&lt;/c1&gt; which has the same nesting level as the current dir.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153712Z" creationid="huanghaohang" creationdate="20190612T153712Z">
        <seg>它在名为 &lt;c1&gt;master&lt;/c1&gt; 的目录中搜索 &lt;c0&gt;settings.gradle&lt;/c0&gt;，该目录与当前目录有相同的嵌套级别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ivy repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025949Z" creationid="huanghaohang" creationdate="20190603T025949Z">
        <seg>Ivy 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JDepend</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142645Z" creationid="huanghaohang" creationdate="20180516T142645Z">
        <seg>JDepend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JUnit and TestNG allows sophisticated groupings of test methods.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155932Z" creationid="huanghaohang" creationdate="20180405T155932Z">
        <seg>JUnit 和 TestNG 支持复杂的测试方法分组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JVM options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013407Z" creationid="huanghaohang" creationdate="20170919T013407Z">
        <seg>JVM 选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JVM options for running Gradle can be set via environment variables. You can use &lt;c0&gt;GRADLE_OPTS&lt;/c0&gt; or &lt;c1&gt;JAVA_OPTS&lt;/c1&gt;. Those variables can be used together. &lt;c2&gt;JAVA_OPTS&lt;/c2&gt; is by convention an environment variable shared by many Java applications. A typical use case would be to set the HTTP proxy in &lt;c3&gt;JAVA_OPTS&lt;/c3&gt; and the memory options in &lt;c4&gt;GRADLE_OPTS&lt;/c4&gt;. Those variables can also be set at the beginning of the &lt;s5&gt;&lt;s6&gt;gradle&lt;/s6&gt;&lt;/s5&gt; or &lt;s7&gt;&lt;s8&gt;gradlew&lt;/s8&gt;&lt;/s7&gt; script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T120248Z" creationid="95" creationdate="20170723T115605Z">
        <seg>Gradle运行时的JVM参数可以通过&lt;c0&gt;GRADLE_OPTS&lt;/c0&gt; 或是 &lt;c1&gt;JAVA_OPTS&lt;/c1&gt;的环境变量来设置，这些环境变量也可以一起使用。习惯上， &lt;c2&gt;JAVA_OPTS&lt;/c2&gt; 是一个与其他Java应用程序共享的环境变量，一个典型的场景是在 &lt;c3&gt;JAVA_OPTS&lt;/c3&gt; 中设置HTTP代理，而在&lt;c4&gt;GRADLE_OPTS&lt;/c4&gt;中设置内存选项。这些环境变量也可以在 &lt;s5&gt;&lt;s6&gt;gradle&lt;/s6&gt;&lt;/s5&gt; 或 &lt;s7&gt;&lt;s8&gt;gradlew&lt;/s8&gt;&lt;/s7&gt; 脚本文件的开头设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JaCoCo Report configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070057Z" creationid="huanghaohang" creationdate="20190205T070057Z">
        <seg>JaCoCo 报告配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JaCoCo specific task configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070107Z" creationid="huanghaohang" creationdate="20190205T070107Z">
        <seg>JaCoCo 的特定任务配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JacocoReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093929Z" creationid="huanghaohang" creationdate="20180715T093929Z">
        <seg>JacocoReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062911Z" creationid="haohang" creationdate="20180312T062911Z">
        <seg>Jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025228Z" creationid="huanghaohang" creationdate="20181210T025228Z">
        <seg>Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150627Z" creationid="huanghaohang" creationdate="20210518T150627Z">
        <seg>Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124853Z" creationid="huanghaohang" creationdate="20171014T124853Z">
        <seg>Java 快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054209Z" creationid="haohang" creationdate="20180313T054209Z">
        <seg>Java 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T040056Z" creationid="haohang" creationdate="20180313T040056Z">
        <seg>Java 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java source for the given source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053021Z" creationid="haohang" creationdate="20180313T053021Z">
        <seg>给定源集的 Java 源代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java version compatibility to use when compiling Java source.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094342Z" creationid="haohang" creationdate="20180314T094342Z">
        <seg>当编译 Java 源代码时所使用的 Java 版本兼容性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java version to generate classes for.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094446Z" creationid="haohang" creationdate="20180314T094446Z">
        <seg>要生成的类的 Java 版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JavaCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062250Z" creationid="haohang" creationdate="20180312T062250Z">
        <seg>JavaCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JavaExec</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135023Z" creationid="95" creationdate="20190131T135023Z">
        <seg>JavaExec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Javadoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062935Z" creationid="haohang" creationdate="20180312T062935Z">
        <seg>Javadoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Jdt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082552Z" creationid="huanghaohang" creationdate="20181210T082552Z">
        <seg>Jdt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Jetty plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144337Z" creationid="huanghaohang" creationdate="20180416T144337Z">
        <seg>Jetty插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JettyRun</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144020Z" creationid="huanghaohang" creationdate="20180416T144020Z">
        <seg>JettyRun</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JettyRunWar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144303Z" creationid="huanghaohang" creationdate="20180416T144303Z">
        <seg>JettyRunWar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JettyStop</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144313Z" creationid="huanghaohang" creationdate="20180416T144313Z">
        <seg>JettyStop</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Just like Gradle's Ant based compiler, the Zinc based compiler supports joint compilation of Java and Scala code. By default, all Java and Scala code under &lt;c0&gt;src/main/scala&lt;/c0&gt; will participate in joint compilation. With the Zinc based compiler, even Java code will be compiled incrementally.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T135229Z" creationid="huanghaohang" creationdate="20180407T134958Z">
        <seg>就像 Gradle 上基于 Ant 的编译器一样，基于 Zinc 的编译器支持 Java 和 Scala 代码的联合编译。默认情况下，所有在 &lt;c0&gt;src/main/scala&lt;/c0&gt; 的 Java 和 Scala 代码都将会进行联合编译。使用基于 Zinc 的编译器时，对于 Java 代码也会进行增量编译。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Just like the Java plugin, the Groovy plugin allows to configure custom locations for Groovy production and test sources.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121924Z" creationid="huanghaohang" creationdate="20180406T121831Z">
        <seg>和 Java 插件一样，Groovy 插件允许把 Groovy 的生产和测试的源文件配置为自定义的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Just like the Java plugin, the Scala plugin allows to configure custom locations for Scala production and test sources.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011238Z" creationid="huanghaohang" creationdate="20180407T011238Z">
        <seg>和 Java 插件一样，Scala 插件允许为 Scala 的生产和测试的源文件配置自定义位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>LIFECYCLE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221529Z" creationid="huanghaohang" creationdate="20180105T221529Z">
        <seg>LIFECYCLE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>LIFECYCLE and higher</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221917Z" creationid="huanghaohang" creationdate="20180105T221917Z">
        <seg>LIFECYCLE 及更高</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Language for dependency based programming</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T015549Z" creationid="95" creationdate="20170722T015549Z">
        <seg>基于编程的依赖语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034949Z" creationid="huanghaohang" creationdate="20180517T034949Z">
        <seg>语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Language support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091108Z" creationid="huanghaohang" creationdate="20190611T091108Z">
        <seg>语言支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Later you will see that such methods can be shared among subprojects in multi-project builds. If your build logic becomes more complex, Gradle offers you other very convenient ways to organize it. We have devoted a whole chapter to this. See &lt;a0&gt;Chapter 59, &lt;i1&gt;Organizing Build Logic&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023835Z" creationid="95" creationdate="20170729T023518Z">
        <seg>在后面您将会看到，像这样的方法可以在多项目构建的子项目之间共享。即使您的构建逻辑变得很复杂，Gradle也提供了一种非常方便的方式去组织它。关于这一点，我们会用一整个章节来讨论，详请参阅 &lt;a0&gt;第五十九章，&lt;i1&gt;组织构建逻辑&lt;/i1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Legal Notice</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072307Z" creationid="haohang" creationdate="20170720T072307Z">
        <seg>法律公告</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's add a property to the task, so we can customize it. Tasks are simply POGOs, and when you declare a task, you can set the properties or call methods on the task object. Here we add a &lt;c0&gt;greeting&lt;/c0&gt; property, and set the value when we declare the &lt;c1&gt;greeting&lt;/c1&gt; task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122457Z" creationid="huanghaohang" creationdate="20190706T122309Z">
        <seg>让我们添加一个属性到任务中，这样我们就可以自定义它。任务只是 POGO，当你声明一个任务时，可以在这个任务对象上设置属性或调用方法。这里我们添加了一个 &lt;c0&gt;greeting&lt;/c0&gt; 属性，并在声明 &lt;c1&gt;greeting&lt;/c1&gt; 任务时设置它的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's add a simple extension object to the project. Here we add a &lt;c0&gt;greeting&lt;/c0&gt; extension object to the project, which allows you to configure the greeting.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155753Z" creationid="huanghaohang" creationdate="20190719T155753Z">
        <seg>让我们向项目添加一个简单的扩展对象。这里我们向项目添加了一个 &lt;c0&gt;greeting&lt;/c0&gt; 扩展对象，它可以让从外配置问候语。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's add some dependencies. Here, we will declare that our production classes have a compile-time dependency on commons collections, and that our test classes have a compile-time dependency on junit:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T130644Z" creationid="95" creationdate="20170730T124722Z">
        <seg>让我们来添加一些依赖。在这里，我们将声明我们的生产类对commons collection具有编译时依赖，我们的测试类对junit具有需要编译时依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's assume your project produces just the default jar file. Now you want to deploy this jar file to a remote Maven repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074820Z" creationid="huanghaohang" creationdate="20190607T074820Z">
        <seg>让我们假设你的项目只生成默认的 jar 文件，现在你想将这个 jar 文件部署到远程 Maven 仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's check this out:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100151Z" creationid="huanghaohang" creationdate="20180130T100151Z">
        <seg>我们来看看以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's have a look at an example. Here our task generates several output files from a source XML file. Let's run it a couple of times.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085702Z" creationid="huanghaohang" creationdate="20170922T085615Z">
        <seg>我们来看一个例子。在这里，我们的任务从一个 XML 源文件生成了多个输出文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's have one more example with our producer-consumer build before we enter &lt;s0&gt;&lt;e1&gt;Java&lt;/e1&gt;&lt;/s0&gt; land. We add a property to the producer project and create now a configuration time dependency from consumer on producer.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153137Z" creationid="huanghaohang" creationdate="20190616T153137Z">
        <seg>在进入 &lt;s0&gt;&lt;e1&gt;Java&lt;/e1&gt;&lt;/s0&gt; 领域之前，让我们再使用生产者——消费者构建的例子。我们添加一个属性到生产者项目，并且现在创建一个消费者对生产者的配置时间依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's look at a simple example. To use the Java plugin, add the following to your build file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012442Z" creationid="95" creationdate="20170730T012442Z">
        <seg>让我们来看一个简单的例子。要使用Java插件，只需在构建脚本中添加如下代码：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's look at an example. To use the Groovy plugin, add the following to your build file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T001642Z" creationid="huanghaohang" creationdate="20170909T001642Z">
        <seg>我们来看一个例子。要使用Groovy插件，请将以下内容添加到构建文件中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's look at some dependency declarations. Here's a basic build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170907T161035Z" creationid="95" creationdate="20170907T161035Z">
        <seg>我们来看一下一些依赖声明。下面是一个基本的构建脚本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's say you already have the &lt;c0&gt;application.xml&lt;/c0&gt; and want to use it instead of configuring the &lt;c1&gt;ear.deploymentDescriptor&lt;/c1&gt; section. To accommodate that place the &lt;c2&gt;META-INF/application.xml&lt;/c2&gt; in the right place inside your source folders (see the &lt;c3&gt;appDirName&lt;/c3&gt; property). The existing file contents will be used and the explicit configuration in the &lt;c4&gt;ear.deploymentDescriptor&lt;/c4&gt; will be ignored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143504Z" creationid="huanghaohang" creationdate="20180416T143504Z">
        <seg>假设你已经有了 &lt;c0&gt;application.xml中&lt;/c0&gt; 并且希望使用它而不是去配置 &lt;c1&gt;ear.deploymentDescriptor&lt;/c1&gt; 代码段，那么就要把 &lt;c2&gt;META-INF/application.xml&lt;/c2&gt; 放在你源文件夹中的正确位置（请参阅 &lt;c3&gt;appDirName&lt;/c3&gt; 属性）。这样现有的文件内容将被使用，而 &lt;c4&gt;ear.deploymentDescriptor&lt;/c4&gt; 中的显式配置则会被忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's say, you declare a dependency on the &lt;c0&gt;junit:junit:3.8.2&lt;/c0&gt; library. Now how does Gradle find it in the repositories? Somehow the dependency information has to be mapped to a path. In contrast to Maven, where this path is fixed, with Gradle you can define a pattern that defines what the path will look like. Here are some examples: &lt;s1&gt;[&lt;a2&gt;16&lt;/a2&gt;]&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030327Z" creationid="huanghaohang" creationdate="20190604T030327Z">
        <seg>比如说，你声明了一个对 &lt;c0&gt;junit:jun:3.8.2&lt;/c0&gt; 库的依赖。现在 Gradle 是怎么在仓库中找到它的呢？依赖信息是必须映射到路径上的。相比于固定路径的 Maven，Gradle 可以定义一个模式，这个模式定义了路径的表示形式。这里有一些例子：&lt;s1&gt;[&lt;a2&gt;16&lt;/a2&gt;]&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's start with a very simple multi-project build. After all Gradle is a general purpose build tool at its core, so the projects don't have to be java projects. Our first examples are about marine life.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T151727Z" creationid="huanghaohang" creationdate="20190614T151727Z">
        <seg>让我们从一个非常简单的多项目构建开始。毕竟 Gradle 核心上是一个通用的构建工具，因此所构建的项目不一定得是 Java 项目。我们的第一个例子是关于海洋生物的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's take a closer look at the &lt;c0&gt;sonarRunner.sonarProperties {}&lt;/c0&gt; block. As we have already seen in the examples, the &lt;c1&gt;property()&lt;/c1&gt; method allows to set new properties or override existing ones. Furthermore, all properties that have been configured up to this point, including all properties preconfigured by Gradle, are available via the &lt;c2&gt;properties&lt;/c2&gt; accessor.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T044516Z" creationid="huanghaohang" creationdate="20181202T043631Z">
        <seg>让我们仔细看看 &lt;c0&gt;sonarRunner.sonarProperties {}&lt;/c0&gt; 块。正如我们在例子中已经看到的那样，&lt;c1&gt;property()&lt;/c1&gt; 方法允许设置新属性或覆盖现有的属性。此外，到目前为止配置的所有属性，包括 Gradle 预先配置的所有属性，都可以通过 &lt;c2&gt;properties&lt;/c2&gt; 访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's try this out and try to access the &lt;c0&gt;name&lt;/c0&gt; property of the &lt;c1&gt;Project&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130234Z" creationid="huanghaohang" creationdate="20170912T130234Z">
        <seg>下面我们试试看访问&lt;c1&gt;Project&lt;/c1&gt;对象的&lt;c0&gt;name&lt;/c0&gt;属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's use the project structure shown in &lt;a0&gt;Example 56.25, “Project lib dependencies”&lt;/a0&gt;. In this example :services:personservice depends on both :api and :shared. The :api project also depends on :shared.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T135048Z" creationid="huanghaohang" creationdate="20190622T135048Z">
        <seg>我们使用&lt;a0&gt;示例 56.25，项目库依赖&lt;/a0&gt;中显示的项目结构。在此示例中，:services:personservice 依赖于 :api 和 :shared。:api 项目还依赖于:shared。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Level</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221513Z" creationid="huanghaohang" creationdate="20180105T221513Z">
        <seg>级别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Library</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093618Z" creationid="huanghaohang" creationdate="20190607T093618Z">
        <seg>库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Library Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091127Z" creationid="huanghaohang" creationdate="20190611T091127Z">
        <seg>库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lifecycle task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032014Z" creationid="huanghaohang" creationdate="20190609T032014Z">
        <seg>生命周期任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like dependencies, artifacts are grouped by configurations. In fact, a configuration can contain both artifacts and dependencies at the same time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T071912Z" creationid="huanghaohang" creationdate="20190606T071912Z">
        <seg>与依赖一样，工件也按配置进行分组。事实上，一个配置可以同时包含工件和依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Linux</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022228Z" creationid="huanghaohang" creationdate="20190609T022228Z">
        <seg>Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>List groovy = [&lt;s0&gt;"org.codehaus.groovy:groovy-all:2.3.3@jar"&lt;/s0&gt;,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140939Z" creationid="huanghaohang" creationdate="20190602T140939Z">
        <seg>List groovy = [&lt;s0&gt;"org.codehaus.groovy:groovy-all:2.3.3@jar"&lt;/s0&gt;,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>List&lt;File&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104635Z" creationid="huanghaohang" creationdate="20180406T104635Z">
        <seg>List&lt;File&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Listed below is the default build script that Gradle applies to the &lt;c0&gt;buildSrc&lt;/c0&gt; project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T133850Z" creationid="huanghaohang" creationdate="20191201T133850Z">
        <seg>下面列出的是 Gradle 应用到 &lt;c0&gt;buildSrc&lt;/c0&gt; 项目的默认构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Live visualisation of the build in a GUI</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133952Z" creationid="huanghaohang" creationdate="20180108T133952Z">
        <seg>在 GUI 中的实时可视化构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Local Groovy dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160603Z" creationid="huanghaohang" creationdate="20190527T160603Z">
        <seg>本地 Groovy 依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Local variables are declared with the &lt;c0&gt;def&lt;/c0&gt; keyword. They are only visible in the scope where they have been declared. Local variables are a feature of the underlying Groovy language.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132949Z" creationid="huanghaohang" creationdate="20170913T132949Z">
        <seg>局部变量是使用&lt;c0&gt;def&lt;/c0&gt;关键字来定义的，它们只在定义它们的范围内才可见。局部变量是Groovy语言下的一个特点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Locating files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093014Z" creationid="huanghaohang" creationdate="20180218T093014Z">
        <seg>查找文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Locating tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021652Z" creationid="huanghaohang" creationdate="20180201T021652Z">
        <seg>查找任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Location of created binary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032038Z" creationid="huanghaohang" creationdate="20190609T032038Z">
        <seg>已创建二进制文件的位置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140419Z" creationid="huanghaohang" creationdate="20180516T140419Z">
        <seg>日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logging from external tools and libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140448Z" creationid="huanghaohang" creationdate="20180516T140448Z">
        <seg>使用外部的工具和库来写日志</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mac OS X</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092216Z" creationid="huanghaohang" creationdate="20190124T092216Z">
        <seg>Mac OS X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maintaining multiple domain objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132358Z" creationid="huanghaohang" creationdate="20190728T132358Z">
        <seg>维护多个域对象</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010644Z" creationid="huanghaohang" creationdate="20180318T010644Z">
        <seg>Manifest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manifest are merged in the order they are declared by the &lt;c0&gt;from&lt;/c0&gt; statement. If the based manifest and the merged manifest both define values for the same key, the merged manifest wins by default. You can fully customize the merge behavior by adding &lt;c1&gt;eachEntry&lt;/c1&gt; actions in which you have access to a &lt;a2&gt;&lt;c3&gt;ManifestMergeDetails&lt;/c3&gt;&lt;/a2&gt; instance for each entry of the resulting manifest. The merge is not immediately triggered by the from statement. It is done lazily, either when generating the jar, or by calling &lt;c4&gt;writeTo&lt;/c4&gt; or &lt;c5&gt;effectiveManifest&lt;/c5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113319Z" creationid="huanghaohang" creationdate="20180406T112203Z">
        <seg>Manifest 会根据在 &lt;c0&gt;from&lt;/c0&gt; 语句中所声明的顺序进行合并。如果基本的清单和合并清单都定义了同一个键的值，那么默认情况下会采用要合并的清单的值。你可以通过添加 &lt;c1&gt;eachEntry&lt;/c1&gt; 来完全自定义结果清单的每一个实体的合并行为，它让你可以访问 &lt;a2&gt;&lt;c3&gt;ManifestMergeDetails&lt;/c3&gt;&lt;/a2&gt; 实例。合并不会立即由 from 语句触发。它是惰性执行的，在生成 jar 或者是通过调用 &lt;c4&gt;writeTo&lt;/c4&gt; 或 &lt;c5&gt;effectiveManifest&lt;/c5&gt; 的时候完成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Manipulating existing tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031833Z" creationid="huanghaohang" creationdate="20170927T031833Z">
        <seg>操纵现有任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many Ant tasks set properties when they execute. There are several ways to get the value of these properties. You can get the property directly from the &lt;c0&gt;AntBuilder&lt;/c0&gt; instance. The Ant properties are also available as a Map. Below are some examples.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094605Z" creationid="huanghaohang" creationdate="20180105T094605Z">
        <seg>许多 Ant 任务会在执行时设置属性，有几种方法可以获得这些属性的值。你可以直接从 &lt;c0&gt;AntBuilder&lt;/c0&gt; 实例获取属性。这些 Ant 属性也可以作为 Map 使用。以下是一些例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many objects in Gradle have properties which accept a set of input files. For example, the &lt;a0&gt;&lt;c1&gt;JavaCompile&lt;/c1&gt;&lt;/a0&gt; task has a &lt;c2&gt;source&lt;/c2&gt; property, which defines the source files to compile. You can set the value of this property using any of the types supported by the &lt;a3&gt;files()&lt;/a3&gt; method, which was shown above. This means you can set the property using, for example, a &lt;c4&gt;File&lt;/c4&gt;, &lt;c5&gt;String&lt;/c5&gt;, collection, &lt;c6&gt;FileCollection&lt;/c6&gt; or even a closure. Here are some examples:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134042Z" creationid="huanghaohang" creationdate="20171002T134042Z">
        <seg>Gradle中的许多对象都有接受一组输入文件的属性。例如， &lt;a0&gt;&lt;c1&gt;JavaCompile&lt;/c1&gt;&lt;/a0&gt;任务有一个&lt;c2&gt;source&lt;/c2&gt;属性，它定义了要编译的源文件。你可以上面所示的&lt;a3&gt;files()&lt;/a3&gt;方法所支持的任何类型来设置此属性的值。这意味着，你可以通过如&lt;c4&gt;File&lt;/c4&gt;， &lt;c5&gt;String&lt;/c5&gt;，集合， &lt;c6&gt;FileCollection&lt;/c6&gt;，甚至是闭包来设置该属性。这里有些例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many projects rely on the &lt;a0&gt;Maven Central repository&lt;/a0&gt;. This is not without problems.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151640Z" creationid="huanghaohang" creationdate="20190605T151640Z">
        <seg>许多项目依赖于 &lt;a0&gt;Maven 中央仓库&lt;/a0&gt;，这不是没有问题的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many settings (like the java version and maximum heap size) can only be specified when launching a new JVM for the build process. This means that Gradle must launch a separate JVM process to execute the build after parsing the various &lt;c0&gt;gradle.properties&lt;/c0&gt; files. When running with the daemon, a JVM with the correct parameters is started once and reused for each daemon build execution. When Gradle is executed without the daemon, then a new JVM must be launched for every build execution, unless the JVM launched by the Gradle start script happens to have the same parameters.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T072843Z" creationid="huanghaohang" creationdate="20180126T071751Z">
        <seg>许多设置（如 java 版本和最大堆大小）只能在为构建进程启动新的 JVM 时指定。这意味着 Gradle 必须在解析各种 &lt;c0&gt;gradle.properties&lt;/c0&gt; 文件后启动一个单独的 JVM 进程执行构建。当使用守护进程运行时，具有正确参数的JVM 将启动一次，并在每个守护进程的构建执行时重用。在没有守护进程的情况下执行 Gradle 时，除非由 Gradle 启动脚本启动的 JVM 恰好具有相同的参数，否则必须为每个构建的执行启动一个新的 JVM。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many ways to manage your dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T034041Z" creationid="95" creationdate="20170723T034041Z">
        <seg>多种方式去管理依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven Element</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094945Z" creationid="huanghaohang" creationdate="20190607T094945Z">
        <seg>Maven 元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven JCenter repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025847Z" creationid="huanghaohang" creationdate="20190603T025847Z">
        <seg>Maven JCenter 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven and Ivy repositories support the use of various transport protocols. At the moment the following protocols are supported:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030257Z" creationid="huanghaohang" creationdate="20190603T030146Z">
        <seg>Maven 和 Ivy 仓库支持使用各种传输协议，当前支持以下协议：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven can only deal with one artifact per project. This is reflected in the structure of the Maven POM. We think there are many situations where it makes sense to have more than one artifact per project. In such a case you need to generate multiple POMs. In such a case you have to explicitly declare each artifact you want to publish to a Maven repository. The &lt;a0&gt;&lt;c1&gt;MavenDeployer&lt;/c1&gt;&lt;/a0&gt; and the MavenInstaller both provide an API for this:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084736Z" creationid="huanghaohang" creationdate="20190608T084736Z">
        <seg>Maven 对每个项目只能处理一个工件，这反映在 Maven POM 的结构中。我们认为，在许多情况下，每个项目有一个以上的工件是有意义的。在这种情况下，你需要生成多个 POM。在这种情况下，你必须显式声明要发布到 Maven 仓库的每个工件。&lt;a0&gt;&lt;c1&gt;MavenDeployer&lt;/c1&gt;&lt;/a0&gt; 和 MavenInstaller 都为此提供了 API：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven central repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025809Z" creationid="huanghaohang" creationdate="20190603T025809Z">
        <seg>Maven 中央仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven local repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025906Z" creationid="huanghaohang" creationdate="20190603T025906Z">
        <seg>Maven 本地仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025915Z" creationid="huanghaohang" creationdate="20190603T025915Z">
        <seg>Maven 仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>MavenDeployer</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093638Z" creationid="huanghaohang" creationdate="20190607T093638Z">
        <seg>MavenDeployer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Meaning</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221951Z" creationid="huanghaohang" creationdate="20180105T221951Z">
        <seg>意义</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Memory settings for the external process default to the JVM's defaults. To adjust memory settings, configure &lt;c0&gt;scalaCompileOptions.forkOptions&lt;/c0&gt; as needed:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053842Z" creationid="huanghaohang" creationdate="20180407T053842Z">
        <seg>外部进程默认使用 JVM 的默认内存设置。如果要调整内存设置，请根据需要配置 &lt;c0&gt;scalaCompileOptions.forkOptions&lt;/c0&gt;：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Metadata to generate a deployment descriptor file, e.g. &lt;c0&gt;application.xml&lt;/c0&gt;. If this file already exists in the &lt;c1&gt;appDirName/META-INF&lt;/c1&gt; then the existing file contents will be used and the explicit configuration in the &lt;c2&gt;ear.deploymentDescriptor&lt;/c2&gt; will be ignored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142631Z" creationid="huanghaohang" creationdate="20180415T150124Z">
        <seg>用于生成部署描述符文件的元数据，如 &lt;c0&gt;application.xml中&lt;/c0&gt;。如果这个文件已经存在于 &lt;c1&gt;appDirName/META-INF&lt;/c1&gt;，那么将使用现有的文件内容，而在 &lt;c2&gt;ear.deploymentDescriptor&lt;/c2&gt; 中的显式配置则将被忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Method</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030200Z" creationid="huanghaohang" creationdate="20181203T030200Z">
        <seg>方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Method inheritance might be interesting to use as Gradle's &lt;s0&gt;&lt;e1&gt;Configuration Injection&lt;/e1&gt;&lt;/s0&gt; does not support methods yet (but will in a future release).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152236Z" creationid="huanghaohang" creationdate="20190623T152236Z">
        <seg>方法继承可能值得使用，尽管 Gradle 的&lt;s0&gt;&lt;e1&gt;配置注入&lt;/e1&gt;&lt;/s0&gt;还不支持方法（但会在以后的版本中支持的）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Model</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030114Z" creationid="huanghaohang" creationdate="20181210T030114Z">
        <seg>模型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Module</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012500Z" creationid="huanghaohang" creationdate="20190123T012500Z">
        <seg>Module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modules declared by a module descriptor file (Ivy or POM file) are preferred over modules that have an artifact file only.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033032Z" creationid="huanghaohang" creationdate="20190604T033032Z">
        <seg>由模块描述符文件（Ivy 或 POM 文件）声明的模块优先于只有一个工件文件的模块。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modules from earlier repositories are preferred over modules in later repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033123Z" creationid="huanghaohang" creationdate="20190604T033123Z">
        <seg>先声明的仓库的模块优先于后面的仓库的模块。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More about Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021639Z" creationid="huanghaohang" creationdate="20180201T021639Z">
        <seg>任务详述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More about project libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091957Z" creationid="huanghaohang" creationdate="20190608T091957Z">
        <seg>关于项目库的更多信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More information about &lt;c0&gt;AntBuilder&lt;/c0&gt; can be found in 'Groovy in Action' 8.4 or at the &lt;a1&gt;Groovy Wiki&lt;/a1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083531Z" creationid="huanghaohang" creationdate="20180105T083402Z">
        <seg>有 关&lt;c0&gt;AntBuilder&lt;/c0&gt; 的详细信息，可以参阅 《Groovy in Action》的第 8.4 节， 或者是 &lt;a1&gt;Groovy Wiki&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on configuring Sonar properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070242Z" creationid="huanghaohang" creationdate="20190205T070242Z">
        <seg>有关配置 Sonar 属性的更多信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034807Z" creationid="huanghaohang" creationdate="20180517T034807Z">
        <seg>更多关于插件的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most Java projects are pretty similar as far as the basics go: you need to compile your Java source files, run some unit tests, and create a JAR file containing your classes. It would be nice if you didn't have to code all this up for every project. Luckily, you don't have to. Gradle solves this problem through the use of &lt;e0&gt;plugins&lt;/e0&gt;. A plugin is an extension to Gradle which configures your project in some way, typically by adding some pre-configured tasks which together do something useful. Gradle ships with a number of plugins, and you can easily write your own and share them with others. One such plugin is the &lt;e1&gt;Java plugin&lt;/e1&gt;. This plugin adds some tasks to your project which will compile and unit test your Java source code, and bundle it into a JAR file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T011617Z" creationid="95" creationdate="20170730T010800Z">
        <seg>大部分的Java项目的基本流程都是类似的：编译Java源文件，运行单元测试，创建一个Jar包。 如果可以不用为每个项目都去编写这些流程那就好了。在实际上，我们确实不用。Gradle通过 &lt;e0&gt;插件&lt;/e0&gt;来解决这一问题。插件就是Gradle的扩展，可以让你以某种方式来配置你的项目，通常通过添加一些预先配置的任务来共同做一些有用的事情。Gradle内置了许多插件，并且你也可以轻松地编写你自己的插件和分享自己的插件。&lt;e1&gt;Java plugin&lt;/e1&gt;是其中之一，这一插件向项目添加一些编译和测试Java源代码，并打包成JAR包的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most builds work with files. Gradle adds some concepts and APIs to help you achieve this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T124843Z" creationid="huanghaohang" creationdate="20170923T124802Z">
        <seg>大多数构建工作都需要使用到文件，Gradle 添加了一些概念和 API 来帮助你实现这一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most of the examples in this user guide are run with the &lt;c0&gt;-q&lt;/c0&gt; command-line option. This suppresses Gradle's log messages, so that only the output of the tasks is shown. This keeps the example output in this user guide a little clearer. You don't need to use this option if you don't want. See &lt;a1&gt;Chapter 18, &lt;i2&gt;Logging&lt;/i2&gt;&lt;/a1&gt; for more details about the command-line options which affect Gradle's output.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T145756Z" creationid="95" creationdate="20170724T145756Z">
        <seg>本用户指南中的很多例子都用了 &lt;c0&gt;-q&lt;/c0&gt;参数运行，这个参数是用于抑制Gradle的日志消息，以便只显示任务的输出结果，这样会使得在本用户指南里的文档的输出更清晰一点。如果你不想要的话，你可以不加上这个参数。如果想了解更多影响Gradle的输出的命令参数，请参阅&lt;a1&gt;第十八章， &lt;i2&gt;日志&lt;/i2&gt;&lt;/a1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most plugins need to obtain some configuration from the build script. One method for doing this is to use &lt;e0&gt;extension objects&lt;/e0&gt;. The Gradle &lt;a1&gt;&lt;c2&gt;Project&lt;/c2&gt;&lt;/a1&gt; has an associated &lt;a3&gt;&lt;c4&gt;ExtensionContainer&lt;/c4&gt;&lt;/a3&gt; object that helps keep track of all the settings and properties being passed to plugins. You can capture user input by telling the extension container about your plugin. To capture input, simply add a Java Bean compliant class into the extension container's list of extensions. Groovy is a good language choice for a plugin because plain old Groovy objects contain all the getter and setter methods that a Java Bean requires.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155631Z" creationid="huanghaohang" creationdate="20190719T155631Z">
        <seg>大多数插件需要从构建脚本获取一些配置。其中一种实现的方法是使用&lt;e0&gt;扩展对象&lt;/e0&gt;。Gradle &lt;a1&gt;&lt;c2&gt;Project&lt;/c2&gt;&lt;/a1&gt; 有一个相关联的 &lt;a3&gt;&lt;c4&gt;ExtensionContainer&lt;/c4&gt;&lt;/a3&gt; 对象，该对象能帮助跟踪传给插件的所有设置和属性。你可以通过告知扩展容器有关插件的信息来捕获用户输入。只要将符合 Java Bean 的类添加到扩展容器的扩展列表中，你就可以获取输入。对于一个插件而言，Groovy 是一种不错的语言选择，因为普通的旧 Groovy 对象就包含了 Java Bean 需要的所有 getter 和 setter 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most projects are not completely self-contained. They need files built by other projects in order to be compiled or tested and so on. For example, in order to use Hibernate in my project, I need to include some Hibernate jars in the classpath when I compile my source. To run my tests, I might also need to include some additional jars in the test classpath, such as a particular JDBC driver or the Ehcache jars.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170905T150016Z" creationid="95" creationdate="20170905T150016Z">
        <seg>大部分项目都不是完全独立的，它们需要其他项目所构建的一些文件来编译或测试等等。例如，如果我想在我的项目中使用Hibernate，我需要在编译代码时把一些Hibernate的jar文件包含到类路径中。如果要运行测试，可能还需要把一些其他的jar包包含到测试类路径中，比如特定的JDBC驱动或者是Ehcache jar文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multi-Project Building and Testing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145121Z" creationid="huanghaohang" creationdate="20190708T145121Z">
        <seg>多项目构建和测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multi-project Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144850Z" creationid="huanghaohang" creationdate="20190708T144850Z">
        <seg>多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multi-project Java build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124918Z" creationid="huanghaohang" creationdate="20171014T124918Z">
        <seg>多项目的Java构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multi-project builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T042054Z" creationid="95" creationdate="20170722T042054Z">
        <seg>多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multi-project builds are always represented by a tree with a single root. Each element in the tree represents a project. A project has a path which denotes the position of the project in the multi-project build tree. In majority of cases the project path is consistent with the physical location of the project in the file system. However, this behavior is configurable. The project tree is created in the &lt;c0&gt;settings.gradle&lt;/c0&gt; file. By default it is assumed that the location of the settings file is also the location of the root project. But you can redefine the location of the root project in the settings file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T151252Z" creationid="huanghaohang" creationdate="20190612T150956Z">
        <seg>多项目构建总是由一个具有单个根节点的树表示。树中的每个元素都表示一个项目。一个项目有一个路径，表示其在多项目构建树中的位置。在大多数情况下，项目路径与文件系统中项目的物理位置一致。但是，这种行为是可配置的。项目树在 &lt;c0&gt;settings.gradle&lt;/c0&gt; 文件中创建。默认情况下它假定设置文件的位置也是根项目的位置，但你可以在设置文件中重新定义根项目的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multi-project builds are discussed in&lt;a0&gt;Chapter 56, &lt;i1&gt;Multi-project Builds&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190601T112408Z" creationid="huanghaohang" creationdate="20190601T112408Z">
        <seg>多项目构建将在&lt;a0&gt;第 56 章，《&lt;i1&gt;多项目构建&lt;/i1&gt;》&lt;/a0&gt;中进行详述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132108Z" creationid="huanghaohang" creationdate="20170913T132108Z">
        <seg>名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Native Binary Type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032012Z" creationid="huanghaohang" creationdate="20190609T032012Z">
        <seg>本机二进制类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Native Binary Variants</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091140Z" creationid="huanghaohang" creationdate="20190611T091140Z">
        <seg>本机二进制变体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NativeExecutable</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032055Z" creationid="huanghaohang" creationdate="20190609T032055Z">
        <seg>NativeExecutable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>NativeLibrary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032113Z" creationid="huanghaohang" creationdate="20190609T032113Z">
        <seg>NativeLibrary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Naturally when the task is executed again with no changes, then task itself is up to date and no files are reported to the task action:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142101Z" creationid="huanghaohang" creationdate="20190707T142101Z">
        <seg>当然，当再次执行任务时没有任何修改，那么任务本身是最新的，并且不会向这个任务操作报告任何文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, configure your notification service(s) of choice (see table below for which configuration properties are available):</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092000Z" creationid="huanghaohang" creationdate="20190124T092000Z">
        <seg>接下来，配置你所选择的通知服务（请参阅下表，了解可用的配置属性）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No matter what the language, proper dependency management is important for every project. From a complex enterprise application written in Java depending on hundreds of open source libraries to the simplest Clojure application depending on a handful of libraries, approaches to dependency management vary widely and can depend on the target technology, the method of application deployment, and the nature of the project. Projects bundled as reusable libraries may have different requirements than enterprise applications integrated into much larger systems of software and infrastructure. Despite this wide variation of requirements, the Gradle project recommends that all projects follow this set of core rules:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T145454Z" creationid="95" creationdate="20190210T143906Z">
        <seg>无论哪种语言，适当的依赖管理对于每个项目都很重要。从一个由Java编写的依赖数百个开源库的复杂企业应用，到依赖少数几个库的最简单的Clojure应用，依赖管理的方法大不相同，并且可能取决于目标技术、应用程序部署的方法以及项目的性质。多上项目捆绑为可复用的库，比起企业应用集成到更大规模的软件和基础结构系统中，可能有不同的需求。尽管需求的差异很大，Gradle项目建议所有项目都遵循这组核心规则：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No stacktrace options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221956Z" creationid="huanghaohang" creationdate="20180105T221956Z">
        <seg>没有栈跟踪选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No stacktraces are printed to the console in case of a build error (e.g. a compile error). Only in case of internal exceptions will stacktraces be printed. If the &lt;c0&gt;DEBUG&lt;/c0&gt; log level is chosen, truncated stacktraces are always printed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T222348Z" creationid="huanghaohang" creationdate="20180105T222235Z">
        <seg>在构建错误（如编译错误）时，不会打印堆栈跟踪信息到控制台。只有在内部异常情况下才会打印堆栈跟踪。如果选择&lt;c0&gt;DEBUG&lt;/c0&gt;日志级别，则总是打印截断的堆栈跟踪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>None</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025216Z" creationid="huanghaohang" creationdate="20181210T025216Z">
        <seg>None</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not every transitive dependency can be excluded - some transitive dependencies might be essential for correct runtime behavior of the application. Generally, one can exclude transitive dependencies that are either not required by runtime or that are guaranteed to be available on the target environment/platform.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T113218Z" creationid="huanghaohang" creationdate="20190602T112947Z">
        <seg>并非每个传递依赖都可以排除_某些传递依赖可能对于入驻正确的运行时行为至关重要。通常，可以排除的传递依赖，是在运行时不需要，或者是保证在目标环境或平台上可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not null</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T133343Z" creationid="haohang" creationdate="20180313T062400Z">
        <seg>不为 null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that "&lt;c0&gt;B.mustRunAfter(A)&lt;/c0&gt;" or "&lt;c1&gt;B.shouldRunAfter(A)&lt;/c1&gt;" does not imply any execution dependency between the tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T040256Z" creationid="huanghaohang" creationdate="20170922T040256Z">
        <seg>请注意“&lt;c0&gt;B.mustRunAfter(A)&lt;/c0&gt;”或“&lt;c1&gt;B.shouldRunAfter(A)&lt;/c1&gt;”并不意味着这些任务之间有任何执行上的依赖关系：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;c0&gt;fsc&lt;/c0&gt; expects to be restarted whenever the &lt;s1&gt;&lt;e2&gt;contents&lt;/e2&gt;&lt;/s1&gt; of its compile class path change. (It does detect changes to the compile class path itself.) This makes it less suitable for multi-project builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T022114Z" creationid="huanghaohang" creationdate="20180407T021918Z">
        <seg>注意，每当 &lt;c0&gt;fsc&lt;/c0&gt; 的编译类路径的&lt;s1&gt;&lt;e2&gt;内容&lt;/e2&gt;&lt;/s1&gt;有变化时，它都需要重新启动。（它检测到编译类路径本身的变化。）这使得它不太适合多项目构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that Zinc's Nailgun based daemon mode is not supported. Instead, we plan to enhance Gradle's own compiler daemon to stay alive across Gradle invocations, reusing the same Scala compiler. This is expected to yield another significant speedup for Scala compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141239Z" creationid="huanghaohang" creationdate="20180407T140816Z">
        <seg>注意，现在 Zinc 基于 Nailgun 的守护进程模式还不支持。相反，我们计划增强 Gradle 自己的编译器守护进程，以便在跨 Gradle 调用时继续保活​​，重用相同的 Scala 编译器。预计这将为 Scala 的编译带来另一个方面上的明显提速。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that abstract classes are not executed. Gradle also scan up the inheritance tree into jar files on the test classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155517Z" creationid="huanghaohang" creationdate="20180405T155348Z">
        <seg>请注意，抽象类不会被执行。 Gradle 还将扫描测试类路径中的 jar 文件的继承树。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that if a task has an output directory specified, any files added to that directory since the last time it was executed are ignored and will NOT cause the task to be out of date. This is so unrelated tasks may share an output directory without interfering with each other. If this is not the behaviour you want for some reason, consider using &lt;a0&gt;&lt;c1&gt;TaskOutputs.upToDateWhen()&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011533Z" creationid="huanghaohang" creationdate="20170923T011533Z">
        <seg>请注意，如果一个任务有指定的输出目录，在它上一次执行之后添加到该目录的所有文件都将被忽略，并且不会使这个任务过期。这样，那些不相关的任务之间就可以共用一个输出目录，而不会产生互相干扰。如果因为一些原因你不想要这样的行为，请考虑使用&lt;a0&gt;&lt;c1&gt;TaskOutputs.upToDateWhen()&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that this command blocks until the Gradle GUI is closed. Under *nix it is probably preferable to run this as a background task (&lt;s0&gt;&lt;s1&gt;gradle --gui&amp;&lt;/s1&gt;&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143437Z" creationid="huanghaohang" creationdate="20170911T143437Z">
        <seg>请注意，这个命令会被一直阻塞直到Gradle GUI被关闭。在*nix下，最好是将其作为后台任务运行（&lt;s0&gt;&lt;s1&gt;gradle --gui＆&lt;/s1&gt;&lt;/s0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note: &lt;c0&gt;groupId&lt;/c0&gt;, &lt;c1&gt;artifactId&lt;/c1&gt;, &lt;c2&gt;version&lt;/c2&gt;, and &lt;c3&gt;packaging&lt;/c3&gt; should always be set directly on the &lt;c4&gt;pom&lt;/c4&gt; object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111033Z" creationid="huanghaohang" creationdate="20190607T111033Z">
        <seg>注：&lt;c0&gt;groupId&lt;/c0&gt;、&lt;c1&gt;artifactId&lt;/c1&gt;、&lt;c2&gt;version&lt;/c2&gt; 和 &lt;c3&gt;packaging&lt;/c3&gt; 应该始终在 &lt;c4&gt;pom&lt;/c4&gt; 对象上直接设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022227Z" creationid="huanghaohang" creationdate="20190609T022227Z">
        <seg>备注</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that Gradle executes this task a second time, and does not skip the task even though nothing has changed. Our example task was defined using an action closure. Gradle has no idea what the closure does and cannot automatically figure out whether the task is up-to-date or not. To use Gradle's up-to-date checking, you need to declare the inputs and outputs of the task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T093732Z" creationid="huanghaohang" creationdate="20170922T085721Z">
        <seg>请注意，Gradle第二次执行此任务的时候，即使没有任何变化也不会跳过该任务。我们的示例任务是使用一个动作闭包定义的。 Gradle不知道这个闭包做了什么，不能自动判断这个任务是否是最新的。要使用Gradle的最新检查，你需要声明任务的输入和输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that our sample applies the Java plugin to each subproject. This means the tasks and configuration properties we have seen in the previous section are available in each subproject. So, you can compile, test, and JAR all the projects by running &lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt; from the root project directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124825Z" creationid="95" creationdate="20170803T124431Z">
        <seg>注意，我们的例子对每一个子项目都应用了Java插件。这意味着，在前一节我们所看到的任务和配置，在每一个子项目中都是可用的。因此，你可以通过在根项目目录中运行&lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt;，对所有的项目编译，测试并打成JAR包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the properties filename matches the plugin's name and is placed in the resources folder, and that the &lt;c0&gt;implementation-class&lt;/c0&gt; property identifies the &lt;a1&gt;&lt;c2&gt;Plugin&lt;/c2&gt;&lt;/a1&gt; implementation class.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153729Z" creationid="huanghaohang" creationdate="20190727T153729Z">
        <seg>注意，属性的文件名要和插件名相匹配，放在资源文件夹里，并且 &lt;c0&gt;implementation-class&lt;/c0&gt; 属性要指定 &lt;a1&gt;&lt;c2&gt;Plugin&lt;/c2&gt;&lt;/a1&gt; 的实现类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notification Service</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092150Z" creationid="huanghaohang" creationdate="20190124T092150Z">
        <seg>通知服务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notifications when things in the build change, so that UIs and models can be updated. For example, your Eclipse or IDEA project will update immediately, in the background.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191231T122910Z" creationid="huanghaohang" creationdate="20191231T122718Z">
        <seg>当构建中的内容有变化时进行通知，以便可以更新 UI 和模型。例如，Eclipse 或 IDEA 项目将在后台立即更新。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now Gradle will look for your dependencies in the JCenter repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031549Z" creationid="huanghaohang" creationdate="20190603T031549Z">
        <seg>现在 Gradle 将会在 JCenter 仓库中查找你的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now Gradle will look for your dependencies in this repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031038Z" creationid="huanghaohang" creationdate="20190603T031038Z">
        <seg>现在 Gradle 将会在此仓库中查找你的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now execute &lt;s0&gt;&lt;c1&gt;gradle eclipse&lt;/c1&gt;&lt;/s0&gt; command to generate Eclipse project files. More on Eclipse task can be found in &lt;a2&gt;Chapter 38, &lt;i3&gt;The Eclipse Plugin&lt;/i3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153936Z" creationid="95" creationdate="20170731T153936Z">
        <seg>现在执行&lt;s0&gt;&lt;c1&gt;gradle eclipse&lt;/c1&gt;&lt;/s0&gt; 命令将生成Eclipse的项目文件。有关Eclipse插件的更多信息请参阅《&lt;a2&gt;第三十八章，&lt;i3&gt;Eclipse插件&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now let's look at a typical multi-project build. Below is the layout for the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154408Z" creationid="95" creationdate="20170731T154408Z">
        <seg>现在让我们来看一个典型的多项目构建。以下是这个项目的布局：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we rewrite the &lt;c0&gt;water&lt;/c0&gt; build script and boil it down to a single line.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155630Z" creationid="huanghaohang" creationdate="20190614T155630Z">
        <seg>现在我们改写 &lt;c0&gt;water&lt;/c0&gt; 的构建脚本，并把它归结成为一行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we take the air out of this hack. We simply switch to the &lt;c0&gt;consumer&lt;/c0&gt; dir and execute the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141242Z" creationid="huanghaohang" creationdate="20190616T141242Z">
        <seg>现在我们来看这个技巧。我们简单地切换到 &lt;c0&gt;consumer&lt;/c0&gt; 目录并执行构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we will move our plugin to a standalone project, so we can publish it and share it with others. This project is simply a Groovy project that produces a JAR containing the plugin classes. Here is a simple build script for the project. It applies the Groovy plugin, and adds the Gradle API as a compile-time dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153029Z" creationid="huanghaohang" creationdate="20190727T153029Z">
        <seg>现在我们将插件移到一个独立的项目中，这样我们就可以发布它，并与他人共享。这个项目只是一个 Groovy 项目，其将生成包含插件类的 JAR。以下是该项目的一个简单的构建脚本。它应用了 Groovy 插件，并将 Gradle API 添加为编译时依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we will move our task to a standalone project, so we can publish it and share it with others. This project is simply a Groovy project that produces a JAR containing the task class. Here is a simple build script for the project. It applies the Groovy plugin, and adds the Gradle API as a compile-time dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122909Z" creationid="huanghaohang" creationdate="20190706T122909Z">
        <seg>现在我们将任务移到一个独立的项目中，这样我们就可以发布它，并与他人共享。这个项目只是一个 Groovy 项目，其将生成包含任务类的 JAR。以下是该项目的一个简单的构建脚本。它应用了 Groovy 插件，并将 Gradle API 添加为编译时依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now, Gradle knows which files to check to determine whether the task is up-to-date or not.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003937Z" creationid="huanghaohang" creationdate="20170923T003937Z">
        <seg>现在，Gradle 知道要检查哪些文件，以确定任务是否为最新的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now, when you run &lt;s0&gt;&lt;c1&gt;gradle uploadArchives&lt;/c1&gt;&lt;/s0&gt;, Gradle will build and upload your Jar. Gradle will also generate and upload an &lt;c2&gt;ivy.xml&lt;/c2&gt; as well.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050749Z" creationid="huanghaohang" creationdate="20170908T050503Z">
        <seg>现在，当你运行&lt;s0&gt;&lt;c1&gt;gradle uploadArchives&lt;/c1&gt;&lt;/s0&gt;，Gradle将会构建你的Jar包，以及生成&lt;c2&gt;ivy.xml&lt;/c2&gt;并且一起上传。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Object</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132250Z" creationid="huanghaohang" creationdate="20170913T132250Z">
        <seg>Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021822Z" creationid="huanghaohang" creationdate="20190609T021822Z">
        <seg>Objective-C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C language support is provided by means of the &lt;c0&gt;'objective-c'&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052309Z" creationid="huanghaohang" creationdate="20190609T052309Z">
        <seg>Objective-C 语言的支持是通过 &lt;c0&gt;'objective-c'&lt;/c0&gt; 插件提供的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C sources to be included in a native binary are provided via a &lt;a0&gt;&lt;c1&gt;ObjectiveCSourceSet&lt;/c1&gt;&lt;/a0&gt;, which defines a set of Objective-C source files. By default, for any named component the &lt;a2&gt;&lt;c3&gt;ObjectiveCSourceSet&lt;/c3&gt;&lt;/a2&gt; contains &lt;c4&gt;.m&lt;/c4&gt; source files under &lt;c5&gt;src/${name}/objectiveC&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052446Z" creationid="huanghaohang" creationdate="20190609T052446Z">
        <seg>把 Objective-C 源码包含到本机二进制文件中，是通过 &lt;a0&gt;&lt;c1&gt;ObjectiveCSourceSet&lt;/c1&gt;&lt;/a0&gt; 来实现的，它定义了一组 Objective-C 源文件。默认情况下，对于任何命名的组件，&lt;a2&gt;&lt;c3&gt;ObjectiveCSourceSet&lt;/c3&gt;&lt;/a2&gt; 包含了在 &lt;c5&gt;src/${name}/objectiveC&lt;/c5&gt; 中的 &lt;c4&gt;.m&lt;/c4&gt; 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C++</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021823Z" creationid="huanghaohang" creationdate="20190609T021823Z">
        <seg>Objective-C++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C++ language support is provided by means of the &lt;c0&gt;'objective-cpp'&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052533Z" creationid="huanghaohang" creationdate="20190609T052533Z">
        <seg>Objective-C++ 语言的支持是通过 &lt;c0&gt;'objective-cpp'&lt;/c0&gt; 插件提供的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objective-C++ sources to be included in a native binary are provided via a &lt;a0&gt;&lt;c1&gt;ObjectiveCppSourceSet&lt;/c1&gt;&lt;/a0&gt;, which defines a set of Objective-C++ source files. By default, for any named component the &lt;a2&gt;&lt;c3&gt;ObjectiveCppSourceSet&lt;/c3&gt;&lt;/a2&gt; contains &lt;c4&gt;.mm&lt;/c4&gt; source files under &lt;c5&gt;src/${name}/objectiveCpp&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052811Z" creationid="huanghaohang" creationdate="20190609T052635Z">
        <seg>把 Objective-C++ 源码包含到本机二进制文件中，是通过 &lt;a0&gt;&lt;c1&gt;ObjectiveCppSourceSet&lt;/c1&gt;&lt;/a0&gt; 来实现的，其定义了一组 Objective-C++ 源文件。默认情况下，对于任何命名的组件，&lt;a2&gt;&lt;c3&gt;ObjectiveCppSourceSet&lt;/c3&gt;&lt;/a2&gt; 包含了在 &lt;c5&gt;src/${name}/objectiveCpp&lt;/c5&gt; 中的 &lt;c4&gt;.mm&lt;/c4&gt; 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Obtaining information about your build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233945Z" creationid="huanghaohang" creationdate="20171206T233945Z">
        <seg>获取构建的相关信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Occasionally, you may want to stop the daemons either via the &lt;c0&gt;--stop&lt;/c0&gt; command line option or in a more forceful way.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025506Z" creationid="huanghaohang" creationdate="20180120T025506Z">
        <seg>有时候，你可能想要通过 &lt;c0&gt;--stop&lt;/c0&gt; 命令行选项或更有力的方式停止守护进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course one can configure the different file-sets with a closure to define excludes and includes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143158Z" creationid="huanghaohang" creationdate="20180408T143158Z">
        <seg>当然，你可以用一个定义了排除和包含的闭包来配置不同的文件集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, task dependencies across different projects are not limited to tasks with the same name. Let's change the naming of our tasks and execute the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152729Z" creationid="huanghaohang" creationdate="20190616T152729Z">
        <seg>当然，不同项目之间的任务依赖并不局限于名字相同。让我们更改任务名并执行构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often an organisation publishes a set of libraries with a single version; where the libraries are built, tested and published together. These libraries form a 'releasable unit', designed and intended to be used as a whole. It does not make sense to use libraries from different releasable units together.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T161127Z" creationid="huanghaohang" creationdate="20190604T161127Z">
        <seg>通常一个组织会发布一组同一个版本的库；这些库一起构建，测试和发布。这些库形成了一个“可发布单元”，被设计并打算作为一个整体使用。而使用来自不同的可发布单元的库，也不会有意义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often you will want to publish an archive, so that it is usable from another project. This process is described in &lt;a0&gt;Chapter 51, &lt;i1&gt;Publishing artifacts&lt;/i1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233541Z" creationid="huanghaohang" creationdate="20171206T233541Z">
        <seg>通常你会想要发布一个档案，这样就可以在另一个项目中使用它。这个过程将在《&lt;a0&gt;第五十一章， &lt;i1&gt;发布工件&lt;/i1&gt;&lt;/a0&gt;》中讲到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often, the dependencies of a project will themselves have dependencies. For example, Hibernate core requires several other libraries to be present on the classpath with it runs. So, when Gradle runs the tests for your project, it also needs to find these dependencies and make them available. We call these &lt;e0&gt;transitive dependencies&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170905T152538Z" creationid="95" creationdate="20170905T152151Z">
        <seg>通常一个项目的依赖还会有它们自己本身的依赖。例如Hibernate 核心类库在运行的时候就依赖于一些其他的类库。因此，当Gradle运行你的项目的测试用例时，它也需要找到这些依赖并使其可用。我们把这个过程称为 &lt;e0&gt;传递依赖&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Oftentimes, you have several related properties you need to specify on a single plugin. Gradle adds a configuration closure block for each extension object, so you can group settings together. The following example shows you how this works.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151600Z" creationid="huanghaohang" creationdate="20190726T151600Z">
        <seg>通常情况下，你会有几个相关联的属性需要在一个插件上指定。Gradle 为每个扩展对象添加了一个配置闭包块，因此你可以把这些设置分组。下面是其如何使用的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the other hand, finalizer tasks are not executed if the finalized task didn't do any work, for example due to failed task dependency or if it's considered up to date.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044611Z" creationid="huanghaohang" creationdate="20170923T044301Z">
        <seg>另一方面，如果最终的任务什么都没执行，比如因为失败的任务依赖或如果它被认为是最新的话，析构任务不会执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the same nesting level the configuration order depends on the alphanumeric position. The most common use case is to have multi-project builds that share a common lifecycle (e.g. all projects use the Java plugin). If you declare with &lt;c0&gt;dependsOn&lt;/c0&gt; a &lt;s1&gt;&lt;e2&gt;execution dependency&lt;/e2&gt;&lt;/s1&gt; between different projects, the default behavior of this method is to create also a &lt;s3&gt;&lt;e4&gt;configuration&lt;/e4&gt;&lt;/s3&gt; dependency between the two projects. Therefore it is likely that you don't have to define configuration dependencies explicitly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150248Z" creationid="huanghaohang" creationdate="20190617T150248Z">
        <seg>嵌套级别相同时，配置顺序取决于字母数字位置。最常见的用例是共享公共生命周期的多项目构建（例如，所有项目都使用 Java 插件）。如果通过 &lt;c0&gt;&lt;s1&gt;dependsOn&lt;/c0&gt;&lt;s1&gt; 声明了不同项目之间的&lt;e2&gt;执行依赖&lt;/e2&gt;&lt;/s1&gt;，该方法的默认行为也会创建两个项目之间的&lt;s3&gt;&lt;e4&gt;配置&lt;/e4&gt;&lt;/s3&gt;依赖。因此，你可能不需要显式定义配置依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once a configuration is resolved it is immutable. Changing its state or the state of one of its dependencies will cause an exception. You can always copy a resolved configuration. The copied configuration is in the unresolved state and can be freshly resolved.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T160140Z" creationid="huanghaohang" creationdate="20190602T160140Z">
        <seg>一旦一个配置被配置，那它就是不可变的了。如果去修改它或它的某个依赖的状态就会引发异常。你始终可以复制已经解析的配置，这个复制的配置处于未解析状态，并且可以重新解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once each repository has been inspected for the module, Gradle will choose the 'best' one to use. This is done using the following criteria:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T032915Z" creationid="huanghaohang" creationdate="20190604T032915Z">
        <seg>在对每个仓库进行模块检查后，Gradle 会选择使用“最好的”那个仓库。它使用以下标准完成的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once tasks are created they can be accessed via an &lt;s0&gt;&lt;e1&gt;API&lt;/e1&gt;&lt;/s0&gt;. This is different to Ant. For example you can create additional dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132935Z" creationid="95" creationdate="20170727T132814Z">
        <seg>与Ant不同，一旦任务被创建了，就可以通过一个 &lt;s0&gt;&lt;e1&gt;API&lt;/e1&gt;&lt;/s0&gt;去访问它。例如，你可以去给它们添加其他的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One focus of the IDEA plugin is to be open to customization. The plugin provides a standardized set of hooks for adding and removing content from the generated files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031058Z" creationid="huanghaohang" creationdate="20181212T031058Z">
        <seg>IDEA 插件的一个重点是开放定制。该插件提供了一组标准化的钩子，用于添加和删除生成的文件中的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One main limitation of init scripts is that they cannot access classes in the buildSrc project (see &lt;a0&gt;Section 59.3, “Build sources in the &lt;c1&gt;buildSrc&lt;/c1&gt; project”&lt;/a0&gt; for details of this feature).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142624Z" creationid="huanghaohang" creationdate="20191203T142624Z">
        <seg>初始化脚本的一个主要限制是，它们不能访问 buildSrc 项目里的类（该功能的详细信息可参见 &lt;a0&gt;第 59.3节，《的&lt;c1&gt;buildSrc&lt;/c1&gt; 项目中的构建源代码》&lt;/a0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One of the convention properties added by the plugin is &lt;c0&gt;applicationDistribution&lt;/c0&gt; which is a &lt;a1&gt;&lt;c2&gt;CopySpec&lt;/c2&gt;&lt;/a1&gt;. This specification is used by the &lt;c3&gt;installApp&lt;/c3&gt; and &lt;c4&gt;distZip&lt;/c4&gt; tasks as the specification of what is to be include in the distribution. Above copying the starting scripts to the &lt;c5&gt;bin&lt;/c5&gt; dir and necessary jars to &lt;c6&gt;lib&lt;/c6&gt; in the distribution, all of the files from the &lt;c7&gt;src/dist&lt;/c7&gt; directory are also copied. To include any static files in the distribution, simply arrange them in the &lt;c8&gt;src/dist&lt;/c8&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140516Z" creationid="95" creationdate="20190131T140319Z">
        <seg>&lt;c0&gt;applicationDistribution&lt;/c0&gt;是插件添加的约定属性之一，它是一个 &lt;a1&gt;&lt;c2&gt;CopySpec&lt;/c2&gt;&lt;/a1&gt;。这个副本规范在 &lt;c3&gt;installApp&lt;/c3&gt; 和 &lt;c4&gt;distZip&lt;/c4&gt; 任务中会用到，作为要包含在分发中的内容的描述。在分发中，以上将启动脚本复制到 &lt;c5&gt;bin&lt;/c5&gt; 目录和 &lt;c6&gt;lib&lt;/c6&gt; 的必要jar中，也会复制 &lt;c7&gt;src/dist&lt;/c7&gt; 目录中的所有文件。如果要在分发中包含任何的静态文件，只需要把它们放在 &lt;c8&gt;src/dist&lt;/c8&gt; 目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One or more output files have changed since the previous execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140829Z" creationid="huanghaohang" creationdate="20190707T140750Z">
        <seg>自上次执行以来，一有个或多个的输出文件已更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One piece of module metadata that Gradle understands is a module's &lt;s0&gt;&lt;e1&gt;status scheme&lt;/e1&gt;&lt;/s0&gt;. This concept, also known from Ivy, models the different levels of maturity that a module transitions through over time. The default status scheme, ordered from least to most mature status, is &lt;c2&gt;integration&lt;/c2&gt;, &lt;c3&gt;milestone&lt;/c3&gt;, &lt;c4&gt;release&lt;/c4&gt;. Apart from a status scheme, a module also has a (current) &lt;s5&gt;&lt;e6&gt;status&lt;/e6&gt;&lt;/s5&gt;, which must be one of the values in its status scheme. If not specified in the (Ivy) descriptor, the status defaults to &lt;c7&gt;integration&lt;/c7&gt; for Ivy modules and Maven snapshot modules, and &lt;c8&gt;release&lt;/c8&gt; for Maven modules that aren't snapshots.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T035609Z" creationid="huanghaohang" creationdate="20190605T034857Z">
        <seg>Gradle 理解的其中一个模块元数据是模块的 &lt;s0&gt;&lt;e1&gt;状态方案&lt;/e1&gt;&lt;/s0&gt;。 这个概念也可以从 Ivy 中了解到，对随时间推移模块的不同成熟度级别进行建模。默认的状态方案，按从最低到最高的成熟度排序，分别为 &lt;c2&gt;integration&lt;/c2&gt;，&lt;c3&gt;milestone&lt;/c3&gt; 和 &lt;c4&gt;release&lt;/c4&gt;。 除状态方案外，模块还有一个（当前）&lt;s5&gt;&lt;e6&gt;状态&lt;/e6&gt;&lt;/s5&gt;，它必须是状态方案中的值之一。如果没有在（Ivy）描述符中指定， Ivy 模块和 Maven 快照模块的状态默认是 &lt;c7&gt;integration&lt;/c7&gt;，而不是快照的 Maven 模块则默认为 &lt;c8&gt;release&lt;/c8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One thing to note is that a new instance of a given plugin is created for each project it is applied to.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T151041Z" creationid="huanghaohang" creationdate="20190719T151041Z">
        <seg>需要注意的一点是，对于一个给定的插件，每一个应用它的项目都会创建一个新的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One use for source sets is to group source files into logical groups which describe their purpose. For example, you might use a source set to define an integration test suite, or you might use separate source sets to define the API and implementation classes of your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061021Z" creationid="haohang" creationdate="20180312T061021Z">
        <seg>源集的一个用途是，将源文件进行逻辑上的分组，以描述它们的目的。例如，你可以使用一个源集来定义一个集成测试套件，也可以使用单独的源集来定义项目的 API 和实现类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One way to obtain a &lt;c0&gt;FileCollection&lt;/c0&gt; instance is to use the &lt;a1&gt;&lt;c2&gt;Project.files()&lt;/c2&gt;&lt;/a1&gt; method. You can pass this method any number of objects, which are then converted into a set of &lt;c3&gt;File&lt;/c3&gt; objects. The &lt;c4&gt;files()&lt;/c4&gt; method accepts any type of object as its parameters. These are evaluated relative to the project directory, as per the &lt;c5&gt;file()&lt;/c5&gt; method, described in &lt;a6&gt;Section 16.1, “Locating files”&lt;/a6&gt;. You can also pass collections, iterables, maps and arrays to the &lt;c7&gt;files()&lt;/c7&gt; method. These are flattened and the contents converted to &lt;c8&gt;File&lt;/c8&gt; instances.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T131817Z" creationid="huanghaohang" creationdate="20170923T130900Z">
        <seg>使用&lt;a1&gt;&lt;c2&gt;Project.files()&lt;/c2&gt;&lt;/a1&gt;方法是获取方式&lt;c0&gt;FileCollection&lt;/c0&gt;实例的一种方式。你可以传任意个对象给这个方法，它们会被转换为一组&lt;c3&gt;File&lt;/c3&gt;对象。这个&lt;c4&gt;files()&lt;/c4&gt;方法接受任何类型的对象作为其参数。如&lt;a6&gt;第16.1节，“查找文件”&lt;/a6&gt;中对&lt;c5&gt;file()&lt;/c5&gt;方法的描述，它们会被计算为相对于项目目录的路径。你还可以将集合，可迭代类型，map和数组传给&lt;c7&gt;files()&lt;/c7&gt;方法。它们会被展开，并且里面的内容会被转换为&lt;c8&gt;File&lt;/c8&gt;实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One way to obtain a &lt;c0&gt;FileTree&lt;/c0&gt; instance is to use the &lt;a1&gt;&lt;c2&gt;Project.fileTree()&lt;/c2&gt;&lt;/a1&gt; method. This creates a &lt;c3&gt;FileTree&lt;/c3&gt; defined with a base directory, and optionally some Ant-style include and exclude patterns.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023409Z" creationid="huanghaohang" creationdate="20171002T023409Z">
        <seg>获取 &lt;c0&gt;FileTree&lt;/c0&gt; 实例的其中一种方式是使用&lt;a1&gt;&lt;c2&gt;Project.fileTree()&lt;/c2&gt;&lt;/a1&gt; 方法。它会创建一个&lt;c3&gt;FileTree&lt;/c3&gt; ，使用一个基本目录来定义，并且可以选择一些Ant风格的包含和排除模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only Show Output When Errors Occur</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150144Z" creationid="huanghaohang" creationdate="20170911T150144Z">
        <seg>只在出现错误时显示输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only support for comparing build outcomes that are &lt;c0&gt;zip&lt;/c0&gt; archives is supported at this time. This includes &lt;c1&gt;jar&lt;/c1&gt;, &lt;c2&gt;war&lt;/c2&gt; and &lt;c3&gt;ear&lt;/c3&gt; archives.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T142236Z" creationid="huanghaohang" creationdate="20210513T142236Z">
        <seg>目前仅支持比较 &lt;c0&gt;zip&lt;/c0&gt; 归档的构建结果。包括&lt;c1&gt;jar&lt;/c1&gt;，&lt;c2&gt;war&lt;/c2&gt;和&lt;c3&gt;ear&lt;/c3&gt;归档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Only support for executing Gradle builds is available at this time. Source and target build must execute with Gradle newer or equal to &lt;c0&gt;1.0&lt;/c0&gt;. Host build must be at least &lt;c1&gt;1.2&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210513T140511Z" creationid="huanghaohang" creationdate="20210513T140511Z">
        <seg>目前只支持执行Gradle构建。源构建和目标构建必须使用Gradle&lt;c0&gt;1.0&lt;/c0&gt;或以上的版本来执行。主机构建则必须是&lt;c1&gt;1.2&lt;/c1&gt;版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Operating System</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092152Z" creationid="huanghaohang" creationdate="20190124T092152Z">
        <seg>操作系统</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221859Z" creationid="huanghaohang" creationdate="20180105T221859Z">
        <seg>选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optionally, a repository with pattern layout can have its 'organisation' part laid out in Maven style, with forward slashes replacing dots as separators. For example, the organisation &lt;c0&gt;my.company&lt;/c0&gt; would then be represented as &lt;c1&gt;my/company&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025104Z" creationid="huanghaohang" creationdate="20190604T024731Z">
        <seg>作为可选的功能，一个使用模式布局的仓库可以让它的“组织”部分使用是Maven 风格，以斜杠替换点作为分隔符。例如，组织 &lt;c0&gt;my.company&lt;/c0&gt; 将表示为 &lt;c1&gt;my/company&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or a remote Ivy repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044905Z" creationid="huanghaohang" creationdate="20170908T044905Z">
        <seg>或者是一个远程的Ivy仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or a remote Maven repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044814Z" creationid="huanghaohang" creationdate="20170908T044814Z">
        <seg>或其他远程Maven仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or you can add behavior to an existing task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133059Z" creationid="95" creationdate="20170727T133059Z">
        <seg>或者，你也可以对已经存在的任务添加行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or, you can add behaviour to an Ant target:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084801Z" creationid="huanghaohang" creationdate="20180105T084801Z">
        <seg>或者你也可以将行为添加到 Ant 目标中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ordering tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021713Z" creationid="huanghaohang" creationdate="20180201T021713Z">
        <seg>任务排序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Originally Gradle has used the &lt;c0&gt;'/'&lt;/c0&gt; character as a natural path separator. With the introduction of directory tasks (see &lt;a1&gt;Section 14.1, “Directory creation”&lt;/a1&gt;) this was no longer possible, as the name of the directory task contains the &lt;c2&gt;'/'&lt;/c2&gt; character.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T135956Z" creationid="huanghaohang" creationdate="20190616T135956Z">
        <seg>最初 Gradle 使用 &lt;c0&gt;“/”&lt;/c0&gt; 字符作为自然路径分隔符。在引入目录任务（见《&lt;a1&gt;第14.1节，目录创建&lt;/a1&gt;)》就不能再这样做了，因为目录任务的名称包含 &lt;c2&gt;“/”&lt;/c2&gt; 字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>OsgiManifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030218Z" creationid="huanghaohang" creationdate="20181203T030218Z">
        <seg>OsgiManifest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other build systems use inheritance as the primary means for defining common behavior. We also offer inheritance for projects as you will see later. But Gradle uses configuration injection as the usual way of defining common behavior. We think it provides a very powerful and flexible way of configuring multiproject builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142104Z" creationid="huanghaohang" creationdate="20190615T142104Z">
        <seg>其他构建系统使用继承作为定义公共行为的主要方法。稍后你会看到，我们也提供了项目继承。但 Gradle 使用配置注入作为定义共同行为的常用方法。我们认为它提供了一种非常强大且灵活的方式来配置多项目构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other examples of the dependency exclusions can be found in the reference for &lt;a0&gt;&lt;c1&gt;ModuleDependency&lt;/c1&gt;&lt;/a0&gt; or &lt;a2&gt;&lt;c3&gt;DependencyHandler&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140045Z" creationid="huanghaohang" creationdate="20190602T140045Z">
        <seg>其他有关依赖排除的示例，可以参考 &lt;a0&gt; &lt;c1&gt;ModuleDependency&lt;/c1&gt;&lt;/a0&gt; 或 &lt;a2&gt;&lt;c3&gt;DependencyHandler&lt;/c3&gt;&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, continue on to &lt;a0&gt;Chapter 8, &lt;i1&gt;Dependency Management Basics&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130404Z" creationid="95" creationdate="20170803T130404Z">
        <seg>另外，下一章是《&lt;a0&gt;第八章，&lt;i1&gt;依赖管理基础&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, continue on to some of the other &lt;a0&gt;tutorials&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051624Z" creationid="huanghaohang" creationdate="20170908T051624Z">
        <seg>另外，继续其他&lt;a0&gt;教程&lt;/a0&gt;吧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, continue on to the tutorials in &lt;a0&gt;Chapter 7, &lt;i1&gt;Java Quickstart&lt;/i1&gt;&lt;/a0&gt; and &lt;a2&gt;Chapter 8, &lt;i3&gt;Dependency Management Basics&lt;/i3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030938Z" creationid="95" creationdate="20170729T030914Z">
        <seg>另外，本教程接下来是 《&lt;a0&gt;第七章， &lt;i1&gt;Java 快速入门&lt;/i1&gt;&lt;/a0&gt;》 以及《&lt;a2&gt;第八章， &lt;i3&gt;依赖管理基础&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, execution of the task will fail with a message saying that &lt;c0&gt;groovyClasspath&lt;/c0&gt; could not be inferred.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132839Z" creationid="huanghaohang" creationdate="20180406T132839Z">
        <seg>其他情况下，任务将执行失败，并提示无法推断 &lt;c0&gt;groovyClasspath&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, execution of the task will fail with a message saying that &lt;c0&gt;scalaClasspath&lt;/c0&gt; could not be inferred.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020031Z" creationid="huanghaohang" creationdate="20180407T020031Z">
        <seg>否则，该任务将执行失败，并提示无法推断 &lt;c0&gt;scalaClasspath&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle --init-script init.gradle -q doNothing&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151118Z" creationid="huanghaohang" creationdate="20191206T151118Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle --init-script init.gradle -q doNothing&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle --init-script init.gradle -q showRepos&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143650Z" creationid="huanghaohang" creationdate="20191206T143650Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle --init-script init.gradle -q showRepos&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -I init.gradle build&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144039Z" creationid="huanghaohang" creationdate="20180107T144039Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -I init.gradle build&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -a :api:build&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141015Z" creationid="huanghaohang" creationdate="20190622T141015Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle :api:build&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q -I init.gradle showRepositories&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151238Z" creationid="huanghaohang" creationdate="20191206T151238Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -I init.gradle showRepositories&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135035Z" creationid="huanghaohang" creationdate="20170917T135035Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q -PtaskInputProperty=changed incrementalReverse&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143253Z" creationid="huanghaohang" creationdate="20190707T143253Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q -PtaskInputProperty=changed incrementalReverse&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q -b subdir/myproject.gradle hello&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114023Z" creationid="huanghaohang" creationdate="20170909T114023Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q -b subdir/myproject.gradle hello&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q -p subdir hello&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114306Z" creationid="huanghaohang" creationdate="20170909T114306Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q -p subdir hello&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q :hello :krill:hello hello&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T111313Z" creationid="huanghaohang" creationdate="20190616T111230Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q :hello :krill:hello hello&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q a&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151306Z" creationid="huanghaohang" creationdate="20190613T151306Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q task0&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q action&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140302Z" creationid="huanghaohang" creationdate="20190616T140302Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q action&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q allFiles&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143258Z" creationid="huanghaohang" creationdate="20190602T143258Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q allFiles&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q api:dependencies --configuration testCompile&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T021702Z" creationid="huanghaohang" creationdate="20170910T021702Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q api:dependencies --configuration testCompile&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q api:properties&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023445Z" creationid="huanghaohang" creationdate="20170910T023445Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q api:properties&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q books&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131012Z" creationid="huanghaohang" creationdate="20190728T131012Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q books&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q broken&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152629Z" creationid="huanghaohang" creationdate="20190613T152629Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q broken&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q build&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135714Z" creationid="huanghaohang" creationdate="20191201T135714Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q build&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q check&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130255Z" creationid="huanghaohang" creationdate="20170912T130255Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q check&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q compile&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132414Z" creationid="huanghaohang" creationdate="20170917T132414Z">
        <seg> &lt;s0&gt;&lt;c1&gt;gradle -q compile&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q configure&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145827Z" creationid="huanghaohang" creationdate="20170918T145827Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q configure&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q consume&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152800Z" creationid="huanghaohang" creationdate="20190616T152800Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q consume&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q copy&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083321Z" creationid="huanghaohang" creationdate="20170922T083321Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q copy&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q copyVsFiles&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153127Z" creationid="huanghaohang" creationdate="20190602T153127Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q copyVsFiles&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q count&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155907Z" creationid="95" creationdate="20170726T155907Z">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q count&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q dependencies api:dependencies webapp:dependencies&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T014135Z" creationid="huanghaohang" creationdate="20170910T014135Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q dependencies api:dependencies webapp:dependencies&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q dependencies&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143030Z" creationid="huanghaohang" creationdate="20190602T143030Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q dependencies&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q distanceToIceberg&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162446Z" creationid="huanghaohang" creationdate="20190615T162446Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q distanceToIceberg&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q distribution&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025320Z" creationid="95" creationdate="20170729T025320Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q distribution&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q encode&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141058Z" creationid="huanghaohang" creationdate="20191202T141058Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q encode&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q files&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143715Z" creationid="huanghaohang" creationdate="20190602T143715Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q files&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q groupPing&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043839Z" creationid="huanghaohang" creationdate="20170923T043839Z">
        <seg>&lt;s0&gt; &lt;c1&gt;Gradle q groupPing&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q hello greeting&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122517Z" creationid="huanghaohang" creationdate="20190706T122517Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q hello greeting&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q hello&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154830Z" creationid="95" creationdate="20170724T145842Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q hello&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q help --task libs&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012839Z" creationid="huanghaohang" creationdate="20170910T012839Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q help --task libs&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q incrementalReverse&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141910Z" creationid="huanghaohang" creationdate="20190707T141910Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q incrementalReverse&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q intro&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160129Z" creationid="95" creationdate="20170726T160129Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q intro&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q list&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150358Z" creationid="huanghaohang" creationdate="20170927T150358Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q list&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q listBirds&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041018Z" creationid="huanghaohang" creationdate="20190605T041018Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q listBirds&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q listFish&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040721Z" creationid="huanghaohang" creationdate="20190605T040721Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q listFish&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q listJars&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051159Z" creationid="huanghaohang" creationdate="20190531T051159Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q listJars&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q loadfile&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153828Z" creationid="95" creationdate="20170728T153828Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q loadfile&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q myTask&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084841Z" creationid="huanghaohang" creationdate="20170922T084841Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q myTask&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q myZip&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140719Z" creationid="huanghaohang" creationdate="20171126T140719Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q myZip&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q pingServer1&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011929Z" creationid="huanghaohang" creationdate="20170923T011929Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q task1&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q printProperties&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133601Z" creationid="huanghaohang" creationdate="20170913T133601Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q printProperties&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q printTaskProperties&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T142009Z" creationid="95" creationdate="20170727T142009Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q printTaskProperties&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q projects&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011128Z" creationid="huanghaohang" creationdate="20170910T011128Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q projects&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q release&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025327Z" creationid="95" creationdate="20170729T025327Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q release&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q removeInput incrementalReverse&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142532Z" creationid="huanghaohang" creationdate="20190707T142532Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q removeInput incrementalReverse&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q removeOutput incrementalReverse&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143017Z" creationid="huanghaohang" creationdate="20190707T143017Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q removeOutput incrementalReverse&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q sayGreeting&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151214Z" creationid="huanghaohang" creationdate="20190727T151214Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q sayGreeting&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q show&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100206Z" creationid="huanghaohang" creationdate="20180130T100206Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q show&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q task0&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133037Z" creationid="95" creationdate="20170727T133037Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q task0&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q task1&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132756Z" creationid="95" creationdate="20170727T132730Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q task1&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q taskX&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160358Z" creationid="95" creationdate="20170726T160358Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q taskX&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q taskY taskX&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T032051Z" creationid="huanghaohang" creationdate="20170922T032051Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q taskY taskX&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q taskY&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035747Z" creationid="huanghaohang" creationdate="20170922T035747Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q taskY&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q tasks --all&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012324Z" creationid="huanghaohang" creationdate="20170910T012324Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q tasks --all&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q tasks&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011710Z" creationid="huanghaohang" creationdate="20170910T011710Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q tasks&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q test&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150015Z" creationid="huanghaohang" creationdate="20190613T150015Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q test&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q updateInputs incrementalReverse&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142257Z" creationid="huanghaohang" creationdate="20190707T142257Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q updateInputs incrementalReverse&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q upper&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155839Z" creationid="95" creationdate="20170726T155839Z">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q upper&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q webapp:dependencyInsight --dependency groovy --configuration compile&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022158Z" creationid="huanghaohang" creationdate="20170910T022158Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q webapp:dependencyInsight --dependency groovy --configuration compile&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle -q&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023926Z" creationid="95" creationdate="20170729T023916Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle -q&lt;/c1&gt;&lt;/s0&gt;的构建结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle :api:build&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T135459Z" creationid="huanghaohang" creationdate="20190622T135459Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle :api:build&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle :api:buildDependents&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T142336Z" creationid="huanghaohang" creationdate="20190622T142336Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle :api:buildDependents&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle :api:buildNeeded&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T141706Z" creationid="huanghaohang" creationdate="20190622T141706Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle: api:buildNeeded&lt;/c1&gt; &lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014304Z" creationid="95" creationdate="20170730T014304Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle cT&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113259Z" creationid="huanghaohang" creationdate="20170909T113259Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle cT&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle di&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T112846Z" creationid="huanghaohang" creationdate="20170909T112846Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle di&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle disableMe&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085329Z" creationid="huanghaohang" creationdate="20170922T085329Z">
        <seg>&lt;s0&gt; &lt;c1&gt;Gradle disableMe&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle dist -x test&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T032028Z" creationid="huanghaohang" creationdate="20170909T032028Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle dist -x test&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle dist test&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031159Z" creationid="huanghaohang" creationdate="20170909T031159Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle dist test&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle distZip&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141041Z" creationid="95" creationdate="20190131T141041Z">
        <seg>&lt;s0&gt; &lt;c1&gt;gradle distZip&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle distanceToIceberg&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162619Z" creationid="huanghaohang" creationdate="20190615T162619Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle distanceToIceberg&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle hello -PskipHello&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084200Z" creationid="huanghaohang" creationdate="20170922T084200Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle hello -PskipHello&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle hello&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022456Z" creationid="huanghaohang" creationdate="20171216T022456Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle hello&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle intTestClasses&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095240Z" creationid="haohang" creationdate="20180326T095240Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle intTestClasses&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle intro&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084643Z" creationid="huanghaohang" creationdate="20180105T084643Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle intro&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle signArchives&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135043Z" creationid="huanghaohang" creationdate="20190608T135043Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle signArchives&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle signStuffZip&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140516Z" creationid="huanghaohang" creationdate="20190608T140516Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle signStuffZip&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle test&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145539Z" creationid="huanghaohang" creationdate="20190612T145523Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle test&lt;/c1&gt;&lt;/s0&gt; 的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output of &lt;s0&gt;&lt;c1&gt;gradle transform&lt;/c1&gt;&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085717Z" creationid="huanghaohang" creationdate="20170922T085717Z">
        <seg>&lt;s0&gt;&lt;c1&gt;gradle transform&lt;/c1&gt;&lt;/s0&gt;的输出结果</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output.FILE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093256Z" creationid="huanghaohang" creationdate="20180715T093256Z">
        <seg>Output.FILE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Outputs Log Levels</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221901Z" creationid="huanghaohang" creationdate="20180105T221901Z">
        <seg>输出日志级别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072443Z" creationid="haohang" creationdate="20170720T072443Z">
        <seg>概述</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>POGOs. You can declare and use plain old Groovy objects (POGOs) directly in your build script. The build script is written in Groovy, after all, and Groovy provides you with lots of excellent ways to organize code.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T142854Z" creationid="huanghaohang" creationdate="20190817T142854Z">
        <seg>POGO。你可以直接在构建脚本中声明和使用普通的 Groovy 对象（POGO）。别忘了构建脚本是使用 Groovy 来写的，Groovy 会向你提供许多优秀的方式来组织代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Packaging a plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132319Z" creationid="huanghaohang" creationdate="20190728T132319Z">
        <seg>打包插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Packaging a task class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145308Z" creationid="huanghaohang" creationdate="20190708T145308Z">
        <seg>封装一个任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parallel project execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145110Z" creationid="huanghaohang" creationdate="20190708T145110Z">
        <seg>并行项目执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parallel project execution allows the separate projects in a decoupled multi-project build to be executed in parallel (see also: &lt;a0&gt;Section 56.9, “Decoupled Projects”&lt;/a0&gt;). While parallel execution does not strictly require decoupling at configuration time, the long-term goal is to provide a powerful set of features that will be available for fully decoupled projects. Such features include:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T144240Z" creationid="huanghaohang" creationdate="20190621T143413Z">
        <seg>并行项目执行允许在一个解耦的多项目构建中的一些单独项目并行执行（另请参阅《&lt;a0&gt;第56.9节，解耦项目&lt;/a0&gt;》）。虽然并行执行并不严格要求在配置时进行解耦，但它的长期目标是提供一组强大的功能部件，用于完全解耦项目。这些功能包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parentheses are optional for method calls.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141359Z" creationid="huanghaohang" creationdate="20170913T141359Z">
        <seg>调用方法时括号是可选的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performance. The API gives us the opportunity to do lots of caching, static analysis and preemptive work, to make things faster for the user.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T143535Z" creationid="huanghaohang" creationdate="20191220T143330Z">
        <seg>性能。这个API 让我们有机会进行大量的缓存，静态分析以及抢占式的工作，从而为用户提供更快的速度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a full build of the project and all projects it depends on.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035421Z" creationid="haohang" creationdate="20180313T035421Z">
        <seg>执行项目本身及它所依赖的其他所有项目的完整构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a full build of the project and all projects which depend on it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035542Z" creationid="haohang" creationdate="20180313T035542Z">
        <seg>执行项目本身及依赖它的其他所有项目的完整构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs a full build of the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035131Z" creationid="haohang" creationdate="20180313T035131Z">
        <seg>执行完整的项目构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs all verification tasks in the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035011Z" creationid="haohang" creationdate="20180313T035011Z">
        <seg>执行项目中所有的验证任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs quality checks on your project's Groovy source files using &lt;a0&gt;CodeNarc&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144518Z" creationid="huanghaohang" creationdate="20180207T144518Z">
        <seg>对你的项目的 Groovy 源文件使用 &lt;a0&gt;CodeNarc&lt;/a0&gt; 执行质量检查并生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs quality checks on your project's Java source files using &lt;a0&gt;Checkstyle&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144442Z" creationid="huanghaohang" creationdate="20180207T144442Z">
        <seg>对你的项目的 Java 源文件使用 &lt;a0&gt;Checkstyle&lt;/a0&gt; 执行质量检查并生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs quality checks on your project's Java source files using &lt;a0&gt;FindBugs&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085739Z" creationid="huanghaohang" creationdate="20180211T085739Z">
        <seg>对你的项目的 Java 源文件使用 &lt;a0&gt;FindBugs&lt;/a0&gt; 执行质量检查并生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs quality checks on your project's Java source files using &lt;a0&gt;PMD&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085912Z" creationid="huanghaohang" creationdate="20180211T085912Z">
        <seg>对你的项目的 Java 源文件使用 &lt;a0&gt;PMD&lt;/a0&gt; 执行质量检查并生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Performs quality checks on your project's source files using &lt;a0&gt;JDepend&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085850Z" creationid="huanghaohang" creationdate="20180211T085850Z">
        <seg>使用 &lt;a0&gt;JDepend&lt;/a0&gt; 对你的项目的源文件执行质量检查并生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Periodically garbage collect the Gradle caches.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T142057Z" creationid="huanghaohang" creationdate="20180109T142057Z">
        <seg>Gradle 缓存的定期垃圾收集。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Person.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160325Z" creationid="huanghaohang" creationdate="20190617T160325Z">
        <seg>Person.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>PersonImpl.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160327Z" creationid="huanghaohang" creationdate="20190617T160327Z">
        <seg>PersonImpl.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>PersonService.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160332Z" creationid="huanghaohang" creationdate="20190617T160332Z">
        <seg>PersonService.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>PersonServiceTest.java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160334Z" creationid="huanghaohang" creationdate="20190617T160334Z">
        <seg>PersonServiceTest.java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please notice that you can't use shortcut notation (see &lt;a0&gt;Section 6.8, “Shortcut notations”&lt;/a0&gt;) when referring to a task that is not yet defined.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132502Z" creationid="95" creationdate="20170727T132113Z">
        <seg>请注意，当一个任务还没有被定义的时候，不能使用快捷符号（见 &lt;a0&gt;第6.8节，“快捷标记”&lt;/a0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please take a look at &lt;a0&gt;Chapter 19, &lt;i1&gt;The Gradle Daemon&lt;/i1&gt;&lt;/a0&gt;. The Tooling API uses the daemon all the time, e.g. you cannot officially use the Tooling API without the daemon. This means that subsequent calls to the Tooling API, be it model building requests or task executing requests can be executed in the same long-living process. &lt;a2&gt;Chapter 19, &lt;i3&gt;The Gradle Daemon&lt;/i3&gt;&lt;/a2&gt; contains more details about the daemon, specifically information on situations when new daemons are forked.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T151131Z" creationid="huanghaohang" creationdate="20200106T151131Z">
        <seg>请查看《&lt;a0&gt;第 19 章，&lt;i1&gt;Gradle 守护进程&lt;/i1&gt;&lt;/a0&gt;》。Tooling API 全程使用守护进程，举例来说，没有守护进程，你就不能正式使用 Tooling API。这意味着后续调用 Tooling API 时，都会在同一个长期存活的进程中执行构建请求或任务执行请求的模型。《&lt;a2&gt;第 19 章，&lt;i3&gt;Gradle 守护进程&lt;/i3&gt;&lt;/a2&gt;》包含了有关守护进程的更多详细内容，特别是有关派生新守护程序情况的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025213Z" creationid="huanghaohang" creationdate="20181210T025213Z">
        <seg>插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin Id</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140556Z" creationid="huanghaohang" creationdate="20180205T140556Z">
        <seg>插件 Id</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin Status and Compatibility</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070212Z" creationid="huanghaohang" creationdate="20190205T070212Z">
        <seg>插件状态和兼容性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins advertise a short name for themselves. In the above case, we are using the short name ‘&lt;c0&gt;java&lt;/c0&gt;’ to apply the &lt;a1&gt;&lt;c2&gt;JavaPlugin&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093141Z" creationid="huanghaohang" creationdate="20180130T093141Z">
        <seg>插件都有表示自己的一个简称。在上述例子中，我们使用简称“&lt;c0&gt;java&lt;/c0&gt;”来应用 &lt;a1&gt;&lt;c2&gt;JavaPlugin&lt;/c2&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins are said to be &lt;s0&gt;&lt;e1&gt;applied&lt;/e1&gt;&lt;/s0&gt;, which is done via the &lt;a2&gt;&lt;c3&gt;Project.apply()&lt;/c3&gt;&lt;/a2&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T092942Z" creationid="huanghaohang" creationdate="20180130T092904Z">
        <seg>插件可以说是被&lt;s0&gt;&lt;e1&gt;应用的&lt;/e1&gt;&lt;/s0&gt;，通过 &lt;a2&gt;&lt;c3&gt;Project.apply()&lt;/c3&gt;&lt;/a2&gt;方法来完成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins can pre-configure the project in smart ways to support convention-over-configuration. Gradle provides mechanisms and sophisticated support and it's a key ingredient in powerful-yet-concise build scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T021650Z" creationid="huanghaohang" creationdate="20180131T021650Z">
        <seg>插件可以通过智能的方式对项目进行预配置，以支持约定优于配置配置。Gradle 为此提供了相关机制和复杂的支持，这正是强大而简洁的构建脚本的关键组成部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pmd</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143146Z" creationid="huanghaohang" creationdate="20180516T143146Z">
        <seg>Pmd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pre-configure added tasks with useful defaults.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100056Z" creationid="huanghaohang" creationdate="20180130T100056Z">
        <seg>使用有用的默认设置对已添加的任务进行预配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Preemptive execution of certain tasks, for example compilation. Quicker feedback.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T142004Z" creationid="huanghaohang" creationdate="20180109T142004Z">
        <seg>预先执行某些任务，比如编译。更快的反馈。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prerequisites</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013328Z" creationid="huanghaohang" creationdate="20170919T013328Z">
        <seg>环境要求</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Presently, Gradle supports building native binaries from any combination of source languages listed below. A native binary project will contain one or more named &lt;c0&gt;FunctionalSourceSet&lt;/c0&gt; instances (eg 'main', 'test', etc), each of which can contain &lt;c1&gt;LanguageSourceSet&lt;/c1&gt;s containing source files, one for each language.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T042553Z" creationid="huanghaohang" creationdate="20190609T042553Z">
        <seg>目前，Gradle 支持从下面列出的源码语言的任意组合中构建本机二进制文件。本机二进制项目将包含一个或多个名为 &lt;c0&gt;FunctionalSourceSet&lt;/c0&gt; 的实例（如“main”，“test”等等)，每个实例都可以包含多个只包含一种语言的 &lt;c1&gt;LanguageSourceSet&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Presently, a &lt;c0&gt;Platform&lt;/c0&gt; consists of a defined operating system and architecture. As we continue to develop the native binary support in Gradle, the concept of Platform will be extended to include things like C-runtime version, Windows SDK, ABI, etc. Sophisticated builds may use the extensibility of Gradle to apply additional attributes to each platform, which can then be queried to specify particular includes, preprocessor macros or compiler arguments for a native binary.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045608Z" creationid="huanghaohang" creationdate="20190610T045608Z">
        <seg>目前，一个 &lt;c0&gt;Platform&lt;/c0&gt; 由一个定义的操作系统和架构组成。随着我们继续开发 Gradle 的本机二进制支持，将扩展平台的概念，包含诸如 C-runtime 版本，Windows SDK，ABI 等等之类的内容。复杂的构建可能会使用 Gradle 的可扩展性把附加属性应用于每个平台，然后可以查询这些属性，以便指定一个本机二进制文件的特定包含，预处理器宏或编译器参数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Production ANTLR grammar files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013742Z" creationid="huanghaohang" creationdate="20190123T013742Z">
        <seg>生产 ANTLR 语法文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Production Groovy sources. May also contain Java sources for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121719Z" creationid="huanghaohang" creationdate="20180406T121719Z">
        <seg>Groovy 生产源代码。也可能包含联合编译的 Java 源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Production Java source</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052950Z" creationid="haohang" creationdate="20180313T052950Z">
        <seg>Java 生产源代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Production Scala sources. May also contain Java sources for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011144Z" creationid="huanghaohang" creationdate="20180407T011134Z">
        <seg>Scala 生产源代码。也可能包含联合编译的 Java 源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Production resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052955Z" creationid="haohang" creationdate="20180313T052955Z">
        <seg>生产资源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Progress information messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221534Z" creationid="huanghaohang" creationdate="20180105T221534Z">
        <seg>进度信息消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132114Z" creationid="huanghaohang" creationdate="20170913T132114Z">
        <seg>Project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project and task paths</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145057Z" creationid="huanghaohang" creationdate="20190708T145057Z">
        <seg>项目和任务路径</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project dependency</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153829Z" creationid="huanghaohang" creationdate="20190527T153829Z">
        <seg>项目依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project in the directory where the build is executed is also configured, but only when Gradle is executed without any tasks. This way the default tasks behave correctly when projects are configured on demand.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T153657Z" creationid="huanghaohang" creationdate="20190614T153429Z">
        <seg>执行构建的所在目录的项目也会被配置，但是只在没有任何任务的情况下执行 Gradle 时。这种方式当项目按需配置时，默认任务会正常运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130022Z" creationid="huanghaohang" creationdate="20180517T130022Z">
        <seg>项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project lib dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145106Z" creationid="huanghaohang" creationdate="20190708T145106Z">
        <seg>项目库依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project project = ProjectBuilder.builder().build()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124011Z" creationid="huanghaohang" creationdate="20190706T124011Z">
        <seg>Project project = ProjectBuilder.builder().build()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project settings determine how the project is going to be analyzed. The default configuration works well for analyzing standard Java projects and can be customized in many ways.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151318Z" creationid="huanghaohang" creationdate="20180715T100246Z">
        <seg>项目设置决定了项目的分析方式。默认配置非常适合分析标准的 Java 项目，并且可以通过多种方式进行自定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project-level up-to-date checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T144403Z" creationid="huanghaohang" creationdate="20190621T144403Z">
        <seg>项目级别的最新检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Project-specific information is configured in the &lt;c0&gt;sonarRunner&lt;/c0&gt; block of the corresponding project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042906Z" creationid="huanghaohang" creationdate="20181202T042906Z">
        <seg>特定项目的信息在对应项目的 &lt;c0&gt;sonarRunner&lt;/c0&gt; 块中配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ProjectEvaluationListener</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144456Z" creationid="huanghaohang" creationdate="20180107T144456Z">
        <seg>ProjectEvaluationListener</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Projects and tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031747Z" creationid="huanghaohang" creationdate="20170927T031747Z">
        <seg>项目和任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Projects can also be configured individually. For example, setting the &lt;c0&gt;skip&lt;/c0&gt; property to &lt;c1&gt;true&lt;/c1&gt; prevents a project (and its subprojects) from being analyzed. Skipped projects will not be displayed in the Sonar web interface.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153053Z" creationid="huanghaohang" creationdate="20180811T153053Z">
        <seg>项目也可以单独配置。例如，设置 &lt;c0&gt;skip&lt;/c0&gt; 属性为&lt;c1&gt;true&lt;/c1&gt; 以防止一个项目（及其子项目）被分析。所跳过的项目不会显示在 Sonar Web 界面中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prompting for and managing user credentials.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191231T123002Z" creationid="huanghaohang" creationdate="20191231T123002Z">
        <seg>对用户凭据的输入提示和管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Properties and methods declared in a project are inherited to all its subprojects. This is an alternative to configuration injection. But we think that the model of inheritance does not reflect the problem space of multi-project builds very well. In a future edition of this user guide we might write more about this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152130Z" creationid="huanghaohang" creationdate="20190623T152130Z">
        <seg>项目中声明的属性和方法将继承到所有子项目。这是配置注入的替代方法，但我们认为，继承的模式并不能反映多项目构建的问题空间。在本用户指南的未来版本中，我们可能会写一下与之有关的更多内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Property</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135258Z" creationid="huanghaohang" creationdate="20180712T135258Z">
        <seg>属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Property and method inheritance</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145128Z" creationid="huanghaohang" creationdate="20190708T145128Z">
        <seg>属性和方法的继承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Property name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232615Z" creationid="huanghaohang" creationdate="20171206T232615Z">
        <seg>属性名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>PropertyReportTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040323Z" creationid="huanghaohang" creationdate="20190123T040323Z">
        <seg>PropertyReportTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Protocol</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093613Z" creationid="huanghaohang" creationdate="20190607T093613Z">
        <seg>协议</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provide faster feedback for execution of small projects without awaiting completion of other projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142935Z" creationid="huanghaohang" creationdate="20190621T142935Z">
        <seg>更快地反馈小项目的执行，而不必等待其他项目的完成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provide the authentication domain via the &lt;c0&gt;http.auth.ntlm.domain&lt;/c0&gt; system property.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T080944Z" creationid="huanghaohang" creationdate="20180130T080944Z">
        <seg>通过 &lt;c0&gt;http.auth.ntlm.domain&lt;/c0&gt; 系统属性提供验证域。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provided By</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150556Z" creationid="huanghaohang" creationdate="20210518T150556Z">
        <seg>提供者</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provides integration with the &lt;a0&gt;JaCoCo&lt;/a0&gt; code coverage library for Java.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090508Z" creationid="huanghaohang" creationdate="20180211T090508Z">
        <seg>提供对 Java 的&lt;a0&gt;JaCoCo&lt;/a0&gt; 代码覆盖率库的集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provides integration with the &lt;a0&gt;Sonar&lt;/a0&gt; code quality platform. Superceeded by the &lt;a1&gt;&lt;c2&gt;sonar-runner&lt;/c2&gt;&lt;/a1&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090137Z" creationid="huanghaohang" creationdate="20180211T090137Z">
        <seg>提供对 &lt;a0&gt;Sonar&lt;/a0&gt; 代码质量平台的集成。已经被 &lt;a1&gt;&lt;c2&gt;sonar-runner&lt;/c2&gt;&lt;/a1&gt; 插件取代。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provides integration with the &lt;a0&gt;Sonar&lt;/a0&gt; code quality platform. Supersedes the &lt;a1&gt;&lt;c2&gt;sonar&lt;/c2&gt;&lt;/a1&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090637Z" creationid="huanghaohang" creationdate="20180211T090637Z">
        <seg>取代 &lt;a1&gt;&lt;c2&gt;sonar&lt;/c2&gt;&lt;/a1&gt; 插件，提供对 &lt;a0&gt;Sonar&lt;/a0&gt; 代码质量平台的集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publication objects describe the structure/configuration of a publication to be created. Publications are published to repositories via tasks, and the configuration of the publication object determines exactly what is published. All of the publications of a project are defined in the &lt;a0&gt;&lt;c1&gt;PublishingExtension.getPublications()&lt;/c1&gt;&lt;/a0&gt; container. Each publication has a unique name within the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150042Z" creationid="huanghaohang" creationdate="20210517T161511Z">
        <seg>Publication对象描述了要创建的发布内容的结构和配置。Publications是通过任务发布到仓库的，发布对象的配置明确地决定了要发布的内容。一个项目的所有publications都会在&lt;a0&gt;&lt;c1&gt;PublishingExtension.getPublications()&lt;/c1&gt;&lt;/a0&gt;容器中定义，每一个publication在项目中都具有唯一名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publish messages to your favourite platforms, such as Twitter or Growl.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144159Z" creationid="huanghaohang" creationdate="20180207T144159Z">
        <seg>将消息发布到你所喜欢的平台，如 Twitter 或 Growl。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233738Z" creationid="huanghaohang" creationdate="20171206T233738Z">
        <seg>发布构件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing the signatures</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011017Z" creationid="huanghaohang" creationdate="20190609T011017Z">
        <seg>发布签名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Put a file called &lt;c0&gt;init.gradle&lt;/c0&gt; in the &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;USER_HOME&lt;/c3&gt;&lt;/e2&gt;/.gradle/&lt;/c1&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T122414Z" creationid="huanghaohang" creationdate="20191204T122414Z">
        <seg>把一个 &lt;c0&gt;init.gradle&lt;/c0&gt; 文件放到 &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;USER_HOME&lt;/c3&gt;&lt;/e2&gt;/.gradle/&lt;/c1&gt; 目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Put a file that ends with &lt;c0&gt;.gradle&lt;/c0&gt; in the &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;GRADLE_HOME&lt;/c3&gt;&lt;/e2&gt;/init.d/&lt;/c1&gt; directory, in the Gradle distribution. This allows you to package up a custom Gradle distribution containing some custom build logic and plugins. You can combine this with the &lt;a4&gt;Gradle wrapper&lt;/a4&gt; as a way to make custom logic available to all builds in your enterprise.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T135259Z" creationid="huanghaohang" creationdate="20191204T134814Z">
        <seg>把一个文件名以 &lt;c0&gt;.gradle&lt;/c0&gt; 结尾的文件放到 Gradle 分发包的 &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;GRADLE_HOME&lt;/c3&gt;&lt;/e2&gt;/init.d/&lt;/c1&gt; 目录。这让你能打包一个包含了某些自定义构建逻辑和插件的 Gradle 定制分发包。结合它和 &lt;a4&gt;Gradle wrapper&lt;/a4&gt;，能使得自定义逻辑在企业中的所有构建中都可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Put a file that ends with &lt;c0&gt;.gradle&lt;/c0&gt; in the &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;USER_HOME&lt;/c3&gt;&lt;/e2&gt;/.gradle/init.d/&lt;/c1&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T134846Z" creationid="huanghaohang" creationdate="20191204T122639Z">
        <seg>把一个文件名以 &lt;c0&gt;.gradle&lt;/c0&gt; 结尾的文件放到 &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;USER_HOME&lt;/c3&gt;&lt;/e2&gt;/.gradle/init.d/&lt;/c1&gt; 目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>QUIET</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221521Z" creationid="huanghaohang" creationdate="20180105T221521Z">
        <seg>QUIET</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>QUIET and higher</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221920Z" creationid="huanghaohang" creationdate="20180105T221920Z">
        <seg>QUIET 及更高</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Re-use of configuration for unchanged projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T144355Z" creationid="huanghaohang" creationdate="20190621T144355Z">
        <seg>对不变的项目复用配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Real-time feedback for test execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090738Z" creationid="huanghaohang" creationdate="20190611T090738Z">
        <seg>实时反馈测试的执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reduce total build time for a multi-project build where execution is IO bound or otherwise does not consume all available CPU resources.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142858Z" creationid="huanghaohang" creationdate="20190621T142858Z">
        <seg>通过让执行进行 IO 绑定，或者是其他不消耗所有可用资源的方式，减少多项目构建的总构建时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030126Z" creationid="huanghaohang" creationdate="20181210T030126Z">
        <seg>引用名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Register build listeners. External tools that wish to listen to Gradle events might find this useful.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142417Z" creationid="huanghaohang" creationdate="20191203T142417Z">
        <seg>注册构建监听器。这对一些希望能够监听 Gradle 事件的外部工具会很有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Register build loggers. You might wish to customize how Gradle logs the events that it generates.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142534Z" creationid="huanghaohang" creationdate="20191203T142424Z">
        <seg>注册构建记录器。你可能希望自定义 Gradle 对生成的事件的日志打印。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all Eclipse configuration files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025841Z" creationid="huanghaohang" creationdate="20181210T025841Z">
        <seg>删除所有的 Eclipse 配置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes all IDEA configuration files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061039Z" creationid="huanghaohang" creationdate="20181212T061039Z">
        <seg>删除所有的 IDEA 配置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the &lt;c0&gt;.classpath&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025909Z" creationid="huanghaohang" creationdate="20181210T025909Z">
        <seg>删除 &lt;c0&gt;.classpath&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the &lt;c0&gt;.project&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025901Z" creationid="huanghaohang" creationdate="20181210T025901Z">
        <seg>删除 &lt;c0&gt;.project&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the &lt;c0&gt;.settings/org.eclipse.jdt.core.prefs&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025918Z" creationid="huanghaohang" creationdate="20181210T025918Z">
        <seg>删除 &lt;c0&gt;.settings/org.eclipse.jdt.core.prefs&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the &lt;c0&gt;.settings/org.eclipse.wst.common.component&lt;/c0&gt; file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025927Z" creationid="huanghaohang" creationdate="20181210T025927Z">
        <seg>删除 &lt;c0&gt;.settings/org.eclipse.wst.common.component&lt;/c0&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the IDEA module file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061046Z" creationid="huanghaohang" creationdate="20181212T061046Z">
        <seg>删除 IDEA 模块文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the IDEA project file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061044Z" creationid="huanghaohang" creationdate="20181212T061044Z">
        <seg>删除 IDEA 项目文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Removes the IDEA workspace file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061049Z" creationid="huanghaohang" creationdate="20181212T061049Z">
        <seg>删除 IDEA 工作区文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replacing tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021728Z" creationid="huanghaohang" creationdate="20180201T021728Z">
        <seg>替换任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233728Z" creationid="huanghaohang" creationdate="20171206T233728Z">
        <seg>仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Requires the notify-send package to be installed. Use &lt;c0&gt;sudo apt-get install libnotify-bin&lt;/c0&gt; to install it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092245Z" creationid="huanghaohang" creationdate="20190124T092245Z">
        <seg>需要安装notify-send软件包。可以使用&lt;c0&gt;sudo apt-get install libnotify-bin&lt;/c0&gt;来安装它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130055Z" creationid="huanghaohang" creationdate="20180517T130055Z">
        <seg>Resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resources for the given source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053030Z" creationid="haohang" creationdate="20180313T053030Z">
        <seg>给定源集的资源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Responding to the lifecycle in the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144847Z" creationid="huanghaohang" creationdate="20190708T144847Z">
        <seg>构建脚本生命周期的响应</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Results in an efficient binary format. The task generates the other results from these binary results.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042835Z" creationid="huanghaohang" creationdate="20180406T042835Z">
        <seg>有效的二进制格式的结果。该任务从这些二进制结果生成其他结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Return Type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030201Z" creationid="huanghaohang" creationdate="20181203T030201Z">
        <seg>返回类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an OsgiManifest object configured by the closure.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030258Z" creationid="huanghaohang" creationdate="20181203T030258Z">
        <seg>返回一个通过闭包配置的 OsgiManifest 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returns an OsgiManifest object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030221Z" creationid="huanghaohang" creationdate="20181203T030221Z">
        <seg>返回一个 OsgiManifest 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reusing and expiration of daemons</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143344Z" creationid="huanghaohang" creationdate="20180516T143344Z">
        <seg>守护进程的重用和过期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Root project is always configured. This way the typical common configuration is supported (allprojects or subprojects script blocks).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T153426Z" creationid="huanghaohang" creationdate="20190614T153426Z">
        <seg>根项目始终会被配置。这种方式支持典型的公共配置（allprojects 或subprojects 脚本块）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rules not just work when calling tasks from the command line. You can also create dependsOn relations on rule based tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043755Z" creationid="huanghaohang" creationdate="20170923T043755Z">
        <seg>规则不只是从命令行调用任务才起作用，你也可以对基于规则的任务创建依赖关系：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Run build validations early in the build: eg. validate I have the correct credentials before starting the work for a release build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030342Z" creationid="huanghaohang" creationdate="20170922T030342Z">
        <seg>在构建初期运行构建验证：例如，在开始发布之前验证是否拥有正确的证书。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running "&lt;s0&gt;&lt;c1&gt;gradle installCustomDist&lt;/c1&gt;&lt;/s0&gt;" will install the distribution contents into "&lt;c2&gt;&lt;e3&gt;&lt;c4&gt;$buildDir&lt;/c4&gt;&lt;/e3&gt;/install/custom&lt;/c2&gt;".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061003Z" creationid="huanghaohang" creationdate="20190128T060906Z">
        <seg>运行“&lt;s0&gt;&lt;c1&gt;gradle installCustomDist&lt;/c1&gt;&lt;/s0&gt;”将会把分发内容安装到“&lt;c2&gt;&lt;e3&gt;&lt;c4&gt;$buildDir&lt;/c4&gt;&lt;/e3&gt;/install/custom&lt;/c2&gt;”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt; will compile, test and JAR your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002921Z" creationid="huanghaohang" creationdate="20170909T002921Z">
        <seg>运行 &lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt;将会对你的项目进行编译，测试并打包成jar。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle dependencies&lt;/c1&gt;&lt;/s0&gt; gives you a list of the dependencies of the selected project, broken down by configuration. For each configuration, the direct and transitive dependencies of that configuration are shown in a tree. Below is an example of this report:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T014029Z" creationid="huanghaohang" creationdate="20170910T014029Z">
        <seg>运行&lt;s0&gt;&lt;c1&gt;gradle dependencies&lt;/c1&gt;&lt;/s0&gt;会为你列出所选项目的依赖关系，这些依赖会根据配置的任务细分。对于每个配置，它的直接和传递依赖会按树型结构展示出来。如下例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle dependencyInsight&lt;/c1&gt;&lt;/s0&gt; gives you an insight into a particular dependency (or dependencies) that match specified input. Below is an example of this report:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022130Z" creationid="huanghaohang" creationdate="20170910T022130Z">
        <seg>运行&lt;s0&gt;&lt;c1&gt;gradle dependencyInsight&lt;/c1&gt;&lt;/s0&gt;会让你深入了解与指定的输入内容相匹配的特定依赖（或多个依赖）。示例如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle help --task someTask&lt;/c1&gt;&lt;/s0&gt; gives you detailed information about a specific task or multiple tasks matching the given task name in your multiproject build. Below is an example of this detailed information:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012802Z" creationid="huanghaohang" creationdate="20170910T012752Z">
        <seg>运行&lt;s0&gt;&lt;c1&gt;gradle help --task someTask&lt;/c1&gt;&lt;/s0&gt;可以向你提供有关指定任务或是在多项目构建中与所指定的任务名称相匹配的所有任务的详细信息。如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle projects&lt;/c1&gt;&lt;/s0&gt; gives you a list of the sub-projects of the selected project, displayed in a hierarchy. Here is an example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011056Z" creationid="huanghaohang" creationdate="20170910T011056Z">
        <seg>运行&lt;s0&gt;&lt;c1&gt;gradle projects&lt;/c1&gt;&lt;/s0&gt;会为你按子项目的层次结构显示出项目列表，如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle properties&lt;/c1&gt;&lt;/s0&gt; gives you a list of the properties of the selected project. This is a snippet from the output:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023417Z" creationid="huanghaohang" creationdate="20170910T023258Z">
        <seg>运行&lt;s0&gt;&lt;c1&gt;gradle properties&lt;/c1&gt;&lt;/s0&gt;会向你列出所选项目的属性。如下例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt; gives you a list of the main tasks of the selected project. This report shows the default tasks for the project, if any, and a description for each task. Below is an example of this report:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011644Z" creationid="huanghaohang" creationdate="20170910T011644Z">
        <seg>运行&lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;会为你列出所选项目的主要任务。报告会显示项目的默认任务（如果有配置默认任务的话），以及每个任务的说明。以下是关于该报告的示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running and testing your installation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013354Z" creationid="huanghaohang" creationdate="20170919T013354Z">
        <seg>运行和测试您的安装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running tasks by their absolute path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145052Z" creationid="huanghaohang" creationdate="20190708T145052Z">
        <seg>按绝对路径运行任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running this from the &lt;c0&gt;consumer&lt;/c0&gt; directory gives:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141933Z" creationid="huanghaohang" creationdate="20190616T141933Z">
        <seg>从&lt;c0&gt;consumer&lt;/c0&gt;目录运行将得到：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running your web application</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233841Z" creationid="huanghaohang" creationdate="20171206T233841Z">
        <seg>运行 web 应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs Checkstyle against the given source set's Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135657Z" creationid="huanghaohang" creationdate="20180516T135657Z">
        <seg>针对给定源集的 Java 源文件运行 Checkstyle。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs Checkstyle against the production Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135622Z" creationid="huanghaohang" creationdate="20180516T135622Z">
        <seg>针对生产 Java 源文件运行 Checkstyle。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs Checkstyle against the test Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135630Z" creationid="huanghaohang" creationdate="20180516T135630Z">
        <seg>针对测试 Java 源文件运行 Checkstyle。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs CodeNarc against the given source set's Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141912Z" creationid="huanghaohang" creationdate="20180516T141859Z">
        <seg>针对给定的源的 Groovy 源文件运行 CodeNarc。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs CodeNarc against the production Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141849Z" creationid="huanghaohang" creationdate="20180516T141849Z">
        <seg>针对 Groovy 的生产源文件运行 CodeNarc。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs CodeNarc against the test Groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141856Z" creationid="huanghaohang" creationdate="20180516T141856Z">
        <seg>针对 Groovy 的测试源文件运行 CodeNarc。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs FindBugs against the given source set's Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142402Z" creationid="huanghaohang" creationdate="20180516T142402Z">
        <seg>针对给定源集的 Java 源文件运行 FindBugs。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs FindBugs against the production Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142330Z" creationid="huanghaohang" creationdate="20180516T142330Z">
        <seg>针对Java 的生产源文件运行 FindBugs。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs FindBugs against the test Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142349Z" creationid="huanghaohang" creationdate="20180516T142349Z">
        <seg>针对 Java 测试源文件运行 FindBugs。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs JDepend against the given source set's Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142714Z" creationid="huanghaohang" creationdate="20180516T142714Z">
        <seg>针对给定源集的 Java 源文件运行 JDepend。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs JDepend against the production Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142702Z" creationid="huanghaohang" creationdate="20180516T142650Z">
        <seg>针对 Java 生产源文件运行 JDepend。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs JDepend against the test Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142659Z" creationid="huanghaohang" creationdate="20180516T142659Z">
        <seg>针对 Java 测试源文件运行 JDepend。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs PMD against the given source set's Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143210Z" creationid="huanghaohang" creationdate="20180516T143210Z">
        <seg>针对给定源集的 Java 源文件运行 PMD。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs PMD against the production Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143152Z" creationid="huanghaohang" creationdate="20180516T143152Z">
        <seg>针对 Java 生产源文件运行 PMD。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs PMD against the test Java source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143202Z" creationid="huanghaohang" creationdate="20180516T143202Z">
        <seg>针对 Java 测试源文件运行 PMD。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runs the unit tests using JUnit or TestNG.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063134Z" creationid="haohang" creationdate="20180312T063134Z">
        <seg>使用 JUnit 或 TestNG 运行单元测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runtime dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053739Z" creationid="haohang" creationdate="20180313T053739Z">
        <seg>运行时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Runtime time dependencies for the given source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054356Z" creationid="haohang" creationdate="20180313T054356Z">
        <seg>给定源集的运行时依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025333Z" creationid="huanghaohang" creationdate="20181210T025333Z">
        <seg>Scala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scala plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010748Z" creationid="huanghaohang" creationdate="20180407T010748Z">
        <seg>Scala 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scala projects need to declare a &lt;c0&gt;scala-library&lt;/c0&gt; dependency. This dependency will then be used on compile and runtime class paths. It will also be used to get hold of the Scala compiler and Scaladoc tool, respectively. &lt;s1&gt;[&lt;a2&gt;12&lt;/a2&gt;]&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015412Z" creationid="huanghaohang" creationdate="20180407T015317Z">
        <seg>Scala项目需要声明一个 &lt;c0&gt;scala-library&lt;/c0&gt; 依赖。这个依赖将被用于编译和运行时的类路径。它也将分别用于获取 Scala 编译器和 Scaladoc 工具。 &lt;s1&gt;[&lt;a2&gt;12&lt;/a2&gt;]&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scala sources for the given source set. May also contain Java sources for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011158Z" creationid="huanghaohang" creationdate="20180407T011158Z">
        <seg>给定源集的 Scala 源代码。也可能包含联合编译的 Java 源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ScalaCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010515Z" creationid="huanghaohang" creationdate="20180407T010515Z">
        <seg>ScalaCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ScalaDoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010621Z" creationid="huanghaohang" creationdate="20180407T010621Z">
        <seg>ScalaDoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Secondly, the &lt;c0&gt;copy()&lt;/c0&gt; method can not honor task dependencies when a task is used as a copy source (i.e. as an argument to &lt;c1&gt;from()&lt;/c1&gt;) because it's a method and not a task. As such, if you are using the &lt;c2&gt;copy()&lt;/c2&gt; method as part of a task action, you must explicitly declare all inputs and outputs in order to get the correct behavior.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124844Z" creationid="huanghaohang" creationdate="20171015T094223Z">
        <seg>其次，当一个任务用作复制源（即作为&lt;c1&gt;from()&lt;/c1&gt;的一个参数）时，&lt;c0&gt;copy()&lt;/c0&gt;方法不能满足任务依赖。因为它是一个方法，而不是一个任务。因此，如果你正在使用&lt;c2&gt;copy()&lt;/c2&gt;方法作为任务操作的一部分，就必须显式声明所有的输入和输出才能得到正确的行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sections of existing Eclipse files that are also the target of generated content will be amended or overwritten, depending on the particular section. The remaining sections will be left as-is.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T081500Z" creationid="huanghaohang" creationdate="20181210T081445Z">
        <seg>已存在的 Eclipse 文件的部分，也是生成的目标内容，将会被修改或覆盖，具体取决于特定的部分。其余部分将保持原样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sections of existing IDEA files that are also the target of generated content will be amended or overwritten, depending on the particular section. The remaining sections will be left as-is.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T160041Z" creationid="huanghaohang" creationdate="20190121T160041Z">
        <seg>已存在的IDEA文件的部分，也是生成的目标内容，将会被修改或覆盖，具体取决于特定的部分。其余部分将保持原样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;AnnouncePluginExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092340Z" creationid="huanghaohang" creationdate="20190124T092340Z">
        <seg>请参阅 &lt;a0&gt;&lt;c1&gt;AnnouncePluginExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;CheckstyleExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140145Z" creationid="huanghaohang" creationdate="20180516T140145Z">
        <seg>请参阅 &lt;a0&gt;&lt;c1&gt;CheckstyleExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;CodeNarcExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142119Z" creationid="huanghaohang" creationdate="20180516T142119Z">
        <seg>请参阅 &lt;a0&gt;&lt;c1&gt;CodeNarcExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;DependencyHandler&lt;/c1&gt;&lt;/a0&gt; for more examples and a complete reference.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160824Z" creationid="huanghaohang" creationdate="20190527T160824Z">
        <seg>有关更多的例子和完整的参考，请参阅&lt;a0&gt;&lt;c1&gt;DependencyHandler&lt;/c1&gt; &lt;/a0&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;FindBugsExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142511Z" creationid="huanghaohang" creationdate="20180516T142511Z">
        <seg>请参阅 &lt;a0&gt;&lt;c1&gt;FindBugsExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;JDependExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142812Z" creationid="huanghaohang" creationdate="20180516T142812Z">
        <seg>请参阅 &lt;a0&gt;&lt;c1&gt;JDependExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;&lt;c1&gt;PmdExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143250Z" creationid="huanghaohang" creationdate="20180516T143250Z">
        <seg>请参阅 &lt;a0&gt;&lt;c1&gt;PmdExtension&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;Chapter 59, &lt;i1&gt;Organizing Build Logic&lt;/i1&gt;&lt;/a0&gt; for more details about the &lt;c2&gt;buildSrc&lt;/c2&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T115043Z" creationid="huanghaohang" creationdate="20190704T150431Z">
        <seg>有关 &lt;c2&gt;buildSrc&lt;/c2&gt; 项目的更详细信息，请参阅《&lt;a0&gt;第五十九章，&lt;i1&gt;组织构建逻辑&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;Section 56.7.1, “Disabling the build of dependency projects”&lt;/a0&gt; for how to disable this functionality.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125439Z" creationid="95" creationdate="20170803T125335Z">
        <seg>参阅 &lt;a0&gt;第56.7.1节,“禁用项目依赖”&lt;/a0&gt; 来了解如何停用该功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Selecting which build to execute</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233935Z" creationid="huanghaohang" creationdate="20171206T233935Z">
        <seg>选择执行哪个构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sends local announcements to your desktop about interesting events in the build lifecycle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144357Z" creationid="huanghaohang" creationdate="20180207T144357Z">
        <seg>在构建的生命周期中，把本地公告中有关你感兴趣的事件发送到你的桌面。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Separating the storage of downloaded artifacts from the cache metadata permits us to do some very powerful things with our cache that would be difficult with a transparent, file-only cache layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T042429Z" creationid="huanghaohang" creationdate="20190605T042429Z">
        <seg>从下载的工件的存储中分离出缓存的元数据，使我们能够对比缓存执行一些非常强大的操作，而如果使用一个透明的只有文件的缓存布局则会很困难。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set the &lt;c0&gt;http.proxyUser&lt;/c0&gt; system property to a value like &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;domain&lt;/c3&gt;&lt;/e2&gt;/&lt;e4&gt;&lt;c5&gt;username&lt;/c5&gt;&lt;/e4&gt;&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T080931Z" creationid="huanghaohang" creationdate="20180130T080931Z">
        <seg>将 &lt;c0&gt;http.proxyUser&lt;/c0&gt; 系统属性设置为一个这样的值：&lt;c1&gt;&lt;e2&gt;&lt;c3&gt;domain&lt;/c3&gt;&lt;/e2&gt;/&lt;e4&gt;&lt;c5&gt;username&lt;/c5&gt;&lt;/e4&gt;&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set up enterprise-wide configuration, such as where to find custom plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142134Z" creationid="huanghaohang" creationdate="20191203T142134Z">
        <seg>设置一些企业范围的配置，比如在哪里查找自定义插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set up properties based on the current environment, such as a developer's machine vs. a continuous integration server.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142230Z" creationid="huanghaohang" creationdate="20191203T142230Z">
        <seg>基于当前环境（比如开发人员的机器与持续集成服务器）来设置属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set&lt;Project&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040502Z" creationid="huanghaohang" creationdate="20190123T040502Z">
        <seg>Set&lt;Project&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setting Custom Sonar Properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070145Z" creationid="huanghaohang" creationdate="20190205T070145Z">
        <seg>设置自定义的 Sonar 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setting Sonar Properties from the Command Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070248Z" creationid="huanghaohang" creationdate="20190205T070248Z">
        <seg>从命令行设置 Sonar 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setting a system property of &lt;e0&gt;&lt;c1&gt;taskName.single&lt;/c1&gt;&lt;/e0&gt; = &lt;e2&gt;&lt;c3&gt;testNamePattern&lt;/c3&gt;&lt;/e2&gt; will only execute tests that match the specified &lt;e4&gt;&lt;c5&gt;testNamePattern&lt;/c5&gt;&lt;/e4&gt;. The &lt;e6&gt;&lt;c7&gt;taskName&lt;/c7&gt;&lt;/e6&gt; can be a full multi-project path like ":sub1:sub2:test" or just the task name. The &lt;e8&gt;&lt;c9&gt;testNamePattern&lt;/c9&gt;&lt;/e8&gt; will be used to form an include pattern of "**/testNamePattern*.class". If no tests with this pattern can be found an exception is thrown. This is to shield you from false security. If tests of more than one subproject are executed, the pattern is applied to each subproject. An exception is thrown if no tests can be found for a particular subproject. In such a case you can use the path notation of the pattern, so that the pattern is applied only to the test task of a specific subproject. Alternatively you can specify the fully qualified task name to be executed. You can also specify multiple patterns. Examples:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142917Z" creationid="huanghaohang" creationdate="20180405T131833Z">
        <seg>设置一个 &lt;e0&gt;&lt;c1&gt;taskName.single&lt;/c1&gt;&lt;/e0&gt; = &lt;e2&gt;&lt;c3&gt;testNamePattern&lt;/c3&gt;&lt;/e2&gt; 的系统属性将会只执行匹配指定的 &lt;e4&gt;&lt;c5&gt;testNamePattern&lt;/c5&gt;&lt;/e4&gt; 的测试。该 &lt;e6&gt;&lt;c7&gt;taskName&lt;/c7&gt;&lt;/e6&gt; 可以是完整的多项目路径，如“:sub1:sub2:test”，或者仅是一个任务名称。该 &lt;e8&gt;&lt;c9&gt;testNamePattern&lt;/c9&gt;&lt;/e8&gt; 将被用于形成“**/testNamePattern*.class”的包含模式。如果找不到这种模式的测试，那么将会抛出一个异常。这是为了避免你误认为测试通过。如果执行多个子项目的测试，则该模式将应用于每个子项目。如果找不到特定子项目的测试，则会引发异常。在这种情况下，你可以使用模式的路径标记法，以便模式仅应用于特定子项目的测试任务。或者你可以指定要执行的任务的完整限定名称。你还可以指定多个模式。示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Settings file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144828Z" creationid="huanghaohang" creationdate="20190708T144828Z">
        <seg>设置文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setup</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234037Z" creationid="huanghaohang" creationdate="20171206T234037Z">
        <seg>设置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SharedLibraryBinary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032115Z" creationid="huanghaohang" creationdate="20190609T032115Z">
        <seg>SharedLibraryBinary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shortcut notations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031841Z" creationid="huanghaohang" creationdate="20170927T031841Z">
        <seg>快捷符号</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Should you exclude per-dependency or per-configuration? It turns out that in majority of cases you want to use the per-configuration exclusion. Here are the some exemplary reasons why one might want to exclude a transitive dependency. Bear in mind that for some of those use cases there are better solutions than exclusions!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T114040Z" creationid="huanghaohang" creationdate="20190602T113324Z">
        <seg>你的排除应该是对依赖还是配置？事实表明，在大多数情况下，你希望使用的是对配置的排除。以下是为什么想要排除传递依赖的一些示例原因。记住，对于某些用例，存在比排除更有效的解决方案！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shows how to start using Gradle's build-by-convention support for Java projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080750Z" creationid="95" creationdate="20170723T080750Z">
        <seg>说明了对于Java项目如何使用Gradle的基于约定的构建支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shows how to start using Gradle's dependency management.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080835Z" creationid="95" creationdate="20170723T080835Z">
        <seg>介绍了如何开始使用Gradle的依赖管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signatory credentials</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011002Z" creationid="huanghaohang" creationdate="20190609T011002Z">
        <seg>签名凭证</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signing POM files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011025Z" creationid="huanghaohang" creationdate="20190609T011025Z">
        <seg>签名 POM 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similar to a Gradle build script or a Gradle settings file, plugins can be applied on init scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151203Z" creationid="huanghaohang" creationdate="20191206T151203Z">
        <seg>与 Gradle 构建脚本类似，插件也可以应用在初始化脚本上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similar to a Gradle build script, an init script is a groovy script. Each init script has a &lt;a0&gt;&lt;c1&gt;Gradle&lt;/c1&gt;&lt;/a0&gt; instance associated with it. Any property reference and method call in the init script will delegate to this &lt;c2&gt;Gradle&lt;/c2&gt; instance.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143037Z" creationid="huanghaohang" creationdate="20191204T135747Z">
        <seg>与 Gradle 构建脚本类似，初始化脚本也是一个 groovy 脚本。每个初始化脚本都有一个与之关联的 &lt;a0&gt;&lt;c1&gt;Gradle&lt;/c1&gt;&lt;/a0&gt; 实例，在这个初始化脚本中的任何属性引用和方法调用，都会委派给这个 &lt;c2&gt;Gradle&lt;/c2&gt; 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, settings can be specified to target binaries for a component that are of a particular type: eg all &lt;c0&gt;shared libraries&lt;/c0&gt; for the &lt;c1&gt;main library&lt;/c1&gt; component.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012459Z" creationid="huanghaohang" creationdate="20190610T012459Z">
        <seg>同样，也可以把设置指定为某种特定类型的组件的目标二进制文件：例如所有 &lt;c1&gt;main library&lt;/c1&gt; 组件的 &lt;c0&gt;shared libraries&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since 1.0-milestone-4 WTP-generating code was refactored into a separate plugin called &lt;c0&gt;eclipse-wtp&lt;/c0&gt;. So if you are interested in WTP integration then only apply the &lt;c1&gt;eclipse-wtp&lt;/c1&gt; plugin. Otherwise applying &lt;c2&gt;eclipse&lt;/c2&gt; plugin is enough. This change was requested by Eclipse users who take advantage of &lt;c3&gt;war&lt;/c3&gt; or &lt;c4&gt;ear&lt;/c4&gt; plugin but they don't use Eclipse WTP. Internally, &lt;c5&gt;eclipse-wtp&lt;/c5&gt; also applies the &lt;c6&gt;eclipse&lt;/c6&gt; plugin so you don't need to apply both of those plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025054Z" creationid="huanghaohang" creationdate="20181210T025054Z">
        <seg>从 1.0-milestone-4 开始，WTP-generating 代码被重构为一个名为 &lt;c0&gt;eclipse-wtp&lt;/c0&gt; 的单独插件。因此，如果你对 WTP 集成感兴趣，那么可以只应用 &lt;c1&gt;eclipse-wtp&lt;/c1&gt; 插件。否则应用 &lt;c2&gt;eclipse&lt;/c2&gt; 插件就够了。这一变化是 Eclipse 用户请求的，他们想利用 &lt;c3&gt;war&lt;/c3&gt; 或 &lt;c4&gt;ear&lt;/c4&gt; 插件，但又不想使用 Eclipse WTP。在内部， &lt;c5&gt;eclipse-wtp&lt;/c5&gt; 也应用了 &lt;c6&gt;eclipse&lt;/c6&gt; 插件，所以你不需要同时应用这两个插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since Gradle 1.2 there is also a new programmatic API to access the resolved dependency information. The dependency reports (see the previous paragraph) are using this API under the covers. The API lets you to walk the resolved dependency graph and provides information about the dependencies. With the coming releases the API will grow to provide more information about the resolution result. For more information about the API please refer to the javadocs on &lt;a0&gt;&lt;c1&gt;ResolvableDependencies.getResolutionResult()&lt;/c1&gt;&lt;/a0&gt;. Potential usages of the &lt;a2&gt;&lt;c3&gt;ResolutionResult&lt;/c3&gt;&lt;/a2&gt; API:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142430Z" creationid="huanghaohang" creationdate="20190602T142430Z">
        <seg>从 Gradle 1.2 起，还有一个新的程序化 API 来访问已解析的依赖信息。这个依赖报告（请参阅上一段）正是使用这个API。 这个 API 可以让你查看解析后的依赖图，并提供依赖的有关信息。在即将到来的发行版中，API 将提供更多有关解析结果的信息。有关此 API 的更多信息，请参阅 &lt;a0&gt;&lt;c1&gt;ResolvableDependences.getResolutionResult()&lt;/c1&gt;&lt;/a0&gt;上的 javadocs。 &lt;a2&gt;&lt;c3&gt;ResolutionResult&lt;/c3&gt;&lt;/a2&gt; API 的可能用法：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since a dependency report can get large, it can be useful to restrict the report to a particular configuration. This is achieved with the optional &lt;s0&gt;&lt;c1&gt;--configuration&lt;/c1&gt;&lt;/s0&gt; parameter:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T021631Z" creationid="huanghaohang" creationdate="20170910T014140Z">
        <seg>由于一份依赖报告可能会很长，因此只显示指定配置的报告会很有用，它通过可选的&lt;s0&gt;&lt;c1&gt;--configuration&lt;/c1&gt;&lt;/s0&gt;参数来实现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since the introduction of the implementation described above (early in the Gradle 1.6 release cycle), discussions within the Gradle community have produced superior ideas for exposing the information about changes to task implementors to what is described below. As such, the API for this feature will almost certainly change in upcoming releases. However, please do experiment with the current implementation and share your experiences with the Gradle community.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T133114Z" creationid="huanghaohang" creationdate="20190706T133114Z">
        <seg>从上面所述的实现的引入（在 Gradle 1.6 发布周期的早期）以来，Gradle 社区内部的讨论中就产生了一些出色的想法，将有关任务实现者的更改信息暴露到下面所述内容中。因此，这个功能的 API 几乎可以肯定将在即将推出的版本中进行更改。但是，请对当前的实现做实现，并与 Gradle 社区分享你的经验。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since the tooling API is an interface for a programmer most of the documentation lives in the Javadoc. This is exactly our intention - we don't expect this chapter to grow very much. Instead we will add more code samples and improve the Javadoc documentation. The main entry point to the tooling API is the &lt;a0&gt;&lt;c1&gt;GradleConnector&lt;/c1&gt;&lt;/a0&gt;. You can navigate from there and find code samples and other instructions. Pretty effective way of learning how to use the tooling API is checking out and running the &lt;s2&gt;&lt;e3&gt;samples&lt;/e3&gt;&lt;/s2&gt; that live in &lt;c4&gt;$gradleHome/samples/toolingApi&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200106T152233Z" creationid="huanghaohang" creationdate="20200106T152233Z">
        <seg>由于Tooling API 是面向程序员的接口，因此大部分的文档都在 Javadoc 中。这正是我们的目的——我们不希望本章节内容篇幅太大。相反，我们将添加更多的代码示例并改进 Javadoc 文档。Tooling API 的主要入口点是 &lt;a0&gt;&lt;c1&gt;GradleConnector&lt;/c1&gt;&lt;/a0&gt;。你可以从该处浏览并找到代码示例及其他说明。学习如何使用Tooling API 的有效方法是检出并运行 &lt;c4&gt;$gradleHome/samples/toolingApi&lt;/c4&gt; 中的 &lt;s2&gt;&lt;e3&gt;示例&lt;/e3&gt;&lt;/s2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Skipping tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021734Z" creationid="huanghaohang" creationdate="20180201T021734Z">
        <seg>跳过任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Skipping tasks that are up-to-date</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021744Z" creationid="huanghaohang" creationdate="20180201T021744Z">
        <seg>跳过最新的任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Snappy up-to-date checks: use native file system change notifications (e.g. via jdk7 nio.2) to preemptively perform up-to-date analysis.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T140053Z" creationid="huanghaohang" creationdate="20180109T135914Z">
        <seg>敏捷的最新（up-to-date）检查：使用本地文件系统修改通知（例如，通过 jdk7 nio.2）预先执行 up-to-date 分析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So for GCC running on linux, the supported target platforms are 'linux/x86' and 'linux/x86_64'. For GCC running on Windows via Cygwin, platforms 'windows/x86' and 'windows/x86_64' are supported. (The Cygwin POSIX runtime is not yet modelled as part of the platform, but will be in the future.)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T092343Z" creationid="huanghaohang" creationdate="20190610T092343Z">
        <seg>所以对于在 linux 上运行的 GCC，支持的目标平台为“linux/x86”和“linux/x86_64”；而对于在 Windows 上通过 Cygwin 运行的 GCC，支持的平台则为“windows/x86”和“windows/x86_64”。（Cygwin POSIX 运行时还不能模块为平台的一部分，但以后会实现。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So how does Gradle find the &lt;a0&gt;&lt;c1&gt;Plugin&lt;/c1&gt;&lt;/a0&gt; implementation? The answer is you need to provide a properties file in the jar's &lt;c2&gt;META-INF/gradle-plugins&lt;/c2&gt; directory that matches the name of your plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153448Z" creationid="huanghaohang" creationdate="20190727T153448Z">
        <seg>那么，Gradle 是如何找到 &lt;a0&gt;&lt;c1&gt;Plugin&lt;/c1&gt;&lt;/a0&gt; 的实现的？答案是你需要在 jar 文件里的 &lt;c2&gt;META-INF/gradle-plugins&lt;/c2&gt; 目录中提供一个属性文件，并且文件名要和插件名相匹配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Software development plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035011Z" creationid="huanghaohang" creationdate="20180517T035011Z">
        <seg>软件开发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some Groovy basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032910Z" creationid="huanghaohang" creationdate="20180131T032910Z">
        <seg>一些 Groovy 基础知识</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some daemon settings, such as JVM arguments, memory settings or the Java home, can be configured. Please find more information in &lt;a0&gt;Section 20.1, “Configuring the build environment via gradle.properties”&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025857Z" creationid="huanghaohang" creationdate="20180120T025857Z">
        <seg>可以配置一些守护进程的设置，例如 JVM 参数、 内存设置或 Java home 目录。更多有关信息请参阅《&lt;a0&gt;20.1 节，“通过 gradle.properties 配置构建环境”&lt;/a0&gt;》</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some examples of using the command line option:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131728Z" creationid="huanghaohang" creationdate="20180405T131728Z">
        <seg>使用命令行选项的一些示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some features that the tooling API provides today:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T142714Z" creationid="huanghaohang" creationdate="20191220T142714Z">
        <seg>目前这个 tooling API 提供了以下这些功能：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some other types of things you can pass to &lt;c0&gt;files()&lt;/c0&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150454Z" creationid="huanghaohang" creationdate="20170927T150415Z">
        <seg>你可以向&lt;c0&gt;files()&lt;/c0&gt;传入以下一些其他类型的对象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some other useful tasks are:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014332Z" creationid="95" creationdate="20170730T014332Z">
        <seg>其他一些有用的任务是：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some ways of troubleshooting the Gradle daemon:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025356Z" creationid="huanghaohang" creationdate="20180120T025356Z">
        <seg>以下是有关 Gradle 守护进程的故障排除的一些方法：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Something that happens in an observable manner during a build, such as the creation of a zip file or test execution. These are the things that are compared.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T154230Z" creationid="huanghaohang" creationdate="20200604T154230Z">
        <seg>在构建期间以可观察的方式发生的事情，例如创建 zip 文件或测试执行。这些都是用于比较的东西。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes a repository will have the POMs published to one location, and the JARs and other artifacts published at another location. To define such a repository, you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033821Z" creationid="huanghaohang" creationdate="20190603T033821Z">
        <seg>有时候一个仓库会将 POM 发布到一个位置，而 JAR 和其他工件发布在另一个位置。要定义这样的一个仓库，你可以这样：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you are interested in which tasks are executed in which order for a given set of tasks specified on the command line, but you don't want the tasks to be executed. You can use the &lt;c0&gt;-m&lt;/c0&gt; option for this. For example &lt;s1&gt;&lt;c2&gt;gradle -m clean compile&lt;/c2&gt;&lt;/s1&gt; shows you all tasks to be executed as part of the &lt;c3&gt;clean&lt;/c3&gt; and &lt;c4&gt;compile&lt;/c4&gt; tasks. This is complementary to the &lt;c5&gt;tasks&lt;/c5&gt; task, which shows you the tasks which are available for execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031744Z" creationid="huanghaohang" creationdate="20170910T031431Z">
        <seg>有时候你可能想知道，以命令行指定的给定一组任务会以怎样的顺序去执行，但你不希望任务被真的执行，就可以使用&lt;c0&gt;-m&lt;/c0&gt;这个选项。例如&lt;s1&gt;&lt;c2&gt;gradle -m clean compile&lt;/c2&gt;&lt;/s1&gt;会显示所有要执行的任务，如&lt;c3&gt;clean&lt;/c3&gt;和&lt;c4&gt;compile&lt;/c4&gt;任务。这是对&lt;c5&gt;tasks&lt;/c5&gt;任务的补充，用于显示可以执行的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you don't want depended on projects to be built when doing a partial build. To disable the build of the depended on projects you can run Gradle with the &lt;c0&gt;-a&lt;/c0&gt; option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142649Z" creationid="huanghaohang" creationdate="20190621T142649Z">
        <seg>有时在进行局部构建的时候，你不希望依赖的项目也进行构建。如果想禁用依赖项目的构建，可以在运行 Gradle 的时候使用 &lt;c0&gt;-a&lt;/c0&gt; 选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you want the library files of a subset of the configuration dependencies (e.g. of a single dependency).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143505Z" creationid="huanghaohang" creationdate="20190602T143505Z">
        <seg>有时你想一些配置依赖的子集（例如单个依赖）的库文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you want to have a task whose behavior depends on a large or infinite number value range of parameters. A very nice and expressive way to provide such tasks are task rules:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011920Z" creationid="huanghaohang" creationdate="20170923T011920Z">
        <seg>有时你想要有一个任务，它的行为依赖于一个大的或是无限的数值范围的参数。任务规则是提供这样的任务的一种很好的表达方式：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes you want to replace a task. For example if you want to exchange a task added by the Java plugin with a custom task of a different type. You can achieve this with:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083311Z" creationid="huanghaohang" creationdate="20170922T083311Z">
        <seg>有时你会想要替换一个任务。例如，你想要将Java插件添加的任务替换成一个不同类型的自定义任务。你可以通过以下方式实现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sonar Properties can also be set from the command line, by setting a system property named exactly like the Sonar property in question. This can be useful when dealing with sensitive information (e.g. credentials), environment information, or for ad-hoc configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T045343Z" creationid="huanghaohang" creationdate="20181202T045343Z">
        <seg>从命令行上，通过设置与所讨论的 Sonar 属性名称完全相同的系统属性，也可以设置 Sonar 属性。这在处理敏感信息（例如凭证），环境信息或 ad-hoc 配置时会非常有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SonarAnalyze</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085520Z" creationid="huanghaohang" creationdate="20181012T085520Z">
        <seg>SonarAnalyze</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SonarRunner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T052000Z" creationid="huanghaohang" creationdate="20181202T052000Z">
        <seg>SonarRunner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133213Z" creationid="huanghaohang" creationdate="20180712T133213Z">
        <seg>源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130013Z" creationid="huanghaohang" creationdate="20180517T130013Z">
        <seg>源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifies the java home for the Gradle build process. The value can be set to either &lt;c0&gt;jdk&lt;/c0&gt; or &lt;c1&gt;jre&lt;/c1&gt; location, however, depending on what does your build do, &lt;c2&gt;jdk&lt;/c2&gt; is safer. Reasonable default is used if the setting is unspecified.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T013100Z" creationid="huanghaohang" creationdate="20180126T012854Z">
        <seg>指定 Gradle 构建进程的 java 主目录。该值可以设置为 &lt;c0&gt;JDK&lt;/c0&gt; 或 &lt;c1&gt;JRE&lt;/c1&gt; 的位置，但是，根据你的构建所做的事情，&lt;c2&gt;JDK&lt;/c2&gt; 会更安全。如果这一设置没有指定，则使用合理的默认值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifies the jvmargs used for the daemon process. The setting is particularly useful for tweaking memory settings. At the moment the default settings are pretty generous with regards to memory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T013331Z" creationid="huanghaohang" creationdate="20180126T013320Z">
        <seg>指定用于守护进程的 jvmargs。该设置对调整内存设置特别有用。目前的默认设置是在内存方面非常大方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specify a file on the command line. The command line option is &lt;c0&gt;-I&lt;/c0&gt; or &lt;c1&gt;--init-script&lt;/c1&gt; followed by the path to the script. The command line option can appear more than once, each time adding another init script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T122344Z" creationid="huanghaohang" creationdate="20191204T122344Z">
        <seg>在命令行上指定文件。命令行选项为 &lt;c0&gt;-I&lt;/c0&gt; 或 &lt;c1&gt;--init-script&lt;/c1&gt;，后跟脚本路径。这个命令行选项可以出现多次，每次在其后添加另一个 init 脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifying a set of input files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093049Z" creationid="huanghaohang" creationdate="20180218T093049Z">
        <seg>指定一组输入文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifying what to sign</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011009Z" creationid="huanghaohang" creationdate="20190609T011009Z">
        <seg>指定要签名的内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stack Trace Output</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150007Z" creationid="huanghaohang" creationdate="20170911T150007Z">
        <seg>堆栈跟踪输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standalone project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T150433Z" creationid="huanghaohang" creationdate="20190704T150433Z">
        <seg>独立项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standard Gradle plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034944Z" creationid="huanghaohang" creationdate="20180517T034944Z">
        <seg>标准的 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starting with Gradle 1.10, it is possible to include only specific tests, based on the test name pattern. Filtering is a different mechanism than test class inclusion / exclusion that will be described in the next few paragraphs (&lt;c0&gt;-Dtest.single&lt;/c0&gt;, &lt;c1&gt;test.include&lt;/c1&gt; and friends). The latter is based on files, e.g. the physical location of the test implementation class. File-level test selection does not support many interesting scenarios that are possible with test-level filtering. Some of them Gradle handles now and some will be satisfied in the future releases:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T100341Z" creationid="huanghaohang" creationdate="20180405T095518Z">
        <seg>从 Gradle 1.10 开始，可以基于测试名称模式，只包含特定测试。过滤是与测试类包含或排除所不同的一种机制，接下来的段落中将会对其详细介绍（&lt;c0&gt;-Dtest.single&lt;/c0&gt;， &lt;c1&gt;test.include&lt;/c1&gt; 和其他相关的）。后者基于文件，例如测试实现类的物理位置。文件级测试选择不支持的许多有趣的场景，都可以用测试级过滤来实现。其中一些 Gradle 现在就可以处理，而有一些将在未来的版本中得到实现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts a Jetty instance and deploys the WAR to it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144310Z" creationid="huanghaohang" creationdate="20180416T144310Z">
        <seg>启动 Jetty 实例并部署上 WAR 包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts a Jetty instance and deploys the exploded web application to it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144301Z" creationid="huanghaohang" creationdate="20180416T144243Z">
        <seg>启动 Jetty 实例并部署上 exploded web 应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starts the application.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135031Z" creationid="95" creationdate="20190131T135031Z">
        <seg>启动应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>StaticLibraryBinary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T032121Z" creationid="huanghaohang" creationdate="20190609T032121Z">
        <seg>StaticLibraryBinary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Stops the Jetty instance.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144323Z" creationid="huanghaohang" creationdate="20180416T144323Z">
        <seg>停止 Jetty 实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Strategies for transitive dependency management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024139Z" creationid="huanghaohang" creationdate="20190606T024139Z">
        <seg>传递依赖管理的策略</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132129Z" creationid="huanghaohang" creationdate="20170913T132129Z">
        <seg>String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String greeter
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151635Z" creationid="huanghaohang" creationdate="20190726T151635Z">
        <seg>String greeter
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String greeting = &lt;s0&gt;'hello from Ant'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022449Z" creationid="huanghaohang" creationdate="20171216T022449Z">
        <seg>String greeting = &lt;s0&gt;'hello from Ant'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String greeting = &lt;s5&gt;'hello from GreetingTask'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122512Z" creationid="huanghaohang" creationdate="20190706T122512Z">
        <seg>String greeting = &lt;s5&gt;'hello from GreetingTask'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String message</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151634Z" creationid="huanghaohang" creationdate="20190726T151634Z">
        <seg>String message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>String someString = &lt;s0&gt;'mY_nAmE'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155825Z" creationid="95" creationdate="20170726T155825Z">
        <seg>String someString = &lt;s0&gt;'mY_nAmE'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structure your build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T021853Z" creationid="95" creationdate="20170722T021853Z">
        <seg>构建结构化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Subproject configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144906Z" creationid="huanghaohang" creationdate="20190708T144906Z">
        <seg>子项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such a library dependency can be easily provided to source set associated with the &lt;c0&gt;executable&lt;/c0&gt; component:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022734Z" creationid="huanghaohang" creationdate="20190610T022734Z">
        <seg>这样的库依赖可以很方便地提供给与 &lt;c0&gt;executable&lt;/c0&gt; 组件相关联的源集：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such and other dependency patterns are daily bread in the problem space of multi-project builds. If a build system does not support such patterns, you either can't solve your problem or you need to do ugly hacks which are hard to maintain and massively afflict your productivity as a build master.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T155926Z" creationid="huanghaohang" creationdate="20190617T155035Z">
        <seg>在多项目构建中，这样的或其他的依赖模式是很常见的。如果一个构建系统不支持这种模式，那你要么无法解决问题，要么需要用一些恶心的 hack 方法，这样就会很难维护，并且作为构建分支将严重影响你的生产力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Summary</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233809Z" creationid="huanghaohang" creationdate="20171206T233809Z">
        <seg>总结</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supply personal information about the user that is required by the build, such as repository or database authentication credentials.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191203T142326Z" creationid="huanghaohang" creationdate="20191203T142326Z">
        <seg>提供构建所需要的有关用户的个人信息，比如仓库或数据库认证凭证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Support for additional test frameworks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090746Z" creationid="huanghaohang" creationdate="20190611T090746Z">
        <seg>支持其他测试框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Support for transitive dependency management without the need for remote repositories or &lt;c0&gt;pom.xml&lt;/c0&gt; and &lt;c1&gt;ivy.xml&lt;/c1&gt; files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T140613Z" creationid="95" creationdate="20170721T135929Z">
        <seg>支持传递性依赖管理，而不需要远程仓库或是 &lt;c0&gt;pom.xml&lt;/c0&gt; 以及 &lt;c1&gt;ivy.xml&lt;/c1&gt; 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supported languages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091051Z" creationid="huanghaohang" creationdate="20190611T091051Z">
        <seg>受支持的语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supports TestNG runner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145630Z" creationid="95" creationdate="20190201T145630Z">
        <seg>支持 TestNG 运行器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supports both single module and multimodule projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T142456Z" creationid="95" creationdate="20190201T142456Z">
        <seg>支持单个模块和多模块项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supports custom module names (that differ from directory names)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145313Z" creationid="95" creationdate="20190201T145313Z">
        <seg>支持自定义模块名称 （与目录名不同）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supports packaging of sources and tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145618Z" creationid="95" creationdate="20190201T145618Z">
        <seg>支持源代码和测试代码的打包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Supports packaging war projects as jars if needed</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T145420Z" creationid="95" creationdate="20190201T145420Z">
        <seg>支持把 war 项目打包为 jar（如果需要）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Switchable, build-by-convention frameworks a la Maven.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T134507Z" creationid="95" creationdate="20170721T134507Z">
        <seg>可切换的，按Maven的方式的基于约定的框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Switchable, build-by-convention frameworks a la Maven. But we never lock you in!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T135705Z" creationid="95" creationdate="20170721T135705Z">
        <seg>按Maven的方式的基于约定的框架。但我们从不会去限定你，它是可切换的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sync</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133908Z" creationid="huanghaohang" creationdate="20190127T133908Z">
        <seg>Sync</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TBD</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025951Z" creationid="huanghaohang" creationdate="20181203T025951Z">
        <seg>待决定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TODO: which url, configure port, uses source files in place and can edit your files and reload.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T010058Z" creationid="huanghaohang" creationdate="20170909T010058Z">
        <seg>TODO：使用哪个url，配置端口，在适当的位置使用源文件，并且可以编辑你的文件和重新加载。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tab completion in a CLI</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133958Z" creationid="huanghaohang" creationdate="20180108T133958Z">
        <seg>在 CLI 中的 tab 键完成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table &lt;a0&gt;Table 23.5, “Java plugin - dependency configurations”&lt;/a0&gt; shows the configurations added by the Java plugin. Two of the configurations are relevant for the usage with artifacts. The &lt;c1&gt;archives&lt;/c1&gt; configuration is the standard configuration to assign your artifacts to. The Java plugin automatically assigns the default jar to this configuration. We will talk more about the &lt;c2&gt;runtime&lt;/c2&gt; configuration in &lt;a3&gt;Section 51.5, “More about project libraries”&lt;/a3&gt;. As with dependencies, you can declare as many custom configurations as you like and assign artifacts to them.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075108Z" creationid="huanghaohang" creationdate="20190606T075108Z">
        <seg>表格 &lt;a0&gt;表 23.5，“Java 插件——依赖配置”&lt;/a0&gt;显示了 Java 插件添加的配置，其中两个配置和工件的使用有关。&lt;c1&gt;archives&lt;/c1&gt; 配置是指定你的工件的标准配置。Java 插件会自动把默认 jar 指定到这个配置。我们将在&lt;a3&gt;第 51.5 节，《项目库详谈》&lt;/a3&gt;中详细讨论 &lt;c2&gt;runtime&lt;/c2&gt; 配置。 与依赖一样，你可以声明许多自定义配置，并将工件分配给它们。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table of Contents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072346Z" creationid="haohang" creationdate="20170720T072346Z">
        <seg>目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 13.1. Project Properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132105Z" creationid="huanghaohang" creationdate="20170913T132105Z">
        <seg>表 13.1. Project属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 16.1. Archive tasks - naming properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232358Z" creationid="huanghaohang" creationdate="20171206T232358Z">
        <seg>表 16.1. 归档任务-命名属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 18.1. Log levels</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221049Z" creationid="huanghaohang" creationdate="20180105T221049Z">
        <seg>表 18.1. 日志级别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 18.2. Log level command-line options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221607Z" creationid="huanghaohang" creationdate="20180105T221607Z">
        <seg>表 18.2. 日志级别的命令行选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 18.3. Stacktrace command-line options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221701Z" creationid="huanghaohang" creationdate="20180105T221701Z">
        <seg>表 18.3. 栈跟踪的命令行选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.1. Language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140553Z" creationid="huanghaohang" creationdate="20180205T140553Z">
        <seg>表 22.1. 语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.2. Language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141407Z" creationid="huanghaohang" creationdate="20180205T141407Z">
        <seg>表 22.2. 语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.3. Integration plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T013849Z" creationid="huanghaohang" creationdate="20180206T013849Z">
        <seg>表 22.3. 集成插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.4. Incubating integration plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143722Z" creationid="huanghaohang" creationdate="20180207T143722Z">
        <seg>表 22.4. 试验性的集成插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.5. Software development plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144048Z" creationid="huanghaohang" creationdate="20180207T144048Z">
        <seg>表 22.5. 软件开发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.6. Software development plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090153Z" creationid="huanghaohang" creationdate="20180211T090153Z">
        <seg>表 22.6. 软件开发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 22.7. Base plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180215T054226Z" creationid="huanghaohang" creationdate="20180215T054226Z">
        <seg>表 22.7. 基本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.1. Java plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061321Z" creationid="haohang" creationdate="20180312T061321Z">
        <seg>表 23.1. Java 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.10. Java plugin - Javadoc properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100228Z" creationid="haohang" creationdate="20180326T100103Z">
        <seg>表 23.10. Java 插件—— Javadoc 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.11. Java plugin - Clean properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100634Z" creationid="haohang" creationdate="20180326T100559Z">
        <seg>表 23.11. Java 插件—— Clean 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.12. Java plugin - ProcessResources properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101152Z" creationid="haohang" creationdate="20180326T101152Z">
        <seg>表 23.12. Java 插件—— ProcessResources 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.13. Java plugin - Compile properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T101656Z" creationid="haohang" creationdate="20180327T101656Z">
        <seg>表 23.13. Java 插件—— Compile 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.14. Java plugin - test properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104632Z" creationid="huanghaohang" creationdate="20180406T104632Z">
        <seg>表 23.14. Java 插件——测试属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.2. Java plugin - source set tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073311Z" creationid="haohang" creationdate="20180312T073311Z">
        <seg>表 23.2. Java 插件——源集任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.3. Java plugin - lifecycle tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T033943Z" creationid="haohang" creationdate="20180313T033943Z">
        <seg>表 23.3. Java 插件——生命周期任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.4. Java plugin - default project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052934Z" creationid="haohang" creationdate="20180313T052934Z">
        <seg>表 23.4. Java 插件——默认项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.5. Java plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T032346Z" creationid="huanghaohang" creationdate="20170908T032346Z">
        <seg>表23.5. Java插件 ​​- 依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.6. Java plugin - source set dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054250Z" creationid="haohang" creationdate="20180313T054250Z">
        <seg>表 23.6. Java 插件——源集依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.7. Java plugin - directory properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054647Z" creationid="haohang" creationdate="20180313T054647Z">
        <seg>表 23.7. Java 插件——目录属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.8. Java plugin - other properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062342Z" creationid="haohang" creationdate="20180313T062342Z">
        <seg>表 23.8. Java 插件——其他属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 23.9. Java plugin - source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095035Z" creationid="haohang" creationdate="20180320T095035Z">
        <seg>表 23.9. Java 插件——源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 24.1. Groovy plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120743Z" creationid="huanghaohang" creationdate="20180406T120743Z">
        <seg>表 24.1. Groovy 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 24.2. Groovy plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121104Z" creationid="huanghaohang" creationdate="20180406T121104Z">
        <seg>表 24.2. Groovy 插件——额外的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 24.3. Groovy plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121135Z" creationid="huanghaohang" creationdate="20180406T121135Z">
        <seg>表 24.3. Groovy 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 24.4. Groovy plugin - source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T133305Z" creationid="huanghaohang" creationdate="20180406T133305Z">
        <seg>表 24.4. Groovy 插件——源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 24.5. Groovy plugin - source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T235059Z" creationid="huanghaohang" creationdate="20180406T235059Z">
        <seg>表 24.5. Groovy 插件——源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 24.6. Groovy plugin - GroovyCompile properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003649Z" creationid="huanghaohang" creationdate="20180407T003649Z">
        <seg>表 24.6. Groovy 插件——GroovyCompile 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 25.1. Scala plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010511Z" creationid="huanghaohang" creationdate="20180407T010511Z">
        <seg>表 25.1. Scala 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 25.2. Scala plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010733Z" creationid="huanghaohang" creationdate="20180407T010733Z">
        <seg>表 25.2. Scala 插件——额外的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 25.3. Scala plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011130Z" creationid="huanghaohang" creationdate="20180407T011130Z">
        <seg>表 25.3. Scala 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 25.4. Scala plugin - source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020206Z" creationid="huanghaohang" creationdate="20180407T020206Z">
        <seg>表 25.4. Scala 插件——源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 25.5. Scala plugin - source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020355Z" creationid="huanghaohang" creationdate="20180407T020355Z">
        <seg>表 25.5. Scala 插件——源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 26.1. War plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140209Z" creationid="huanghaohang" creationdate="20180408T140209Z">
        <seg>表 26.1. War 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 26.2. War plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140249Z" creationid="huanghaohang" creationdate="20180408T140249Z">
        <seg>表 26.2. War 插件——额外的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 26.3. War plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140317Z" creationid="huanghaohang" creationdate="20180408T140317Z">
        <seg>表 26.3. War 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 26.4. War plugin - directory properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142203Z" creationid="huanghaohang" creationdate="20180408T142203Z">
        <seg>表 26.4. War 插件——目录属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 27.1. Ear plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145123Z" creationid="huanghaohang" creationdate="20180415T145123Z">
        <seg>表 27.1. Ear 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 27.2. Ear plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145309Z" creationid="huanghaohang" creationdate="20180415T145309Z">
        <seg>表 27.2. Ear 插件——额外的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 27.3. Ear plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145320Z" creationid="huanghaohang" creationdate="20180415T145320Z">
        <seg>表 27.3. Ear 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 27.4. Ear plugin - directory properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145859Z" creationid="huanghaohang" creationdate="20180415T145859Z">
        <seg>表27.4. Ear 插件​——目录属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 28.1. Jetty plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144012Z" creationid="huanghaohang" creationdate="20180416T144012Z">
        <seg>表 28.1. Jetty 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 28.2. Jetty plugin - properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144542Z" creationid="huanghaohang" creationdate="20180416T144542Z">
        <seg>表 28.2. Jetty 插件——属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 29.1. Checkstyle plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135555Z" creationid="huanghaohang" creationdate="20180516T135538Z">
        <seg>表 29.1. Checkstyle 插件——插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 29.2. Checkstyle plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135750Z" creationid="huanghaohang" creationdate="20180516T135750Z">
        <seg>表 29.2. Checkstyle 插件——额外的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 29.3. Checkstyle plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140002Z" creationid="huanghaohang" creationdate="20180516T140002Z">
        <seg>表 29.3. Checkstyle 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 29.4. Checkstyle plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140100Z" creationid="huanghaohang" creationdate="20180516T140100Z">
        <seg>表29.4. Checkstyle 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 30.1. CodeNarc plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141826Z" creationid="huanghaohang" creationdate="20180516T141826Z">
        <seg>表 30.1. CodeNarc 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 30.2. CodeNarc plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141943Z" creationid="huanghaohang" creationdate="20180516T141943Z">
        <seg>表 30.2. CodeNarc 插件——附加的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 30.3. CodeNarc plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142025Z" creationid="huanghaohang" creationdate="20180516T142025Z">
        <seg>表 30.3. CodeNarc 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 30.4. CodeNarc plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142109Z" creationid="huanghaohang" creationdate="20180516T142109Z">
        <seg>表30.4. CodeNarc 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 31.1. FindBugs plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142257Z" creationid="huanghaohang" creationdate="20180516T142257Z">
        <seg>表 31.1. FindBugs 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 31.2. FindBugs plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142416Z" creationid="huanghaohang" creationdate="20180516T142416Z">
        <seg>表 31.2. FindBugs 插件——附加的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 31.3. FindBugs plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142455Z" creationid="huanghaohang" creationdate="20180516T142455Z">
        <seg>表31.3. FindBugs 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 32.1. JDepend plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142643Z" creationid="huanghaohang" creationdate="20180516T142643Z">
        <seg>表 32.1. JDepend 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 32.2. JDepend plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142728Z" creationid="huanghaohang" creationdate="20180516T142728Z">
        <seg>表 32.2. JDepend 插件——附加的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 32.3. JDepend plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142756Z" creationid="huanghaohang" creationdate="20180516T142756Z">
        <seg>表32.3. JDepend 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 33.1. PMD plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143143Z" creationid="huanghaohang" creationdate="20180516T143143Z">
        <seg>表 33.1. PMD 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 33.2. PMD plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143220Z" creationid="huanghaohang" creationdate="20180516T143220Z">
        <seg>表 33.2. PMD 插件——附加的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 33.3. PMD plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143239Z" creationid="huanghaohang" creationdate="20180516T143239Z">
        <seg>表33.3. PMD 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 34.1. Gradle defaults for JaCoCo properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135252Z" creationid="huanghaohang" creationdate="20180712T135252Z">
        <seg>表 34.1. JaCoCo 属性的 Gradle 默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 34.2. Default values of the JaCoCo Task extension</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093231Z" creationid="huanghaohang" creationdate="20180715T093231Z">
        <seg>表 34.2. JaCoCo 任务扩展的默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 34.3. JaCoCo plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093925Z" creationid="huanghaohang" creationdate="20180715T093925Z">
        <seg>表 34.3. JaCoCo 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 34.4. JaCoCo plugin - dependency configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093959Z" creationid="huanghaohang" creationdate="20180715T093959Z">
        <seg>表34.4. JaCoCo 插件——依赖配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 35.1. Sonar plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085516Z" creationid="huanghaohang" creationdate="20181012T085516Z">
        <seg>表 35.1. Sonar 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 36.1. Gradle defaults for standard Sonar properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023536Z" creationid="huanghaohang" creationdate="20181202T023536Z">
        <seg>表 36.1. 标准 Sonar 属性的 Gradle 默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 36.2. Additional defaults when &lt;c0&gt;java-base&lt;/c0&gt; plugin is applied</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023810Z" creationid="huanghaohang" creationdate="20181202T023810Z">
        <seg>表 36.2. 应用 &lt;c0&gt;java-base&lt;/c0&gt; 插件时另外添加的默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 36.3. Additional defaults when &lt;c0&gt;java&lt;/c0&gt; plugin is applied</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023831Z" creationid="huanghaohang" creationdate="20181202T023831Z">
        <seg>表 36.2. 应用 &lt;c0&gt;java&lt;/c0&gt; 插件时另外添加的默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 36.4. Sonar Runner plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051954Z" creationid="huanghaohang" creationdate="20181202T051954Z">
        <seg>表 36.4. Sonnar Runner 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 37.1. OSGi methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030153Z" creationid="huanghaohang" creationdate="20181203T030153Z">
        <seg>表 37.1. OSGi 方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 38.1. Eclipse plugin behavior</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025208Z" creationid="huanghaohang" creationdate="20181210T025208Z">
        <seg>表 38.1. Eclipse 插件行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 38.2. Eclipse plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025810Z" creationid="huanghaohang" creationdate="20181210T025810Z">
        <seg>表 38.2. Eclipse 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 38.3. Configuration of the Eclipse plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030111Z" creationid="huanghaohang" creationdate="20181210T030111Z">
        <seg>表 38.3. Eclipse 插件的配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 38.4. Advanced configuration hooks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082518Z" creationid="huanghaohang" creationdate="20181210T082518Z">
        <seg>表 38.4. 高级配置钩子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 39.1. IDEA plugin behavior</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T030912Z" creationid="huanghaohang" creationdate="20181212T030912Z">
        <seg>表 39.1. IDEA 插件行为</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 39.2. IDEA plugin - Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061024Z" creationid="huanghaohang" creationdate="20181212T061024Z">
        <seg>表 39.2. IDEA 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 39.3. Configuration of the idea plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061202Z" creationid="huanghaohang" creationdate="20181212T061202Z">
        <seg>表 39.3. idea 插件的配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 39.4. Idea plugin hooks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012457Z" creationid="huanghaohang" creationdate="20190123T012457Z">
        <seg>表 39.4. Idea 插件钩子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 40.1. ANTLR plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013504Z" creationid="huanghaohang" creationdate="20190123T013504Z">
        <seg>表 40.1. ANTLR 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 40.2. ANTLR plugin - additional task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013707Z" creationid="huanghaohang" creationdate="20190123T013707Z">
        <seg>表 40.2. ANTLR 插件——附加的任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 40.3. ANTLR plugin - project layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013732Z" creationid="huanghaohang" creationdate="20190123T013732Z">
        <seg>表 40.3. ANTLR 插件——项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 40.4. ANTLR plugin - source set properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013941Z" creationid="huanghaohang" creationdate="20190123T013941Z">
        <seg>表 40.4. ANTLR 插件——源集属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 41.1. Project report plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040008Z" creationid="huanghaohang" creationdate="20190123T040008Z">
        <seg>表 41.1. 项目报告插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 41.2. Project report plugin - convention properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040449Z" creationid="huanghaohang" creationdate="20190123T040449Z">
        <seg>表 41.2. 项目报告插件——约定属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 42.1. Announce Plugin Notification Services</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092146Z" creationid="huanghaohang" creationdate="20190124T092146Z">
        <seg>表 42.1. 公告插件通知服务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 44.1. Distribution plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133848Z" creationid="huanghaohang" creationdate="20190127T133848Z">
        <seg>表 44.1. 分发插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 44.2. Multiple distributions - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134006Z" creationid="huanghaohang" creationdate="20190127T134006Z">
        <seg>表 44.2. 多分发——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 45.1. Application plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135018Z" creationid="95" creationdate="20190131T134932Z">
        <seg>表 45.1. 应用程序插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 46.1. Java library distribution plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143810Z" creationid="95" creationdate="20190131T143810Z">
        <seg>表 46.1. Java 库分发插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 47.1. Build Init plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213724Z" creationid="95" creationdate="20190131T213724Z">
        <seg>表 47.1.  构建初始化插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 48.1. Wrapper plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T160011Z" creationid="95" creationdate="20190201T160011Z">
        <seg>表 48.1. 包装器插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 49.1. Build Dashboard plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153704Z" creationid="95" creationdate="20190202T153646Z">
        <seg>表 49.1. Build Dashboard 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 50.1. Dependency types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153737Z" creationid="huanghaohang" creationdate="20190527T153737Z">
        <seg>表 50.1. 依赖类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 50.2. Repository types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025802Z" creationid="huanghaohang" creationdate="20190603T025802Z">
        <seg>表 50.2. 仓库类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 50.3. Repository transport protocols</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030307Z" creationid="huanghaohang" creationdate="20190603T030307Z">
        <seg>表50.3 仓库传输协议</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 52.1. Maven plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091230Z" creationid="huanghaohang" creationdate="20190606T091230Z">
        <seg>表 52.1. Maven 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 52.2. Maven plugin - properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060425Z" creationid="huanghaohang" creationdate="20190607T060425Z">
        <seg>表 52.2. Maven 插件——属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 52.3. Protocol jars for Maven deployment</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074959Z" creationid="huanghaohang" creationdate="20190607T074959Z">
        <seg>表 52.3. Maven 部署的协议 jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 52.4. Configuration elements of the MavenDeployer</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092727Z" creationid="huanghaohang" creationdate="20190607T092727Z">
        <seg>表 52.4. MavenDeployer 的配置元素</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 52.5. Default Values for Maven POM generation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094942Z" creationid="huanghaohang" creationdate="20190607T094942Z">
        <seg>表 52.5. Maven POM 生成的默认值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Table 64.1. Software Components</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150553Z" creationid="huanghaohang" creationdate="20210518T150553Z">
        <seg>表64.1. 软件组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133905Z" creationid="huanghaohang" creationdate="20190127T133905Z">
        <seg>Tar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150554Z" creationid="huanghaohang" creationdate="20170927T150554Z">
        <seg>Task</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task (org.gradle.api.Task)

Description</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012846Z" creationid="huanghaohang" creationdate="20170910T012846Z">
        <seg>Task (org.gradle.api.Task)

Description</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task Property</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100231Z" creationid="haohang" creationdate="20180326T100231Z">
        <seg>任务属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task Tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234018Z" creationid="huanghaohang" creationdate="20171206T234018Z">
        <seg>任务树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031058Z" creationid="huanghaohang" creationdate="20170909T031058Z">
        <seg>任务依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061323Z" creationid="haohang" creationdate="20180312T061323Z">
        <seg>任务名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task name abbreviation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233927Z" creationid="huanghaohang" creationdate="20171206T233927Z">
        <seg>任务名缩写</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task ordering can be useful in a number of scenarios:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030044Z" creationid="huanghaohang" creationdate="20170922T030044Z">
        <seg>任务排序在许多情况下可能有用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task ordering is an &lt;a0&gt;incubating&lt;/a0&gt; feature. Please be aware that this feature may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T025813Z" creationid="huanghaohang" creationdate="20170922T025813Z">
        <seg>任务排序是一个&lt;a0&gt;孵化中&lt;/a0&gt;的功能。请注意，此功能可能会在以后的Gradle版本中有所更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task requested via task path from the command line (or Tooling API) causes the relevant project configured. Building 'projectA:projectB:someTask' causes configuration of projectB.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154124Z" creationid="huanghaohang" creationdate="20190614T154124Z">
        <seg>通过从命令行（或 Tooling API）中的任务路径所请求的任务将导致相关的项目被配置。构建 'projectA:projectB:someTask' 会使项目 B 被配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Task rules</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021751Z" creationid="huanghaohang" creationdate="20180201T021751Z">
        <seg>任务规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TaskActionListener</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144501Z" creationid="huanghaohang" creationdate="20180107T144501Z">
        <seg>TaskActionListener</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TaskExecutionGraphListener</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144458Z" creationid="huanghaohang" creationdate="20180107T144458Z">
        <seg>TaskExecutionGraphListener</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TaskExecutionListener</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144500Z" creationid="huanghaohang" creationdate="20180107T144500Z">
        <seg>TaskExecutionListener</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TaskOutputs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150607Z" creationid="huanghaohang" creationdate="20170927T150607Z">
        <seg>TaskOutputs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TaskReportTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040333Z" creationid="huanghaohang" creationdate="20190123T040333Z">
        <seg>TaskReportTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130017Z" creationid="huanghaohang" creationdate="20180517T130017Z">
        <seg>任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tasks are also available through the &lt;c0&gt;tasks&lt;/c0&gt; collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121732Z" creationid="huanghaohang" creationdate="20170919T121732Z">
        <seg>任务也可以通过&lt;c0&gt;tasks&lt;/c0&gt;集合来访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063127Z" creationid="haohang" creationdate="20180312T063127Z">
        <seg>Test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test ANTLR grammar files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013745Z" creationid="huanghaohang" creationdate="20190123T013745Z">
        <seg>测试 ANTLR 语法文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test Groovy sources. May also contain Java sources for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121731Z" creationid="huanghaohang" creationdate="20180406T121731Z">
        <seg>Groovy 测试源代码。也可能包含联合编译的 Java 源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test Java source</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053006Z" creationid="haohang" creationdate="20180313T053006Z">
        <seg>Java 测试源代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test Scala sources. May also contain Java sources for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011151Z" creationid="huanghaohang" creationdate="20180407T011151Z">
        <seg>Scala 测试源代码。也可能包含联合编译的 Java 源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test filtering feature has following characteristic:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T130735Z" creationid="huanghaohang" creationdate="20180405T130735Z">
        <seg>测试过滤功能具有以下的特征：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test filtering supersedes the file-based test selection. The latter may be completely replaced in future. We will grow the the test filtering api and add more kinds of filters.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131627Z" creationid="huanghaohang" creationdate="20180405T131410Z">
        <seg>测试过滤取代了基于文件的测试选择。后者可能会在将来被完全取代。我们将会增加测试过滤 API 并添加更多类型的过滤器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Test resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053009Z" creationid="haohang" creationdate="20180313T053009Z">
        <seg>测试资源</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TestNG supports &lt;a0&gt;parameterizing test methods&lt;/a0&gt;, allowing a particular test method to be executed multiple times with different inputs. Gradle includes the parameter values in its reporting of the test method execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T055731Z" creationid="huanghaohang" creationdate="20180406T055617Z">
        <seg>TestNG 支持&lt;a0&gt;参数化测试方法&lt;/a0&gt;，允许使用不同的输入多次执行特定的测试方法。 Gradle 会在这个测试方法执行的报告中包含参数值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tests are executed in a separate JVM, isolated from the main build process. The &lt;a0&gt;&lt;c1&gt;Test&lt;/c1&gt;&lt;/a0&gt; task's API allows you some control over how this happens.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062150Z" creationid="haohang" creationdate="20180330T054946Z">
        <seg>测试在单独的 JVM 进程中执行，与主构建进程隔离。&lt;a0&gt;&lt;c1&gt;Test&lt;/c1&gt;&lt;/a0&gt; 任务的 API 允许你对这种情况进行一些控制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thanks to Gradle's default imports (see &lt;a0&gt;Appendix E, &lt;i1&gt;Existing IDE Support and how to cope without it&lt;/i1&gt;&lt;/a0&gt;) you could also write:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093301Z" creationid="huanghaohang" creationdate="20180130T093301Z">
        <seg>归功于 Gradle 的默认导入（见《&lt;a0&gt;附录 E，&lt;i1&gt;现有的 IDE 支持和如何应对不支持的情况&lt;/i1&gt;&lt;/a0&gt;》），你也可以这样写：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is all. Calling the &lt;c0&gt;uploadArchives&lt;/c0&gt; task will generate the POM and deploys the artifact and the POM to the specified repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074908Z" creationid="huanghaohang" creationdate="20190607T074908Z">
        <seg>调用 &lt;c0&gt;uploadArchives&lt;/c0&gt; 任务将生成 POM，并将工件和 POM 部署到指定的仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That's it. If you want to tweak where the announcements go, you can configure the &lt;a0&gt;announce&lt;/a0&gt; plugin to change the local announcer.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092719Z" creationid="huanghaohang" creationdate="20190124T092646Z">
        <seg>就是这样。如果您想要调整公告的位置，你可以配置 &lt;a0&gt;公告&lt;/a0&gt; 插件来更改本地的公告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The "&lt;c0&gt;baseName&lt;/c0&gt;" property has also been changed. This will cause the distribution archives to be created with a different name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061412Z" creationid="huanghaohang" creationdate="20190128T061412Z">
        <seg>“&lt;c0&gt;baseName&lt;/c0&gt;”属性也被修改了。这将导致分发的存档以不同的名字创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The "&lt;c0&gt;basic&lt;/c0&gt;" build init type is useful for creating a fresh new Gradle project. It creates a sample &lt;c1&gt;build.gradle&lt;/c1&gt; file, with comments and links to help get started.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155224Z" creationid="95" creationdate="20190201T155015Z">
        <seg>“&lt;c0&gt;basic&lt;/c0&gt;”构建初始化类型对于创建新的Gradle项目很有用。它会创建一个样本 &lt;c1&gt;build.gradle&lt;/c1&gt; 文件，带有注释和链接以帮助入门。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The "&lt;c0&gt;groovy-library&lt;/c0&gt;" build init type is not inferable. It must be explicitly specified.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154824Z" creationid="95" creationdate="20190201T154824Z">
        <seg>“&lt;c0&gt;groovy-library&lt;/c0&gt;”构建初始化类型不是可推断的，它必须显式指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The "&lt;c0&gt;java-library&lt;/c0&gt;" build init type is not inferable. It must be explicitly specified.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154539Z" creationid="95" creationdate="20190201T145710Z">
        <seg>“&lt;c0&gt;java-library&lt;/c0&gt;”构建初始化类型不是可推断的，它必须显式指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The "&lt;c0&gt;pom&lt;/c0&gt;" type can be used to convert an Apache Maven build to a Gradle build. This works by converting the POM to one or more Gradle files. It is only able to be used if there is a valid "&lt;c1&gt;pom.xml&lt;/c1&gt;" file in the directory that the &lt;c2&gt;init&lt;/c2&gt; task is invoked in. This type will be automatically inferred if such a file exists.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T142213Z" creationid="95" creationdate="20190131T214602Z">
        <seg>“&lt;c0&gt;pom&lt;/c0&gt;”类型可以被用于把一个 Apache Maven 构建转换为一个 Gradle 构建。这是通过将POM转换为一个或多个Gradle文件。它仅用于当调用 &lt;c2&gt;init&lt;/c2&gt; 任务的目录有一个有效的“&lt;c1&gt;pom.xml&lt;/c1&gt;”文件的时候。如果存在一个这样的文件，那么将会自动推断类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The "&lt;c0&gt;scala-library&lt;/c0&gt;" build init type is not inferable. It must be explicitly specified.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154715Z" creationid="95" creationdate="20190201T154715Z">
        <seg>“&lt;c0&gt;scala-library&lt;/c0&gt;”构建初始化类型不是可推断的，它必须显式指定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The 'default' version is resolved to a specific version via a dependency resolve rule, which looks up the version in a corporate catalog of approved modules.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022550Z" creationid="huanghaohang" creationdate="20190605T022439Z">
        <seg>这个“default”版本通过依赖解析规则被解析为一个特定的版本，该规则将在一个已核准模块的公司目录中查找该版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The 1.0 milestone 3 release brought a new API called the tooling API, which you can use for embedding Gradle. This API allows you to execute and monitor builds, and to query Gradle about the details of a build. The main audience for this API is IDE, CI server, other UI authors, or integration testing of your Gradle plugins. However, it is open for anyone who needs to embed Gradle in their application.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T142116Z" creationid="huanghaohang" creationdate="20191220T142116Z">
        <seg>1.0 里程碑 3 发行版带来了新 API，叫 tooling API，可用于嵌入 Gradle。这个 API 允许你执行和监视构建，以及向 Gradle 查询有关构建的细节。它的主要受众是 IDE，CI 服务器，其他的 UI 作者或你的 Gradle 插件的集成测试。不过，它是向所有需要在其应用程序中嵌入 Gradle 的人开放的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;a0&gt;&lt;c1&gt;JacocoReport&lt;/c1&gt;&lt;/a0&gt; task can be used to generate code coverage reports in different formats. It implements the standard Gradle type &lt;a2&gt;&lt;c3&gt;Reporting&lt;/c3&gt;&lt;/a2&gt; and exposes a report container of type &lt;a4&gt;&lt;c5&gt;JacocoReportsContainer&lt;/c5&gt;&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093001Z" creationid="huanghaohang" creationdate="20180712T135532Z">
        <seg>&lt;a0&gt;&lt;c1&gt;JacocoReport&lt;/c1&gt;&lt;/a0&gt; 任务可以生成不同格式的代码覆盖率报告。它实现了标准的 Gradle 类型 &lt;a2&gt;&lt;c3&gt;Reporting&lt;/c3&gt;&lt;/a2&gt;，并向外暴露了一个 &lt;a4&gt;&lt;c5&gt;JacocoReportsContainer&lt;/c5&gt;&lt;/a4&gt; 类型的报告容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;a0&gt;&lt;c1&gt;Project.container()&lt;/c1&gt;&lt;/a0&gt; methods create instances of &lt;a2&gt;&lt;c3&gt;NamedDomainObjectContainer&lt;/c3&gt;&lt;/a2&gt;, that have many useful methods for managing and configuring the objects. In order to use a type with any of the &lt;c4&gt;project.container&lt;/c4&gt; methods, it MUST expose a property named “&lt;c5&gt;name&lt;/c5&gt;” as the unique, and constant, name for the object. The &lt;c6&gt;project.container(Class)&lt;/c6&gt; variant of the container method creates new instances by attempting to invoke the constructor of the class that takes a single string argument, which is the desired name of the object. See the above link for &lt;c7&gt;project.container&lt;/c7&gt; method variants that allow custom instantiation strategies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132115Z" creationid="huanghaohang" creationdate="20190728T132115Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Project.container()&lt;/c1&gt;&lt;/a0&gt; 方法创建了 &lt;a2&gt;&lt;c3&gt;NamedDomainObjectContainer&lt;/c3&gt;&lt;/a2&gt;的实例，这些实例有许多用于管理和配置对象的有用方法。为能使用任意一种 &lt;c4&gt;project.container&lt;/c4&gt; 方法的类型，必须公开一个“&lt;c5&gt;name&lt;/c5&gt;”属性，作为对象的唯一且不变的名称。容器方法的 &lt;c6&gt;project.container(Class)&lt;/c6&gt; 变体通过尝试调用该类只有一个 string 参数的构造函数来创建新实例，该参数是这个对象所想要的名称。请参阅以上链接，以查看 &lt;c7&gt;project.container&lt;/c7&gt; 允许自定义实例化策略的重载方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;a0&gt;&lt;c1&gt;Sync&lt;/c1&gt;&lt;/a0&gt; task extends the &lt;c2&gt;Copy&lt;/c2&gt; task. When it executes, it copies the source files into the destination directory, and then removes any files from the destination directory which it did not copy. This can be useful for doing things such as installing your application, creating an exploded copy of your archives, or maintaining a copy of the project's dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T124952Z" creationid="huanghaohang" creationdate="20171126T124952Z">
        <seg>&lt;a0&gt;&lt;c1&gt;Sync&lt;/c1&gt;&lt;/a0&gt; 任务扩展了 &lt;c2&gt;Copy&lt;/c2&gt; 任务。当它执行时，它会将源文件复制到目标目录中，然后从目标目录中删除它没有复制的所有文件。这可以用于执行诸如安装应用程序，创建归档文件的分解（解压）副本，或维护项目依赖的副本等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;--offline&lt;/c0&gt; command line switch tells Gradle to always use dependency modules from the cache, regardless if they are due to be checked again. When running with offline, Gradle will never attempt to access the network to perform dependency resolution. If required modules are not present in the dependency cache, build execution will fail.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T150249Z" creationid="huanghaohang" creationdate="20190605T145243Z">
        <seg>&lt;c0&gt;--offline&lt;/c0&gt; 命令行开关告诉 Gradle 始终使用缓存中的依赖模块，而不考虑是否要再检查。在使用离线模式运行时，Gradle 将不会尝试访问网络来执行依赖解析。如果所需的模块在依赖缓存中不存在，构建执行就会失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;--refresh-dependencies&lt;/c0&gt; option tells Gradle to ignore all cached entries for resolved modules and artifacts. A fresh resolve will be performed against all configured repositories, with dynamic versions recalculated, modules refreshed, and artifacts downloaded. However, where possible Gradle will check if the previously downloaded artifacts are valid before downloading again. This is done by comparing published SHA1 values in the repository with the SHA1 values for existing downloaded artifacts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T150829Z" creationid="huanghaohang" creationdate="20190605T150226Z">
        <seg>&lt;c0&gt;--refresh-dependencies&lt;/c0&gt; 选项告诉 Gradle 忽略已解析的模块和工件的所有缓存条目。所有已配置的仓库都会执行新的解析，并重新计算动态版本，刷新模块及下载工件。但是，在可能的情况下，Gradle 会检查之前下载的工件是否有效，然后再下载。这是通过比较仓库中已发布的 SHA1 值和现在已下载好的工件的 SHA1 值来完成的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Configuration.files&lt;/c0&gt; method always retrieves all artifacts of the &lt;s1&gt;&lt;e2&gt;whole&lt;/e2&gt;&lt;/s1&gt; configuration. It then filters the retrieved files by specified dependencies. As you can see in the example, transitive dependencies are included.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152626Z" creationid="huanghaohang" creationdate="20190602T143722Z">
        <seg>&lt;c0&gt;Configuration.files&lt;/c0&gt; 方法总是获取 &lt;s1&gt;&lt;e2&gt;整个&lt;/e2&gt;&lt;/s1&gt; 配置的所有工件，然后它通过指定的依赖对检索到的文件进行过滤。正如你在示例中所看到的，传递依赖会被包含在内。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Project&lt;/c0&gt; instance</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132123Z" creationid="huanghaohang" creationdate="20170913T132123Z">
        <seg>&lt;c0&gt;Project&lt;/c0&gt;实例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Project&lt;/c0&gt; object provides some standard properties, which are available in your build script. The following table lists a few of the commonly used ones.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132102Z" creationid="huanghaohang" creationdate="20170913T132102Z">
        <seg>&lt;c0&gt;Project&lt;/c0&gt;对象提供了一些在构建脚本中可用的标准的属性。下表列出了几个常用的属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Test&lt;/c0&gt; task detects which classes are test classes by inspecting the compiled test classes. By default it scans all &lt;c1&gt;.class&lt;/c1&gt; files. You can set custom includes / excludes, only those classes will be scanned. Depending on the test framework used (JUnit / TestNG) the test class detection uses different criteria.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155150Z" creationid="huanghaohang" creationdate="20180405T155150Z">
        <seg>&lt;c0&gt;Test&lt;/c0&gt; 任务通过检查编译的测试类来检测哪些类是测试类。默认情况下，它会扫描所有 &lt;c1&gt;.class&lt;/c1&gt; 文件。你可以设置自定义包含或排除哪些类，只有这些类才会被扫描。根据所使用的测试框架（JUnit 或 TestNG），会使用不同的标准进行测试类的检测。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;Test&lt;/c0&gt; task generates the following results by default.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042107Z" creationid="huanghaohang" creationdate="20180406T042107Z">
        <seg>&lt;c0&gt;test&lt;/c0&gt; 任务默认情况下会生成以下结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;announce&lt;/c0&gt; method takes two String arguments: The message to be sent, and the notification service to be used. The following table lists supported notification services and their configuration properties.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092137Z" creationid="huanghaohang" creationdate="20190124T092137Z">
        <seg>&lt;c0&gt;announce&lt;/c0&gt; 方法有两个 String 参数: 要被发送的消息，以及要使用的通知服务。下表列出了支持的通知服务以及它们的配置属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;beforeMerged&lt;/c0&gt; hook is executed with a domain object representing the existing file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082323Z" creationid="huanghaohang" creationdate="20181210T082323Z">
        <seg>&lt;c0&gt;beforeMerged&lt;/c0&gt;的钩子会使用一个表示现有文件的域对象执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;build&lt;/c0&gt; task of the Java plugin is typically used to compile, test, and perform code style checks (if the CodeQuality plugin is used) of a single project. In multi-project builds you may often want to do all of these tasks across a range of projects. The &lt;c1&gt;buildNeeded&lt;/c1&gt; and &lt;c2&gt;buildDependents&lt;/c2&gt; tasks can help with this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T134901Z" creationid="huanghaohang" creationdate="20190622T134901Z">
        <seg>Java 插件的 &lt;c0&gt;build&lt;/c0&gt; 任务通常用于一个项目的编译、测试和执行代码风格检查（如果使用了 CodeQuality 插件的话)。在多项目构建中，你可能经常想在一系列项目中执行所有这些任务。&lt;c1&gt;buildNeeded&lt;/c1&gt; 和 &lt;c2&gt;buildDependents&lt;/c2&gt; 任务能够帮助完成这一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;buildDashboard&lt;/c0&gt; task does not depend on any other tasks. It will only aggregate the reporting tasks that are independently being executed as part of the build run. To generate the build dashboard, simply include the &lt;c1&gt;buildDashboard&lt;/c1&gt; task in the list of tasks to execute. For example, &lt;s2&gt;&lt;c3&gt;gradle buildDashboard build&lt;/c3&gt;&lt;/s2&gt; will generate a dashboard for all of the reporting tasks that are dependents of the &lt;c4&gt;build&lt;/c4&gt; task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153522Z" creationid="95" creationdate="20190202T153217Z">
        <seg>&lt;c0&gt;buildDashboard&lt;/c0&gt; 任务不依赖于任何其他任务。 它只聚合在构建运行过程中独立执行的报告任务。 要生成构建仪表盘，只需在要执行的任务列表中包含 &lt;c1&gt;buildDashboard&lt;/c1&gt; 任务。 例如，&lt;s2&gt;&lt;c3&gt;gradle buildDashboard build&lt;/c3&gt;&lt;/s2&gt; 将为 &lt;c4&gt;build&lt;/c4&gt; 任务所依赖的所有报告任务生成仪表盘。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;buildSrc&lt;/c0&gt; project can be a multi-project build. This works like any other regular Gradle multi-project build. However, you need to make all of the projects that you wish be on the classpath of the actual build &lt;c1&gt;runtime&lt;/c1&gt; dependencies of the root project in &lt;c2&gt;buildSrc&lt;/c2&gt;. You can do this by adding this to the configuration of each project you wish to export:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135428Z" creationid="huanghaohang" creationdate="20191201T135428Z">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; 项目可以是一个多项目构建，就像其他常规 Gradle 多项目构建。但是，你需要使你想要的所有项目，在 &lt;c2&gt;buildSrc&lt;/c2&gt; 根项目的实际构建 &lt;c1&gt;runtime&lt;/c1&gt; 依赖的类路径上。你可以通过把它添加到每一个想要导出的项目的配置上来完成：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;clean&lt;/c0&gt; task is an instance of &lt;a1&gt;&lt;c2&gt;Delete&lt;/c2&gt;&lt;/a1&gt;. It simply removes the directory denoted by its &lt;c3&gt;dir&lt;/c3&gt; property.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100614Z" creationid="haohang" creationdate="20180326T100556Z">
        <seg>&lt;c0&gt;clean&lt;/c0&gt; 任务是 &lt;a1&gt;&lt;c2&gt;Delete&lt;/c2&gt;&lt;/a1&gt; 的一个实例。它只是删除由 &lt;c3&gt;dir&lt;/c3&gt; 属性表示的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;compare-gradle-builds&lt;/c0&gt; plugin can be used to facilitate a comparison between two Gradle builds. The plugin adds a &lt;a1&gt;&lt;c2&gt;CompareGradleBuilds&lt;/c2&gt;&lt;/a1&gt; task named “&lt;c3&gt;compareGradleBuilds&lt;/c3&gt;” to the project. The configuration of this task specifies what is to be compared. By default, it is configured to compare the current build with itself using the current Gradle version by executing the tasks: “&lt;c4&gt;clean assemble&lt;/c4&gt;”.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140046Z" creationid="huanghaohang" creationdate="20210515T133042Z">
        <seg>&lt;c0&gt;compare-gradle-compile&lt;/c0&gt; 插件可用于方便地比较两个 Gradle 构建。该插件向项目添加了一个叫做“&lt;c3&gt;compareGradleBuilds&lt;/c3&gt;”的&lt;a1&gt;&lt;c2&gt;CompareGradleBuilds&lt;/c2&gt;&lt;/a1&gt;任务。这个任务的配置指定了要比较的内容。默认情况下，它被配置为对当前构建，与本身使用当前的 Gradle 版本所执行的任务：“&lt;c4&gt;clean assemble&lt;/c4&gt;”进行比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;configure()&lt;/c0&gt; method takes a list as an argument and applies the configuration to the projects in this list.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143941Z" creationid="huanghaohang" creationdate="20190615T143941Z">
        <seg>&lt;c0&gt;configure()&lt;/c0&gt;方法接受一个 list 作为参数，并将配置应用到这个 list 里的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;default&lt;/c0&gt; configuration of a module contains undesired artifacts. Rather than depending on the whole configuration, a dependency on just the desired artifacts is declared.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190530T095014Z" creationid="huanghaohang" creationdate="20190530T094751Z">
        <seg>模块的 &lt;c0&gt;default&lt;/c0&gt; 配置包含了不需要的工件。你应该仅声明对所需工件的依赖，而不是依赖于整个配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;from()&lt;/c0&gt; method accepts any of the arguments that the &lt;a1&gt;files()&lt;/a1&gt; method does. When an argument resolves to a directory, everything under that directory (but not the directory itself) is recursively copied into the destination directory. When an argument resolves to a file, that file is copied into the destination directory. When an argument resolves to a non-existing file, that argument is ignored. If the argument is a task, the output files (i.e. the files the task creates) of the task are copied and the task is automatically added as a dependency of the &lt;c2&gt;Copy&lt;/c2&gt; task. The &lt;c3&gt;into()&lt;/c3&gt; accepts any of the arguments that the &lt;a4&gt;file()&lt;/a4&gt; method does. Here is another example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075000Z" creationid="huanghaohang" creationdate="20171002T135621Z">
        <seg>该&lt;c0&gt;from()&lt;/c0&gt;方法接受和&lt;a1&gt;files()&lt;/a1&gt;方法一样的参数。当参数解析为目录时，该目录下的所有内容（除了该目录本身）将递归复制到目标目录中。当参数解析为文件时，该文件将被复制到目标目录中。当参数解析为不存在的文件时，该参数将被忽略。如果参数是一个任务，则复制任务的输出文件（即任务创建的文件），并将任务自动添加为&lt;c2&gt;Copy&lt;/c2&gt;任务的依赖项。该&lt;c3&gt;into()&lt;/c3&gt;接受和&lt;a4&gt;file()&lt;/a4&gt;方法一样的参数。这是另一个例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;include&lt;/c0&gt; method takes project paths as arguments. The project path is assumed to be equal to the relative physical file system path. For example, a path 'services:api' is mapped by default to a folder 'services/api' (relative from the project root). You only need to specify the leaves of the tree. This means that the inclusion of the path 'services:hotels:api' will result in creating 3 projects: 'services', 'services:hotels' and 'services:hotels:api'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152511Z" creationid="huanghaohang" creationdate="20190612T152511Z">
        <seg>&lt;c0&gt;include&lt;/c0&gt; 方法把项目路径作为参数。项目路径被假定为等于物理文件系统相对路径。例如，默认情况下，路径“services:api”会映射到文件夹“services/api”（相对于根项目）。你只需要指定树的叶。这意味着包含路径“services:hotels:api”将导致创建三个项目：“services”，“services:hotels”和“services:hotels:api”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;includeFlat&lt;/c0&gt; method takes directory names as an argument. Those directories need to exist as siblings of the root project directory. The location of those directories are considered as child projects of the root project in the multi-project tree.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152746Z" creationid="huanghaohang" creationdate="20190612T152746Z">
        <seg>&lt;c0&gt;includeFlat&lt;/c0&gt; 方法以目录名称为参数。这些目录需要作为根项目目录的同级存在，它们的位置会被视为多项目树中根项目的子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;init&lt;/c0&gt; supports different build setup &lt;e1&gt;types&lt;/e1&gt;. The type is specified by supplying a &lt;c2&gt;--type&lt;/c2&gt; argument value. For example, to create a Java library project simply execute: &lt;c3&gt;gradle init --type java-library&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T214107Z" creationid="95" creationdate="20190131T213838Z">
        <seg>&lt;c0&gt;init&lt;/c0&gt; 支持不同的构建设置 &lt;e1&gt;类型&lt;/e1&gt;。类型通过提供 &lt;c2&gt;--type&lt;/c2&gt; 参数值来指定。例如，要创建Java库项目，只需执行：&lt;c3&gt;gradle init --type java-library&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;jar&lt;/c0&gt; task creates a JAR file containing the class files and resources of the project. The JAR file is declared as an artifact in the &lt;c1&gt;archives&lt;/c1&gt; dependency configuration. This means that the JAR is available in the classpath of a dependent project. If you upload your project into a repository, this JAR is declared as part of the dependency descriptor. You can learn more about how to work with archives in &lt;a2&gt;Section 16.8, “Creating archives”&lt;/a2&gt; and artifact configurations in &lt;a3&gt;Chapter 51, &lt;i4&gt;Publishing artifacts&lt;/i4&gt;&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113658Z" creationid="huanghaohang" creationdate="20180406T104655Z">
        <seg>&lt;c0&gt;jar&lt;/c0&gt; 任务创建一个包含项目的类文件和资源的 JAR 文件。 JAR文件被声明为在 &lt;c1&gt;archives&lt;/c1&gt; 依赖配置中的一个构件。这意味着这个 JAR 文件在依赖它的项目的类路径中可用。如果将项目上传到仓库中，则这个 JAR 文件会被声明为依赖描述符的一部分。关于如何处理档案，可以在《&lt;a2&gt;第 16.8 节，“创建档案”&lt;/a2&gt;》中了解，而构件配置则可参考《&lt;a3&gt;第五十一章，&lt;i4&gt;发布构件&lt;/i4&gt;&lt;/a3&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;javadoc&lt;/c0&gt; task is an instance of &lt;a1&gt;&lt;c2&gt;Javadoc&lt;/c2&gt;&lt;/a1&gt;. It supports the core javadoc options and the options of the standard doclet described in the &lt;a3&gt;reference documentation&lt;/a3&gt; of the Javadoc executable. For a complete list of supported Javadoc options consult the API documentation of the following classes: &lt;a4&gt;&lt;c5&gt;CoreJavadocOptions&lt;/c5&gt;&lt;/a4&gt; and &lt;a6&gt;&lt;c7&gt;StandardJavadocDocletOptions&lt;/c7&gt;&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100102Z" creationid="haohang" creationdate="20180326T095506Z">
        <seg>&lt;c0&gt;Javadoc&lt;/c0&gt; 任务是 &lt;a1&gt;&lt;c2&gt;Javadoc&lt;/c2&gt;&lt;/a1&gt; 的一个实例。它支持核心 javadoc 的参数选项，以及在 Javadoc 可执行文件的&lt;a3&gt;参考文档&lt;/a3&gt;中描述的标准 doclet 参数选项。对于所支持的 Javadoc 参数选项的完整列表，请参考下面的类的 API 文档： &lt;a4&gt; &lt;c5&gt;CoreJavadocOptions&lt;/c5&gt;&lt;/a4&gt; 和 &lt;a6&gt;&lt;c7&gt;StandardJavadocDocletOptions&lt;/c7&gt;&lt;/a6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sonar&lt;/c0&gt; block in a subproject configures an object of type &lt;a1&gt;&lt;c2&gt;SonarProjectModel&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152943Z" creationid="huanghaohang" creationdate="20180811T152943Z">
        <seg>在子项目中的 &lt;c0&gt;sonar&lt;/c0&gt; 块配置的是一个 &lt;a1&gt;&lt;c2&gt;SonarProjectModel&lt;/c2&gt;&lt;/a1&gt; 类型的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sonar&lt;/c0&gt;, &lt;c1&gt;server&lt;/c1&gt;, &lt;c2&gt;database&lt;/c2&gt;, and &lt;c3&gt;project&lt;/c3&gt; blocks in the examples above configure objects of type &lt;a4&gt;&lt;c5&gt;SonarRootModel&lt;/c5&gt;&lt;/a4&gt;, &lt;a6&gt;&lt;c7&gt;SonarServer&lt;/c7&gt;&lt;/a6&gt;, &lt;a8&gt;&lt;c9&gt;SonarDatabase&lt;/c9&gt;&lt;/a8&gt;, and &lt;a10&gt;&lt;c11&gt;SonarProject&lt;/c11&gt;&lt;/a10&gt;, respectively. See their API documentation for further information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151458Z" creationid="huanghaohang" creationdate="20180811T151339Z">
        <seg>在上面的例子中，&lt;c0&gt;sonar&lt;/c0&gt;，&lt;c1&gt;server&lt;/c1&gt;，&lt;c2&gt;database&lt;/c2&gt; 和 &lt;c3&gt;project&lt;/c3&gt; 块分别配置的是&lt;a4&gt;&lt;c5&gt;SonarRootModel&lt;/c5&gt;&lt;/a4&gt;， &lt;a6&gt;&lt;c7&gt;SonarServer&lt;/c7&gt;&lt;/a6&gt;， &lt;a8&gt;&lt;c9&gt;SonarDatabase&lt;/c9&gt;&lt;/a8&gt; 及 &lt;a10&gt;&lt;c11&gt;SonarProject&lt;/c11&gt;&lt;/a10&gt; 类型的对象。有关详细信息，可以参阅其 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;sonarAnalyze&lt;/c0&gt; task is a standalone task that needs to be executed explicitly and doesn't depend on any other tasks. Apart from source code, the task also analyzes class files and test result files (if available). For best results, it is therefore recommended to run a full build before the analysis. In a typical setup, analysis would be performed once per day on a build server.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100006Z" creationid="huanghaohang" creationdate="20180715T095608Z">
        <seg>这个 &lt;c0&gt;sonarAnalyze&lt;/c0&gt; 任务是一个需要显式执行的独立任务， 并且不依赖于其他任务。除了源代码之外，该任务还分析了类文件和测试结果文件（如果有）。为获得最佳结果，建议在分析之前运行一次完整的构建。在典型设置中，会每天在构建服务器上执行一次分析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;test&lt;/c0&gt; task is an instance of &lt;a1&gt;&lt;c2&gt;Test&lt;/c2&gt;&lt;/a1&gt;. It automatically detects and executes all unit tests in the &lt;c3&gt;test&lt;/c3&gt; source set. It also generates a report once test execution is complete. JUnit and TestNG are both supported. Have a look at &lt;a4&gt;&lt;c5&gt;Test&lt;/c5&gt;&lt;/a4&gt; for the complete API.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T102723Z" creationid="haohang" creationdate="20180327T102723Z">
        <seg>&lt;c0&gt;test&lt;/c0&gt; 任务是 &lt;a1&gt;&lt;c2&gt;Test&lt;/c2&gt;&lt;/a1&gt; 的一个实例。它会自动检测并执行 &lt;c3&gt;test&lt;/c3&gt; 源集中的所有单元测试。测试执行完成后，它还会生成一个报告。它同时支持 JUnit 和 TestNG，可以看一看 &lt;a4&gt;&lt;c5&gt;test&lt;/c5&gt;&lt;/a4&gt; 的完整 API。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;testLogging&lt;/c0&gt; property allows to configure which test events are going to be logged and at which detail level. By default, a concise message will be logged for every failed test. See &lt;a1&gt;&lt;c2&gt;TestLoggingContainer&lt;/c2&gt;&lt;/a1&gt; for how to tune test logging to your preferences.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062032Z" creationid="haohang" creationdate="20180330T062032Z">
        <seg>&lt;c0&gt;testLogging&lt;/c0&gt; 属性可以配置哪些测试事件需要记录，并且使用什么样的日志级别。默认情况下，对于每个失败的测试都只会打印一个简洁的消息。请参阅 &lt;a1&gt;&lt;c2&gt;TestLoggingContainer&lt;/c2&gt;&lt;/a1&gt;，查看如何把测试日志调整为你的偏好设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;whenMerged&lt;/c0&gt; hook allows to manipulate the fully populated domain objects. Often this is the preferred way to customize Eclipse files. Here is how you would export all the dependencies of an Eclipse project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085146Z" creationid="huanghaohang" creationdate="20181210T084539Z">
        <seg>&lt;c0&gt;whenMerged&lt;/c0&gt; 钩子允许操作完全填充的域对象。通常，这是自定义 Eclipse 文件的首选方法。下面的例子展示了如何导出一个 Eclipse 项目的所有依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;whenMerged&lt;/c0&gt; hook allows to manipulate the fully populated domain objects. Often this is the preferred way to customize IDEA files. Here is how you would export all the dependencies of an IDEA module:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012859Z" creationid="huanghaohang" creationdate="20190123T012859Z">
        <seg>&lt;c0&gt;whenMerged&lt;/c0&gt; 钩子允许操作完全填充的域对象。通常，这是自定义IDEA文件的首选方法。下面的例子展示了如何导出一个IDEA模块的所有依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;whenMerged&lt;/c0&gt; hook is executed with a domain object representing contents of the file to be persisted</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082412Z" creationid="huanghaohang" creationdate="20181210T082412Z">
        <seg>&lt;c0&gt;whenMerged&lt;/c0&gt;的钩子会使用一个表示持久化的域对象执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;withXml&lt;/c0&gt; hook is executed with a raw representation of the XML that will be persisted</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082456Z" creationid="huanghaohang" creationdate="20181210T082415Z">
        <seg>&lt;c0&gt;withXml&lt;/c0&gt;的钩子会使用一个表示将被持久化的XML的 raw 执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;withXml&lt;/c0&gt;hook allows to manipulate the in-memory XML representation just before the file gets written to disk. Although Groovy's XML support makes up for a lot, this approach is less convenient than manipulating the domain objects. In return, you get total control over the generated file, including sections not modeled by the domain objects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085527Z" creationid="huanghaohang" creationdate="20181210T085209Z">
        <seg>&lt;c0&gt;withXml&lt;/c0&gt;钩子允许在文件写入磁盘之前操作内存中的 XML 表示形式。尽管 Groovy 的 XML 支持对其帮助很大，但这种方法比起操作域对象依然很不方便。作为回报，你可以对生成的文件进行完全的控制，包括未由域对象建模的部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;s0&gt;&lt;c1&gt;--profile&lt;/c1&gt;&lt;/s0&gt; command line option will record some useful timing information while your build is running and write a report to the &lt;c2&gt;build/reports/profile&lt;/c2&gt; directory. The report will be named using the time when the build was run.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T030624Z" creationid="huanghaohang" creationdate="20170910T023504Z">
        <seg>使用&lt;s0&gt;&lt;c1&gt;--profile&lt;/c1&gt;&lt;/s0&gt;命令行选项会在运行构建时记录一些有用的计时信息，并以运行构建时的时间命名，把报告保存到&lt;c2&gt;build/reports/profile&lt;/c2&gt;目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;s0&gt;&lt;e1&gt;absence&lt;/e1&gt;&lt;/s0&gt; of a particular module or artifact in a particular repository, eliminating repeated attempts to access a resource that does not exist.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T071139Z" creationid="huanghaohang" creationdate="20190605T071139Z">
        <seg>在特定的仓库中&lt;s0&gt;&lt;e1&gt;缺少的&lt;/e1&gt;&lt;/s0&gt;特定模块或工件，避免反复地尝试访问不存在的资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070356Z" creationid="huanghaohang" creationdate="20190205T070353Z">
        <seg>ANTLR 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR grammar files of this source set. Contains all &lt;c0&gt;.g&lt;/c0&gt; found in the ANTLR source directories, and excludes all other types of files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T014131Z" creationid="huanghaohang" creationdate="20190123T013948Z">
        <seg>此源集的 ANTLR 语法文件。包含在ANTLR源目录中找到的所有&lt;c0&gt;.g&lt;/c0&gt;文件，并排除所有其他类型的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin adds a number of tasks to your project, as shown below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013458Z" creationid="huanghaohang" creationdate="20190123T013458Z">
        <seg>ANTLR 插件向你的项目添加了许多任务，如下所示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin adds an &lt;c0&gt;antlr&lt;/c0&gt; dependency configuration. You use this to declare the ANTLR dependency that you wish to use.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013853Z" creationid="huanghaohang" creationdate="20190123T013853Z">
        <seg>ANTLR 插件添加了一个 &lt;c0&gt;antlr&lt;/c0&gt; 依赖配置，你可以使用它来声明你希望使用的 ANTLR 依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin adds the following dependencies to tasks added by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013700Z" creationid="huanghaohang" creationdate="20190123T013700Z">
        <seg>ANTLR 插件向 Java 插件所添加的任务添加了以下依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin adds the following properties to each source set in the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013933Z" creationid="huanghaohang" creationdate="20190123T013933Z">
        <seg>ANTLR 插件向项目的每一个源集添加了下列属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin does not add any convention properties.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013913Z" creationid="huanghaohang" creationdate="20190123T013913Z">
        <seg>ANTLR 插件不添加任何约定属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin extends the Java plugin to add support for generating parsers using &lt;a0&gt;ANTLR&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013426Z" creationid="huanghaohang" creationdate="20190123T013345Z">
        <seg>ANTLR 插件扩展自 Java 插件并添加了对使用 &lt;a0&gt;ANTLR&lt;/a0&gt; 的生成解析器的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ANTLR plugin only supports ANTLR version 2.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013358Z" creationid="huanghaohang" creationdate="20190123T013358Z">
        <seg>ANTLR插件只支持ANTLR版本2。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The API documentation (Javadoc and Groovydoc).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114544Z" creationid="95" creationdate="20170723T114544Z">
        <seg>API文档（包括Javadoc和Groovydoc）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Announce Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070435Z" creationid="huanghaohang" creationdate="20190205T070435Z">
        <seg>公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Ant integration is provided by &lt;a0&gt;&lt;c1&gt;AntBuilder&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094811Z" creationid="huanghaohang" creationdate="20180105T094811Z">
        <seg>对 Ant 集成由 &lt;a0&gt;&lt;c1&gt;AntBuilder&lt;/c1&gt;&lt;/a0&gt; 提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Application Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070455Z" creationid="huanghaohang" creationdate="20190205T070455Z">
        <seg>应用程序插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Application plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T134941Z" creationid="95" creationdate="20190131T134931Z">
        <seg>应用程序插件向项目添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Announcements Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070440Z" creationid="huanghaohang" creationdate="20190205T070440Z">
        <seg>构建公告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Dashboard Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070639Z" creationid="huanghaohang" creationdate="20190205T070639Z">
        <seg>构建仪表盘插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Dashboard plugin adds the following task to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153640Z" creationid="95" creationdate="20190202T153640Z">
        <seg>Build Dashboard 插件向项目中添加以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Dashboard plugin can be used to generate a single HTML dashboard that provides a single point of access to all of the reports generated by a build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T233108Z" creationid="95" creationdate="20190201T233108Z">
        <seg>Build Dashboard 插件可以用于生成单个 HTML 仪表盘，该仪表盘提供对构建所生成的所有报告的单点访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Dashboard plugin does not define any dependency configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153812Z" creationid="95" creationdate="20190202T153812Z">
        <seg>Build Dashboard 插件没有定义任何的依赖配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Dashboard plugin does not require any particular project layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153759Z" creationid="95" creationdate="20190202T153759Z">
        <seg>Build Dashboard 插件不需要任何特定的项目布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Environment</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034134Z" creationid="huanghaohang" creationdate="20180517T034134Z">
        <seg>构建环境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Init plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T145829Z" creationid="95" creationdate="20190131T145829Z">
        <seg>构建初始化插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Build Lifecycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144813Z" creationid="huanghaohang" creationdate="20190708T144813Z">
        <seg>构建的生命周期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142248Z" creationid="huanghaohang" creationdate="20181201T142248Z">
        <seg>Checkstyle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle libraries to use</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140130Z" creationid="huanghaohang" creationdate="20180516T140130Z">
        <seg>要使用的 Checkstyle 库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle plugin adds the following dependencies to tasks defined by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135732Z" creationid="huanghaohang" creationdate="20180516T135732Z">
        <seg>Checkstyle 插件向 Java 插件所定义的任务添加了以下依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle plugin adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140030Z" creationid="huanghaohang" creationdate="20180516T140030Z">
        <seg>Checkstyle 插件添加了以下依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135536Z" creationid="huanghaohang" creationdate="20180516T135536Z">
        <seg>Checkstyle 插件将以下任务添加到项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle plugin expects the following project layout:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135956Z" creationid="huanghaohang" creationdate="20180516T135956Z">
        <seg>Checkstyle 插件希望是以下的项目布局：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Checkstyle plugin performs quality checks on your project's Java source files using &lt;a0&gt;Checkstyle&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180424T134645Z" creationid="huanghaohang" creationdate="20180424T134645Z">
        <seg>Checkstyle 插件使用 &lt;a0&gt;Checkstyle&lt;/a0&gt; 对你的项目的 Java 源文件执行质量检查，并从这些检查结果生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144125Z" creationid="huanghaohang" creationdate="20181201T144125Z">
        <seg>CodeNarc 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc libraries to use</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142111Z" creationid="huanghaohang" creationdate="20180516T142111Z">
        <seg>使用的 CodeNarc 库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc plugin adds the following dependencies to tasks defined by the Groovy plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141937Z" creationid="huanghaohang" creationdate="20180516T141901Z">
        <seg>CodeNarc 插件向 Groovy 插件所定义的任务添加了以下依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc plugin adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142056Z" creationid="huanghaohang" creationdate="20180516T142056Z">
        <seg>CodeNarc 插件添加了以下依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141821Z" creationid="huanghaohang" creationdate="20180516T141821Z">
        <seg>CodeNarc 插件将以下任务添加到项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc plugin expects the following project layout:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142020Z" creationid="huanghaohang" creationdate="20180516T142020Z">
        <seg>CodeNarc 插件需要以下的项目布局：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The CodeNarc plugin performs quality checks on your project's Groovy source files using &lt;a0&gt;CodeNarc&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140329Z" creationid="huanghaohang" creationdate="20180516T140329Z">
        <seg>CodeNarc 插件使 用&lt;a0&gt;CodeNarc&lt;/a0&gt;对项目的 Groovy 源文件执行质量检查并生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Command Line tab is place to execute a single Gradle command directly. Just enter whatever you would normally enter after 'gradle' on the command line. This also provides a place to try out commands before adding them to favorites.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145832Z" creationid="huanghaohang" creationdate="20170911T145832Z">
        <seg>命令行选项卡用于直接执行单个的Gradle命令。你只需要在命令行中输入你通常在“gradle”后输入的命令即可。它也对要添加到收藏夹命令提供了试错的地方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The DSL reference guide.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114530Z" creationid="95" creationdate="20170723T114530Z">
        <seg>DSL参考指南。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Distribution Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070445Z" creationid="huanghaohang" creationdate="20190205T070445Z">
        <seg>分发插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Distribution plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133843Z" creationid="huanghaohang" creationdate="20190127T133843Z">
        <seg>分发插件将以下以下任务添加到项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Ear Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142213Z" creationid="huanghaohang" creationdate="20181201T142213Z">
        <seg>Ear 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Ear plugin adds support for assembling web application EAR files. It adds a default EAR archive task. It doesn't require the Java plugin, but for projects that also use the Java plugin it disables the default JAR archive generation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T144955Z" creationid="huanghaohang" creationdate="20180415T144955Z">
        <seg>Ear 插件添加了对组装 Web 应用程序 EAR 文件的支持。它添加了一个默认的 EAR 归档任务。它不需要 Java 插件，但是对于也使用了 Java 插件的项目，它将禁用默认的 JAR 归档生成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Ear plugin adds the following dependencies to tasks added by the base plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145258Z" creationid="huanghaohang" creationdate="20180415T145258Z">
        <seg>Ear 插件向基础插件所加入的任务添加了以下的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Ear plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145116Z" creationid="huanghaohang" creationdate="20180415T145116Z">
        <seg>Ear 插件向项目添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Ear plugin adds two dependency configurations: &lt;c0&gt;deploy&lt;/c0&gt; and &lt;c1&gt;earlib&lt;/c1&gt;. All dependencies in the &lt;c2&gt;deploy&lt;/c2&gt; configuration are placed in the root of the EAR archive, and are &lt;s3&gt;&lt;e4&gt;not&lt;/e4&gt;&lt;/s3&gt; transitive. All dependencies in the &lt;c5&gt;earlib&lt;/c5&gt; configuration are placed in the 'lib' directory in the EAR archive and &lt;s6&gt;&lt;e7&gt;are&lt;/e7&gt;&lt;/s6&gt; transitive.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145840Z" creationid="huanghaohang" creationdate="20180415T145840Z">
        <seg>Ear 插件添加了两个依赖配置：&lt;c0&gt;deploy&lt;/c0&gt; 和 &lt;c1&gt;earlib&lt;/c1&gt;。所有在 &lt;c2&gt;deploy&lt;/c2&gt; 配置中的依赖都放在 EAR 存档的根目录中，并且是&lt;s3&gt;&lt;e4&gt;不具有&lt;/e4&gt;&lt;/s3&gt;传递性的。所有在 &lt;c5&gt;earlib&lt;/c5&gt; 配置中的依赖都放在 EAR 归档的 'lib' 目录中，并且是&lt;s6&gt;&lt;e7&gt;具有&lt;/e7&gt;&lt;/s6&gt;传递性的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070324Z" creationid="huanghaohang" creationdate="20190205T070324Z">
        <seg>Eclipse 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse plugin adds a number of tasks to your projects. The main tasks that you will use are the &lt;c0&gt;eclipse&lt;/c0&gt; and &lt;c1&gt;cleanEclipse&lt;/c1&gt; tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025739Z" creationid="huanghaohang" creationdate="20181210T025739Z">
        <seg>Eclipse插件向你的项目添加了许多任务。你将使用的主要任务是 &lt;c0&gt;eclipse&lt;/c0&gt; 和 &lt;c1&gt;cleanEclipse&lt;/c1&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse plugin adds the tasks shown below to a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025802Z" creationid="huanghaohang" creationdate="20181210T025802Z">
        <seg>Eclipse 插件向一个项目添加了如下所示的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse plugin allows you to customize the generated metadata files. The plugin provides a DSL for configuring model objects that model the Eclipse view of the project. These model objects are then merged with the existing Eclipse XML metadata to ultimately generate new metadata. The model objects provide lower level hooks for working with domain objects representing the file content before and after merging with the model configuration. They also provide a very low level hook for working directly with the raw XML for adjustment before it is persisted, for fine tuning and configuration that the Eclipse plugin does not model.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T062819Z" creationid="huanghaohang" creationdate="20181210T061909Z">
        <seg>Eclipse 插件能够让你自定义生成的元数据文件。该插件提供了一个 DSL，用于配置把项目的 Eclipse 视图模型化的模型对象。然后，这些模型对象与现有的 Eclipse XML 元数据合并，最终生成新的元数据。模型对象提供较低级别的钩子，用于处理表示与模型配置合并前后的文件内容的域对象。它们还提供了一个非常低级别的钩子，用于在持久化之前直接使用原始 XML 进行调整，以进行 Eclipse 插件不建模的微调和配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse plugin generates files that are used by the &lt;a0&gt;Eclipse IDE&lt;/a0&gt;, thus making it possible to import the project into Eclipse (&lt;s1&gt;File&lt;/s1&gt; - &lt;s2&gt;Import...&lt;/s2&gt; - &lt;s3&gt;Existing Projects into Workspace&lt;/s3&gt;). Both external dependencies (including associated source and javadoc files) and project dependencies are considered.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T024604Z" creationid="huanghaohang" creationdate="20181203T034035Z">
        <seg>Eclipse 插件生成 &lt;a0&gt;Eclipse IDE&lt;/a0&gt; 所使用的文件，从而让项目能够导入 Eclipse（&lt;s1&gt;File&lt;/s1&gt; - &lt;s2&gt;Import...&lt;/s2&gt; - &lt;s3&gt;Existing Projects into Workspace&lt;/s3&gt;）。它同时考虑到了外部依赖（包括关联的源代码和 javadoc 文件）及项目依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse plugin is open to customization and provides a standardized set of hooks for adding and removing content from the generated files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025631Z" creationid="huanghaohang" creationdate="20181210T025631Z">
        <seg>Eclipse 插件可以自定义，并提供了一套标准化的钩子，用于添加和删除生成的文件中的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Eclipse plugin provides objects modeling the sections of the Eclipse files that are generated by Gradle. The generation lifecycle is as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082220Z" creationid="huanghaohang" creationdate="20181210T082053Z">
        <seg>Eclipse 插件提供了一些对象，对由 Gradle 生成的 Eclipse 文件部分进行建模。生成的生命周期如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Favorites tab is place to store commonly-executed commands. These can be complex commands (anything that's legal to Gradle) and you can provide them with a display name. This is useful for creating, say, a custom build command that explicitly skips tests, documentation, and samples that you could call "fast build".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145213Z" creationid="huanghaohang" creationdate="20170911T144608Z">
        <seg>“收藏夹”选项卡用于存储常用的命令。这些命令可以是复杂的命令（只要它们符合Gradle命令），你可以给它们设置一个显示名称。这有助于创建一个自定义构建命令，来显式地跳过测试，文档和示例，你可以称之为“快速构建”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The FindBugs Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T065952Z" creationid="huanghaohang" creationdate="20190205T065952Z">
        <seg>FindBugs 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The FindBugs libraries to use</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142502Z" creationid="huanghaohang" creationdate="20180516T142502Z">
        <seg>要使用的 FindBugs 库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The FindBugs plugin adds the following dependencies to tasks defined by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142410Z" creationid="huanghaohang" creationdate="20180516T142410Z">
        <seg>FindBugs 插件向 Java 插件所定义的任务添加了以下依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The FindBugs plugin adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142449Z" creationid="huanghaohang" creationdate="20180516T142449Z">
        <seg>FindBugs 插件添加了下列的依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The FindBugs plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142251Z" creationid="huanghaohang" creationdate="20180516T142251Z">
        <seg>FindBugs 插件将以下任务添加到项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The FindBugs plugin performs quality checks on your project's Java source files using &lt;a0&gt;FindBugs&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142222Z" creationid="huanghaohang" creationdate="20180516T142222Z">
        <seg>FindBugs 插件使用 &lt;a0&gt;FindBugs&lt;/a0&gt; 对项目的 Java 源文件执行质量检查，并从这些检查中生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle &lt;c0&gt;cunit&lt;/c0&gt; plugin provides support for compiling and executing CUnit tests in your native-binary project. For each &lt;a1&gt;&lt;c2&gt;NativeExecutable&lt;/c2&gt;&lt;/a1&gt; and &lt;a3&gt;&lt;c4&gt;NativeLibrary&lt;/c4&gt;&lt;/a3&gt; defined in your project, Gradle will create a matching &lt;a5&gt;&lt;c6&gt;CUnitTestSuite&lt;/c6&gt;&lt;/a5&gt; component, named &lt;c7&gt;${component.name}Test&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031847Z" creationid="huanghaohang" creationdate="20190611T031847Z">
        <seg>Gradle &lt;c0&gt;cunit&lt;/c0&gt; 插件支持在本机二进制项目中编译和执行 CUnit 测试。对于项目中定义的每个 &lt;a1&gt;&lt;c2&gt;NativeExecutable&lt;/c2&gt;&lt;/a1&gt; 和 &lt;a3&gt;&lt;c4&gt;NativeLibrary&lt;/c4&gt;&lt;/a3&gt; ，Gradle 将创建一个匹配的 &lt;a5&gt;&lt;c6&gt;CUnitTestSuite&lt;/c6&gt;&lt;/a5&gt; 组件，名为 &lt;c7&gt;${component.name}Test&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle Build Init plugin can be used to bootstrap the process of creating a new Gradle build. It supports creating brand new projects of different types as well as converting existing builds (e.g. An Apache Maven build) to be Gradle builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T212924Z" creationid="95" creationdate="20190131T145832Z">
        <seg>Gradle 构建初始化插件可以用于引导创建一个新的 Gradle 构建的过程。它支持创建不同类型的全新项目，以及将现有的构建（如 Apache Maven 构建）转换成 Gradle 构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle DSL uses closures in many places. You can find out more about closures &lt;a0&gt;here&lt;/a0&gt;. When the last parameter of a method is a closure, you can place the closure after the method call:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141908Z" creationid="huanghaohang" creationdate="20170913T141728Z">
        <seg>Gradle DSL在许多地方都使用到了闭包。你可以&lt;a0&gt;在这里&lt;/a0&gt;查到关于闭包的资料。当方法的最后一个参数是闭包时，你可以把它放在在方法调用之后：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle Daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143326Z" creationid="huanghaohang" creationdate="20180516T143326Z">
        <seg>Gradle 守护进程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle Wrapper (henceforth referred to as the “wrapper”) is the preferred way of starting a Gradle build. The wrapper is a batch script on Windows, and a shell script for other operating systems. When you start a Gradle build via the wrapper, Gradle will be automatically downloaded and used to run the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T125357Z" creationid="huanghaohang" creationdate="20191207T133322Z">
        <seg>Gradle Wrapper（下称“包装器”）是启动 Gradle 构建的首选方法。包装器在 Windows 上是一个批处理脚本，而在其他操作系统上是个 shell 脚本。当你通过包装器启动 Gradle 构建时，将自动下载 Gradle 并用于运行构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle Wrapper allows you to execute Gradle builds on machines where Gradle is not installed. This is useful for example for some continuous integration servers. It is also useful for an open source project to keep the barrier low for building it. The wrapper is also very interesting for the enterprise. It is a zero administration approach for the client machines. It also enforces the usage of a particular Gradle version thus minimizing support issues.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T065536Z" creationid="95" creationdate="20170723T065536Z">
        <seg>Gradle 包装器允许您能够在没有安装Gradle的机器上执行Gradle构建。这对于一些持续集成服务器来说是很有用的。对于开源项目来说，它也是有用的，可以降低项目构建的障碍。包装器对于企业来说也同样友好。对于客户端机器来说，它是一种零管理方法。它还强制了指定的Gradle版本的使用，以最大限度地减少支持问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle announce allows to send custom announcements during a build. The following notification systems are supported:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085655Z" creationid="huanghaohang" creationdate="20190124T085655Z">
        <seg>Gradle 公告允许在构建期间发送自定义通知，它支持以下通知系统：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle application plugin extends the language plugins with common application related tasks. It allows running and bundling applications for the jvm.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233045Z" creationid="95" creationdate="20190130T231018Z">
        <seg>Gradle应用程序插件扩展了语言插件的一些常见应用程序相关的任务。它允许为jvm运行和捆绑应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle binaries.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114505Z" creationid="95" creationdate="20170723T114505Z">
        <seg>Gradle可执行文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle build language</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032755Z" creationid="huanghaohang" creationdate="20180131T032755Z">
        <seg>Gradle 构建语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle build that executes the comparison process. It may be the same project as either the “target” or “source” build or may be a completely separate project. It does not need to be the same Gradle version as the “source” or “target” builds. The host build must be run with Gradle 1.2 or newer.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T154424Z" creationid="huanghaohang" creationdate="20210508T154424Z">
        <seg>执行比较过程的 Gradle 构建。它可能与“目标”或“源”构建相同的项目，也可能是一个完全独立的项目。它不需要与“源”或“目标”构建相同的 Gradle 版本。主机构建必须运行在 Gradle 1.2 或更高的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle cache does not allow the local cache to hide problems and creating mysterious and difficult to debug behavior that has been a challenge with many build tools. This new behavior is implemented in a bandwidth and storage efficient way. In doing so, Gradle enables reliable and reproducible enterprise builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T042725Z" creationid="huanghaohang" creationdate="20190605T042725Z">
        <seg>Gradle 缓存不允许本地缓存隐藏问题以及创建神秘且难以调试的行为，这些行为是许多构建工具所面临的挑战。这一新行为通过带宽和存储的有效途径实现。在这个过程中，Gradle 支持可靠且可复制的企业构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle dependency cache consists of 2 key types of storage:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041405Z" creationid="huanghaohang" creationdate="20190605T041405Z">
        <seg>Gradle 依赖缓存由两种关键类型的存储组成：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle dependency cache uses file-based locking to ensure that it can safely be used by multiple Gradle processes concurrently. The lock is held whenever the binary meta-data store is being read or written, but is released for slow operations such as downloading remote artifacts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T145203Z" creationid="huanghaohang" creationdate="20190605T144845Z">
        <seg>Gradle 依赖缓存使用基于文件的锁，以确保可安全地由多个 Gradle 进程并行使用。每当正在读取或写入二进制元数据存储时，就会持有锁，但是会对诸如下载远程工件之类的慢操作时会释放锁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle distribution comes packaged as a ZIP. The full distribution contains:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114456Z" creationid="95" creationdate="20170723T114456Z">
        <seg>Gradle的发行包是一个ZIP文件。完整的发行包包含以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle support for building native binaries is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011707Z" creationid="huanghaohang" creationdate="20190609T011707Z">
        <seg>Gradle 对构建本机二进制文件的支持目前为 &lt;a0&gt;试验性阶段&lt;/a0&gt;。请注意，DSL 和其他配置可能在以后的 Gradle 版本中有所变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle wrapper</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T063605Z" creationid="95" creationdate="20170723T063605Z">
        <seg>Gradle 包装器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle wrapper plugin allows the generation of Gradle wrapper files by adding a &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt; task, that generates all files needed to run the build using the Gradle Wrapper. Details about the Gradle Wrapper can be found in the according chapter &lt;a2&gt;Chapter 61, &lt;i3&gt;The Gradle Wrapper&lt;/i3&gt;&lt;/a2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155739Z" creationid="95" creationdate="20190201T155739Z">
        <seg>Gradle包装器程序插件允许通过添加 &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt; 任务来生成Gradle包装器文件，该任务生成使用Gradle Wrapper来运行构建所需的所有文件。 有关Gradle Wrapper的详细信息，请参阅对应的章节《&lt;a2&gt;第六十一章，&lt;i3&gt;Gradle Wrapper&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133143Z" creationid="huanghaohang" creationdate="20180712T133143Z">
        <seg>Groovy 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy library doesn't necessarily have to come from a remote repository. It could also come from a local &lt;c0&gt;lib&lt;/c0&gt; directory, perhaps checked in to source control:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123301Z" creationid="huanghaohang" creationdate="20180406T122905Z">
        <seg>Groovy 库不一定得从远程仓库中获取，它也可能获取自检入代码控制的本地 &lt;c0&gt;lib&lt;/c0&gt; 目录：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin adds a &lt;a0&gt;&lt;c1&gt;GroovyCompile&lt;/c1&gt;&lt;/a0&gt; task for each source set in the project. The task type extends the &lt;c2&gt;JavaCompile&lt;/c2&gt; task (see &lt;a3&gt;Section 23.11, “CompileJava”&lt;/a3&gt;). The &lt;c4&gt;GroovyCompile&lt;/c4&gt; task supports most configuration options of the official Groovy compiler.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003640Z" creationid="huanghaohang" creationdate="20180407T003640Z">
        <seg>Groovy 插件向项目中的每一个源集添加了一个 &lt;a0&gt;&lt;c1&gt;GroovyCompile&lt;/c1&gt;&lt;/a0&gt; 任务。该任务类型扩展了 &lt;c2&gt;JavaCompile&lt;/c2&gt; 任务（请参阅《&lt;a3&gt;第 23.11 节，“CompileJava”&lt;/a3&gt;》）。该 &lt;c4&gt;GroovyCompile&lt;/c4&gt; 任务支持官方 Groovy 编译器的大多数配置选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin adds the following convention properties to each source set in the project. You can use these properties in your build script as though they were properties of the source set object (see &lt;a0&gt;Section 21.3, “Conventions”&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T133255Z" creationid="huanghaohang" creationdate="20180406T133026Z">
        <seg>Groovy 插件向项目中的每个源集添加了以下，约定属性。你可以在构建脚本中把它们当成是源集对象的属性一样去使用（请参阅《&lt;a0&gt;第 21.3 节，“公约”&lt;/a0&gt;）》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin adds the following dependencies to tasks added by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121026Z" creationid="huanghaohang" creationdate="20180406T121026Z">
        <seg>Groovy 的插件向 Java 插件所加入的任务添加了以下依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120730Z" creationid="huanghaohang" creationdate="20180406T120730Z">
        <seg>Groovy 的插件向项目中添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin also modifies some source set properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T235047Z" creationid="huanghaohang" creationdate="20180406T235047Z">
        <seg>Groovy 的插件还修改了一些源集的属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin assumes the project layout shown in &lt;a0&gt;Table 24.3, “Groovy plugin - project layout”&lt;/a0&gt;. All the Groovy source directories can contain Groovy &lt;s1&gt;&lt;e2&gt;and&lt;/e2&gt;&lt;/s1&gt; Java code. The Java source directories may only contain Java source code. &lt;s3&gt;[&lt;a4&gt;11&lt;/a4&gt;]&lt;/s3&gt; None of these directories need to exist or have anything in them; the Groovy plugin will simply compile whatever it finds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121647Z" creationid="huanghaohang" creationdate="20180406T121647Z">
        <seg>Groovy 插件会假定项目的布局如&lt;a0&gt;表 24.3，“Groovy 插件——项目布局”&lt;/a0&gt;所示。所有的 Groovy 源码目录都可以包含 Groovy &lt;s1&gt;&lt;e2&gt;和&lt;/e2&gt;&lt;/s1&gt; Java 代码。 Java 源码目录可能只包含 Java 源代码。 &lt;s3&gt;[&lt;a4&gt;11&lt;/a4&gt;]&lt;/s3&gt;这些目录都不需要一定存在或者包含有内容。Groovy 插件只会进行编译，而不管它发现什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin does not add any convention properties to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132907Z" creationid="huanghaohang" creationdate="20180406T132907Z">
        <seg>Groovy 插件不会向项目添加任何的约定属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy plugin extends the Java plugin to add support for Groovy projects. It can deal with Groovy code, mixed Groovy and Java code, and even pure Java code (although we don't necessarily recommend to use it for the latter). The plugin supports &lt;s0&gt;&lt;e1&gt;joint compilation&lt;/e1&gt;&lt;/s0&gt;, which allows to freely mix and match Groovy and Java code, with dependencies in both directions. For example, a Groovy class can extend a Java class that in turn extends a Groovy class. This makes it possible to use the best language for the job, and to rewrite any class in the other language if needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120650Z" creationid="huanghaohang" creationdate="20180406T120650Z">
        <seg>Groovy 插件扩展了 Java 插件，以添加对 Groovy 项目的支持。它可以处理 Groovy 代码，以及混合的 Groovy 和 Java 代码，甚至纯 Java 代码（尽管我们不一定建议将其用于后者）。该插件支持&lt;s0&gt;&lt;e1&gt;联合编译&lt;/e1&gt;&lt;/s0&gt;，它允许自由地混合和匹配 Groovy 和 Java 代码以及各自的依赖。例如，一个 Groovy 类可以扩展一个 Java 类，而这个 Java 类也可以扩展自一个 Groovy 类。这样一来，我们就能够在项目中使用最适合的语言，并在需要时用其他语言重写其中的任何类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy source files of this source set. Contains all &lt;c0&gt;.groovy&lt;/c0&gt; and &lt;c1&gt;.java&lt;/c1&gt; files found in the Groovy source directories, and excludes all other types of files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T133452Z" creationid="huanghaohang" creationdate="20180406T133322Z">
        <seg>这个源码集的 Groovy 源文件。包含全部在 Groovy 源目录中找到的 &lt;c0&gt;.groovy &lt;/c0&gt; 和 &lt;c1&gt;.java&lt;/c1&gt; 文件，并排除所有其他类型的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The IDEA Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070339Z" creationid="huanghaohang" creationdate="20190205T070339Z">
        <seg>IDEA 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The IDEA plugin adds a number of tasks to your project. The main tasks that you will use are the &lt;c0&gt;idea&lt;/c0&gt; and &lt;c1&gt;cleanIdea&lt;/c1&gt; tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031144Z" creationid="huanghaohang" creationdate="20181212T031144Z">
        <seg>IDEA 插件向的项目添加了许多任务。你将使用的主要任务是 &lt;c0&gt;idea&lt;/c0&gt; 和 &lt;c1&gt;cleanIdea&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The IDEA plugin adds the tasks shown below to a project. Notice that &lt;c0&gt;clean&lt;/c0&gt; does not depend on &lt;c1&gt;cleanIdeaWorkspace&lt;/c1&gt;. It's because workspace contains a lot of user specific temporary data and typically it is not desirable to manipulate it outside IDEA.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061015Z" creationid="huanghaohang" creationdate="20181212T054457Z">
        <seg>IDEA 插件向一个项目添加如下所示的任务。请注意，&lt;c0&gt;clean&lt;/c0&gt; 并不依赖于 &lt;c1&gt;cleanIdeaWorkspace&lt;/c1&gt;。这是因为工作空间包含许多用户特定的临时数据，并且通常不希望在 IDEA 之外操作它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The IDEA plugin generates files that are used by &lt;a0&gt;IntelliJ IDEA&lt;/a0&gt;, thus making it possible to open the project from IDEA (&lt;s1&gt;File&lt;/s1&gt; - &lt;s2&gt;Open Project&lt;/s2&gt;). Both external dependencies (including associated source and javadoc files) and project dependencies are considered.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T030817Z" creationid="huanghaohang" creationdate="20181212T030650Z">
        <seg>IDEA 插件生成 &lt;a0&gt;IntelliJ IDEA&lt;/a0&gt; 使用的文件，从而可以让项目从 IDEA 中打开（&lt;s1&gt;File&lt;/s1&gt; - &lt;s2&gt;Open Project&lt;/s2&gt;）。它同时考虑到了外部依赖（包括关联的源代码和 javadoc 文件）及项目依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JDepend Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070022Z" creationid="huanghaohang" creationdate="20190205T070022Z">
        <seg>JDepend 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JDepend libraries to use</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142759Z" creationid="huanghaohang" creationdate="20180516T142759Z">
        <seg>要使用的 JDepend 库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JDepend plugin adds the following dependencies to tasks defined by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142723Z" creationid="huanghaohang" creationdate="20180516T142723Z">
        <seg>JDepend 插件向 Java 插件所定义的任务添加了以下依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JDepend plugin adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142746Z" creationid="huanghaohang" creationdate="20180516T142746Z">
        <seg>JDepend 插件添加了下列的依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JDepend plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142638Z" creationid="huanghaohang" creationdate="20180516T142638Z">
        <seg>JDepend 插件将以下任务添加到项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JDepend plugin performs quality checks on your project's source files using &lt;a0&gt;JDepend&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142617Z" creationid="huanghaohang" creationdate="20180516T142617Z">
        <seg>JDepend 插件使用 &lt;a0&gt;JDepend&lt;/a0&gt; 对项目的源文件执行质量检查，并从这些检查中生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo Ant library used for running the &lt;c0&gt;JacocoReport&lt;/c0&gt; and &lt;c1&gt;JacocoMerge&lt;/c1&gt; tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094020Z" creationid="huanghaohang" creationdate="20180715T094020Z">
        <seg>用于运行 &lt;c0&gt;JacocoReport&lt;/c0&gt; 和 &lt;c1&gt;JacocoMerge&lt;/c1&gt; 任务的 JaCoCo Ant 库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070039Z" creationid="huanghaohang" creationdate="20190205T070039Z">
        <seg>JaCoCo 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo agent library used for instrumenting the code under test.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094045Z" creationid="huanghaohang" creationdate="20180715T094045Z">
        <seg>用于检测位于 test 下的代码的 JaCoCo 客户端库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo plugin adds a &lt;a0&gt;&lt;c1&gt;JacocoTaskExtension&lt;/c1&gt;&lt;/a0&gt; extension to all tasks of type &lt;a2&gt;&lt;c3&gt;Test&lt;/c3&gt;&lt;/a2&gt;. This extension allows the configuration of the JaCoCo specific properties of the test task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093217Z" creationid="huanghaohang" creationdate="20180715T093217Z">
        <seg>JaCoCo 插件添加了一个 &lt;a0&gt;&lt;c1&gt;JacocoTaskExtension&lt;/c1&gt;&lt;/a0&gt; 扩展到所有 &lt;a2&gt;&lt;c3&gt;Test&lt;/c3&gt;&lt;/a2&gt; 类型的任务中。这一扩展允许配置测试任务中的一些特定的 JaCoCo 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo plugin adds a project extension named &lt;c0&gt;jacoco&lt;/c0&gt; of type &lt;a1&gt;&lt;c2&gt;JacocoPluginExtension&lt;/c2&gt;&lt;/a1&gt;, which allows configuring defaults for JaCoCo usage in your build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135233Z" creationid="huanghaohang" creationdate="20180712T135233Z">
        <seg>JaCoCo 插件添加一个类型为 &lt;a1&gt;&lt;c2&gt;JacocoPluginExtension&lt;/c2&gt;&lt;/a1&gt;，名为&lt;c0&gt;jacoco&lt;/c0&gt; 的 project 扩展，这个扩展允许在你的构建中配置 JaCoCo 所使用的默认值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo plugin adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093949Z" creationid="huanghaohang" creationdate="20180715T093949Z">
        <seg>JaCoCo 插件添加了以下依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133619Z" creationid="huanghaohang" creationdate="20180712T133619Z">
        <seg>JaCoCo 目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The JaCoCo plugin provides code coverage metrics for Java code via integration with &lt;a0&gt;JaCoCo&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133651Z" creationid="huanghaohang" creationdate="20180712T133651Z">
        <seg>JaCoCo 插件通过集成 &lt;a0&gt;JaCoCo&lt;/a0&gt; 为 Java 代码提供了代码覆盖率指标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java Library Distribution Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070522Z" creationid="huanghaohang" creationdate="20190205T070522Z">
        <seg>Java 库发布插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130003Z" creationid="huanghaohang" creationdate="20180517T130003Z">
        <seg>Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java library distribution plugin adds support for building a distribution ZIP for a Java library. The distribution contains the JAR file for the library and its dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141601Z" creationid="95" creationdate="20190131T141601Z">
        <seg>Java 库分布插件为 Java 库添加了构建分发 ZIP 的支持。该分发包含了库的JAR文件及其依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java library distribution plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143805Z" creationid="95" creationdate="20190131T143805Z">
        <seg>Java 库分发插件向项目添加以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java library distribution plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141414Z" creationid="95" creationdate="20190131T141414Z">
        <seg>Java库分发插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124902Z" creationid="huanghaohang" creationdate="20171014T124902Z">
        <seg>Java 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds Java compilation, testing and bundling capabilities to a project. It serves as the basis for many of the other Gradle plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T153409Z" creationid="huanghaohang" creationdate="20180218T153409Z">
        <seg>Java 插件向项目添加 Java 编译、测试和捆绑的功能。它是其他许多 Gradle 插件的基础。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds a &lt;a0&gt;&lt;c1&gt;JavaCompile&lt;/c1&gt;&lt;/a0&gt; instance for each source set in the project. Some of the most common configuration options are shown below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180327T101646Z" creationid="haohang" creationdate="20180326T101433Z">
        <seg>Java 插件为项目里的每一个源集添加一个 &lt;a0&gt;&lt;c1&gt;JavaCompile&lt;/c1&gt;&lt;/a0&gt; 实例。一些最常见的配置选项如下所示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds a number of convention properties to the project, shown below. You can use these properties in your build script as though they were properties of the project object (see &lt;a0&gt;Section 21.3, “Conventions”&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054637Z" creationid="haohang" creationdate="20180313T054637Z">
        <seg>Java 插件向项目添加了许多约定属性，如下表所示。你可以在构建脚本中使用这些属性，就像它们是 project 对象里的属性一样（见《&lt;a0&gt;第 21.3 节，“约定”&lt;/a0&gt;》）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds a number of default values for the archive tasks. You can use the archive tasks without using the Java plugin, if you like. You will need to provide values for some additional properties.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135850Z" creationid="huanghaohang" creationdate="20171126T135850Z">
        <seg>Java 插件为归档任务添加了一些默认值。如果你愿意，使用归档任务时你也可以不使用 Java 插件。你将需要提供一些附加属性的值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds a number of dependency configurations to your project, as shown below. It assigns those configurations to tasks such as &lt;c0&gt;compileJava&lt;/c0&gt; and &lt;c1&gt;test&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053708Z" creationid="haohang" creationdate="20180313T053708Z">
        <seg>Java 插件向项目添加了一些依赖配置，如下表所示。它将这些配置指定一些任务，如 &lt;c0&gt;compileJava&lt;/c0&gt; 和 &lt;c1&gt;test&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds a number of properties to your project. These properties have default values which are usually sufficient to get started. It's easy to change these values if they don't suit. Let's look at this for our sample. Here we will specify the version number for our Java project, along with the Java version our source is written in. We also add some attributes to the JAR manifest.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132650Z" creationid="95" creationdate="20170730T130552Z">
        <seg>Java插件向你的项目添加了许多属性。这些属性都具有默认值，足以让项目快速开始。如果不符合要求，修改这些值也很简单。让我们在例子中来看。这里，我们会指定我们的Java项目的版本号，以及我们的源码所使用Java版本。我们也会向JAR包的清单文件中添加一些属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds a number of tasks to your project, as shown below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061302Z" creationid="haohang" creationdate="20180312T061302Z">
        <seg>Java 插件向你的项目添加了大量的任务，如下所示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds per default a jar to your project libraries which contains all the classes. In this example we create an &lt;s0&gt;&lt;e1&gt;additional&lt;/e1&gt;&lt;/s0&gt; library containing only the interfaces of the &lt;c2&gt;api&lt;/c2&gt; project. We assign this library to a new &lt;s3&gt;&lt;e4&gt;dependency configuration&lt;/e4&gt;&lt;/s3&gt;. For the person service we declare that the project should be compiled only against the &lt;c5&gt;api&lt;/c5&gt; interfaces but tested with all classes from &lt;c6&gt;api&lt;/c6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142356Z" creationid="huanghaohang" creationdate="20190621T142356Z">
        <seg>Java 插件将每个默认的 jar 添加到包含所有类的项目库中。在这个例子中，我们创建了一个&lt;s0&gt;&lt;e1&gt;额外的&lt;/e1&gt;&lt;/s0&gt;库，它只包含 &lt;c2&gt;api&lt;/c2&gt; 项目的接口。 我们把这个库指定给一个新的&lt;s3&gt;&lt;e4&gt;依赖配置&lt;/e4&gt;&lt;/s3&gt;。对于 person service，我们声明这个项目应该只针对 &lt;c5&gt;api&lt;/c5&gt; 接口进行编译，但使用 &lt;c6&gt;api&lt;/c6&gt; 中的所有类进行测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds quite a few tasks to your project. However, there are only a handful of tasks that you will need to use to build the project. The most commonly used task is the &lt;c0&gt;build&lt;/c0&gt; task, which does a full build of the project. When you run &lt;s1&gt;&lt;c2&gt;gradle build&lt;/c2&gt;&lt;/s1&gt;, Gradle will compile and test your code, and create a JAR file containing your main classes and resources:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014234Z" creationid="95" creationdate="20170730T013856Z">
        <seg>Java插件向你的项目中添加了不少的任务。但是，在构建项目时只有其中的一部分任务才使用到。最常用的是这个 &lt;c0&gt;build&lt;/c0&gt; 任务，它会对项目做一次完整的构建。当运行 &lt;s1&gt;&lt;c2&gt;gradle build&lt;/c2&gt;&lt;/s1&gt;时，Gradle会编译并执行测试，然后将你的主要类文件和资源文件打成JAR包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin adds the concept of &lt;s0&gt;&lt;e1&gt;source sets&lt;/e1&gt;&lt;/s0&gt; (see &lt;a2&gt;&lt;c3&gt;SourceSet&lt;/c3&gt;&lt;/a2&gt;) to describe the aspects of a set of source, one aspect being where the class files should be written to when it is compiled. The Java plugin maps the &lt;c4&gt;destinationDir&lt;/c4&gt; property of the &lt;c5&gt;compileJava&lt;/c5&gt; task to this aspect of the source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024514Z" creationid="huanghaohang" creationdate="20180131T022834Z">
        <seg>Java 插件增加了&lt;s0&gt;&lt;e1&gt;源文件集&lt;/e1&gt;&lt;/s0&gt;（见&lt;a2&gt;&lt;c3&gt;SourceSet&lt;/c3&gt;&lt;/a2&gt;）的概念来描述一组源文件的各个方面，其中一个方面是在编译的时候写入类文件的地方。Java 插件将 &lt;c5&gt;compileJava&lt;/c5&gt; 任务的 &lt;c4&gt;destinationDir&lt;/c4&gt; 属性映射到源文件集的这一方面。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin also adds a number of tasks which assemble the classes for the source set, as shown in &lt;a0&gt;Table 23.2, “Java plugin - source set tasks”&lt;/a0&gt;. For example, for a source set called &lt;c1&gt;intTest&lt;/c1&gt;, you can run &lt;s2&gt;&lt;c3&gt;gradle intTestClasses&lt;/c3&gt;&lt;/s2&gt; to compile the int test classes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095223Z" creationid="haohang" creationdate="20180326T095223Z">
        <seg>Java 插件还添加了大量的任务用于组装源集的类，如&lt;a0&gt;表 23.2，“Java 插件——源集任务”&lt;/a0&gt;所示。例如，对于一个名为 &lt;c1&gt;intTest&lt;/c1&gt; 的源集，你可以通过运行&lt;s2&gt;&lt;c3&gt;gradle intTestClasses&lt;/c3&gt;&lt;/s2&gt;来编译 int 测试类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin also adds a number of tasks which form a lifecycle for the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T033936Z" creationid="haohang" creationdate="20180313T033936Z">
        <seg>Java 插件还增加了大量构成项目生命周期的任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin assumes the project layout shown below. None of these directories need exist or have anything in them. The Java plugin will compile whatever it finds, and handles anything which is missing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052926Z" creationid="haohang" creationdate="20180313T052632Z">
        <seg>Java 插件会假定如下所示的项目布局。这些目录都不需要一定的存在在，或是里面有什么内容。 Java插件不管发现什么都将会进行编译，并处理缺失的任何内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin defines a number of standard configurations. These configurations represent the classpaths that the Java plugin uses. Some are listed below, and you can find more details in &lt;a0&gt;Table 23.5, “Java plugin - dependency configurations”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T032544Z" creationid="huanghaohang" creationdate="20170908T032544Z">
        <seg>Java插件定义了许多标准配置。这些配置代表了Java插件使用的类路径。有些列在下面，你也可以在&lt;a0&gt;表23.5，“Java插件 - 依赖配置”&lt;/a0&gt;了解到更多详细内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin defines two standard source sets, called &lt;c0&gt;main&lt;/c0&gt; and &lt;c1&gt;test&lt;/c1&gt;. The &lt;c2&gt;main&lt;/c2&gt; source set contains your production source code, which is compiled and assembled into a JAR file. The &lt;c3&gt;test&lt;/c3&gt; source set contains your unit test source code, which is compiled and executed using JUnit or TestNG.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061246Z" creationid="haohang" creationdate="20180312T061246Z">
        <seg>Java 插件定义了两个标准源集，分别是 &lt;c0&gt;main&lt;/c0&gt; 和 &lt;c1&gt;test&lt;/c1&gt;。&lt;c2&gt;main&lt;/c2&gt; 源集包含生产源代码，将其编译并组装到 JAR 文件中。&lt;c3&gt;test&lt;/c3&gt; 源集则包含了单元测试源代码，它们将被编译并使用 JUnit 或 TestNG 来执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin has added a &lt;c0&gt;compileJava&lt;/c0&gt; task and a &lt;c1&gt;processResources&lt;/c1&gt; task to the project and configured the &lt;c2&gt;destinationDir&lt;/c2&gt; property of both of these tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100521Z" creationid="huanghaohang" creationdate="20180130T100434Z">
        <seg>Java 插件已经向 project 添加了 &lt;c0&gt;compileJava&lt;/c0&gt; 和 &lt;c1&gt;processResources&lt;/c1&gt; 任务，并且配置了这两个任务的 &lt;c2&gt;destinationDir&lt;/c2&gt; 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin introduces the concept of a &lt;e0&gt;source set&lt;/e0&gt;. A source set is simply a group of source files which are compiled and executed together. These source files may include Java source files and resource files. Other plugins add the ability to include Groovy and Scala source files in a source set. A source set has an associated compile classpath, and runtime classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T060641Z" creationid="haohang" creationdate="20180312T060641Z">
        <seg>Java 插件引入了一个&lt;e0&gt;源集&lt;/e0&gt;的概念。源集只是一组源文件，它们被一起编译和执行。这些源文件可能包含 Java 源文件和资源文件，有些其他插件可以将 Groovy 和 Scala 源文件包含在源集中。一个源集有一个相关联的编译类路径和运行时类路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin is convention based. This means that the plugin defines default values for many aspects of the project, such as where the Java source files are located. If you follow the convention in your project, you generally don't need to do much in your build script to get a useful build. Gradle allows you to customize your project if you don't want to or cannot follow the convention in some way. In fact, because support for Java projects is implemented as a plugin, you don't have to use the plugin at all to build a Java project, if you don't want to.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012100Z" creationid="95" creationdate="20170730T012100Z">
        <seg>这个Java插件是基于约定的。这也意味着它为项目的很多个方面都定义了一些默认值，比如Java源文件的位置。如果你遵循这些约定，那么你就不用在构建脚本中再去做太多的事情。如果你不想或无法遵循约定，Gradle也允许你进行自定义。实际上，由于对Java项目的支持是以插件的形式来实现的，你甚至可以完全不用这个构建来构建Java项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java plugin uses the &lt;a0&gt;&lt;c1&gt;Copy&lt;/c1&gt;&lt;/a0&gt; task for resource handling. It adds an instance for each source set in the project. You can find out more about the copy task in &lt;a2&gt;Section 16.6, “Copying files”&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101143Z" creationid="haohang" creationdate="20180326T101143Z">
        <seg>Java 插件使用 &lt;a0&gt;&lt;c1&gt;Copy&lt;/c1&gt;&lt;/a0&gt; 任务进行资源的处理，它为项目中的每个源集添加一个实例。你可以在《&lt;a2&gt;第 16.6 节，“复制文件”&lt;/a2&gt;》找到更多关于复制任务的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Java source files of this source set. Contains only &lt;c0&gt;.java&lt;/c0&gt; files found in the Java source directories, and excludes all other files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100347Z" creationid="haohang" creationdate="20180320T100347Z">
        <seg>此源集的 Java 源文件。仅包含 Java 源目录中找到的 &lt;c0&gt;.java&lt;/c0&gt; 文件，并排除所有其他文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Jetty Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142236Z" creationid="huanghaohang" creationdate="20181201T142236Z">
        <seg>Jetty 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Jetty plugin defines the following convention properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144533Z" creationid="huanghaohang" creationdate="20180416T144533Z">
        <seg>Jetty 插件定义了以下公约属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Jetty plugin defines the following tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144005Z" creationid="huanghaohang" creationdate="20180416T144005Z">
        <seg>Jetty 插件定义了以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Jetty plugin does not define any dependency configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144506Z" creationid="huanghaohang" creationdate="20180416T144506Z">
        <seg>Jetty 插件不定义任何依赖配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Jetty plugin extends the War plugin to add tasks which allow you to deploy your web application to a Jetty web container embedded in the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143930Z" creationid="huanghaohang" creationdate="20180416T143930Z">
        <seg>Jetty 插件扩展自 War 插件，并添加了一些任务，这些任务可以让你在构建时部署你的 web 应用程序到一个嵌入的 Jetty web 容器中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Jetty plugin uses the same layout as the War plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144450Z" creationid="huanghaohang" creationdate="20180416T144450Z">
        <seg>Jetty 插件使用 和 War 插件相同的布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven Central repository can be down or has a very long response time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151659Z" creationid="huanghaohang" creationdate="20190605T151659Z">
        <seg>Maven 中央仓库可能会下线，或者响应时间很长。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092001Z" creationid="huanghaohang" creationdate="20190608T092001Z">
        <seg>Maven 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven conversion implementation was inspired by the &lt;a0&gt;maven2gradle tool&lt;/a0&gt; that was originally developed by Gradle community members.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T142413Z" creationid="95" creationdate="20190201T142413Z">
        <seg>Maven 转换实现受 Gradle 社区成员最初开发的&lt;a0&gt;maven2gradle tool&lt;/a0&gt;启发。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven dependency management has the notion of classifiers. &lt;s0&gt;[&lt;a1&gt;15&lt;/a1&gt;]&lt;/s0&gt; Gradle supports this. To retrieve classified dependencies from a Maven repository you can write:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T045237Z" creationid="huanghaohang" creationdate="20190531T045237Z">
        <seg>Maven 依赖管理有分类器的概念， &lt;s0&gt;[&lt;a1&gt;15&lt;/a1&gt;]&lt;/s0&gt; Gradle 支持这一点。如果你想从 Maven 仓库中获取分类的依赖，可以这样写：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven plugin adds an &lt;c0&gt;install&lt;/c0&gt; task to your project. This task depends on all the archives task of the &lt;c1&gt;archives&lt;/c1&gt; configuration. It installs those archives to your local Maven repository. If the default location for the local repository is redefined in a Maven &lt;c2&gt;settings.xml&lt;/c2&gt;, this is considered by this task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094506Z" creationid="huanghaohang" creationdate="20190607T094506Z">
        <seg>Maven 插件向项目添加 &lt;c0&gt;install&lt;/c0&gt; 任务。这个任务依赖于 &lt;c1&gt;archives&lt;/c1&gt; 配置的所有归档任务。它将这些归档安装到本地 Maven 仓库中。Maven &lt;c2&gt;settings.xml&lt;/c2&gt; 中是否重新定义了本地仓库的默认位置，该任务也会考虑到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven plugin adds support for deploying artifacts to Maven repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091146Z" creationid="huanghaohang" creationdate="20190606T091146Z">
        <seg>Maven 插件添加了将项目部署到 Maven 仓库的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven plugin configures the default mapping between the Gradle configurations added by the Java and War plugin and the Maven scopes. Most of the time you don't need to touch this and you can safely skip this section. The mapping works like the following. You can map a configuration to one and only one scope. Different configurations can be mapped to one or different scopes. One can assign also a priority to a particular configuration-to-scope mapping. Have a look at &lt;a0&gt;&lt;c1&gt;Conf2ScopeMappingContainer&lt;/c1&gt;&lt;/a0&gt; to learn more. To access the mapping configuration you can say:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T090849Z" creationid="huanghaohang" creationdate="20190608T085210Z">
        <seg>Maven 插件配置了由 Java 和 War 插件添加的 Gradle 配置与 Maven 作用域之间的默认映射。大多数时候，你不需要去接触它，并且你可以安全跳过本节内容。映射过程如下。你可以把一个配置只映射到一个作用域上，也可以将不同的配置映射到一个或多个作用域上。另外，还可以对特定的配置与作用域的映射指定优先级。你可以参考 &lt;a0&gt;&lt;c1&gt;Conf2ScopeMappingContainer&lt;/c1&gt;&lt;/a0&gt; 来了解更多信息。要访问映射配置，你可以：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven plugin defines the following convention properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060420Z" creationid="huanghaohang" creationdate="20190607T060420Z">
        <seg>Maven 插件定义了下列约定属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven plugin defines the following tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091224Z" creationid="huanghaohang" creationdate="20190606T091224Z">
        <seg>Maven 插件定义了以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Maven plugin does not define any dependency configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060408Z" creationid="huanghaohang" creationdate="20190607T060408Z">
        <seg>Maven 插件没有定义任何依赖配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The OSGi Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070257Z" creationid="huanghaohang" creationdate="20190205T070257Z">
        <seg>OSGi 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The OSGi plugin adds the following convention object: &lt;a0&gt;&lt;c1&gt;OsgiPluginConvention&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030021Z" creationid="huanghaohang" creationdate="20181203T030021Z">
        <seg>OSGi 插件添加了下列公约对象：&lt;a0&gt; &lt;c1&gt;OsgiPluginConvention&lt;/c1&gt; &lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The OSGi plugin adds the following methods. For more details, see the API documentation of the convention object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030147Z" creationid="huanghaohang" creationdate="20181203T030147Z">
        <seg>OSGi 插件添加了以下方法。有关更多详细信息，请参见公约对象的 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The OSGi plugin does not add any convention properties to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030052Z" creationid="huanghaohang" creationdate="20181203T030052Z">
        <seg>OSGi 插件没有向项目添加任何的公约属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The OSGi plugin makes heavy use of Peter Kriens &lt;a0&gt;BND tool&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025854Z" creationid="huanghaohang" creationdate="20181203T025854Z">
        <seg>OSGi 插件大量使用了 Peter Kriens &lt;a0&gt;BND tool&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The OSGi plugin provides a factory method to create an &lt;a0&gt;&lt;c1&gt;OsgiManifest&lt;/c1&gt;&lt;/a0&gt; object. &lt;c2&gt;OsgiManifest&lt;/c2&gt; extends &lt;a3&gt;&lt;c4&gt;Manifest&lt;/c4&gt;&lt;/a3&gt;. To learn more about generic manifest handling, see &lt;a5&gt;Section 23.13.1, “Manifest”&lt;/a5&gt;. If the Java plugins is applied, the OSGi plugin replaces the manifest object of the default jar with an &lt;c6&gt;OsgiManifest&lt;/c6&gt; object. The replaced manifest is merged into the new one.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025817Z" creationid="huanghaohang" creationdate="20181203T025817Z">
        <seg>OSGi 插件提供了一种工厂方法来创建 &lt;a0&gt;&lt;c1&gt;OsgiManifest&lt;/c1&gt;&lt;/a0&gt; 对象。&lt;c2&gt;OsgiManifest&lt;/c2&gt;扩展自&lt;a3&gt;&lt;c4&gt;Manifest&lt;/c4&gt;&lt;/a3&gt;。要了解有关通用清单处理的更多信息，请参阅《&lt;a5&gt;第23.13.1节，“清单”&lt;/a5&gt;》。如果应用了 Java 插件，则 OSGi 插件会把默认 jar 的 manifest 对象替换为一个 &lt;c6&gt;OsgiManifest&lt;/c6&gt; 对象。替换后的清单会被合并到新的清单中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The PMD Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070031Z" creationid="huanghaohang" creationdate="20190205T070031Z">
        <seg>PMD 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The PMD libraries to use</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143242Z" creationid="huanghaohang" creationdate="20180516T143242Z">
        <seg>要使用的 PMD 库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The PMD plugin adds the following dependencies to tasks defined by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143214Z" creationid="huanghaohang" creationdate="20180516T143214Z">
        <seg>PMD 插件向 Java 插件所定义的任务添加了以下的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The PMD plugin adds the following dependency configurations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143234Z" creationid="huanghaohang" creationdate="20180516T143234Z">
        <seg>PMD 插件添加了下列的依赖配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The PMD plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143140Z" creationid="huanghaohang" creationdate="20180516T143140Z">
        <seg>PMD 插件将以下任务添加到项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The PMD plugin performs quality checks on your project's Java source files using &lt;a0&gt;PMD&lt;/a0&gt; and generates reports from these checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143124Z" creationid="huanghaohang" creationdate="20180516T143124Z">
        <seg>PMD 插件使用 &lt;a0&gt;PMD&lt;/a0&gt; 对项目的 Java 源文件执行质量检查，并从这些检查中生成报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The POM files of many projects have wrong information (as one example, the POM of &lt;c0&gt;commons-httpclient-3.0&lt;/c0&gt; declares JUnit as a runtime dependency).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151749Z" creationid="huanghaohang" creationdate="20190605T151749Z">
        <seg>许多项目的 POM 文件会有错误的信息（比如，&lt;c0&gt;commons-httpclient-3.0&lt;/c0&gt; 的 POM 文件声明了 JUnit 是运行时依赖）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Project API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032803Z" creationid="huanghaohang" creationdate="20180131T032803Z">
        <seg>Project API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Project API also provides a property for accessing the subprojects only.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142116Z" creationid="huanghaohang" creationdate="20190615T142116Z">
        <seg>Project API 还提供了一个属性只用于访问子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Project Report Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070418Z" creationid="huanghaohang" creationdate="20190205T070407Z">
        <seg>项目报告插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Project report plugin adds some tasks to your project which generate reports containing useful information about your build. Those tasks generate exactly the same content as the command line reports triggered by &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;, &lt;s2&gt;&lt;c3&gt;gradle dependencies&lt;/c3&gt;&lt;/s2&gt; and &lt;s4&gt;&lt;c5&gt;gradle properties&lt;/c5&gt;&lt;/s4&gt; (see &lt;a6&gt;Section 11.6, “Obtaining information about your build”&lt;/a6&gt;). In contrast to the command line reports, the report plugin generates the reports into a file. There is also an aggregating task that depends on all report tasks added by the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T035849Z" creationid="huanghaohang" creationdate="20190123T014301Z">
        <seg>项目报告插件向项目添加了一些任务，用于生成包含有关构建的有用信息的报告。这些任务生成的内容，与由&lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;， &lt;s2&gt;&lt;c3&gt;gradle dependencies&lt;/c3&gt;&lt;/s2&gt;和&lt;s4&gt;&lt;c5&gt;gradle properties&lt;/c5&gt;&lt;/s4&gt; 触发的命令行报告完全相同（见&lt;a6&gt;第11.6节，《获取有关构建的信息》&lt;/a6&gt;）。与命令行报告相比，报告插件会将报告生成到文件中。这里还有一个聚合任务，它依赖于该插件添加的所有报告任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140159Z" creationid="huanghaohang" creationdate="20181201T140159Z">
        <seg>Scala 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin adds a configuration named &lt;c0&gt;zinc&lt;/c0&gt; to resolve the Zinc library and its dependencies. To override the Zinc version that Gradle uses by default, add an explicit Zinc dependency (for example &lt;c1&gt;zinc "com.typesafe.zinc:zinc:0.1.4"&lt;/c1&gt;). Regardless of which Zinc version is used, Zinc will always use the Scala compiler found on the &lt;c2&gt;scalaTools&lt;/c2&gt; configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T134954Z" creationid="huanghaohang" creationdate="20180407T134954Z">
        <seg>Scala 插件添加了一个名为 &lt;c0&gt;Zinc&lt;/c0&gt; 的配置，以解析 Zinc 库及其依赖。如果要覆盖 Gradle 默认使用的 Zinc 版本，请添加一个显式的 Zinc 依赖（例如 &lt;c1&gt;zinc "com.typesafe.zinc:zinc:0.1.4"&lt;/c1&gt;）。无论使用 Zinc 的哪一个版本，Zinc 总是会使用在 &lt;c2&gt;scalaTools&lt;/c2&gt;配置上找到的 Scala 编译器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin adds the following convention properties to each source set in the project. You can use these properties in your build script as though they were properties of the source set object (see &lt;a0&gt;Section 21.3, “Conventions”&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020152Z" creationid="huanghaohang" creationdate="20180407T020152Z">
        <seg>Scala 插件向项目中的每个源集添加了以下约定属性。你可以在构建脚本中把它们当成是源集对象的属性一样去使用（请参阅《&lt;a0&gt;第 21.3 节，“公约”&lt;/a0&gt;》)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin adds the following dependencies to tasks added by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010655Z" creationid="huanghaohang" creationdate="20180407T010655Z">
        <seg>Scala 插件向 Java 插件所加入的任务添加了以下的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010506Z" creationid="huanghaohang" creationdate="20180407T010506Z">
        <seg>Scala 的插件向项目中添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin also modifies some source set properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020349Z" creationid="huanghaohang" creationdate="20180407T020349Z">
        <seg>Scala 插件还修改了一些源集的属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin assumes the project layout shown below. All the Scala source directories can contain Scala &lt;s0&gt;&lt;e1&gt;and&lt;/e1&gt;&lt;/s0&gt; Java code. The Java source directories may only contain Java source code. None of these directories need to exist or have anything in them; the Scala plugin will simply compile whatever it finds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011125Z" creationid="huanghaohang" creationdate="20180407T011125Z">
        <seg>Scala 插件假定项目的布局如下所示。所有的 Scala 源码目录都可以包含 Scala &lt;s0&gt;&lt;e1&gt;和&lt;/e1&gt;&lt;/s0&gt; Java 代码。 Java 源码目录可能只包含 Java 源代码。 这些目录都不需要一定存在或者包含有内容。Scala 插件只会简单地进行编译，而不管它发现什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin does not add any convention properties to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020054Z" creationid="huanghaohang" creationdate="20180407T020054Z">
        <seg>Scala 插件不会向项目添加任何的约定属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin extends the Java plugin to add support for Scala projects. It can deal with Scala code, mixed Scala and Java code, and even pure Java code (although we don't necessarily recommend to use it for the latter). The plugin supports &lt;s0&gt;&lt;e1&gt;joint compilation&lt;/e1&gt;&lt;/s0&gt;, which allows to freely mix and match Scala and Java code, with dependencies in both directions. For example, a Scala class can extend a Java class that in turn extends a Scala class. This makes it possible to use the best language for the job, and to rewrite any class in the other language if needed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010144Z" creationid="huanghaohang" creationdate="20180407T010144Z">
        <seg>Scala 插件扩展了 Java 插件，以添加对 Scala 项目的支持。它可以处理 Scala 代码，以及混合的 Scala 和 Java 代码，甚至纯 Java 代码（尽管我们不一定建议将其用于后者）。该插件支持&lt;s0&gt;&lt;e1&gt;联合编译&lt;/e1&gt;&lt;/s0&gt;，它允许自由地混合和匹配 Scala 和 Java 代码以及各自的依赖。例如，一个 Scala 类可以扩展一个 Java 类，而这个 Java 类也可以扩展自一个 Scala 类。这样一来，我们就能够在项目中使用最适合的语言，并在需要时用其他语言重写其中的任何类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin includes support for &lt;a0&gt;fsc&lt;/a0&gt;, the Fast Scala Compiler. &lt;c1&gt;fsc&lt;/c1&gt; runs in a separate daemon process and can speed up compilation significantly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T021838Z" creationid="huanghaohang" creationdate="20180407T020442Z">
        <seg>Scala 插件包含了对 &lt;a0&gt;fsc&lt;/a0&gt;，即 Fast Scala Compiler 的支持。&lt;c1&gt;fsc&lt;/c1&gt; 在单独的守护进程中运行，可以显著地提高编译速度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala plugin now supports incremental compilation by integrating with &lt;a0&gt;Zinc&lt;/a0&gt;, a standalone version of &lt;a1&gt;sbt&lt;/a1&gt;'s incremental Scala compiler. To switch the &lt;c2&gt;ScalaCompile&lt;/c2&gt; task from the default Ant based compiler to the new Zinc based compiler, set &lt;c3&gt;scalaCompileOptions.useAnt&lt;/c3&gt; to &lt;c4&gt;false&lt;/c4&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110848Z" creationid="huanghaohang" creationdate="20180407T110848Z">
        <seg>Scala 插件现在支持通过集成 &lt;a0&gt;Zinc&lt;/a0&gt; 的增量编译，它是 &lt;a1&gt;sbt&lt;/a1&gt; 的增量 Scala 编译器的一个单独的版本。如果要把 &lt;c2&gt;ScalaCompile&lt;/c2&gt; 任务从默认的基于 Ant 的编译器切换到新的基于 Zinc 的编译器，需要把 &lt;c3&gt;scalaCompileOptions.useAnt&lt;/c3&gt; 设置为 &lt;c4&gt;false&lt;/c4&gt;：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Scala source files of this source set. Contains all &lt;c0&gt;.scala&lt;/c0&gt; and &lt;c1&gt;.java&lt;/c1&gt; files found in the Scala source directories, and excludes all other types of files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020230Z" creationid="huanghaohang" creationdate="20180407T020230Z">
        <seg>这个源码集的 Scala 源文件。包含所有在 Scala 源目录中找到的 &lt;c0&gt;.scala &lt;/c0&gt; 和 &lt;c1&gt;.java&lt;/c1&gt; 文件，并排除所有其他类型的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Script API</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032830Z" creationid="huanghaohang" creationdate="20180131T032830Z">
        <seg>Script API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Setup tab allows configuration of some general settings.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145839Z" creationid="huanghaohang" creationdate="20170911T145839Z">
        <seg>设置（Setup）选项卡允许你配置一些常规的设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Signing Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T095310Z" creationid="huanghaohang" creationdate="20190608T095310Z">
        <seg>签名插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070113Z" creationid="huanghaohang" creationdate="20190205T070113Z">
        <seg>Sonar 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024104Z" creationid="huanghaohang" creationdate="20190606T024104Z">
        <seg>Sonar Runner 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner is capable of analyzing whole project hierarchies at once. This yields a hierarchical view in the Sonar web interface, with aggregated metrics and the ability to drill down into subprojects. Analyzing a project hierarchy also takes less time than analyzing each project separately.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042334Z" creationid="huanghaohang" creationdate="20181202T042334Z">
        <seg>Sonar Runner能够立即分析整个项目层次结构。这在 Sonar Web 界面中生成了一个层次图，该层次图包含了综合的指标且能够深入到子项目中。分析一个项目的层次结构也比分别分析每个项目花费的时间更少。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner plugin adds a &lt;a0&gt;&lt;c1&gt;SonarRunner&lt;/c1&gt;&lt;/a0&gt; extension to the project, which allows to configure the Sonar Runner via key/value pairs known as &lt;e2&gt;Sonar properties&lt;/e2&gt;. A typical base line configuration includes connection settings for the Sonar server and database.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022131Z" creationid="huanghaohang" creationdate="20181202T022131Z">
        <seg>Sonar Runner 插件向项目增加了一个 &lt;a0&gt;&lt;c1&gt;SonarRunner&lt;/c1&gt;&lt;/a0&gt; 扩展，它能够通过被称为 &lt;e2&gt;Sonar 属性&lt;/e2&gt;的键/值对配置 Sonar Runner。一个典型的基线配置包括了 Sonar 服务器和数据库的连接设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051946Z" creationid="huanghaohang" creationdate="20181202T051946Z">
        <seg>Sonar Runner 插件向项目中添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner plugin is the successor to the &lt;a0&gt;Sonar Plugin&lt;/a0&gt;. It is currently &lt;a1&gt;incubating&lt;/a1&gt;. The plugin is based on Sonar Runner 2.0, which makes it compatible with Sonar 2.11 and higher. Unlike the Sonar plugin, the Sonar Runner plugin works fine with Sonar 3.4 and higher.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T015350Z" creationid="huanghaohang" creationdate="20181202T015350Z">
        <seg>Sonar Runner 插件是 &lt;a0&gt;Sonar 插件&lt;/a0&gt;的继承者。目前它还在&lt;a1&gt;试验性&lt;/a1&gt;的阶段。该插件基于Sonar Runner 2.0，这使其与 Sonar 2.11及更高版本兼容。与 Sonar 插件不同，Sonar Runner 插件可与 Sonar 3.4 及更高版本配合使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner plugin leverages information contained in Gradle's object model to provide smart defaults for many of the standard Sonar properties. The defaults are summarized in the tables below. Notice that additional defaults are provided for projects that have the &lt;c0&gt;java-base&lt;/c0&gt; or &lt;c1&gt;java&lt;/c1&gt; plugin applied. For some properties (notably server and database connection settings), determining a suitable default is left to the Sonar Runner.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023527Z" creationid="huanghaohang" creationdate="20181202T023209Z">
        <seg>Sonar Runner 插件利用 Gradle 对象模型中包含的信息为许多标准 Sonar 属性提供了智能默认值。下表总结了这些默认值。请注意，应用了 &lt;c0&gt;java-base&lt;/c0&gt; 或 &lt;c1&gt;java&lt;/c1&gt; 插件的项目，有提供另外的默认值。对于某些属性（特别是服务器和数据库连接设置），确定留给 Sonar Runner 合适的默认值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar Runner plugin provides integration with &lt;a0&gt;Sonar&lt;/a0&gt;, a web-based platform for monitoring code quality. It is based on the &lt;a1&gt;Sonar Runner&lt;/a1&gt;, a Sonar client component that analyzes source code and build outputs, and stores all collected information in the Sonar database. Compared to using the standalone Sonar Runner, the Sonar Runner plugin offers the following benefits:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150505Z" creationid="huanghaohang" creationdate="20181201T150116Z">
        <seg>Sonar Runner 插件提供了对 &lt;a0&gt;Sonar&lt;/a0&gt;——一个基于 web 的代码质量监控平台的集成。它基于 &lt;a1&gt;Sonar Runner&lt;/a1&gt;，一个分析源代码及构建输出，并将所有收集的信息储存在 Sonar 数据库的 Sonar 客户端组件。相比单独使用 Sonar Runner，Sonar Runner 插件具有以下优势：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085506Z" creationid="huanghaohang" creationdate="20181012T085506Z">
        <seg>Sonar 插件向项目添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar plugin is capable of analyzing a whole project hierarchy at once. This yields a hierarchical view in the Sonar web interface with aggregated metrics and the ability to drill down into subprojects. It is also faster than analyzing each project separately.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152027Z" creationid="huanghaohang" creationdate="20180811T152027Z">
        <seg>Sonar 插件能够立即分析整个项目的层次结构。这将在 Sonar Web 界面中生成一个层次图，该层次图包含了一些综合指标且能够深入到子项目中。同时，它也比分别分析每个项目更快。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar plugin provides integration with &lt;a0&gt;Sonar&lt;/a0&gt;, a web-based platform for monitoring code quality. The plugin adds a &lt;c1&gt;sonarAnalyze&lt;/c1&gt; task that analyzes the project to which the plugin is applied, as well as its subprojects. The results are stored in the Sonar database. The plugin is based on the &lt;a2&gt;Sonar Runner&lt;/a2&gt; and requires Sonar 2.11 or higher.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T095604Z" creationid="huanghaohang" creationdate="20180715T095604Z">
        <seg>&lt;a0&gt;Sonar&lt;/a0&gt; 是一个用于监控代码质量的基于 Web 的平台，Sonar 插件提供了对它的集成。该插件添加了一个 &lt;c1&gt;sonarAnalyze&lt;/c1&gt; 任务，用来分析一个项目及其子项目都应用了哪些插件，分析的结果存在 Sonar 数据库中。该插件基于 &lt;a2&gt;Sonar Runner&lt;/a2&gt;，并且需要 Sonar 2.11 或更高的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Sonar runner plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150215Z" creationid="huanghaohang" creationdate="20181201T140150Z">
        <seg>Sonar runner 插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The String parameter is used as a description for the rule. This description is shown when running for example &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043702Z" creationid="huanghaohang" creationdate="20170923T011932Z">
        <seg>这个String参数用作规则的描述，当对这个例子运行&lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;时会显示这个描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The TCP port which Jetty should listen for HTTP requests on.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144650Z" creationid="huanghaohang" creationdate="20180416T144650Z">
        <seg>Jetty 应监听的 HTTP 请求的 TCP 端口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The TCP port which Jetty should listen for admin requests on.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144715Z" creationid="huanghaohang" creationdate="20180416T144715Z">
        <seg>Jetty 应监听的管理请求的 TCP 端口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Task Tree context menu provides the following options:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144129Z" creationid="huanghaohang" creationdate="20170911T144129Z">
        <seg>任务树的上下文菜单提供了以下选项：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Task Tree shows a hierarchical display of all projects and their tasks. Double clicking a task executes it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143848Z" creationid="huanghaohang" creationdate="20170911T143755Z">
        <seg>任务树显示所有项目及其任务的层次结构，双击一个任务就可以执行它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The TestNG framework has a quite similar concept. In TestNG you can specify different test groups. &lt;s0&gt;[&lt;a1&gt;10&lt;/a1&gt;]&lt;/s0&gt; The test groups that should be included or excluded from the test execution can be configured in the test task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042035Z" creationid="huanghaohang" creationdate="20180406T041847Z">
        <seg>TestNG 框架则有一个非常相似的概念。在 TestNG 中，你可以指定不同的测试组。 &lt;s0&gt;[&lt;a1&gt;10&lt;/a1&gt;]&lt;/s0&gt;你可以在测试任务中配置应该包含在测试执行中或从测试执行中排除的测试组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Tooling API (see &lt;a0&gt;Chapter 62, &lt;i1&gt;Embedding Gradle&lt;/i1&gt;&lt;/a0&gt;) uses the daemon all the time, e.g. you cannot officially use the Tooling API without the daemon. This means that whenever you are using the STS Gradle plugin for Eclipse or the Gradle support in Intellij IDEA, you're already using the Gradle Daemon.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T135832Z" creationid="huanghaohang" creationdate="20180109T135832Z">
        <seg>Tooling API（请参阅《&lt;a0&gt;第62章，&lt;i1&gt;嵌入Gradle&lt;/i1&gt;&lt;/a0&gt;》）会始终使用守护进程。例如，如果没有守护进程，你就不能正式使用 Tooling API。这意味着无论你是在 Eclipse 中使用 STS Gradle 插件，还是在 Intellij IDEA 中使用 Gradle 支持，都已经使用了Gradle Daemon。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The UI displays 4 tabs along the top and an output window along the bottom.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143744Z" creationid="huanghaohang" creationdate="20170911T143744Z">
        <seg>在Gradle的用户界面（UI）中，上面是4个选项卡，下面则是输出窗口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The War Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142150Z" creationid="huanghaohang" creationdate="20181201T142150Z">
        <seg>War 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The War plugin adds the following dependencies to tasks added by the Java plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140239Z" creationid="huanghaohang" creationdate="20180408T140239Z">
        <seg>War 插件向 Java 插件所加入的任务添加了以下的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The War plugin adds the following tasks to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140203Z" creationid="huanghaohang" creationdate="20180408T140203Z">
        <seg>War 插件向项目中添加了以下任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The War plugin adds two dependency configurations: &lt;c0&gt;providedCompile&lt;/c0&gt; and &lt;c1&gt;providedRuntime&lt;/c1&gt;. Those configurations have the same scope as the respective &lt;c2&gt;compile&lt;/c2&gt; and &lt;c3&gt;runtime&lt;/c3&gt; configurations, except that they are not added to the WAR archive. It is important to note that those &lt;c4&gt;provided&lt;/c4&gt; configurations work transitively. Let's say you add &lt;c5&gt;commons-httpclient:commons-httpclient:3.0&lt;/c5&gt; to any of the provided configurations. This dependency has a dependency on &lt;c6&gt;commons-codec&lt;/c6&gt;. This means neither &lt;c7&gt;httpclient&lt;/c7&gt; nor &lt;c8&gt;commons-codec&lt;/c8&gt; is added to your WAR, even if &lt;c9&gt;commons-codec&lt;/c9&gt; were an explicit dependency of your &lt;c10&gt;compile&lt;/c10&gt; configuration. If you don't want this transitive behavior, simply declare your &lt;c11&gt;provided&lt;/c11&gt; dependencies like &lt;c12&gt;commons-httpclient:commons-httpclient:3.0@jar&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T141704Z" creationid="huanghaohang" creationdate="20180408T140424Z">
        <seg>War 插件添加了两个依赖配置：&lt;c0&gt;providedCompile&lt;/c0&gt; 和 &lt;c1&gt;providedRuntime&lt;/c1&gt;。这些配置与 &lt;c2&gt;compile&lt;/c2&gt; 和 &lt;c3&gt;runtime&lt;/c3&gt; 配置一样有各自的作用域，只是它们不会添加到 WAR 归档中。要特别注意那些 &lt;c4&gt;provided&lt;/c4&gt; 配置是有传递性的。假设你添加了 &lt;c5&gt;commons-httpclient:commons-httpclient:3.0&lt;/c5&gt; 到任何一个 provided 的配置，而这个依赖又依赖于 &lt;c6&gt;commons-codec&lt;/c6&gt;，这意味着 &lt;c7&gt;httpclient&lt;/c7&gt; 和 &lt;c8&gt;commons-codec&lt;/c8&gt; 都不会被添加到你的 WAR 文件中，即使 &lt;c9&gt;commons-codec&lt;/c9&gt; 在你的 &lt;c10&gt;compile&lt;/c10&gt; 的依赖配置中是显式声明的。如果你不想要这种传递行为，只需把你的 &lt;c11&gt;provided&lt;/c11&gt; 依赖声明成 &lt;c12&gt;commons-httpclient:commons-httpclient:3.0@jar&lt;/c12&gt;这样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The War plugin extends the Java plugin to add support for assembling web application WAR files. It disables the default JAR archive generation of the Java plugin and adds a default WAR archive task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140131Z" creationid="huanghaohang" creationdate="20180408T140131Z">
        <seg>War 插件扩展了 Java插件，以添加对组装 Web 应用程序 WAR 文件的支持。它禁用 Java 插件默认的 JAR 归档生成，并添加一个默认的 WAR 归档任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Wrapper task adds appropriate file permissions to allow the execution for the gradlew *NIX command. Subversion preserves this file permission. We are not sure how other version control systems deal with this. What should always work is to execute &lt;c0&gt;sh gradlew&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141558Z" creationid="huanghaohang" creationdate="20191219T141558Z">
        <seg>Wrapper 任务添加了相应的文件权限，以允许 gradlew *NIX 命令的执行。Subversion 会保留此文件权限。我们不确定其他版本控制系统是如何处理这一问题的，所以能让它始终可以使用的方法是执行 &lt;c0&gt;sh gradlew&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ability to execute the Sonar Runner via a regular Gradle task makes it available anywhere Gradle is available (developer build, CI server, etc.), without the need to download, setup, and maintain a Sonar Runner installation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T150630Z" creationid="huanghaohang" creationdate="20181201T150630Z">
        <seg>可以通过一个常规的 Gradle 任务来执行 Sonar Runner，这使得在任何 Gradle 可用的地方，它都可以用（开发人员构建，CI 服务器等），而无需下载，安装，和维护 Sonar Runner 的安装。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The ability to publish in the Ivy format is provided by the “&lt;c0&gt;ivy-publish&lt;/c0&gt;” plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155122Z" creationid="huanghaohang" creationdate="20210516T155122Z">
        <seg>这种使用 Ivy 格式发布的功能是由“&lt;c0&gt;ivy-publish&lt;/c0&gt;”插件提供的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The absolute path of the generated archive.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232813Z" creationid="huanghaohang" creationdate="20171206T232813Z">
        <seg>生成的归档文件的绝对路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The absolute path of the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132143Z" creationid="huanghaohang" creationdate="20170913T132143Z">
        <seg>项目绝对路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The absolute path to the secret key ring file containing your private key.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T132154Z" creationid="huanghaohang" creationdate="20190608T132154Z">
        <seg>包含私钥的密钥环文件的绝对路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The appendix portion of the archive file name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233159Z" creationid="huanghaohang" creationdate="20171206T233159Z">
        <seg>归档文件名称中的附录部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The application deployment location within the Jetty container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144621Z" creationid="huanghaohang" creationdate="20180416T144621Z">
        <seg>Jetty 容器中的应用程序部署位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The application of plugins is &lt;s0&gt;&lt;e1&gt;idempotent&lt;/e1&gt;&lt;/s0&gt;. That is, a plugin can be applied multiple times. If the plugin has previously been applied, any further applications will have no effect.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093407Z" creationid="huanghaohang" creationdate="20180130T093407Z">
        <seg>插件的应用是&lt;s0&gt;&lt;e1&gt;幂等的&lt;/e1&gt;&lt;/s0&gt;。也就是说，一个插件可以应用多次。如果插件之前已经被应用，则任何进一步的应用都不会有影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The application plugin adds some properties to the project, which you can use to configure its behaviour. See &lt;a0&gt;&lt;c1&gt;Project&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135435Z" creationid="95" creationdate="20190131T135215Z">
        <seg>应用程序插件向项目添加了一些属性，以用于配置其行为。请参阅&lt;a0&gt;&lt;c1&gt;Project&lt;/c1&gt;&lt;/a0&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The archive must also have been produced by a &lt;a0&gt;&lt;c1&gt;Zip&lt;/c1&gt;&lt;/a0&gt;, &lt;a2&gt;&lt;c3&gt;Jar&lt;/c3&gt;&lt;/a2&gt;, &lt;a4&gt;&lt;c5&gt;War&lt;/c5&gt;&lt;/a4&gt;, &lt;a6&gt;&lt;c7&gt;Ear&lt;/c7&gt;&lt;/a6&gt; task. Future versions of Gradle will support increased flexibility in this area.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141706Z" creationid="huanghaohang" creationdate="20210515T141706Z">
        <seg>同时，这个归档还必须由&lt;a0&gt;&lt;c1&gt;Zip&lt;/c1&gt;&lt;/a0&gt;，&lt;a2&gt;&lt;c3&gt;Jar&lt;/c3&gt;&lt;/a2&gt;，&lt;a4&gt;&lt;c5&gt;War&lt;/c5&gt;&lt;/a4&gt;或&lt;a6&gt;&lt;c7&gt;Ear&lt;/c7&gt;&lt;/a6&gt;任务生成。未来的 Gradle 版本在这方面上会更加灵活。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The archive tasks all work exactly the same way as the &lt;c0&gt;Copy&lt;/c0&gt; task, and implement the same &lt;c1&gt;CopySpec&lt;/c1&gt; interface. As with the &lt;c2&gt;Copy&lt;/c2&gt; task, you specify the input files using the &lt;c3&gt;from()&lt;/c3&gt; method, and can optionally specify where they end up in the archive using the &lt;c4&gt;into()&lt;/c4&gt; method. You can filter the contents of file, rename files, and all the other things you can do with a copy spec.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140626Z" creationid="huanghaohang" creationdate="20171126T140030Z">
        <seg>归档任务与 &lt;c0&gt;Copy&lt;/c0&gt; 任务的使用方式完全一样，并且实现了同样的 &lt;c1&gt;CopySpec&lt;/c1&gt; 接口。像使用 &lt;c2&gt;Copy&lt;/c2&gt; 任务一样，你需要使用 &lt;c3&gt;from()&lt;/c3&gt; 方法指定输入文件，并且可以选择使用 &lt;c4&gt;into()&lt;/c4&gt; 方法来指定它们在归档中结束的位置。你可以过滤文件内容，重命名文件以及进行通过复制规范可以做的其他事情。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The auto search for a settings file does only work for multi-project builds with a physical hierarchical or flat layout. For a flat layout you must additionally obey to the naming convention described above. Gradle supports arbitrary physical layouts for a multiproject build. But for such arbitrary layouts you need to execute the build from the directory where the settings file is located. For how to run partial builds from the root see &lt;a0&gt;Section 56.4, “Running tasks by their absolute path”&lt;/a0&gt;. In our next release we want to enable partial builds from subprojects by specifying the location of the settings file as a command line parameter. Gradle creates Project objects for every project taking part in the build. For a single project build this is only one project. For a multi-project build these are the projects specified in Settings object (plus the root project). Each project object has by default a name equals to the name of its top level directory. Every project except the root project has a parent project and might have child projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T144603Z" creationid="huanghaohang" creationdate="20190613T143612Z">
        <seg>自动搜索设置文件只适用于具有物理上的层次结构或平面布局的多项目构建。对于平面布局，你还必须遵循上面所述的命名约定。Gradle 支持多项目构建的任意物理布局。但是，对于这种任意布局，你需要从设置文件所在的目录执行构建。有关如何从根目录运行部分构建，请参阅《&lt;a0&gt;第56.4节，使用任务的绝对路径运行任务）&lt;/a0&gt;。在下个发行版中，我们希望通过在命令行参数中指定设置文件的路径，来从子项目中启用部分构建。Gradle 为参与构建的每个项目创建项目对象。对于单项目构建而言，它是一个项目对象。而对于多项目构建，它们是 Settings 对象指定的所有项目对象（加上根项目对象）。默认情况下，每个项目对象的名称是其顶级目录的名称。除根项目之外，每个项目都有父项目，并且可能还有子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base file name of the generated archive</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232802Z" creationid="huanghaohang" creationdate="20171206T232802Z">
        <seg>生成的归档文件的基本文件名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The base name portion of the archive file name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233147Z" creationid="huanghaohang" creationdate="20171206T233147Z">
        <seg>归档文件名称中的基本名称部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The basename to use for archives, such as JAR or ZIP files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010614Z" creationid="huanghaohang" creationdate="20180318T010614Z">
        <seg>像 JAR 或 ZIP 文件这样的工件的基本名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The basic idea is that the Gradle command forks a daemon process, which performs the actual build. Subsequent invocations of the Gradle command will reuse the daemon, avoiding the startup costs. Sometimes we cannot use an existing daemon because it is busy or its java version or jvm arguments are different. For exact details on when exactly new daemon process is forked read the dedicated section below. The daemon process automatically expire after 3 hours of idle time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180115T142750Z" creationid="huanghaohang" creationdate="20180114T155211Z">
        <seg>基本思想是，Gradle 命令会 fork 一个守护进程执行实际的构建。Gradle 命令的后续调用将重用守护进程，以避免启动开销。有时我们不能使用现有的守护进程，是因为它正忙或者它的 java 版本或 jvm 参数不同。关于何时会 fork 新的守护进程的具体细节，请阅读下面的专题。守护进程将在空闲 3 小时后自动失效。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The basic rule behind Gradle's behavior is simple. Gradle looks down the hierarchy, starting with the &lt;s0&gt;&lt;e1&gt;current dir&lt;/e1&gt;&lt;/s0&gt;, for tasks with the name &lt;c2&gt;hello&lt;/c2&gt; an executes them. One thing is very important to note. Gradle &lt;s3&gt;&lt;e4&gt;always&lt;/e4&gt;&lt;/s3&gt; evaluates &lt;s5&gt;&lt;e6&gt;every&lt;/e6&gt;&lt;/s5&gt; project of the multi-project build and creates all existing task objects. Then, according to the task name arguments and the current dir, Gradle filters the tasks which should be executed. Because of Gradle's cross project configuration &lt;s7&gt;&lt;e8&gt;every&lt;/e8&gt;&lt;/s7&gt; project has to be evaluated before &lt;s9&gt;&lt;e10&gt;any&lt;/e10&gt;&lt;/s9&gt; task gets executed. We will have a closer look at this in the next section. Let's now have our last marine example. Let's add a task to &lt;c11&gt;bluewhale&lt;/c11&gt; and &lt;c12&gt;krill&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162419Z" creationid="huanghaohang" creationdate="20190615T162419Z">
        <seg>Gradle 的行为背后的基本规则很简单。Gradle 从&lt;s0&gt;&lt;e1&gt;当前目录&lt;/e1&gt;&lt;/s0&gt;开始，按层次结构往下查找名为 &lt;c2&gt;hello&lt;/c2&gt; 的任务并执行它们。有一件事很重要。Gradle &lt;s3&gt;&lt;e4&gt;始终&lt;/e4&gt;&lt;/s3&gt;评估多项目构建的&lt;s5&gt;&lt;e6&gt;每一个&lt;/e6&gt;&lt;/s5&gt;项目，并创建所有存在的任务对象。然后，根据任务名称参数和当前目录， Gradle 过滤出应该执行的任务。由于 Gradle 的跨项目配置，&lt;s7&gt;&lt;e8&gt;每个&lt;/e8&gt;&lt;/s7&gt;项目都必须在执行&lt;s9&gt;&lt;e10&gt;任何&lt;/e10&gt;&lt;/s9&gt;任务之前先评估。我们将在下一节仔细研究这一点。现在让我们看看最后一个 marine 的例子。 我们先将任务添加到 &lt;c11&gt;bluewhale&lt;/c11&gt; 和 &lt;c12&gt;krill&lt;/c12&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The behaviour and properties of an enhanced task is defined by the task's class. When you declare an enhanced task, you specify the type, or class of the task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T145715Z" creationid="huanghaohang" creationdate="20190626T145224Z">
        <seg>增强任务的行为和属性由任务的类定义。当你声明一个增强任务时，要指定该任务的类型或类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The binary sources. This is for reference only. If you want to build Gradle you need to download the source distribution or checkout the sources from the source repository. See the &lt;a0&gt;Gradle web site&lt;/a0&gt; for details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T115048Z" creationid="95" creationdate="20170723T115048Z">
        <seg>源代码。这些源代码仅供参考。如果您想要自己来编译Gradle，您需要去下载源码发行包，或者是从源码仓库里检出代码。具体请参阅&lt;a0&gt;Gradle官方网站&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build announcements plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092445Z" creationid="huanghaohang" creationdate="20190124T092445Z">
        <seg>构建公告插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build announcements plugin uses the &lt;a0&gt;announce&lt;/a0&gt; plugin to send local announcements on important events in the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092612Z" creationid="huanghaohang" creationdate="20190124T092612Z">
        <seg>构建公告插件使用 &lt;a0&gt;公告&lt;/a0&gt; 插件发送构建过程中一些重要事件的本地公告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build dashboard plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T232934Z" creationid="95" creationdate="20190201T232934Z">
        <seg>构建仪表盘插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build is executed from the &lt;c0&gt;tropicalFish&lt;/c0&gt; project. We execute the &lt;c1&gt;hello&lt;/c1&gt; tasks of the &lt;c2&gt;water&lt;/c2&gt;, the &lt;c3&gt;krill&lt;/c3&gt; and the &lt;c4&gt;tropicalFish&lt;/c4&gt; project. The first two tasks are specified by there absolute path, the last task is executed on the name matching mechanism described above.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T112128Z" creationid="huanghaohang" creationdate="20190616T112128Z">
        <seg>构建从 &lt;c0&gt;tropicalFish&lt;/c0&gt; 项目执行。我们执行了 &lt;c2&gt;water&lt;/c2&gt;， &lt;c1&gt;hello&lt;/c1&gt; 及 &lt;c4&gt;tropicalFish&lt;/c4&gt; 这三个项目的 &lt;c1&gt;hello&lt;/c1&gt; 任务。 前两个任务由其绝对路径指定，最后一个任务通过上面所述的名称匹配机制执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build is executed from the &lt;c0&gt;water&lt;/c0&gt; project. Neither &lt;c1&gt;water&lt;/c1&gt; nor &lt;c2&gt;tropicalFish&lt;/c2&gt; have a task with the name &lt;c3&gt;distanceToIceberg&lt;/c3&gt;. Gradle does not care. The simple rule mentioned already above is: Execute all tasks down the hierarchy which have this name. Only complain if there is &lt;s4&gt;&lt;e5&gt;no&lt;/e5&gt;&lt;/s4&gt; such task!</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T110543Z" creationid="huanghaohang" creationdate="20190616T110543Z">
        <seg>构建从 &lt;c0&gt;water&lt;/c0&gt; 项目执行。&lt;c1&gt;water&lt;/c1&gt; 和 &lt;c2&gt;tropicalFish&lt;/c2&gt; 都没有一个叫 &lt;c3&gt;distanceToIceberg&lt;/c3&gt;的任务，但 Gradle 不关心这个问题。上面提到的简单规则是：执行这个层次结构下叫这个名字的所有任务。如果&lt;s4&gt;&lt;e5&gt;没有&lt;/e5&gt;&lt;/s4&gt;这样的任务，只能报错！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build that comparisons are being made against, typically the build in its “current” state. In other words, the left hand side of the comparison.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210506T140004Z" creationid="huanghaohang" creationdate="20210506T140004Z">
        <seg>正在对其进行比较的构建，通常是其“当前”状态的构建。换句话说，也就是构建比较的左边。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build that is being compared to the source build, typically the “proposed” build. In other words, the right hand side of the comparison.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210506T140629Z" creationid="huanghaohang" creationdate="20210506T140629Z">
        <seg>与源构建进行比较的构建，通常是“建议”的构建。换句话说，也就是构建比较的右边。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The built-in dependencyInsight task is a part of the 'Help' tasks group. The task needs to configured with the dependency and the configuration. The report looks for the dependencies that match the specified dependency spec in the specified configuration. If java related plugin is applied, the dependencyInsight task is pre-configured with 'compile' configuration because typically it's the compile dependencies we are interested in. You should specify the dependency you are interested in via the command line '--dependency' option. If you don't like the defaults you may select the configuration via '--configuration' option. For more information see &lt;a0&gt;&lt;c1&gt;DependencyInsightReportTask&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T023244Z" creationid="huanghaohang" creationdate="20170910T022607Z">
        <seg>内置的dependencyInsight任务是“Help”任务组的一部分。该任务需要使用依赖和配置信息来配置。报告将在指定的配置中查找与指定依赖说明相匹配的依赖项。例如，如果应用了java相关的插件，那么dependencyInsight任务是通过“compile”配置进行预配置的，因为通常来说，我们感兴趣的是编译的依赖。如果你想要指定所感兴趣的依赖，可以使用命令行“--configurastion”选项。如果您不想要默认的配置，也可以通过“--configuration”选项来选择配置。更多信息请参阅&lt;a0&gt;&lt;c1&gt;DependencyInsightReportTask&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The calls &lt;c0&gt;doFirst&lt;/c0&gt; and &lt;c1&gt;doLast&lt;/c1&gt; can be executed multiple times. They add an action to the beginning or the end of the task's actions list. When the task executes, the actions in the action list are executed in order. The &lt;c2&gt;&lt;&lt;&lt;/c2&gt; operator is simply an alias for &lt;c3&gt;doLast&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133618Z" creationid="95" creationdate="20170727T133133Z">
        <seg>&lt;c0&gt;doFirst&lt;/c0&gt;和&lt;c1&gt;doLast&lt;/c1&gt; 可以被多次调用，它们分别是向任务的动作列表的开头或结尾添加一个动作。当任务执行的时候，动作列表的这些动作会依次执行。&lt;c2&gt;&lt;&lt;&lt;/c2&gt; 操作只是 &lt;c3&gt;doLast&lt;/c3&gt;的别名。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classes in the classes dir are analyzed regarding there package dependencies and the packages they expose. Based on this the &lt;s0&gt;&lt;e1&gt;Import-Package&lt;/e1&gt;&lt;/s0&gt; and the &lt;s2&gt;&lt;e3&gt;Export-Package&lt;/e3&gt;&lt;/s2&gt; values of the OSGi Manifest are calculated. If the classpath contains jars with an OSGi bundle, the bundle information is used to specify version information for the &lt;s4&gt;&lt;e5&gt;Import-Package&lt;/e5&gt;&lt;/s4&gt; value. Beside the explicit properties of the &lt;c6&gt;OsgiManifest&lt;/c6&gt; object you can add instructions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033620Z" creationid="huanghaohang" creationdate="20181203T033542Z">
        <seg>在 classees 目录中的类将被分析出关于它们的包的依赖，以及它们所公布的包。并基于此，计算出 OSGi 清单中 &lt;s0&gt;&lt;e1&gt;Import-Package&lt;/e1&gt;&lt;/s0&gt; 和&lt;s2&gt;&lt;e3&gt;Export-Package&lt;/e3&gt;&lt;/s2&gt; 的值。如果类路径中包含了带有 OSGi bundle 的 jar，则 bundle 信息会被用于指定 &lt;s4&gt;&lt;e5&gt;Import-Package&lt;/e5&gt;&lt;/s4&gt; 的值。在 &lt;c6&gt;OsgiManifest&lt;/c6&gt; 对象的显式属性旁边，你可以添加 instructions。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classifier portion of the archive file name,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233223Z" creationid="huanghaohang" creationdate="20171206T233223Z">
        <seg>归档文件名称中的分类部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classpath to use when compiling the source files of this source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095334Z" creationid="haohang" creationdate="20180320T095334Z">
        <seg>编译该源集的源文件时使用的类路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classpath to use when executing the classes of this source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100044Z" creationid="haohang" creationdate="20180320T100044Z">
        <seg>执行此源集的类时使用的类路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure passed to the &lt;c0&gt;buildscript()&lt;/c0&gt; method configures a &lt;a1&gt;&lt;c2&gt;ScriptHandler&lt;/c2&gt;&lt;/a1&gt; instance. You declare the build script classpath by adding dependencies to the &lt;c3&gt;classpath&lt;/c3&gt; configuration. This is the same way you declare, for example, the Java compilation classpath. You can use any of the dependency types described in &lt;a4&gt;Section 50.4, “How to declare your dependencies”&lt;/a4&gt;, except project dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T140718Z" creationid="huanghaohang" creationdate="20191202T140358Z">
        <seg>这个传给 &lt;c0&gt;buildscript()&lt;/c0&gt; 方法的闭包配置了一个 &lt;a1&gt;&lt;c2&gt;ScriptHandler&lt;/c2&gt;&lt;/a1&gt; 实例。你可以通过将依赖添加到 &lt;c3&gt;classpath&lt;/c3&gt; 配置的方式来声明构建脚本类路径。这与 Java 编译类路径的声明方式是一样的。你可以使用&lt;a4&gt;第 50.4 节，《如何声明你的依赖》&lt;/a4&gt;中描述的除项目依赖之外的任何依赖类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The closure passed to the &lt;c0&gt;initscript()&lt;/c0&gt; method configures a &lt;a1&gt;&lt;c2&gt;ScriptHandler&lt;/c2&gt;&lt;/a1&gt; instance. You declare the init script classpath by adding dependencies to the &lt;c3&gt;classpath&lt;/c3&gt; configuration. This is the same way you declare, for example, the Java compilation classpath. You can use any of the dependency types described in &lt;a4&gt;Section 50.4, “How to declare your dependencies”&lt;/a4&gt;, except project dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T150922Z" creationid="huanghaohang" creationdate="20191206T150922Z">
        <seg>这个传给 &lt;c0&gt;initscript()&lt;/c0&gt; 方法的闭包配置了一个 &lt;a1&gt;&lt;c2&gt;ScriptHandler&lt;/c2&gt;&lt;/a1&gt; 实例。你可以通过将依赖添加到 &lt;c3&gt;classpath&lt;/c3&gt; 配置的方式来声明初始化脚本类路径。这与 Java 编译类路径的声明方式是一样的。你可以使用&lt;a4&gt;第 50.4 节，《如何声明你的依赖》&lt;/a4&gt;中描述的除项目依赖之外的任何依赖类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The command &lt;c0&gt;evaluationDependsOn&lt;/c0&gt; triggers the evaluation of &lt;c1&gt;producer&lt;/c1&gt; &lt;s2&gt;&lt;e3&gt;before&lt;/e3&gt;&lt;/s2&gt; &lt;c4&gt;consumer&lt;/c4&gt; is evaluated. The example is a bit contrived for the sake of showing the mechanism. In &lt;s5&gt;&lt;e6&gt;this&lt;/e6&gt;&lt;/s5&gt; case there would be an easier solution by reading the key property at execution time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T145231Z" creationid="huanghaohang" creationdate="20190617T145231Z">
        <seg>命令 &lt;c0&gt;evaluationDependsOn&lt;/c0&gt; 触发 &lt;c1&gt;producer&lt;/c1&gt; 在 &lt;c4&gt;consumer&lt;/c4&gt; &lt;s2&gt;&lt;e3&gt;之前&lt;/e3&gt;&lt;/s2&gt; 进行评估。这个例子是特意展示这个机制的。&lt;s5&gt;&lt;e6&gt;这种&lt;/e6&gt;&lt;/s5&gt;情况下，通过在执行时读取关键属性，会是一种更简单的解决方案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The content of the generated visual studio files can be modified via programmatic hooks, provided by the &lt;c0&gt;visualStudio&lt;/c0&gt; extension. Take a look at the 'visual-studio' sample, or see &lt;a1&gt;&lt;c2&gt;VisualStudioExtension.getProjects()&lt;/c2&gt;&lt;/a1&gt; and &lt;a3&gt;&lt;c4&gt;VisualStudioExtension.getSolutions()&lt;/c4&gt;&lt;/a3&gt; for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031656Z" creationid="huanghaohang" creationdate="20190611T031656Z">
        <seg>通过由&lt;c0&gt;visualStudio&lt;/c0&gt; 扩展提供的程序化钩子，可以修改所生成的visual studio 文件的内容。更详细的信息，请参考“visual-studio”示例，或参阅 &lt;a1&gt;&lt;c2&gt;VisualStudioExtension.getProjects()&lt;/c2&gt;&lt;/a1&gt; 及 &lt;a3&gt;&lt;c4&gt;VisualStudioExtension.getSolutions()&lt;/c4&gt;&lt;/a3&gt; 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The conversion process has the following features:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T142434Z" creationid="95" creationdate="20190201T142434Z">
        <seg>该转换过程具有以下功能：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The core Gradle tool chains are able to target the following architectures out of the box. In each case, the tool chain will target the current operating system. See the next section for information on cross-compiling for other operating systems.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085852Z" creationid="huanghaohang" creationdate="20190610T085852Z">
        <seg>核心 Gradle 工具链对以下的架构能够开箱即用。在每种情况中，工具链都将针对当前的操作系统。有关其他操作系统交叉编译的信息，请参阅下一节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The current support for CUnit is quite rudimentary. Plans for future integration include:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090540Z" creationid="huanghaohang" creationdate="20190611T090540Z">
        <seg>当前对 CUnit 的支持还是相当基本。未来的集成计划包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The declarative language lies on top of a general purpose task graph, which you can fully leverage in your builds. It provides utmost flexibility to adapt Gradle to your unique needs.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T021842Z" creationid="95" creationdate="20170722T021842Z">
        <seg>声明性语言位于通用任务图的顶部，您可以在构建中充分利用它。它提供了极大的灵活性，使Gradle满足您的独特需求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default &lt;s0&gt;&lt;e1&gt;evaluation&lt;/e1&gt;&lt;/s0&gt; order of the projects is alphanumeric (for the same nesting level). Therefore the &lt;c2&gt;consumer&lt;/c2&gt; project is evaluated before the &lt;c3&gt;producer&lt;/c3&gt; project and the &lt;c4&gt;key&lt;/c4&gt; value of the &lt;c5&gt;producer&lt;/c5&gt; is set &lt;s6&gt;&lt;e7&gt;after&lt;/e7&gt;&lt;/s6&gt; it is read by the &lt;c8&gt;consumer&lt;/c8&gt; project. Gradle offers a solution for this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153646Z" creationid="huanghaohang" creationdate="20190616T153646Z">
        <seg>项目的默认&lt;s0&gt;&lt;e1&gt;评估&lt;/e1&gt;&lt;/s0&gt;顺序是字母数字（对于同一嵌套级别）。因此，&lt;c2&gt;consumer&lt;/c2&gt; 项目评估会在 &lt;c3&gt;producer&lt;/c3&gt; 项目之前，并且 &lt;c5&gt;producer&lt;/c5&gt; 的 &lt;c4&gt;key&lt;/c4&gt; 值在它被 &lt;c8&gt;consumer&lt;/c8&gt; 项目读取&lt;s6&gt;&lt;e7&gt;之后&lt;/e7&gt;&lt;/s6&gt;设置。Gradle 为此提供了一个解决方案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default behavior of the Ear task is to copy the content of &lt;c0&gt;src/main/application&lt;/c0&gt; to the root of the archive. If your &lt;c1&gt;application&lt;/c1&gt; directory doesn't contain a &lt;c2&gt;META-INF/application.xml&lt;/c2&gt; deployment descriptor then one will be generated for you.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142915Z" creationid="huanghaohang" creationdate="20180416T142705Z">
        <seg>Ear 任务的默认行为是把 &lt;c0&gt;src/main/application&lt;/c0&gt; 的内容复制到档案的根目录下。如果你的 &lt;c1&gt;application&lt;/c1&gt; 目录没有包含 &lt;c2&gt;META-INF/application.xml&lt;/c2&gt; 部署描述符，那么将会为你生成一个。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default behavior of the War task is to copy the content of &lt;c0&gt;src/main/webapp&lt;/c0&gt; to the root of the archive. Your &lt;c1&gt;webapp&lt;/c1&gt; directory may of course contain a &lt;c2&gt;WEB-INF&lt;/c2&gt; sub-directory, which again may contain a &lt;c3&gt;web.xml&lt;/c3&gt; file. Your compiled classes are compiled to &lt;c4&gt;WEB-INF/classes&lt;/c4&gt;. All the dependencies of the &lt;c5&gt;runtime&lt;/c5&gt; &lt;s6&gt;[&lt;a7&gt;13&lt;/a7&gt;]&lt;/s6&gt; configuration are copied to &lt;c8&gt;WEB-INF/lib&lt;/c8&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143004Z" creationid="huanghaohang" creationdate="20180408T142510Z">
        <seg>War 任务的默认行为把 &lt;c0&gt;src/main/webapp&lt;/c0&gt; 的内容复制到档案的根目录下。你的 &lt;c1&gt;webapp&lt;/c1&gt; 目录自然可能包含一个 &lt;c2&gt;WEB-INF&lt;/c2&gt; 子目录，这个子目录还可能包含着一个 &lt;c3&gt;web.xml中&lt;/c3&gt; 文件。已经编译的类被会被编译进 &lt;c4&gt;WEB-INF/classes&lt;/c4&gt;。所有的 &lt;c5&gt;runtime&lt;/c5&gt;&lt;s6&gt;[&lt;a7&gt;13&lt;/a7&gt;]&lt;/s6&gt; 配置的依赖会被复制到 &lt;c8&gt;WEB-INF/lib&lt;/c8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default configuration used by a project dependency on this project. Contains the artifacts and dependencies required by this project at runtime.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054142Z" creationid="haohang" creationdate="20180313T053916Z">
        <seg>依赖于本项目的另一个项目所使用的默认配置。包含此项目运行时所需的工件和依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default name for a generated archive is &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;projectName&lt;/c2&gt;&lt;/e1&gt;-&lt;e3&gt;&lt;c4&gt;version&lt;/c4&gt;&lt;/e3&gt;.&lt;e5&gt;&lt;c6&gt;type&lt;/c6&gt;&lt;/e5&gt;&lt;/c0&gt; For example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140702Z" creationid="huanghaohang" creationdate="20171126T140702Z">
        <seg>生成的归档的默认名称是&lt;c0&gt;&lt;e1&gt;&lt;c2&gt;projectName&lt;/c2&gt;&lt;/e1&gt;-&lt;e3&gt;&lt;c4&gt;version&lt;/c4&gt;&lt;/e3&gt;.&lt;e5&gt;&lt;c6&gt;type&lt;/c6&gt;&lt;/e5&gt;&lt;/c0&gt;。举个例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependencies have the following transitive dependencies:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142804Z" creationid="huanghaohang" creationdate="20190602T142804Z">
        <seg>这些依赖有以下的传递依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependencies required by the production classes at runtime. By default, also includes the compile time dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T035002Z" creationid="huanghaohang" creationdate="20170908T034919Z">
        <seg>运行时生产类所需的依赖。默认情况下，也包括了编译时依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependencies required to compile the production source of the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T034923Z" creationid="huanghaohang" creationdate="20170908T032913Z">
        <seg>编译项目的生产源码所需的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependencies required to compile the test source of the project. By default, also includes the compiled production classes and the compile time dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T035059Z" creationid="huanghaohang" creationdate="20170908T035059Z">
        <seg>编译项目测试源码所需的依赖。默认情况下，还包括了所编译的生产类和编译时依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependencies required to run the tests. By default, also includes the compile, runtime and test compile dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T035430Z" creationid="huanghaohang" creationdate="20170908T035316Z">
        <seg>运行测试所需的依赖。默认情况下，还包括编译，运行时及测试编译的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024130Z" creationid="huanghaohang" creationdate="20190606T024130Z">
        <seg>依赖缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency has a version that conflicts with a desired version. For that use case please refer to &lt;a0&gt;Section 50.2.3, “Resolve version conflicts”&lt;/a0&gt; and the documentation on &lt;a1&gt;&lt;c2&gt;ResolutionStrategy&lt;/c2&gt;&lt;/a1&gt; for a potentially better solution to the problem.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T114325Z" creationid="huanghaohang" creationdate="20190602T114325Z">
        <seg>这个依赖有版本与所需要的的版本冲突。对于这个用例，请参考&lt;a0&gt;第 50.2.3 节，《解决版本冲突》&lt;/a0&gt;和关于 &lt;a1&gt;&lt;c2&gt;ResolutionStrategy&lt;/c2&gt;&lt;/a1&gt; 的文档，以了解这个问题的可能更好的解决方案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency is not available in any of remote repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T114119Z" creationid="huanghaohang" creationdate="20190602T114119Z">
        <seg>这个依赖在任何的远程仓库中都不可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency is not needed for runtime.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T114127Z" creationid="huanghaohang" creationdate="20190602T114127Z">
        <seg>在运行时不需要这个依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency is undesired due to licensing reasons.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T114106Z" creationid="huanghaohang" creationdate="20190602T114106Z">
        <seg>由于许可的原因，依赖不理想。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency of &lt;c0&gt;taskX&lt;/c0&gt; to &lt;c1&gt;taskY&lt;/c1&gt; is declared before &lt;c2&gt;taskY&lt;/c2&gt; is defined. This is very important for multi-project builds. Task dependencies are discussed in more detail in &lt;a3&gt;Section 15.4, “Adding dependencies to a task”&lt;/a3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132109Z" creationid="95" creationdate="20170726T160408Z">
        <seg>&lt;c0&gt;taskX&lt;/c0&gt; 依赖 &lt;c1&gt;taskY&lt;/c1&gt; 是在 &lt;c2&gt;taskY&lt;/c2&gt; 之前定义的。这点在多项目构建中非常有用。有关任务依赖的更多信息，可以参阅 &lt;a3&gt;第15.4节，“给任务添加依赖”&lt;/a3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The desired artifact belongs to a configuration other than &lt;c0&gt;default&lt;/c0&gt;. That configuration is explicitly named as part of the dependency declaration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190530T095312Z" creationid="huanghaohang" creationdate="20190530T095015Z">
        <seg>所需的工件属于非 &lt;c0&gt;default&lt;/c0&gt; 配置。该配置被显式地命名为依赖声明的一部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory containing the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132217Z" creationid="huanghaohang" creationdate="20170913T132217Z">
        <seg>包含构建脚本的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate distributions into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062150Z" creationid="haohang" creationdate="20180313T062150Z">
        <seg>生成分发文件的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate documentation into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062250Z" creationid="haohang" creationdate="20180313T062250Z">
        <seg>用于生成文档的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate libraries into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061536Z" creationid="haohang" creationdate="20180313T061536Z">
        <seg>要生成库的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate reports into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061246Z" creationid="haohang" creationdate="20180313T061246Z">
        <seg>要生成报告的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate test result .xml files into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061405Z" creationid="haohang" creationdate="20180313T061405Z">
        <seg>生成测试结果.xml 文件的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate the archive into</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233114Z" creationid="huanghaohang" creationdate="20171206T233114Z">
        <seg>存放生成的归档文件的目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate the classes of this source set into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095210Z" creationid="haohang" creationdate="20180320T095210Z">
        <seg>生成该源集的类的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate the project report into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T041001Z" creationid="huanghaohang" creationdate="20190123T041001Z">
        <seg>生成项目报告的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate the resources of this source set into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095230Z" creationid="haohang" creationdate="20180320T095230Z">
        <seg>生成该源集的资源的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to generate the test report into.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061431Z" creationid="haohang" creationdate="20180313T061431Z">
        <seg>生成测试报告的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory to use to cache source dependency information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062334Z" creationid="haohang" creationdate="20180313T062334Z">
        <seg>用于缓存源代码的依赖信息的目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory where the generated POMs are written to.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060555Z" creationid="huanghaohang" creationdate="20190607T060555Z">
        <seg>生成的 POM 的写入目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distribution plugin facilitates building archives that serve as distributions of the project. Distribution archives typically contain then executable application and other supporting files, such as documentation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093700Z" creationid="huanghaohang" creationdate="20190124T093251Z">
        <seg>分发插件有助于构建用作项目分发的档案。分发档案通常包含可执行程序和其他支持文件，比如文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The distribution plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093245Z" creationid="huanghaohang" creationdate="20190124T093245Z">
        <seg>分发插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above also demonstrates the mechanism of passing extra command-line arguments to the resource compiler. The &lt;c0&gt;rcCompiler&lt;/c0&gt; extension is of type &lt;a1&gt;&lt;c2&gt;PreprocessingTool&lt;/c2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022223Z" creationid="huanghaohang" creationdate="20190610T022223Z">
        <seg>上面的示例还说明了将额外的命令行参数传给资源编译器的机制。&lt;c0&gt;rcCompiler&lt;/c0&gt; 扩展的类型为 &lt;a1&gt;&lt;c2&gt;PreprocessingTool&lt;/c2&gt;&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above configures a comparison between two different projects using two different Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140324Z" creationid="huanghaohang" creationdate="20210515T140219Z">
        <seg>以上示例配置了两个使用了不同的Gradle版本的项目之间的比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above will apply the supplied configuration to all &lt;c0&gt;executable&lt;/c0&gt; binaries built.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012225Z" creationid="huanghaohang" creationdate="20190610T012225Z">
        <seg>上面的例子将会把提供的配置应用到所有构建的 &lt;c0&gt;executable&lt;/c0&gt; 二进制文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The examples from the last section were special, as the projects had no &lt;s0&gt;&lt;e1&gt;Execution Dependencies&lt;/e1&gt;&lt;/s0&gt;. They had only &lt;s2&gt;&lt;e3&gt;Configuration Dependencies&lt;/e3&gt;&lt;/s2&gt;. Here is an example where this is different:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140154Z" creationid="huanghaohang" creationdate="20190616T140154Z">
        <seg>上一节的例子比较特殊，因为项目里没有&lt;s0&gt;&lt;e1&gt;执行依赖&lt;/e1&gt;&lt;/s0&gt;，只有&lt;s2&gt;&lt;e3&gt;配置依赖&lt;/e3&gt;&lt;/s2&gt;。下面是一个不同的例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The existing content is merged with the configuration inferred from the Gradle build or defined explicitly in the eclipse DSL</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082346Z" creationid="huanghaohang" creationdate="20181210T082346Z">
        <seg>从 Gradle 构建推断出来或在 eclipse DSL 中显示定义的配置会与现有的内容合并在一起</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The extension of the archive file name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233326Z" creationid="huanghaohang" creationdate="20171206T233326Z">
        <seg>归档文件名称中的扩展名称部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The feature incubation process, which is part of the Gradle feature lifecycle (see &lt;a0&gt;Appendix C, &lt;i1&gt;The Feature Lifecycle&lt;/i1&gt;&lt;/a0&gt;), exists for this purpose of ensuring high quality final implementation through incorporation of early user feedback.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T133241Z" creationid="huanghaohang" creationdate="20190706T133241Z">
        <seg>这个功能孵化过程是 Gradle 功能生命周期的一部分（参见《&lt;a0&gt;附录 C，&lt;i1&gt;功能的生命周期&lt;/i1&gt;&lt;/a0&gt;》），它存在的目的是为了整合早期用户的反馈内容来确保高质量的最终实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file is read; or a default version provided by Gradle is used if it does not exist</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082239Z" creationid="huanghaohang" creationdate="20181210T082134Z">
        <seg>读取文件；如果它不存在，则使用由 Gradle 提供的默认版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The final XML is persisted</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082458Z" creationid="huanghaohang" creationdate="20181210T082458Z">
        <seg>最终的 XML 被持久化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first argument of the instruction call is the key of the property. The other arguments form the value. They are joined by Gradle with the &lt;c0&gt;,&lt;/c0&gt; separator. To learn more about the available instructions have a look at the &lt;a1&gt;BND tool&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033842Z" creationid="huanghaohang" creationdate="20181203T033842Z">
        <seg>instruction 调用的第一个参数是属性的键，其他参数构成了值。 Gradle 使用 &lt;c0&gt;,&lt;/c0&gt; 分隔符对它们进行连接。要了解有关可用的 instruction 的更多信息，请查看 &lt;a1&gt;BND 工具&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following are the terms used for build comparison and their definitions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152704Z" creationid="huanghaohang" creationdate="20200604T152704Z">
        <seg>以下是用于构建比较的术语及其定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following diagram shows the relationships between these tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T040027Z" creationid="haohang" creationdate="20180313T040027Z">
        <seg>下图显示了这些任务之间的关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example logs the start and end of each task execution. Notice that the &lt;c0&gt;afterTask&lt;/c0&gt; notification is received regardless of whether the task completes successfully or fails with an exception.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152550Z" creationid="huanghaohang" creationdate="20190613T152550Z">
        <seg>下面示例展示了在每个任务执行开始及结束时打印日志。注意，无论任务是成功完成还是异常失败，都会收到 &lt;c0&gt;afterTask&lt;/c0&gt; 通知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example sets the &lt;c0&gt;srcDir&lt;/c0&gt; property of each task as it is created.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151221Z" creationid="huanghaohang" creationdate="20190613T151221Z">
        <seg>下面的示例是在每个任务创建之前设置 &lt;c0&gt;srcDir&lt;/c0&gt; 属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following properties can alternatively be set from the command line, as task parameters of the &lt;c0&gt;sonarAnalyze&lt;/c0&gt; task. A task parameter will override any corresponding value set in the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085258Z" creationid="huanghaohang" creationdate="20181012T084818Z">
        <seg>下面的属性可以从命令行中或者是作为 &lt;c0&gt;sonarAnalyze&lt;/c0&gt; 任务的参数这来设置。任务参数将覆盖构建脚本中设置的任何相应值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following properties can be used to configure the Gradle build environment:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180124T145004Z" creationid="huanghaohang" creationdate="20180124T145004Z">
        <seg>下面的属性可以用于配置 Gradle 构建环境：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following source languages are currently supported:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021814Z" creationid="huanghaohang" creationdate="20190609T021814Z">
        <seg>当前支持以下源语言：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following table lists some of the important properties of a source set. You can find more details in the API documentation for &lt;a0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095027Z" creationid="haohang" creationdate="20180320T095027Z">
        <seg>下表列出了一些重要的源集属性。你可以在 API 文档中找到更多有关 &lt;a0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/a0&gt; 的详细信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following table lists the domain object used for each of the Eclipse model types:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082504Z" creationid="huanghaohang" creationdate="20181210T082504Z">
        <seg>下表列出了用于每个 Eclipse 模型类型的域对象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following table lists the domain object used for each of the model types:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012438Z" creationid="huanghaohang" creationdate="20190123T012438Z">
        <seg>下表列出了用于每种模型类型的域对象：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following tool chains are supported:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022219Z" creationid="huanghaohang" creationdate="20190609T022219Z">
        <seg>支持以下的工具链：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following tutorials introduce some of the basics of Gradle, to help you get started.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072551Z" creationid="95" creationdate="20170723T072551Z">
        <seg>以下是Gradle的一些基础的教程介绍，来帮助你快速入门。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The full stacktraces are printed out.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T011709Z" creationid="huanghaohang" creationdate="20180107T011709Z">
        <seg>打印完整的栈跟踪信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The implementation is lightweight, with only a small number of dependencies. It is also a well-behaved library, and makes no assumptions about your class loader structure or logging configuration. This makes the API easy to bundle in your application.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T143321Z" creationid="huanghaohang" creationdate="20191220T143321Z">
        <seg>它的实现是轻量级的，只有很少的依赖。同时它也是一个行为良好的库，并且不会假定你的类装入器结构或日志记录配置。这便于把 API 捆绑在应用程序中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The important thing is that &lt;c0&gt;whenReady&lt;/c0&gt; affects the release task &lt;s1&gt;&lt;e2&gt;before&lt;/e2&gt;&lt;/s1&gt; the release task is executed. This works even when the release task is not the &lt;s3&gt;&lt;e4&gt;primary&lt;/e4&gt;&lt;/s3&gt; task (i.e., the task passed to the &lt;s5&gt;&lt;s6&gt;gradle&lt;/s6&gt;&lt;/s5&gt; command).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030619Z" creationid="95" creationdate="20170729T030619Z">
        <seg>在这里，很重要的一点是，&lt;c0&gt;whenReady&lt;/c0&gt; 会在发布任务执行&lt;s1&gt;&lt;e2&gt;之前&lt;/e2&gt;&lt;/s1&gt;影响到它。即使这个发布任务不是 &lt;s3&gt;&lt;e4&gt;主要的&lt;/e4&gt;&lt;/s3&gt; （即传给 &lt;s5&gt;&lt;s6&gt;gradle&lt;/s6&gt;&lt;/s5&gt; 命令行的任务），这一点也同样有效。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The incremental task action may supply an &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.outOfDate()&lt;/c1&gt;&lt;/a0&gt; action for processing any input file that is out-of-date, and a &lt;a2&gt;&lt;c3&gt;IncrementalTaskInputs.removed()&lt;/c3&gt;&lt;/a2&gt; action that executes for any input file that has been removed since the previous execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134800Z" creationid="huanghaohang" creationdate="20190706T134800Z">
        <seg>这个增量任务操作可以提供一个 &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.outOfDate()&lt;/c1&gt;&lt;/a0&gt; 操作来处理所有过时的输入文件，以及一个对自上次执行以来已经被删除的文件执行的 &lt;a2&gt;&lt;c3&gt;IncrementalTaskInputs.removed()&lt;/c3&gt;&lt;/a2&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The job of initialising the CUnit test registry and executing the tests is performed by Gradle, via some generated CUnit launcher sources. Gradle will expect and call a function with the signature &lt;c0&gt;void gradle_cunit_register()&lt;/c0&gt; that you can use to configure the actual CUnit suites and tests to execute.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032611Z" creationid="huanghaohang" creationdate="20190611T032611Z">
        <seg>初始化 CUnit 测试注册和执行测试的作业都由 Gradle 通过某些生成的 CUnit 启动源码来执行。Gradle 将认定并调用一个 &lt;c0&gt;void gradle_cunit_register()&lt;/c0&gt; 函数，这个函数你可以用于配置要执行的实际的 CUnit 套件及测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The key to pass to Jetty when requesting it to stop.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144759Z" creationid="huanghaohang" creationdate="20180416T144759Z">
        <seg>当请求 Jetty 停止时，传递给它的 key。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The log is the main 'UI' of a build tool. If it is too verbose, real warnings and problems are easily hidden by this. On the other hand you need the relevant information for figuring out if things have gone wrong. Gradle defines 6 log levels, as shown in &lt;a0&gt;Table 18.1, “Log levels”&lt;/a0&gt;. There are two Gradle-specific log levels, in addition to the ones you might normally see. Those levels are &lt;s1&gt;&lt;e2&gt;QUIET&lt;/e2&gt;&lt;/s1&gt; and &lt;s3&gt;&lt;e4&gt;LIFECYCLE&lt;/e4&gt;&lt;/s3&gt;. The latter is the default, and is used to report build progress.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221504Z" creationid="huanghaohang" creationdate="20180105T221504Z">
        <seg>日志是构建工具的主要“UI”。如果日志过于冗长，则真正的警告和问题很容易被隐藏。另一方面，如果出了错，你就需要相关的信息。 Gradle 定义了 6 个日志级别，如&lt;a0&gt;表18.1，“日志级别”&lt;/a0&gt;所示。除了你可能通常都会看到的日志级别之外，还有两个 Gradle 特定的日志级别。这两个级别分别是&lt;s1&gt;&lt;e2&gt;QUIET&lt;/e2&gt;&lt;/s1&gt;和&lt;s3&gt;&lt;e4&gt;LIFECYCLE&lt;/e4&gt;&lt;/s3&gt;。默认使用后面的这个日志级别，用于报告构建进度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The main difference between a &lt;s0&gt;&lt;e1&gt;dynamic version&lt;/e1&gt;&lt;/s0&gt; and a &lt;s2&gt;&lt;e3&gt;changing module&lt;/e3&gt;&lt;/s2&gt; is that when you resolve a &lt;s4&gt;&lt;e5&gt;dynamic version&lt;/e5&gt;&lt;/s4&gt;, you'll get the real, static version as the module name. When you resolve a &lt;s6&gt;&lt;e7&gt;changing module&lt;/e7&gt;&lt;/s6&gt;, the artifacts are named using the version you requested, but the underlying artifacts may change over time.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T104120Z" creationid="huanghaohang" creationdate="20190521T031041Z">
        <seg>&lt;s0&gt;&lt;e1&gt;动态版本&lt;/e1&gt;&lt;/s0&gt; 和 &lt;s2&gt;&lt;e3&gt;变化模块&lt;/e3&gt;&lt;/s2&gt; 之间的主要差别是，当你解析一个 &lt;s4&gt;&lt;e5&gt;动态版本&lt;/e5&gt;&lt;/s4&gt;时，你会得到真实的、静态的版本作为模块名称。当你解析一个 &lt;s6&gt;&lt;e7&gt;变化模块&lt;/e7&gt;&lt;/s6&gt;时，将使用你请求的版本来命名工件，但底层工件可能会随时间而变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The main purpose of most projects is to build some files that are to be used outside the project. For example, if your project produces a java library, you need to build a jar, and maybe a source jar and some documentation, and publish them somewhere.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170907T154213Z" creationid="95" creationdate="20170905T152539Z">
        <seg>大多数项目的主要目的是构建一些在项目之外使用的文件。例如，如果你的项目是要生成一个Java库，你需要构建出一个jar文件，可能还需要一个源文件jar包，以及文档等，然后把它们发布出去。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The manifest to include in all JAR files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094609Z" creationid="haohang" creationdate="20180314T094609Z">
        <seg>包含在所有 JAR 文件中的清单。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The maven plugin provides a factory method for creating a POM. This is useful if you need a POM without the context of uploading to a Maven repo.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060908Z" creationid="huanghaohang" creationdate="20190607T060908Z">
        <seg>Maven 插件提供了用于创建 POM 的工厂方法，如果你在不上传到 Maven 仓库的情况下需要 POM 文件，这个工厂方法将非常有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The multi-project tree created in the settings file is made up of so called &lt;e0&gt;project descriptors&lt;/e0&gt;. You can modify these descriptors in the settings file at any time. To access a descriptor you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152952Z" creationid="huanghaohang" creationdate="20190612T152952Z">
        <seg>在设置文件中创建的多项目树由所谓的&lt;e0&gt;项目描述符&lt;/e0&gt;组成。你可以随时修改设置文件中的这些描述符。你可以这样访问一个描述符：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name and version of the project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100452Z" creationid="haohang" creationdate="20180326T100452Z">
        <seg>项目的名称和版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the application source directory, relative to the project directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145911Z" creationid="huanghaohang" creationdate="20180415T145911Z">
        <seg>应用程序源目录的名称，相对于项目目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate distributions into, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062135Z" creationid="haohang" creationdate="20180313T062135Z">
        <seg>相对于构建目录的目录名称，该目录用于生成分发的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate documentation into, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062238Z" creationid="haohang" creationdate="20180313T062238Z">
        <seg>相对于构建目录的目录名称，该目录用于生成文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate libraries into, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061529Z" creationid="haohang" creationdate="20180313T061529Z">
        <seg>相对于构建目录，生成库的目录的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate reports into, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061216Z" creationid="haohang" creationdate="20180313T061216Z">
        <seg>相对于构建目录，生成报告的目录的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate test result .xml files into, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061407Z" creationid="haohang" creationdate="20180313T061350Z">
        <seg>相对于构建目录，生成测试结果.xml 文件的目录名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate the project report into, relative to the reports directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040950Z" creationid="huanghaohang" creationdate="20190123T040950Z">
        <seg>生成项目报告的目录名称，它是相对于报告目录的相对路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to generate the test report into, relative to the reports directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061424Z" creationid="haohang" creationdate="20180313T061410Z">
        <seg>相对于报告目录，生成测试报告的目录的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the directory to use to cache source dependency information, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062319Z" creationid="haohang" creationdate="20180313T062319Z">
        <seg>相对于构建目录的目录名称，该目录用于缓存源代码的依赖信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the lib directory inside the generated EAR.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145934Z" creationid="huanghaohang" creationdate="20180415T145934Z">
        <seg>生成的 EAR 文件里的 lib 目录名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the project directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132136Z" creationid="huanghaohang" creationdate="20170913T132136Z">
        <seg>项目目录名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the source set, used to identify it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095054Z" creationid="haohang" creationdate="20180320T095054Z">
        <seg>用来确定一个源集的源集名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the web application source directory, relative to the project directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142242Z" creationid="huanghaohang" creationdate="20180408T142242Z">
        <seg>web 应用程序源目录的名称，相当于项目目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The native plugins should generally work on other UNIX-like platforms, but are currently officially supported on the above platforms only.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024523Z" creationid="huanghaohang" creationdate="20190609T024523Z">
        <seg>本机插件通常在其他类 UNIX 平台上应该都可以用，但目前仅在上述平台上正式支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example demonstrates &lt;c0&gt;latest&lt;/c0&gt; selectors based on a custom status scheme declared in a module metadata rule:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040954Z" creationid="huanghaohang" creationdate="20190605T040954Z">
        <seg>下一个示例基于模块的元数据规则中声明的自定义状态模式，来演示 &lt;c0&gt;latest&lt;/c0&gt; 选择器：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The other type of task is the enhanced task, where the behaviour is built into the task, and the task provides some properties which you can use to configure the behaviour. We have seen these in &lt;a0&gt;Chapter 15, &lt;i1&gt;More about Tasks&lt;/i1&gt;&lt;/a0&gt;. Most Gradle plugins use enhanced tasks. With enhanced tasks, you don't need to implement the task behaviour as you do with simple tasks. You simply declare the task and configure the task using its properties. In this way, enhanced tasks let you reuse a piece of behaviour in many different places, possibly across different builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T145637Z" creationid="huanghaohang" creationdate="20190626T145126Z">
        <seg>另一种是增强任务，它把行为建立在任务中，并且任务提供了一些属性用于配置行为。我们在《&lt;a0&gt;第十五章，&lt;i1&gt;有关任务的详细信息&lt;/i1&gt;&lt;/a0&gt;》中看到过。大多数 Gradle 插件使用增强任务。通过增强任务，你不需要像使用简单任务一样实现任务行为。你只需要简单地声明该任务，并使用其属性来配置它。通过这种方式，增强任务允许让你在许多不同位置，甚至是跨不同构建，来复用某个行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output files of the TaskOutputs are included in the file collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150616Z" creationid="huanghaohang" creationdate="20170927T150616Z">
        <seg>TaskOutputs 的输出文件会被包含在文件集合中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output files of the source set, containing its compiled classes and resources.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095127Z" creationid="haohang" creationdate="20180320T095127Z">
        <seg>源集的输出文件，包含其编译过的类和资源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output files of the task are included in the file collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150603Z" creationid="huanghaohang" creationdate="20170927T150603Z">
        <seg>任务的输出文件会被包含在文件集合中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The passphrase used to protect your private key.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T132223Z" creationid="huanghaohang" creationdate="20190608T132223Z">
        <seg>用来保护你的私钥的密码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of a task is simply its project path plus the task name. For example &lt;c0&gt; :bluewhale:hello&lt;/c0&gt;. Within a project you can address a task of the same project just by its name. This is interpreted as a relative path.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T135754Z" creationid="huanghaohang" creationdate="20190616T135754Z">
        <seg>任务的路径只是它的项目路径加上任务名称。 例如 &lt;c0&gt; :bluewhale:hello&lt;/c0&gt;。在项目中，您可以通过任务的名称来处理同一项目的任务，这被解释为相对路径。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The path of the directory to write the generated POMs, relative to the build directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060509Z" creationid="huanghaohang" creationdate="20190607T060509Z">
        <seg>用于写入生成的 POM 的文件夹路径，相对于构建目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The paths of the dependencies in the generated IDEA files are absolute. If you manually define a path variable pointing to the Gradle dependency cache, IDEA will automatically replace the absolute dependency paths with this path variable. If you use such a path variable, you need to configure this path variable via &lt;c0&gt;idea.pathVariables&lt;/c0&gt;, so that it can do a proper merge without creating duplicates.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013115Z" creationid="huanghaohang" creationdate="20190123T012932Z">
        <seg>生成的IDEA文件中的依赖项的路径是绝对路径。如果手动定义指向Gradle依赖缓存的路径变量，IDEA将自动使用此路径变量替换绝对依赖路径。如果你使用这样的路径变量，你需要通过&lt;c0&gt;idea.pathVariables&lt;/c0&gt;配置此路径变量，这样它就可以进行正确的合并而不重复创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The place to go for help with Gradle is &lt;a0&gt;http://forums.gradle.org&lt;/a0&gt;. The Gradle Forums is the place where you can report problems and ask questions to the Gradle developers and other community members.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121738Z" creationid="95" creationdate="20170723T121738Z">
        <seg>您可以到Gradle的官方论坛 &lt;a0&gt;http://forums.gradle.org&lt;/a0&gt;来寻求一些帮助。在这里，您可以向Gradle的开发者和其他的社区成员报告您的问题或者是进行提问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin adds a number of tasks to the project that perform the quality checks. You can execute the checks by running &lt;s0&gt;&lt;c1&gt;gradle check&lt;/c1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135507Z" creationid="huanghaohang" creationdate="20180516T135334Z">
        <seg>该插件向项目添加了许多执行质量检查的任务。你可以通过运行 &lt;s0&gt;&lt;c1&gt;gradle check&lt;/c1&gt;&lt;/s0&gt; 来执行这些检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin adds an extension named "&lt;c0&gt;distributions&lt;/c0&gt;" of type &lt;a1&gt;&lt;c2&gt;DistributionContainer&lt;/c2&gt;&lt;/a1&gt; to the project. It also creates a single distribution in the distributions container extension named "&lt;c3&gt;main&lt;/c3&gt;". If your build only produces one distribution you only need to configure this distribution (or use the defaults).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133452Z" creationid="huanghaohang" creationdate="20190124T093749Z">
        <seg>本插件向项目添加了一个名为“&lt;c0&gt;distributions&lt;/c0&gt;”的&lt;a1&gt;&lt;c2&gt;DistributionContainer&lt;/c2&gt;&lt;/a1&gt;类型的扩展。它还在分发容器扩展中创建了一个名为“&lt;c3&gt;main&lt;/c3&gt;”的单个distribution。如果您的构建只生成一个分发，则你只需要配置这一个distribution（或使用默认值）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213711Z" creationid="95" creationdate="20190131T213711Z">
        <seg>该插件向项目中添加以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin build a distribution for your library. The distribution will package up the runtime dependencies of the library All files stored in &lt;c0&gt;src/main/dist&lt;/c0&gt; will be added to the root of the archive distribution. You can run &lt;s1&gt;&lt;c2&gt;gradle distZip&lt;/c2&gt;&lt;/s1&gt; to create a ZIP containing the distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143737Z" creationid="95" creationdate="20190131T143737Z">
        <seg>该插件可以为你的库构建分发。分发将打包库的运行时依赖。所有存储在 &lt;c0&gt;src/main/dist&lt;/c0&gt; 中的文件都将添加到归档分发的根目录中。你可以运行 &lt;s1&gt;&lt;c2&gt;gradle distZip&lt;/c2&gt;&lt;/s1&gt; 来创建包含分发的ZIP。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin can also build a distribution for your application. The distribution will package up the runtime dependencies of the application along with some OS specific start scripts. All files stored in &lt;c0&gt;src/dist&lt;/c0&gt; will be added to the root of the distribution. You can run &lt;s1&gt;&lt;c2&gt;gradle installApp&lt;/c2&gt;&lt;/s1&gt; to create an image of the application in &lt;c3&gt;build/install/&lt;e4&gt;&lt;c5&gt;projectName&lt;/c5&gt;&lt;/e4&gt;&lt;/c3&gt;. You can run &lt;s6&gt;&lt;c7&gt;gradle distZip&lt;/c7&gt;&lt;/s6&gt; to create a ZIP containing the distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T134237Z" creationid="95" creationdate="20190131T134237Z">
        <seg>该插件还可以为你的应用程序构建分发。 分发将会把这个应用程序的运行时依赖和一些操作系统特定的启动脚本打包在一起。 所有存储在 &lt;c0&gt;src/dist&lt;/c0&gt; 中的文件都将添加到分发的根目录中。你可以运行 &lt;s1&gt;&lt;c2&gt;gradle installApp&lt;/c2&gt;&lt;/s1&gt; 以在 &lt;c3&gt;build/install/&lt;e4&gt;&lt;c5&gt;projectName&lt;/c5&gt;&lt;/e4&gt;&lt;/c3&gt;&lt;/c3&gt;中创建应用程序的镜像。你可以运行 &lt;s6&gt;&lt;c7&gt;gradle distZip&lt;/c7&gt;&lt;/s6&gt; 来创建一个包含分发的ZIP。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin in the sample init scripts ensures, that only a specified repository is used when running the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151405Z" creationid="huanghaohang" creationdate="20191206T151405Z">
        <seg>这个在示例的初始化脚本中的插件，确保了当执行构建时只使用一个指定的仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin provides objects modeling the sections of the metadata files that are generated by Gradle. The generation lifecycle is as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T160715Z" creationid="huanghaohang" creationdate="20190121T155942Z">
        <seg>该插件提供了一些对象，对由Gradle生成的元数据文件部分进行建模。生成的生命周期如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugins do a pretty good job of defining the artifacts of a project, so you usually don't need to do anything special to tell Gradle what needs to be published. However, you do need to tell Gradle where to publish the artifacts. You do this by attaching repositories to the &lt;c0&gt;uploadArchives&lt;/c0&gt; task. Here's an example of publishing to a remote Ivy repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050425Z" creationid="huanghaohang" creationdate="20170908T050425Z">
        <seg>插件对定义项目的构件提供了非常好的支持，所以通常无需再做其他事情来告诉Gradle需要发布什么。但是，你需要告诉Gradle发布到哪里。这就需要在&lt;c0&gt;uploadArchives&lt;/c0&gt;任务中添加一个仓库。以下是发布到远程Ivy存储库的示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The power of Groovy can be used for more than defining what a task does. For example, you can also use it to dynamically create tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132702Z" creationid="95" creationdate="20170727T132702Z">
        <seg>Groovy的强大之处，不仅仅是用在定义一个任务做什么的时候。例如，你也可以使用它来动态地创建一些任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The powerful support for multi-project builds is one of Gradle's unique selling points. This topic is also the most intellectually challenging.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T151521Z" creationid="huanghaohang" creationdate="20190614T151521Z">
        <seg>对多项目构建的强大支持是 Gradle 的独特优点之一。而本主题也是最具智力挑战的主题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The project report defines the following convention properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040440Z" creationid="huanghaohang" creationdate="20190123T040440Z">
        <seg>项目报告定义了以下约定属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The project report plugin defines the following tasks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040003Z" creationid="huanghaohang" creationdate="20190123T040003Z">
        <seg>项目报告插件定义了以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The project report plugin does not define any dependency configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040422Z" creationid="huanghaohang" creationdate="20190123T040422Z">
        <seg>项目报告插件没有定义任何的依赖配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The project report plugin does not require any particular project layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040359Z" creationid="huanghaohang" creationdate="20190123T040359Z">
        <seg>项目报告插件不需要任何特定的项目布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The projects to generate the reports for.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040854Z" creationid="huanghaohang" creationdate="20190123T040854Z">
        <seg>要生成报告的所有项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The protocol sftp currently only supports username/password-based authentication.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025803Z" creationid="huanghaohang" creationdate="20190604T025803Z">
        <seg>sftp 协议当前仅支持基于用户名/密码的认证。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The public key ID (an 8 character hexadecimal string).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T131953Z" creationid="huanghaohang" creationdate="20190608T131953Z">
        <seg>公钥 ID（一个 8 位字符的十六进制字符串）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The report shows the description of each project, if specified. You can provide a description for a project by setting the &lt;c0&gt;description&lt;/c0&gt; property:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011401Z" creationid="huanghaohang" creationdate="20170910T011134Z">
        <seg>这个报告显示了每一个项目的描述信息（如果你有配置这个项目的描述信息的话）。你可以通过设置&lt;c0&gt;description&lt;/c0&gt;属性来提供项目的描述信息：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resolved artifact metadata for a particular artifact, including a pointer to the downloaded artifact file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T071049Z" creationid="huanghaohang" creationdate="20190605T071049Z">
        <seg>特定工件解析后的工件元数据，包括指向已下载的工件文件的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resolved module metadata for a particular module, including module artifacts and module dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T071005Z" creationid="huanghaohang" creationdate="20190605T071005Z">
        <seg>特定模块解析后的模块元数据，包括模块工件和模块依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resources of this source set. Contains only resources, and excludes any &lt;c0&gt;.java&lt;/c0&gt; files found in the resource source directories. Other plugins, such as the Groovy plugin, exclude additional types of files from this collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101206Z" creationid="haohang" creationdate="20180320T101206Z">
        <seg>此源集的资源。仅包含资源，并且排除在资源源目录中找到的所有 &lt;c0&gt;.java&lt;/c0&gt; 文件。其他插件（如 Groovy 插件）会从此集合中排除其他类型的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The result of resolving a dynamic version (e.g. &lt;c0&gt;1.+&lt;/c0&gt;) to a concrete version (e.g. &lt;c1&gt;1.2&lt;/c1&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T070933Z" creationid="huanghaohang" creationdate="20190605T043219Z">
        <seg>把一个动态版本（如&lt;c0&gt;1.+&lt;/c0&gt;）解析为一个具体版本（如&lt;c1&gt;1.2&lt;/c1&gt;）的结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting &lt;c0&gt;.classpath&lt;/c0&gt; file will only contain Gradle-generated dependency entries, but not any other dependency entries that may have been present in the original file. (In the case of dependency entries, this is also the default behavior.) Other sections of the &lt;c1&gt;.classpath&lt;/c1&gt; file will be either left as-is or merged. The same could be done for the natures in the &lt;c2&gt;.project&lt;/c2&gt; file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084513Z" creationid="huanghaohang" creationdate="20181210T084120Z">
        <seg>所产生的 &lt;c0&gt;.classpath&lt;/c0&gt; 文件将仅包含 Gradle-generated 的依赖项，但不包含可能存在于原始文件中的任何其他依赖。（对于依赖项条目，这也是默认行为。）&lt;c1&gt;.classpath&lt;/c1&gt;文件的其余部分将保持原样或合并。对 &lt;c2&gt;.project&lt;/c2&gt; 文件的自然处理了是一样：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The resulting module file will only contain Gradle-generated dependency entries, but not any other dependency entries that may have been present in the original file. (In the case of dependency entries, this is also the default behavior.) Other sections of the module file will be either left as-is or merged. The same could be done for the module paths in the project file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012746Z" creationid="huanghaohang" creationdate="20190123T012746Z">
        <seg>生成的模块文件将仅包含Gradle生成的依赖项，但不包含原始文件中可能存在的任何其他依赖项。（对于依赖项，这也是默认行为。）模块文件的其他部分将保持原样或合并。对项目文件中的模块路径也可以这样做：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The results in an XML format that is compatible with the Ant JUnit report task. This format is supported by many other tools, such as CI servers.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042748Z" creationid="huanghaohang" creationdate="20180406T042748Z">
        <seg>与 Ant Junit report 任务兼容的 XML 格式的结果。许多工具都支持这一格式，比如 CI 服务器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The same Gradle build, with the same version, before and after a change to the build (i.e. testing build changes).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152425Z" creationid="huanghaohang" creationdate="20200604T152351Z">
        <seg>同样的 Gradle 构建，同样的版本，但是比较构建前后的变化（即测试构建产生的更改）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second layer of Ant is its wealth of Ant tasks and types, like &lt;c0&gt;javac&lt;/c0&gt;, &lt;c1&gt;copy&lt;/c1&gt; or &lt;c2&gt;jar&lt;/c2&gt;. For this layer Gradle provides integration simply by relying on Groovy, and the fantastic &lt;c3&gt;AntBuilder&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171210T152241Z" creationid="huanghaohang" creationdate="20171210T151948Z">
        <seg>Ant 的第二层是它丰富的 Ant 任务和类型，比如&lt;c0&gt;javac&lt;/c0&gt;， &lt;c1&gt;copy&lt;/c1&gt;或&lt;c2&gt;jar&lt;/c2&gt;。对于这一层，Gradle 只依靠 Groovy 和极出色的 &lt;c3&gt;AntBuilder&lt;/c3&gt; 来提供集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The settings file gets executed during the initialization phase. A multiproject build must have a &lt;c0&gt;settings.gradle&lt;/c0&gt; file in the root project of the multiproject hierarchy. It is required because in the settings file it is defined, which projects are taking part in the multi-project build (see &lt;a1&gt;Chapter 56, &lt;i2&gt;Multi-project Builds&lt;/i2&gt;&lt;/a1&gt;). For a single-project build, a settings file is optional. You might need it for example, to add libraries to your build script classpath (see &lt;a3&gt;Chapter 59, &lt;i4&gt;Organizing Build Logic&lt;/i4&gt;&lt;/a3&gt;). Let's first do some introspection with a single project build:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T150132Z" creationid="huanghaohang" creationdate="20190612T145509Z">
        <seg>这个设置文件会在初始化阶段执行。多项目构建必须在这个多项目的层次结构的根项目下有一个 &lt;c0&gt;settings.gradle&lt;/c0&gt; 文件。这个文件是必不可少的，因为在这个设置文件中，定义了哪些项目会加处多项目构建（见《&lt;a1&gt;第五十六章，&lt;i2&gt;多项目构建&lt;/i2&gt;&lt;/a1&gt;》）。对于单项目构建，有没有设置文件都可以。例如，你可能需要它将一些库添加到构建脚本类路径中（见《&lt;a3&gt;第五十九章，&lt;i4&gt;组织构建逻辑&lt;/i4&gt;&lt;/a3&gt;》）。我们先来看一个单项目的构建：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The signing plugin adds the ability to digitally sign built files and artifacts. These digital signatures can then be used to prove who built the artifact the signature is attached to as well as other information such as when the signature was generated.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130251Z" creationid="huanghaohang" creationdate="20190608T130251Z">
        <seg>签名插件添加了对构建的文件和工件进行数字签名的功能。这些数字签名可以用于证明谁构建了这个签名所连接的工件，以及诸如签名什么时候生成的其他信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The signing plugin currently only provides support for generating &lt;a0&gt;PGP signatures&lt;/a0&gt; (which is the signature format &lt;a1&gt;required for publication to the Maven Central Repository&lt;/a1&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130358Z" creationid="huanghaohang" creationdate="20190608T130358Z">
        <seg>签名插件当前只支持 &lt;a0&gt;PGP 签名&lt;/a0&gt;（这是&lt;a1&gt;发布到 Maven 中央仓库所需的&lt;/a1&gt;签名格式）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The simplest way to publish a Gradle project to an Ivy repository is to specify a &lt;a0&gt;&lt;c1&gt;SoftwareComponent&lt;/c1&gt;&lt;/a0&gt; to publish. The components presently available for publication are:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210518T150549Z" creationid="huanghaohang" creationdate="20210518T150549Z">
        <seg>将 Gradle 项目发布到 Ivy 库的最简单方法是指定要发布的 &lt;a0&gt;&lt;c1&gt;SoftwareComponent&lt;/c1&gt;&lt;/a0&gt;。目前可用于publication的组件有:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The skip Sonar analysis for a particular subproject, set &lt;c0&gt;sonarRunner.skipProject&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042927Z" creationid="huanghaohang" creationdate="20181202T042927Z">
        <seg>对于一个特定的子项目，要跳过 Sonar 分析，可以设置&lt;c0&gt;sonarRunner.skipProject&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The source directories containing the ANTLR grammar files of this source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T014225Z" creationid="huanghaohang" creationdate="20190123T014225Z">
        <seg>包含该源集的 ANTLR 语法文件的源目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The source directories containing the Groovy source files of this source set. May also contain Java source files for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T234839Z" creationid="huanghaohang" creationdate="20180406T234839Z">
        <seg>该源目录包含此源集的 Groovy 源文件。可能还包含用于联合编译的 Java 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The source directories containing the Java source files of this source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100912Z" creationid="haohang" creationdate="20180320T100912Z">
        <seg>该源目录包含了此源集的所有 Java 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The source directories containing the Scala source files of this source set. May also contain Java source files for joint compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020251Z" creationid="huanghaohang" creationdate="20180407T020251Z">
        <seg>该源目录包含此源集的 Scala 源文件。可能还包含用于联合编译的 Java 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The source directories containing the resources of this source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101233Z" creationid="haohang" creationdate="20180320T101233Z">
        <seg>包含此源集资源的源目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard project dependencies are supported and makes relevant projects configured. If project A has a compile dependency on project B then building A causes configuration of both projects: A and B.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T153817Z" creationid="huanghaohang" creationdate="20190614T153817Z">
        <seg>标准项目的依赖被支持，并且使相关的项目也被配置。如果项目 A 对项目 B 有编译依赖，那么构建 A 的时候也会导致这两个项目的配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The suppleness and richness of Gradle finally allows you to apply common design principles to your build. For example, it is very easy to compose your build from reusable pieces of build logic. Inline stuff where unnecessary indirections would be inappropriate. Don't be forced to tear apart what belongs together (e.g. in your project hierarchy). Thus avoiding smells like shotgun changes or divergent change that turn your build into a maintenance nightmare. At last you can create a well structured, easily maintained, comprehensible build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170722T022659Z" creationid="95" creationdate="20170722T022659Z">
        <seg>Gradle的灵活性和丰富性最终允许您将常见的设计原则应用于您的构建。 例如，通过可重用的构建逻辑来组织构建是非常容易的。 把不必要而没有直接联系的内容内联在一起是不适合的。 不要强制拆分原本一起的东西（例如在你的项目层次结构中）。 因此，避免出现分散式的变化而使您的建设的维护变成噩梦。 最后，您可以创建一个结构良好、易于维护、易于理解的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The supported tool chain types are:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084854Z" creationid="huanghaohang" creationdate="20190610T084854Z">
        <seg>支持的工具链类型有︰</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The task dependencies declared via task path are supported and cause relevant projects configured. Example: someTask.dependsOn(":someOtherProject:someOtherTask")</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T153919Z" creationid="huanghaohang" creationdate="20190614T153919Z">
        <seg>通过任务路径定义的任务依赖也被支持，并且会导致相关的项目被配置。示例：someTask.dependsOn(":someOtherProject:someOtherTask")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The task has an &lt;c0&gt;ignoreFailures&lt;/c0&gt; property to control the behavior when tests fail. Test always executes every test that it detects. It stops the build afterwards if &lt;c1&gt;ignoreFailures&lt;/c1&gt; is false and there are failing tests. The default value of &lt;c2&gt;ignoreFailures&lt;/c2&gt; is false.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062254Z" creationid="haohang" creationdate="20180330T060550Z">
        <seg>该任务有一个 &lt;c0&gt;ignoreFailures&lt;/c0&gt; 属性，用于控制测试失败时的行为。测试任务始终执行它检测到的每个测试，如果 &lt;c1&gt;ignoreFailures&lt;/c1&gt; 值为 false，并且有测试不通过，那它就会停止继续构建。&lt;c2&gt;ignoreFailures&lt;/c2&gt; 的默认值为 false。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The task's &lt;c0&gt;inputs&lt;/c0&gt; property is of type &lt;a1&gt;&lt;c2&gt;TaskInputs&lt;/c2&gt;&lt;/a1&gt;. The task's &lt;c3&gt;outputs&lt;/c3&gt; property is of type &lt;a4&gt;&lt;c5&gt;TaskOutputs&lt;/c5&gt;&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T004312Z" creationid="huanghaohang" creationdate="20170923T004001Z">
        <seg>任务的 &lt;c0&gt;inputs&lt;/c0&gt; 属性是 &lt;a1&gt;&lt;c2&gt;TaskInputs&lt;/c2&gt;&lt;/a1&gt;类型。任务的 &lt;c3&gt;outputs&lt;/c3&gt; 属性是 &lt;a4&gt;&lt;c5&gt;TaskOutputs&lt;/c5&gt;&lt;/a4&gt;类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks recognize existing IDEA files, and merge them with the generated content.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T155904Z" creationid="huanghaohang" creationdate="20190121T155904Z">
        <seg>该任务会识别现有的IDEA文件，并将它们与生成的内容进行合并。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks which produce the artifacts in configuration &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035904Z" creationid="haohang" creationdate="20180313T035638Z">
        <seg>生成 &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt; 配置里的工件的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks which produce the artifacts in the &lt;c0&gt;archives&lt;/c0&gt; configuration, including &lt;c1&gt;jar&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063339Z" creationid="haohang" creationdate="20180312T063223Z">
        <seg>产生在 &lt;c0&gt;archives&lt;/c0&gt; 中所配置的工件的任务，包括 &lt;c1&gt;jar&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks which the Java plugin adds are regular tasks, exactly the same as if they were declared in the build file. This means you can use any of the mechanisms shown in earlier chapters to customize these tasks. For example, you can set the properties of a task, add behaviour to a task, change the dependencies of a task, or replace a task entirely. In our sample, we will configure the &lt;c0&gt;test&lt;/c0&gt; task, which is of type &lt;a1&gt;&lt;c2&gt;Test&lt;/c2&gt;&lt;/a1&gt;, to add a system property when the tests are executed:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T150104Z" creationid="95" creationdate="20170730T132805Z">
        <seg>Java插件所添加的任务都是一些普通任务，与在构建文件里声明的完全一样。这也就是说，你可以利用前面的章节所说的任何机制来自定义这些任务。比如你可以设置一个任务的属性，给它添加一些行为，修改一个任务的依赖，或者是完全地替换掉一个任务。在下面的例子中，我们会配置一个&lt;a1&gt;&lt;c2&gt;Test&lt;/c2&gt;&lt;/a1&gt;类型的 &lt;c0&gt;test&lt;/c0&gt; 任务，使得当执行测试的时候添加一个系统属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tasks which uploads the artifacts in configuration &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035832Z" creationid="haohang" creationdate="20180313T035832Z">
        <seg>上传 &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt; 配置中的工件的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The test process sets the &lt;c0&gt;org.gradle.test.worker&lt;/c0&gt; system property to a unique identifier for that test process, which you can use, for example, in files names or other resource identifiers.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T055511Z" creationid="haohang" creationdate="20180330T055355Z">
        <seg>测试进程程会将 &lt;c0&gt;org.gradle.test.worker&lt;/c0&gt; 系统属性设置为该测试进程的一个唯一标识符，这个标识符可以用于文件名称或其他资源标识符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The test task provides a &lt;a0&gt;&lt;c1&gt;Test.getDebug()&lt;/c1&gt;&lt;/a0&gt; property that can be set to launch to make the JVM wait for a debugger to attach to port 5005 before proceeding with test execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062355Z" creationid="haohang" creationdate="20180330T062121Z">
        <seg>test 任务提供了一个 &lt;a0&gt;&lt;c1&gt;Test.getDebug()&lt;/c1&gt;&lt;/a0&gt; 属性，可以设置为启动，使 JVM 在执行测试之前等待调试器连接到它的 5005 端口上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The trick is to use only artifact dependencies and group them in lists. That way you have somehow expressed, what are your first level dependencies and what are transitive dependencies (see &lt;a0&gt;Section 50.4.8, “Optional attributes”&lt;/a0&gt;). But the draw-back is, that for the Gradle dependency management all dependencies are considered first level dependencies. The dependency reports don't show your real dependency graph and the &lt;c1&gt;compile&lt;/c1&gt; task uses all dependencies, not just the first level dependencies. All in all, your build is less maintainable and reliable than it could be when using client modules. And you don't gain anything.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021105Z" creationid="huanghaohang" creationdate="20190606T020401Z">
        <seg>这个诀窍是只使用工件依赖，并在列表中对它们分组。使用这种方法，你要以某种方式来表达你的第一级依赖是什么，传递依赖又是什么（请参阅&lt;a0&gt;第 50.4.8 节，《可选属性》&lt;/a0&gt;）。而缺点是，对于 Gradle 依赖管理而言，所有依赖都会被当作是第一级依赖。依赖报告不会显示你实际上的依赖关系图，并且 &lt;c1&gt;compile&lt;/c1&gt; 任务会使用所有依赖，而不仅仅是第一级的。总之，比起使用客户端模块，你的构建可维护性和可靠性都很差，而不会有其他好处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The user guide (HTML and PDF).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114522Z" creationid="95" creationdate="20170723T114522Z">
        <seg>用户指南（HTML和PDF两种版本）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The various native binary plugins add support for building native software components, such as executables or shared libraries, from C++, C and other languages. While many excellent build tools exist for this space of software development, Gradle offers developers it's trademark power and flexibility together with the dependency management practices more traditionally found in the JVM development space.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T012203Z" creationid="huanghaohang" creationdate="20190609T012203Z">
        <seg>各种本机二进制插件添加了对从 C++，C 和其他语言构建本机软件组件（如可执行文件或共享库）的支持。 尽管在软件开发方面已经有许多出色的构建工具，但是 Gradle 向开发者提供了它的强大特征和灵活性，以及在 JVM 开发上更传统的依赖管理实践。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The version of a library must be easy to recognize in the filename. While the version of a jar is usually in the Manifest file, it isn't readily apparent when you are inspecting a project. If someone asks you to look at a collection of 20 jar files, which would you prefer? A collection of files with names like &lt;c0&gt;commons-beanutils-1.3.jar&lt;/c0&gt; or a collection of files with names like &lt;c1&gt;spring.jar&lt;/c1&gt;? If dependencies have file names with version numbers it is much easier to quickly identify the versions of your dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T145956Z" creationid="95" creationdate="20190210T145510Z">
        <seg>在文件名中库的版本必须是容易辨认的。虽然jar的版本通常在Manifest文件中，但当你要检查项目时它并不显而易见。如果有人让你看20个jar文件，你更愿意哪一种?名字像 &lt;c0&gt;commons-beanutils-1.3.jar&lt;/c0&gt; 的文件集还是名字像 &lt;c1&gt;spring.jar&lt;/c1&gt;的文件集?如果依赖的文件名称带有版本号，那么将更容易快速确定依赖的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The version portion of the archive file name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233211Z" creationid="huanghaohang" creationdate="20171206T233211Z">
        <seg>归档文件名称中的版本部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The web application source directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142342Z" creationid="huanghaohang" creationdate="20180408T142342Z">
        <seg>Web 应用程序的源目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The wrapper is something you &lt;s0&gt;&lt;e1&gt;should&lt;/e1&gt;&lt;/s0&gt; check into version control. By distributing the wrapper with your project, anyone can work with it without needing to install Gradle beforehand. Even better, users of the build are guaranteed to use the version of Gradle that the build was designed to work with. Of course, this is also great for &lt;a2&gt;continuous integration&lt;/a2&gt; servers (i.e. servers that regularly build your project) as it requires no configuration on the server.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T125935Z" creationid="huanghaohang" creationdate="20191219T125935Z">
        <seg>你 &lt;s0&gt;&lt;e1&gt;应该&lt;/e1&gt;&lt;/s0&gt; 将包装器纳入版本控制。通过将包装器分发到项目中，任何人都可以在未安装 Gradle 的情况下使用它。更好的效果是能让用户使用这个构建所设计的 Gradle 版本。当然，这对于 &lt;a2&gt;连续集成&lt;/a2&gt; 服务器（即定期构建项目的服务器）也很重要，因为它不需要在服务器上进行配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The wrapper plugin adds the following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155955Z" creationid="95" creationdate="20190201T155955Z">
        <seg>包装器插件向项目添加以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The wrapper plugin is currently &lt;a0&gt;incubating&lt;/a0&gt;. Please be aware that the DSL and other configuration may change in later Gradle versions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155527Z" creationid="95" creationdate="20190201T155527Z">
        <seg>包装器插件目前是一个&lt;a0&gt;试验性&lt;/a0&gt;插件。注意，在以后的 Gradle 版本中，其 DSL 和其他配置可能会有变化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The “&lt;c0&gt;publishing&lt;/c0&gt;” plugin creates an extension on the project named “&lt;c1&gt;publishing&lt;/c1&gt;” of type &lt;a2&gt;&lt;c3&gt;PublishingExtension&lt;/c3&gt;&lt;/a2&gt;. This extension provides a container of named publications and a container of named repositories. The “&lt;c4&gt;ivy-publish&lt;/c4&gt;” plugin works with &lt;a5&gt;&lt;c6&gt;IvyPublication&lt;/c6&gt;&lt;/a5&gt; publications and &lt;a7&gt;&lt;c8&gt;IvyArtifactRepository&lt;/c8&gt;&lt;/a7&gt; repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155533Z" creationid="huanghaohang" creationdate="20210516T155533Z">
        <seg>“&lt;c0&gt;publishing&lt;/c0&gt;”在project上创建了一个名为“&lt;c1&gt;publishing&lt;/c1&gt;” 的&lt;a2&gt;&lt;c3&gt;PublishingExtension&lt;/c3&gt;&lt;/a2&gt;类型的扩展。这个扩展提供了两个容器，一个叫publications，一个叫repositories。“&lt;c4&gt;ivy-publish&lt;/c4&gt;”适用于&lt;a5&gt;&lt;c6&gt;IvyPublication&lt;/c6&gt;&lt;/a5&gt; publications 和 &lt;a7&gt;&lt;c8&gt;IvyArtifactRepository&lt;/c8&gt;&lt;/a7&gt; repositories。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then simply execute the &lt;s0&gt;&lt;s1&gt;compareGradleBuilds&lt;/s1&gt;&lt;/s0&gt; task. You will see the console output of the “source” and “target” builds as they are executing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140807Z" creationid="huanghaohang" creationdate="20210515T140807Z">
        <seg>然后，简单地执行&lt;s0&gt;&lt;s1&gt;compareGradleBuilds&lt;/s1&gt;&lt;/s0&gt;任务。当它们执行的时候，你将会看到“源”构建和“目标”构建的控制台输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, you can run the application by running &lt;s0&gt;&lt;c1&gt;gradle run&lt;/c1&gt;&lt;/s0&gt;. Gradle will take care of building the application classes, along with their runtime dependencies, and starting the application with the correct classpath. You can launch the application in debug mode with &lt;s2&gt;&lt;c3&gt;gradle run --debug-jvm&lt;/c3&gt;&lt;/s2&gt; (see &lt;a4&gt;&lt;c5&gt;JavaExec.setDebug()&lt;/c5&gt;&lt;/a4&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T234216Z" creationid="95" creationdate="20190130T234216Z">
        <seg>然后，你可以通过运行 &lt;s0&gt;&lt;c1&gt;gradle run&lt;/c1&gt;&lt;/s0&gt;来运行这个应用程序。 Gradle将负责构建应用程序类及其运行时依赖，并使用正确的类路径来启动应用程序。 你可以使用 &lt;s2&gt;&lt;c3&gt;gradle run --debug-jvm&lt;/c3&gt;&lt;/s2&gt; 来以调试方式启动应用程序（请参阅 &lt;a4&gt;&lt;c5&gt;JavaExec.setDebug()&lt;/c5&gt;&lt;/a4&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a number of plugins included in the Gradle distribution. These are listed below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140503Z" creationid="huanghaohang" creationdate="20180205T140503Z">
        <seg>Gradle 发行版中包含一些插件，如下列所示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a number of properties which control how the test process is launched. This includes things such as system properties, JVM arguments, and the Java executable to use.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T055045Z" creationid="haohang" creationdate="20180330T055045Z">
        <seg>有很多属性可以控制测试进程的启动，包括系统属性、JVM 参数以及要使用的Java 可执行文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a number of properties which you can set on an archive task. These are listed below in &lt;a0&gt;Table 16.1, “Archive tasks - naming properties”&lt;/a0&gt;. You can, for example, change the name of the archive:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232523Z" creationid="huanghaohang" creationdate="20171206T232523Z">
        <seg>你可以在归档任务上设置很多属性。它们在&lt;a0&gt;表16.1“存档任务 - 命名属性”&lt;/a0&gt;中有列出。例如，你可以更改归档的名称：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a number of ways that you can influence how Gradle resolves dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033903Z" creationid="huanghaohang" creationdate="20190604T033903Z">
        <seg>有许多种方式可以影响到 Gradle 的依赖解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are many configuration options for the Maven deployer. The configuration is done via a Groovy builder. All the elements of this tree are Java beans. To configure the simple attributes you pass a map to the bean elements. To add another bean elements to its parent, you use a closure. In the example above &lt;s0&gt;&lt;e1&gt;repository&lt;/e1&gt;&lt;/s0&gt; and &lt;s2&gt;&lt;e3&gt;authentication&lt;/e3&gt;&lt;/s2&gt; are such bean elements. &lt;a4&gt;Table 52.4, “Configuration elements of the MavenDeployer”&lt;/a4&gt; lists the available bean elements and a link to the javadoc of the corresponding class. In the javadoc you can see the possible attributes you can set for a particular element.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093352Z" creationid="huanghaohang" creationdate="20190607T093352Z">
        <seg>Maven 部署器有许多配置选项，配置通过 Groovy 构建器完成。配置树的所有元素都是 Java bean。你可以传一个 map 到 bean 元素来配置简单的属性。如果要将其他 bean 元素添加到其 parent，可以使用闭包。在上面的示例中，&lt;s0&gt;&lt;e1&gt;repository&lt;/e1&gt;&lt;/s0&gt; 和 &lt;s2&gt;&lt;e3&gt;authentication&lt;/e3&gt;&lt;/s2&gt; 都是这样的 bean 元素。&lt;a4&gt;表 52.4，“MavenDeployer的配置元素”&lt;/a4&gt; 列出了可用的 bean 元素以及对应类的 javadoc 链接。在 javadoc 中，你可以查看能够为特定元素设置的属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are many options for the protocol to communicate with the repository (e.g. filesystem, http, ssh, sftp ...)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025746Z" creationid="huanghaohang" creationdate="20190604T025746Z">
        <seg>与仓库通信的协议有许多选择（比如文件系统，http，ssh，sftp……）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are many situation when you want to use the latest version of a particular dependency, or the latest in a range of versions. This can be a requirement during development, or you may be developing a library that is designed to work with a range of dependency versions. You can easily depend on these constantly changing dependencies by using a &lt;s0&gt;&lt;e1&gt;dynamic version&lt;/e1&gt;&lt;/s0&gt;. A dynamic version can be either a version range (e.g. &lt;c2&gt;2.+&lt;/c2&gt;) or it can be a placeholder for the latest version available (e.g. &lt;c3&gt;latest.integration&lt;/c3&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T025111Z" creationid="huanghaohang" creationdate="20190422T133110Z">
        <seg>当您想要使用特定依赖的最新版本或某个版本范围内的最新版本时，有许多情况。这可能是开发期中需要，或者可能你正在开发一个库，它被设计为使用某个范围内的依赖版本。你可以通过使用&lt;s0&gt;&lt;e1&gt;动态版本&lt;/e1&gt;&lt;/s0&gt;很容易地依赖这些不断变化的依赖。动态版本可以是一个版本范围（例如&lt;c2&gt;2.+&lt;/c2&gt;），也可以是最新版本的占位符（比如&lt;c3&gt;latest.integration&lt;/c3&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are many tools out there which still use standard output for logging. By default, Gradle redirects standard output to the &lt;c0&gt;QUIET&lt;/c0&gt; log level and standard error to the &lt;c1&gt;ERROR&lt;/c1&gt; level. This behavior is configurable. The project object provides a &lt;a2&gt;&lt;c3&gt;LoggingManager&lt;/c3&gt;&lt;/a2&gt;, which allows you to change the log levels that standard out or error are redirected to when your build script is evaluated.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025316Z" creationid="huanghaohang" creationdate="20180107T024839Z">
        <seg>有许多工具仍然是使用标准输出来记录日志。默认情况下，Gradle 把标准输出重定向到 &lt;c0&gt;QUIET&lt;/c0&gt; 日志级别，把标准错误则重定向到 &lt;c1&gt;ERROR&lt;/c1&gt; 级别上。这种行为是可配置的。Project 对象提供了一个 &lt;a2&gt;&lt;c3&gt;LoggingManager&lt;/c3&gt;&lt;/a2&gt;，它能在评估构建脚本时，让你修改标准输出或错误所重定向的日志级别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are other situations where it is necessary to fine-tune dependency declarations. Please see &lt;a0&gt;&lt;c1&gt;DependencyHandler&lt;/c1&gt;&lt;/a0&gt; for examples and a complete reference for declaring dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190530T095427Z" creationid="huanghaohang" creationdate="20190530T095427Z">
        <seg>还有一些其他情况，需要微调依赖声明。有关示例及完整的依赖声明的参考，请参阅 &lt;a0&gt;&lt;c1&gt;DependencyHandler&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are separate settings for HTTPS.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073520Z" creationid="huanghaohang" creationdate="20180130T073520Z">
        <seg>HTTPS 有单独的设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several different types of dependencies that you can declare:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153736Z" creationid="huanghaohang" creationdate="20190527T153736Z">
        <seg>你可以声明几种不同类型的依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several different types of repositories you can declare:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025759Z" creationid="huanghaohang" creationdate="20190603T025759Z">
        <seg>可以声明几种不同类型的仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several places where you can put the source for the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190717T133047Z" creationid="huanghaohang" creationdate="20190715T154304Z">
        <seg>有几个地方可以放插件的源码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several places where you can put the source for the task class.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190626T150821Z" creationid="huanghaohang" creationdate="20190626T150821Z">
        <seg>有几个地方可以放任务类的源码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several ways to get an Ant reference:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094706Z" creationid="huanghaohang" creationdate="20180105T094706Z">
        <seg>有几种方法可以获取 Ant 引用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several ways to set an Ant property, so that the property can be used by Ant tasks. You can set the property directly on the &lt;c0&gt;AntBuilder&lt;/c0&gt; instance. The Ant properties are also available as a Map which you can change. You can also use the Ant &lt;c1&gt;property&lt;/c1&gt; task. Below are some examples of how to do this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094332Z" creationid="huanghaohang" creationdate="20180105T085231Z">
        <seg>有几种方法来设置一个 Ant 属性，以便该属性可以被 Ant 任务使用。你可以直接在 &lt;c0&gt;AntBuilder&lt;/c0&gt; 实例上设置属性。这些 Ant 属性也可以作为可以更改的 Map 来使用。你也可以使用 Ant &lt;c1&gt;property&lt;/c1&gt; 任务。以下是一些如何做到这一点的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several ways to set an Ant reference:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094651Z" creationid="huanghaohang" creationdate="20180105T094651Z">
        <seg>有几种方法可以设置 Ant 引用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several ways to use an init script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191204T122229Z" creationid="huanghaohang" creationdate="20191204T122229Z">
        <seg>使用一个初始化脚本的方法有几种：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several ways you can define the dependencies of a task. In &lt;a0&gt;Section 6.5, “Task dependencies”&lt;/a0&gt; you were introduced to defining dependencies using task names. Task names can refer to tasks in the same project as the task, or to tasks in other projects. To refer to a task in another project, you prefix the name of the task with the path of the project it belongs to. Below is an example which adds a dependency from &lt;c1&gt;projectA:taskX&lt;/c1&gt; to &lt;c2&gt;projectB:taskY&lt;/c2&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130050Z" creationid="huanghaohang" creationdate="20170919T130050Z">
        <seg>定义任务的依赖关系有几种方法。在《&lt;a0&gt;第6.5节，“任务依赖”&lt;/a0&gt;》已经向你介绍了使用任务名称来定义依赖。任务名称可以可以引用与该任务相同项目的任务，或者用于其他项目中的任务。要在另一个项目中引用任务，你需要将任务所属项目的路径作为前缀，加到它的名字中。下面的例子演示了如何添加&lt;c1&gt;projectA:taskX&lt;/c1&gt;对&lt;c2&gt;projectB:taskY&lt;/c2&gt;的依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two kinds of variables that can be declared in a build script: local variables and extra properties.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132549Z" creationid="huanghaohang" creationdate="20170913T132549Z">
        <seg>在构建脚本中，可以声明两种变量：局部变量和额外属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two ordering rules available: "&lt;s0&gt;&lt;e1&gt;must run after&lt;/e1&gt;&lt;/s0&gt;" and "&lt;s2&gt;&lt;e3&gt;should run after&lt;/e3&gt;&lt;/s2&gt;".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T030747Z" creationid="huanghaohang" creationdate="20170922T030656Z">
        <seg>有两种排序规则可用：“&lt;s0&gt;&lt;e1&gt;必须在之后运行&lt;/e1&gt;&lt;/s0&gt;”和“&lt;s2&gt;&lt;e3&gt;应该在之后运行&lt;/e3&gt;&lt;/s2&gt;”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are various types of dependencies that you can declare. One such type is an &lt;e0&gt;external dependency&lt;/e0&gt;. This a dependency on some files built outside the current build, and stored in a repository of some kind, such as Maven central, or a corporate Maven or Ivy repository, or a directory in the local file system.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043125Z" creationid="huanghaohang" creationdate="20170908T043125Z">
        <seg>你可以声明多种类型的依赖。其中一种这样的类型叫&lt;e0&gt;外部依赖&lt;/e0&gt;，它是依赖于在当前构建之外所生成的一些文件，并存储在某种存储库中，例如Maven Central，Maven私服，Ivy存储库，或者是本地文件系统中的某个目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a common situation, that multiple tasks depend on the existence of a directory. Of course you can deal with this by adding a &lt;c0&gt;mkdir&lt;/c0&gt; to the beginning of those tasks. But this is kind of bloated. There is a better solution (works only if the tasks that need the directory have a &lt;s1&gt;&lt;e2&gt;dependsOn&lt;/e2&gt;&lt;/s1&gt; relationship):</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132357Z" creationid="huanghaohang" creationdate="20170917T132357Z">
        <seg>有一个常见的情况是，有多个任务依赖于某个目录的存在。当然，你可以在这些任务开始时执行&lt;c0&gt;mkdir&lt;/c0&gt;来解决这个问题。但这是一种臃肿的解决方法。更好的解决方案是这样的（仅适用于需要某个目录的这些任务有&lt;s1&gt;&lt;e2&gt;依赖&lt;/e2&gt;&lt;/s1&gt;关系的情况）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a daemon log file, which by default is located in the Gradle user home directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025640Z" creationid="huanghaohang" creationdate="20180120T025640Z">
        <seg>守护进程的日志文件默认在 Gradle 用户主目录下。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a map-based syntax for defining an artifact using a file. The map must include a &lt;c0&gt;file&lt;/c0&gt; entry that defines the file. The map may include other artifact properties:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075729Z" creationid="huanghaohang" creationdate="20190606T075729Z">
        <seg>有基于映射的语法来定义使用文件的工件。这个映射必须饮食一个 &lt;c0&gt;file&lt;/c0&gt; 条目，它可能还包含其他的工件属性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a shortcut form for declaring external dependencies, which uses a string of the form &lt;c0&gt;"&lt;e1&gt;&lt;c2&gt;group&lt;/c2&gt;&lt;/e1&gt;:&lt;e3&gt;&lt;c4&gt;name&lt;/c4&gt;&lt;/e3&gt;:&lt;e5&gt;&lt;c6&gt;version&lt;/c6&gt;&lt;/e5&gt;"&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043854Z" creationid="huanghaohang" creationdate="20170908T043854Z">
        <seg>这里还有一种更加简洁的方式来声明外部依赖，它使用一个&lt;c0&gt;"&lt;e1&gt;&lt;c2&gt;group&lt;/c2&gt;&lt;/e1&gt;:&lt;e3&gt;&lt;c4&gt;name&lt;/c4&gt;&lt;/e3&gt;:&lt;e5&gt;&lt;c6&gt;version&lt;/c6&gt;&lt;/e5&gt;"&lt;/c0&gt;形式的字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a shorthand way to define a task like our &lt;c0&gt;hello&lt;/c0&gt; task above, which is more concise.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155226Z" creationid="95" creationdate="20170726T155226Z">
        <seg>有一种简单的方法可以定义像上面我们的这类&lt;c0&gt;hello&lt;/c0&gt; 任务，它看起来更简洁。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is also a filter so that uncommon tasks can be hidden. You can toggle the filter via the Filter button. Editing the filter allows you to configure which tasks and projects are shown. Hidden tasks show up in red. Note: newly created tasks will show up by default (versus being hidden by default).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T144114Z" creationid="huanghaohang" creationdate="20170911T144114Z">
        <seg>这里还提供了一个过滤器，可以隐藏不常见的任务。你可以通过“过滤器”按钮切换过滤器。编辑过滤器可以配置显示哪些任务和项目。隐藏的任务显示为红色。注意：新创建的任务默认情况下是显示状态（而不是默认隐藏）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is also a stand-alone &lt;a0&gt;&lt;c1&gt;TestReport&lt;/c1&gt;&lt;/a0&gt; task type which can generate the HTML test report from the binary results generated by one or more &lt;c2&gt;Test&lt;/c2&gt; task instances. To use this task type, you need to define a &lt;c3&gt;destinationDir&lt;/c3&gt; and the test results to include in the report. Here is a sample which generates a combined report for the unit tests from subprojects:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T043959Z" creationid="huanghaohang" creationdate="20180406T043549Z">
        <seg>还有一个独立的 &lt;a0&gt;&lt;c1&gt;TestReport&lt;/c1&gt;&lt;/a0&gt; 任务类型，它可以从一个或多个 &lt;c2&gt;Test&lt;/c2&gt; 任务实例生成的二进制结果中生成 HTML 测试报告。要使用此任务类型，你需要定义一个 &lt;c3&gt;destinationDir&lt;/c3&gt; 以及要包含在报告的测试结果。下面是一个从子项目的单元测试中生成一个组合报告的示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is an alternative syntax for defining tasks, which you may prefer to use:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121128Z" creationid="huanghaohang" creationdate="20170919T121128Z">
        <seg>有一种用于定义任务的替代语法，你可能更希望使用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is another way of configuring a task. It also preserves the context and it is arguably the most readable. It is usually our favorite.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124601Z" creationid="huanghaohang" creationdate="20170919T124601Z">
        <seg>还有一种配置任务的方式。它也保留了上下文，可以说是可读性最强的。它是我们通常最喜欢的方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is another way to deal with transitive dependencies &lt;s0&gt;&lt;e1&gt;without&lt;/e1&gt;&lt;/s0&gt; XML descriptor files. You can do this with Gradle, but we don't recommend it. We mention it for the sake of completeness and comparison with other build tools.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T015647Z" creationid="huanghaohang" creationdate="20190606T015430Z">
        <seg>还有一种处理传递依赖 &lt;s0&gt;&lt;e1&gt;不带&lt;/e1&gt;&lt;/s0&gt; XML 描述符文件的方法。你可以用 Gradle 来做，但是我们不推荐。之所以提到它，是为了完整性以及与其他构建工具作比较。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is lots more you can do with Ant in your build scripts. You can find out more in &lt;a0&gt;Chapter 17, &lt;i1&gt;Using Ant from Gradle&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T154458Z" creationid="95" creationdate="20170728T153845Z">
        <seg>在构建脚本中您可以利用Ant做更多的事情，更多细节请参阅 &lt;a0&gt;第十七章，&lt;i1&gt;在Gradle中使用Ant&lt;/i1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is no history available from a previous execution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140755Z" creationid="huanghaohang" creationdate="20190707T140530Z">
        <seg>没有自上次执行以来的有效历史记录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is some more work to do if you need support for other protocols than &lt;c0&gt;file&lt;/c0&gt;. In this case the native Maven code we delegate to needs additional libraries. Which libraries depend on the protocol you need. The available protocols and the corresponding libraries are listed in &lt;a1&gt;Table 52.3, “Protocol jars for Maven deployment”&lt;/a1&gt; (those libraries have again transitive dependencies which have transitive dependencies). &lt;s2&gt;[&lt;a3&gt;19&lt;/a3&gt;]&lt;/s2&gt; For example to use the ssh protocol you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092631Z" creationid="huanghaohang" creationdate="20190607T092631Z">
        <seg>如果你需要对 &lt;c0&gt;file&lt;/c0&gt; 以外的其他协议支持，那么还要再做一些事情。在这种情况下，我们委派的本地 Maven 代码需要其他的库。具体是哪些库，则取决于你需要的协议。&lt;a1&gt;表 52.3，“用于Maven部署的协议 jar”&lt;/a1&gt; 中列出了可用的协议和相应的库（这些库有传递依赖，而这些依赖也有其自己的传递依赖）。 &lt;s2&gt;[&lt;a3&gt;19&lt;/a3&gt;]&lt;/s2&gt; 例如，要使用 SSH 协议，你可以执行以下操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These are flattened and the contents included in the file collection.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150607Z" creationid="huanghaohang" creationdate="20170927T150553Z">
        <seg>它们会被展开，并且内容包含在文件集合中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These convention properties are provided by a convention object of type &lt;a0&gt;&lt;c1&gt;ProjectReportsPluginConvention&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T041040Z" creationid="huanghaohang" creationdate="20190123T041040Z">
        <seg>这些约定属性由一个&lt;a0&gt;&lt;c1&gt;ProjectReportsPluginConvention&lt;/c1&gt;&lt;/a0&gt; 类型的约定对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These convention properties are provided by a convention object of type &lt;a0&gt;&lt;c1&gt;ScalaSourceSet&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020341Z" creationid="huanghaohang" creationdate="20180407T020341Z">
        <seg>这些属性由一个 &lt;a0&gt;&lt;c1&gt;ScalaSourceSet&lt;/c1&gt;&lt;/a0&gt; 类型的约定对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These incoming files form the dependencies of the project. Gradle allows you to tell it what the dependencies of your project are, so that it can take care of finding these dependencies, and making them available in your build. The dependencies might need to be downloaded from a remote Maven or Ivy repository, or located in a local directory, or may need to be built by another project in the same multi-project build. We call this process &lt;e0&gt;dependency resolution&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170905T152131Z" creationid="95" creationdate="20170905T151718Z">
        <seg>这些传入的文件构成了这个项目的依赖。Gradle可以让你告诉它你项目的依赖是什么，以便它处理查找这些依赖，以及把它们加入构建。这些依赖可能需要从远程的Maven或Ivy仓库中下载，或者位于本地目录中，或是需要由同一个多项目构建的其他子项目来构建。这个过程我们称之为 &lt;e0&gt;依赖解析&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These items must be supplied as the property projects &lt;c0&gt;signing.keyId&lt;/c0&gt;, &lt;c1&gt;signing.password&lt;/c1&gt; and &lt;c2&gt;signing.secretKeyRingFile&lt;/c2&gt; respectively. Given the personal and private nature of these values, a good practice is to store them in the user &lt;c3&gt;gradle.properties&lt;/c3&gt; file (described in &lt;a4&gt;Section 14.2, “Gradle properties and system properties”&lt;/a4&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T132525Z" creationid="huanghaohang" creationdate="20190608T132525Z">
        <seg>这些事项必须分别作为属性项目 &lt;c0&gt;signing.keyId&lt;/c0&gt;，&lt;c1&gt;signing.password&lt;/c1&gt; 和 &lt;c2&gt;signing.secretKeyRingFile&lt;/c2&gt; 提供。考虑到这些值的个人及私人性质，较好的做法是把它们存储在用户 &lt;c3&gt;gradle.properties&lt;/c3&gt; 文件中（&lt;a4&gt;第 14.2 节，《Gradle 属性和系统属性》&lt;/a4&gt;中所述）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These outgoing files form the publications of the project. Gradle also takes care of this important work for you. You declare the publications of your project, and Gradle take care of building them and publishing them somewhere. Exactly what "publishing" means depends on what you want to do. You might want to copy the files to a local directory, or upload them to a remote Maven or Ivy repository. Or you might use the files in another project in the same multi-project build. We call this process &lt;e0&gt;publication&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170907T154859Z" creationid="95" creationdate="20170907T154301Z">
        <seg>这些输出文件构成了项目的发布内容。Gradle也会为你处理这个重要的事情。你声明项目的发布内容，Gradle就会负责构建它们并把它们发布到某个地方。“发布”的确切含义取决于你想做什么。你可能想把一些文件拷贝到一个本地的目录，把它们上传到一个远程的Maven或Ivy仓库，或是在同一个多项目构建的另一个子项目中使用这些文件。这个过程，我们称之为&lt;e0&gt;发布&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These plugins add support for various languages which can be compiled for and executed in the JVM.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140551Z" creationid="huanghaohang" creationdate="20180205T140551Z">
        <seg>这些插件添加了让各种语言可以在 JVM 中被编译和执行的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These plugins add support for various languages:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141401Z" creationid="huanghaohang" creationdate="20180205T141401Z">
        <seg>这些插件添加了对各种语言的支持：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These plugins form the basic building blocks which the other plugins are assembled from. They are available for you to use in your build files, and are listed here for completeness. However, be aware that they are not yet considered part of Gradle's public API. As such, these plugins are not documented in the user guide. You might refer to their API documentation to learn more about them.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180215T054221Z" creationid="huanghaohang" creationdate="20180215T054221Z">
        <seg>这些插件构成了基本构建块，其他插件都由此组装而来。它们可供您在构建文件中使用，并在此处完整列出。但是请注意，它们还没有被视为 Gradle 公共 API 的一部分。因此，这些插件都不在用户指南中记录。你可以参考它们的 API 文档来了解更多关于它们的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These plugins provide help with your software development process.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144043Z" creationid="huanghaohang" creationdate="20180207T144043Z">
        <seg>这些插件为你的软件开发过程提供帮助。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These plugins provide some integration with various runtime technologies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T013845Z" creationid="huanghaohang" creationdate="20180206T013845Z">
        <seg>以下这些插件提供了一些与各种运行时技术的集成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are provided by a &lt;a0&gt;&lt;c1&gt;EarPluginConvention&lt;/c1&gt;&lt;/a0&gt; convention object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142657Z" creationid="huanghaohang" creationdate="20180416T142657Z">
        <seg>这些属性由一个 &lt;a0&gt;&lt;c1&gt;EarPluginConvention&lt;/c1&gt;&lt;/a0&gt; 公约对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are provided by a &lt;a0&gt;&lt;c1&gt;JettyPluginConvention&lt;/c1&gt;&lt;/a0&gt; convention object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144810Z" creationid="huanghaohang" creationdate="20180416T144810Z">
        <seg>这些属性都由一个 &lt;a0&gt;&lt;c1&gt;JettyPluginConvention&lt;/c1&gt;&lt;/a0&gt; 公约对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are provided by a &lt;a0&gt;&lt;c1&gt;MavenPluginConvention&lt;/c1&gt;&lt;/a0&gt; convention object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060745Z" creationid="huanghaohang" creationdate="20190607T060745Z">
        <seg>这些属性由一个&lt;a0&gt;&lt;c1&gt;MavenPluginConvention&lt;/c1&gt;&lt;/a0&gt; 约定对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are provided by a &lt;a0&gt;&lt;c1&gt;WarPluginConvention&lt;/c1&gt;&lt;/a0&gt; convention object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142505Z" creationid="huanghaohang" creationdate="20180408T142505Z">
        <seg>这些属性由一个 &lt;a0&gt;&lt;c1&gt;WarPluginConvention&lt;/c1&gt;&lt;/a0&gt; 的约定对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are provided by a convention object of type &lt;a0&gt;&lt;c1&gt;GroovySourceSet&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T235032Z" creationid="huanghaohang" creationdate="20180406T235032Z">
        <seg>这些属性由一个 &lt;a0&gt;&lt;c1&gt;GroovySourceSet&lt;/c1&gt;&lt;/a0&gt; 类的约定对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These properties are provided by convention objects of type &lt;a0&gt;&lt;c1&gt;JavaPluginConvention&lt;/c1&gt;&lt;/a0&gt;, and &lt;a2&gt;&lt;c3&gt;BasePluginConvention&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094828Z" creationid="haohang" creationdate="20180314T094720Z">
        <seg>这些属性由 &lt;a0&gt;&lt;c1&gt;JavaPluginConvention&lt;/c1&gt;&lt;/a0&gt; 和&lt;a2&gt;&lt;c3&gt;BasePluginConvention&lt;/c3&gt;&lt;/a2&gt; 这些类型的约定对象提供。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Third party plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035029Z" creationid="huanghaohang" creationdate="20180517T035029Z">
        <seg>第三方插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This ability to configure properties of objects to reflect the value of another object's task at all times (i.e. even when it changes) is known as “&lt;s0&gt;&lt;e1&gt;convention mapping&lt;/e1&gt;&lt;/s0&gt;”. It allows Gradle to provide conciseness through convention-over-configuration and sensible defaults yet not require complete reconfiguration if a conventional default needs to be changed. Without this, in the example above, we would have had to reconfigure every object that needs to work with the class files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032604Z" creationid="huanghaohang" creationdate="20180131T032107Z">
        <seg>这种配置对象属性以随时反映另一个对象任务值（即使它发生变化）的能力被称为“&lt;s0&gt;&lt;e1&gt;约定映射&lt;/e1&gt;&lt;/s0&gt;”。它可以令 Gradle 通过约定优于配置和合理的默认设置来实现简洁的配置，而如果需要修改约定的默认值时，也不需要完全重新配置。如果没有这一点，在上面的例子中，我们就不得不重新配置每个需要使用类文件的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This adds a &lt;c0&gt;Zip&lt;/c0&gt; archive task with the name &lt;c1&gt;myZip&lt;/c1&gt; which produces ZIP file &lt;c2&gt;zipProject-1.0.zip&lt;/c2&gt;. It is important to distinguish between the name of the archive task and the name of the archive generated by the archive task. The default name for archives can be changed with the &lt;c3&gt;archivesBaseName&lt;/c3&gt; project property. The name of the archive can also be changed at any time later on.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232307Z" creationid="huanghaohang" creationdate="20171206T231901Z">
        <seg>它增加了一个叫&lt;c1&gt;myZip&lt;/c1&gt;的&lt;c0&gt;Zip&lt;/c0&gt;归档任，生成ZIP文件&lt;c2&gt;zipProject-1.0.zip&lt;/c2&gt;。区分归档任务的名称和归档任务生成的归档名称是很重要的。归档的默认名称可以用&lt;c3&gt;archivesBaseName&lt;/c3&gt;项目属性来修改，也可以在之后的任何时候更改归档文件的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This adds repositories which look into one or more directories for finding dependencies. If you only work with flat directory resolvers you don't need to set all attributes of a dependency. See &lt;a0&gt;Section 50.4.8, “Optional attributes”&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041009Z" creationid="huanghaohang" creationdate="20190603T040614Z">
        <seg>这将添加一些在一个或多个目录查找依赖的仓库。如果你只使用平面目录解析器，那么不需要设置依赖的所有属性。请参阅 &lt;a0&gt;第 50.4.8 节，《可选属性》&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This also applies the Java plugin to your project. Running &lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt; will compile, test and WAR your project. Gradle will look for the source files to include in the WAR file in &lt;c2&gt;src/main/webapp&lt;/c2&gt;. Your compiled classes, and their runtime dependencies are also included in the WAR file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005149Z" creationid="huanghaohang" creationdate="20170909T004741Z">
        <seg>以上操作也会将Java插件应用到项目中。运行&lt;s0&gt;&lt;c1&gt;gradle build&lt;/c1&gt;&lt;/s0&gt;将对你的项目进行编译，测试和并打成WAR包。 Gradle将查找在&lt;c2&gt;src/main/webapp&lt;/c2&gt;目录中的源文件，并与所编译出来的类文件，及其运行时依赖关系一起包含到WAR文件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This also applies the War plugin to your project. Running &lt;s0&gt;&lt;c1&gt;gradle jettyRun&lt;/c1&gt;&lt;/s0&gt; will run your web application in an embedded Jetty web container. Running &lt;s2&gt;&lt;c3&gt;gradle jettyRunWar&lt;/c3&gt;&lt;/s2&gt; will build the WAR file, and then run it in an embedded web container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005825Z" creationid="huanghaohang" creationdate="20170909T005825Z">
        <seg>以上操作也会将War插件应用到你的项目中。运行&lt;s0&gt;&lt;c1&gt;gradle jettyRun&lt;/c1&gt;&lt;/s0&gt;，将在嵌入式Jetty Web容器中运行你的Web应用程序。运行&lt;s2&gt;&lt;c3&gt;gradle jettyRunWar&lt;/c3&gt;&lt;/s2&gt;将先构建出WAR文件，然后在嵌入式Web容器中运行它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This can also be enabled at invocation time via the &lt;s0&gt;&lt;c1&gt;--debug-jvm&lt;/c1&gt;&lt;/s0&gt; task option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T062427Z" creationid="haohang" creationdate="20180330T062427Z">
        <seg>这也可以在调用时通过 &lt;s0&gt;&lt;c1&gt;--debug-vm&lt;/c1&gt;&lt;/s0&gt; 任务选项进行启用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter aims to serve as an introduction to plugins and Gradle and the role they play. For more information on the inner workings of plugins, see &lt;a0&gt;Chapter 58, &lt;i1&gt;Writing Custom Plugins&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032653Z" creationid="huanghaohang" creationdate="20180131T032653Z">
        <seg>本章旨在介绍插件和 Gradle 以及它们所扮演的角色。有关插件内部运作的详细信息，请参阅《&lt;a0&gt;第五十八章，&lt;i1&gt;编写自定义插件&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter describes a very simple Groovy project. Usually, a real project will require more than this. Because a Groovy project &lt;s0&gt;&lt;e1&gt;is&lt;/e1&gt;&lt;/s0&gt; a Java project, whatever you can do with a Java project, you can also do with a Groovy project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T003349Z" creationid="huanghaohang" creationdate="20170909T003349Z">
        <seg>本章介绍了一个非常简单的Groovy项目。通常情况下，一个真实的项目所需要的不止于此。因为Groovy项目&lt;s0&gt;&lt;e1&gt;也是&lt;/e1&gt;&lt;/s0&gt;一个Java项目，无论你如何使用Java项目，Groovy项目也可以被这样使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter describes how to publish build artifacts in the &lt;a0&gt;Apache Ivy&lt;/a0&gt; format, usually to a repository for consumption by other builds or projects. What is published is one or more artifacts created by the build, and an Ivy &lt;e1&gt;module descriptor&lt;/e1&gt; (normally &lt;c2&gt;ivy.xml&lt;/c2&gt;) that describes the artifacts and the dependencies of the artifacts, if any.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T154753Z" creationid="huanghaohang" creationdate="20210516T154202Z">
        <seg>本章内容主要描述如何发布使用 &lt;a0&gt;Apache Ivy&lt;/a0&gt; 格式的构建工件，通常是发布到一个用于其他构建或项目的仓库。发布的是由构建创建的一个或多个工件，以及描述工件和工件的依赖关系（如果有）的 Ivy &lt;e1&gt;模块描述符&lt;/e1&gt;（通常是&lt;c2&gt;ivy.xml&lt;/c2&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter describes the &lt;s0&gt;&lt;e1&gt;original&lt;/e1&gt;&lt;/s0&gt; publishing mechanism available in Gradle 1.0: in Gradle 1.3 a new mechanism for publishing was introduced. While this new mechanism is &lt;a2&gt;incubating&lt;/a2&gt; and not yet complete, it introduces some new concepts and features that do (and will) make Gradle publishing even more powerful.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T022719Z" creationid="huanghaohang" creationdate="20190606T022719Z">
        <seg>本章介绍的是在 Gradle 1.0 版本中的&lt;s0&gt;&lt;e1&gt;原始&lt;/e1&gt;&lt;/s0&gt;发布机制：在 Gradle 1.3，我们引入了新的发布机制。这种新机制现在还在&lt;a2&gt;试验性阶段&lt;/a2&gt;而尚未完成，它它引入了一些新的概念和特性，使得 Gradle 的发布功能更强大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter describes the new &lt;a0&gt;incubating&lt;/a0&gt; Ivy publishing support provided by the “&lt;c1&gt;ivy-publish&lt;/c1&gt;” plugin. Eventually this new publishing support will replace publishing via the &lt;c2&gt;Upload&lt;/c2&gt; task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T154150Z" creationid="huanghaohang" creationdate="20210516T154105Z">
        <seg>本章内容描述了一个新的 &lt;a0&gt;孵化中的&lt;/a0&gt; 功能，是由“&lt;c1&gt;ivy-publish&lt;/c1&gt;”插件提供的 Ivy 发布支持。最终这个新的发布支持将会取代&lt;c2&gt;Upload&lt;/c2&gt;任务的发布功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter gives some advice for troubleshooting problems and explains how to get help with your problems.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T120955Z" creationid="95" creationdate="20170723T120955Z">
        <seg>本章节给出了一些解决问题的建议，并解释了如何获取帮助。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter introduces some of the Gradle's support for web applications. Gradle provides two plugins for web application development: the War plugin and the Jetty plugin. The War plugin extends the Java plugin to build a WAR file for your project. The Jetty plugin extends the War plugin to allow you to deploy your web application to an embedded Jetty web container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004545Z" creationid="huanghaohang" creationdate="20170909T004331Z">
        <seg>本章介绍了Gradle对Web应用程序的相关支持。Gradle提供了两个用于Web应用开发的插件：War和Jetty。 War插件扩展了Java插件，可以用来构建WAR文件。 Jetty插件扩展了War插件，能将Web应用程序部署到嵌入式Jetty Web容器中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter introduces some of the basics of dependency management in Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130521Z" creationid="95" creationdate="20170803T130521Z">
        <seg>本章主要介绍 Gradle 依赖管理的一些基础知识。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter introduces the basics of the Gradle command-line. You run a build using the &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; command, which you have already seen in action in previous chapters.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T030310Z" creationid="huanghaohang" creationdate="20170909T030310Z">
        <seg>本章介绍了Gradle命令行的基础知识，正如你在前面章节所看到的使用&lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt;命令来运行构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter is a work in progress</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091016Z" creationid="huanghaohang" creationdate="20190606T091016Z">
        <seg>本章还在完善中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter is a work in progress.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004357Z" creationid="huanghaohang" creationdate="20170909T004309Z">
        <seg>本章还在完善中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter is about how you declare the outgoing artifacts of your project, and how to work with them (e.g. upload them). We define the artifacts of the projects as the files the project provides to the outside world. This might be a library or a ZIP distribution or any other file. A project can publish as many artifacts as it wants.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024011Z" creationid="huanghaohang" creationdate="20190606T024011Z">
        <seg>本章介绍了如何声明项目的输出工件，以及如何使用这些工件（比如上传这些工件）。我们将项目的工件定义为项目向外界提供的文件。它可能是一个库，一个 ZIP 分发包，或任何其他文件。一个项目想发布多少个工件都可以。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter is currently a work in progress.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T120352Z" creationid="95" creationdate="20170723T120352Z">
        <seg>本章节目前还在完善中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter looks at some of the details of writing a build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150756Z" creationid="huanghaohang" creationdate="20170911T150756Z">
        <seg>这一章着眼于编写构建脚本的一些细节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This creates a copy task with no default behavior. The task can be configured using its API (see &lt;a0&gt;&lt;c1&gt;Copy&lt;/c1&gt;&lt;/a0&gt;). The following examples show several different ways to achieve the same configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124251Z" creationid="huanghaohang" creationdate="20170919T122246Z">
        <seg>上面的代码创建了一个没有默认行为的复制任务，这个任务可以使用它的API（参见&lt;a0&gt;&lt;c1&gt;Copy&lt;/c1&gt;&lt;/a0&gt;）来配置。下面的示例演示了实现相同配置的几种不同的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This declares a dependency on Groovy. Groovy itself has dependencies. But Gradle does not look for an XML descriptor to figure them out but gets the information from the build file. The dependencies of a client module can be normal module dependencies or artifact dependencies or another client module. Have also a look at the API documentation: &lt;a0&gt;&lt;c1&gt;ClientModule&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051828Z" creationid="huanghaohang" creationdate="20190531T051434Z">
        <seg>这里声明了一个对 Groovy 的依赖。Groovy 本身也有依赖。但是 Gradle 不会去查找 XML 描述符来找出它的依赖，而是从构建文件中获取信息。客户端模块的依赖可以是正常模块依赖或工件依赖，或者是另一个客户端模块。还请查看 API 文档：&lt;a0&gt;&lt;c1&gt;ClientModule&lt;/c1&gt;&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This determines how much information to write out stack traces when errors occur. Note: if you specify a stack trace level on either the Command Line or Favorites tab, it will override this stack trace level.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150140Z" creationid="huanghaohang" creationdate="20170911T150140Z">
        <seg>这决定了错误发生出时，有多少信息会写到堆栈跟踪。注意：如果你在命令行或收藏夹选项卡上指定了堆栈跟踪级别，将会覆盖这里的堆栈跟踪级别。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This did not work out. If nothing else is defined, Gradle executes the task in alphanumeric order. Therefore &lt;c0&gt;:consumer:action&lt;/c0&gt; is executed before &lt;c1&gt;:producer:action&lt;/c1&gt;. Let's try to solve this with a hack and rename the producer project to &lt;c2&gt;aProducer&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140723Z" creationid="huanghaohang" creationdate="20190616T140723Z">
        <seg>它并没有成功。如果没有定义别的，那么 Gradle 将按字母数字的顺序执行任务。因此，&lt;c0&gt;:consumer:action&lt;/c0&gt; 会在 &lt;c1&gt;:producter:action&lt;/c1&gt; 之前执行 。 让我们尝试用一个技巧来解决这个问题，并将生产者项目重命名为 &lt;c2&gt;aProducer&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This enables very readable code, especially when using the out of the box tasks provided by the plugins (e.g. &lt;c0&gt;compile&lt;/c0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141645Z" creationid="95" creationdate="20170727T141349Z">
        <seg>这使得代码很易于阅读，尤其是当使用插件所提供的任务时（例如 &lt;c0&gt;compile&lt;/c0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example uses method &lt;c0&gt;Project.afterEvaluate()&lt;/c0&gt; to add a closure which is executed after the project is evaluated.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150538Z" creationid="huanghaohang" creationdate="20190613T150538Z">
        <seg>这个例子使用了 &lt;c0&gt;Project.afterEvaluate()&lt;/c0&gt; 方法来添加一个在项目评估之后执行的闭包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This feature is helpful if you work with tasks provided by Gradle. It allows you to add &lt;s0&gt;&lt;e1&gt;conditional&lt;/e1&gt;&lt;/s0&gt; execution of the built-in actions of such a task. &lt;s2&gt;[&lt;a3&gt;7&lt;/a3&gt;]&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085159Z" creationid="huanghaohang" creationdate="20170922T084845Z">
        <seg>如果你使用Gradle提供的任务，那么此功能将非常有用。它允许你向一个任务的内置操作添加执行&lt;s0&gt;&lt;e1&gt;条件&lt;/e1&gt;&lt;/s0&gt;。 &lt;s2&gt;[&lt;a3&gt;7&lt;/a3&gt;]&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This information includes the full task path, the task type, possible commandline options and the description of the given task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T013043Z" creationid="huanghaohang" creationdate="20170910T012852Z">
        <seg>该信息包括完整的任务路径，任务类型，可用的命令行选项以及任务的描述信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a reason why some projects prefer to store their libraries in their version control system. This approach is fully supported by Gradle. The libraries can be stored in a flat directory without any XML module descriptor files. Yet Gradle offers complete transitive dependency management. You can use either client module dependencies to express the dependency relations, or artifact dependencies in case a first level dependency has no transitive dependencies. People can check out such a project from svn and have everything necessary to build it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T010312Z" creationid="huanghaohang" creationdate="20190606T000943Z">
        <seg>这也是为什么一些项目希望将他们的库存在其版本控制系统中的原因。这种做法 Gradle 完全支持。库可以存在没有任何 XML 模块描述符文件的平面目录中，但 Gradle 提供了完整的传递依赖管理。你可以使用客户端模块依赖来表达依赖关系，或者是使用工件依赖，以防第一级依赖没有传递依赖。人们可以从 svn 中检出这样的项目，并具有构建它所需的的一切。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is all you need to define a Java project. This will apply the Java plugin to your project, which adds a number of tasks to your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012839Z" creationid="95" creationdate="20170730T012607Z">
        <seg>定义一个Java项目只需要这些就够了。它将会向你的项目应用Java插件，从而添加一些任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is also nice example for the usage of client modules. The POM file in Maven Central for the ant-commons-net task does not provide the right information for this use case.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T142147Z" creationid="huanghaohang" creationdate="20191202T141728Z">
        <seg>这对于客户端模块的用法也是一个不错的示例。对于这个用例而言，在 Maven 中央仓中针对 ant-commons-net 任务的 POM 文件没有提供到正确的信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to running &lt;s0&gt;&lt;c1&gt;gradle clean run&lt;/c1&gt;&lt;/s0&gt;. In a multi-project build every subproject can have its own specific default tasks. If a subproject does not specify default tasks, the default tasks of the parent project are used (if defined).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T024222Z" creationid="95" creationdate="20170729T023929Z">
        <seg>这与运行 &lt;s0&gt;&lt;c1&gt;gradle clean run&lt;/c1&gt;&lt;/s0&gt;的结果是一样的。在多项目构建中，每一个子项目都可以有它自己的指定的默认任务。如果一个子项目没有指定默认任务，而父项目定义了的话，那么将会使用父项目的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is similar to the way we would normally configure objects in Java. You have to repeat the context (&lt;c0&gt;myCopy&lt;/c0&gt;) in the configuration statement every time. This is a redundancy and not very nice to read.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124522Z" creationid="huanghaohang" creationdate="20170919T124322Z">
        <seg>这类似于我们通常在Java中配置对象的方式。你必须在每一次的配置语句重复上下文 （&lt;c0&gt;myCopy&lt;/c0&gt;）。这显得很冗余也不好阅读。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This launching of an extra JVM on every build execution is quite expensive, which is why we highly recommend that you use the Gradle Daemon if you are specifying &lt;c0&gt;org.gradle.java.home&lt;/c0&gt; or &lt;c1&gt;org.gradle.jvmargs&lt;/c1&gt;. See &lt;a2&gt;Chapter 19, &lt;i3&gt;The Gradle Daemon&lt;/i3&gt;&lt;/a2&gt; for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073132Z" creationid="huanghaohang" creationdate="20180130T073132Z">
        <seg>在每次构建执行中都启动一个额外的 JVM 的开销是非常大的，这就是为什么如果你指定了 &lt;c0&gt;org.gradle.java.home&lt;/c0&gt; 或 &lt;c1&gt;org.gradle.jvmargs&lt;/c1&gt;，我们会强烈建议你使用 Gradle Daemon。更多细节请查阅《&lt;a2&gt;第十九章，&lt;i3&gt;Gradle 守护进程&lt;/i3&gt;&lt;/a2&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that using any form of shared build script logic or configuration injection (&lt;c0&gt;allprojects&lt;/c0&gt;, &lt;c1&gt;subprojects&lt;/c1&gt;, etc.) will cause your projects to be coupled. As we extend the concept of project decoupling and provide features that take advantage of decoupled projects, we will also introduce new features to help you to solve common use cases (like configuration injection) without causing your projects to be coupled.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T134609Z" creationid="huanghaohang" creationdate="20190622T134609Z">
        <seg>这意味着使用任何形式的共享构建脚本逻辑或配置注入(&lt;c0&gt;allproject&lt;/c0&gt;，&lt;c1&gt;subprojects&lt;/c1&gt;等）都会导致你的项目耦合。当我们扩展项目解耦的概念，并提供利用去耦项目的功能时，我们也将引入新功能来帮助你解决常见的情况（如配置注入）而不会导致项目耦合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that you can just put you build source code in this directory and stick to the layout convention for a Java/Groovy project (see &lt;a0&gt;Table 23.4, “Java plugin - default project layout”&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T134204Z" creationid="huanghaohang" creationdate="20191201T134204Z">
        <seg>这意味着你只需将构建源代码放到这个目录当中，并保持 Java/Groovy 项目的布局约定（见&lt;a0&gt;表 23.4，“Java 插件——默认项目布局”&lt;/a0&gt;）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This mechanism has been superseded by 'Test Filtering', described above.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131828Z" creationid="huanghaohang" creationdate="20180405T131828Z">
        <seg>如上所述，这种机制已经被“测试过滤”所取代。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This plugin does not add any tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025931Z" creationid="huanghaohang" creationdate="20181203T025931Z">
        <seg>此插件不会添加任何任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This plugin provides a new DSL to support publishing artifacts to Ivy repositories, which improves on the existing DSL.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144020Z" creationid="huanghaohang" creationdate="20180207T143915Z">
        <seg>这个插件提供了一个新的 DSL，用于支持发布工件到 Ivy 存储库，它改进了现有的 DSL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This plugin provides a new DSL to support publishing artifacts to Maven repositories, which improves on the existing DSL.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144013Z" creationid="huanghaohang" creationdate="20180207T143930Z">
        <seg>这个插件提供了一个新的 DSL，用于支持发布工件到 Maven 存储库，它改进了现有的 DSL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This provides you with an alternate way to launch Gradle commands. This is useful if your project requires some extra setup that is done inside another batch file or shell script (such as specifying an init script).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150358Z" creationid="huanghaohang" creationdate="20170911T150358Z">
        <seg>它为你提供了启动Gradle命令的替代方式。如果你的项目需要在另一个批处理文件或 shell 脚本中做一些额外的配置（比如指定一个初始化脚本），这将会非常有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This report lists summary times and details for both the configuration phase and task execution. The times for configuration and task execution are sorted with the most expensive operations first. The task execution results also indicate if any tasks were skipped (and the reason) or if tasks that were not skipped did no work.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T030945Z" creationid="huanghaohang" creationdate="20170910T030945Z">
        <seg>该报告列出了配置阶段和任务执行的总体时间和详细信息。配置和任务执行的时间会先从大到小排序。任务执行的结果还表明是否有任务被跳过（及跳过原因），或者是否有任务什么都没做却没被跳过。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule implementation can be neatly encapsulated in a corporate plugin, and shared across all builds within the organisation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022624Z" creationid="huanghaohang" creationdate="20190605T022545Z">
        <seg>该规则的实现可以灵活地封装在一个公司插件中，并在组织内的所有构建中共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This task can be configured to change what is compared.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140203Z" creationid="huanghaohang" creationdate="20210515T140203Z">
        <seg>可以通过配置这个任务来更改所比较的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This task doesn't do anything useful, so let's add some behaviour. To do so, we add a method to the task and mark it with the &lt;a0&gt;&lt;c1&gt;TaskAction&lt;/c1&gt;&lt;/a0&gt; annotation. Gradle will call the method when the task executes. You don't have to use a method to define the behaviour for the task. You could, for instance, call &lt;c2&gt;doFirst()&lt;/c2&gt; or &lt;c3&gt;doLast()&lt;/c3&gt; with a closure in the task constructor to add behaviour.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142758Z" creationid="huanghaohang" creationdate="20190705T142758Z">
        <seg>这个任务不执行任何有用的操作，所以我们来添加一些行为。为此，我们向任务添加一个方法，并使用 &lt;a0&gt;&lt;c1&gt;TaskAction&lt;/c1&gt;&lt;/a0&gt; 注解标记它。当任务执行时，Gradle 将调用这个方法。你不必使用方法来定义任务的行为。比如，你可以在任务构造方法中调用 &lt;c2&gt;doFirst()&lt;/c2&gt; 或 &lt;c3&gt;doLast()&lt;/c3&gt; 并传入一个闭包来添加行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This task is extremely useful for investigating the dependency resolution, finding out where certain dependencies are coming from and why certain versions are selected. For more information please see &lt;a0&gt;&lt;c1&gt;DependencyInsightReportTask&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022455Z" creationid="huanghaohang" creationdate="20170910T022209Z">
        <seg>这一任务对于调查依赖解析非常有用，它可以找出某些依赖关系来自于哪，以及为什么选择这些版本。有关更多信息，请参阅&lt;a0&gt;&lt;c1&gt;DependencyInsightReportTask&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type is used when no type was explicitly specified, and no type could be inferred.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155310Z" creationid="95" creationdate="20190201T155310Z">
        <seg>当未显式指定类型，并且无法推断出类型时，会使用该类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This user guide, like Gradle itself, is under very active development. Some parts of Gradle aren't documented as completely as they need to be. Some of the content presented won't be entirely clear or will assume that you know more about Gradle than you do. We need your help to improve this user guide. You can find out more about contributing to the documentation at the &lt;a0&gt;Gradle web site&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T165849Z" creationid="95" creationdate="20170721T162658Z">
        <seg>与Gradle一样，本指南也在不断地更新。一些Gradle的内容并未完全进行描述。有些内容并未完整描述，或者是假定了您对Gradle有一定的了解。我们需要您来帮助一起提供本指南。有关如何参与贡献文档的信息，可以在 &lt;a0&gt;Gradle 官方网站&lt;/a0&gt;上找到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This will add following tasks to the project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134057Z" creationid="huanghaohang" creationdate="20190127T134057Z">
        <seg>这将向项目添加以下任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This will also apply the Java plugin to the project, if it has not already been applied. The Groovy plugin extends the &lt;c0&gt;compile&lt;/c0&gt; task to look for source files in directory &lt;c1&gt;src/main/groovy&lt;/c1&gt;, and the &lt;c2&gt;compileTest&lt;/c2&gt; task to look for test source files in directory &lt;c3&gt;src/test/groovy&lt;/c3&gt;. The compile tasks use joint compilation for these directories, which means they can contain a mixture of java and groovy source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002355Z" creationid="huanghaohang" creationdate="20170909T002355Z">
        <seg>如果还没有应用Java插件，那么Java插件也会被应用到项目中。 Groovy插件分别扩展了&lt;c0&gt;compile&lt;/c0&gt;任务，以在&lt;c1&gt;src/main/groovy&lt;/c1&gt;目录中查找源文件；以及&lt;c2&gt;compileTest&lt;/c2&gt;任务，以在&lt;c3&gt;src/test/groovy&lt;/c3&gt;目录中查找测试源文件。编译任务会把这些目录加到编译中，因此也意味着可以在项目里混合编译java和groovy。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This will create a task (of type &lt;a0&gt;&lt;c1&gt;Sign&lt;/c1&gt;&lt;/a0&gt;) in your project named “&lt;c2&gt;signArchives&lt;/c2&gt;”, that will build any &lt;c3&gt;archives&lt;/c3&gt; artifacts (if needed) and then generate signatures for them. The signature files will be placed alongside the artifacts being signed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140240Z" creationid="huanghaohang" creationdate="20190608T135013Z">
        <seg>这将在你的项目中创建一个名为“&lt;c2&gt;signArchives&lt;/c2&gt;”的（&lt;a0&gt;&lt;c1&gt;Sign&lt;/c1&gt;&lt;/a0&gt;类型的）任务，这个任务会构建所有&lt;c3&gt;archives&lt;/c3&gt;的artifacts（如果需要），然后为它们生成签名。签名文件将和正在签名的工件放在一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This will create a task (of type &lt;a0&gt;&lt;c1&gt;Sign&lt;/c1&gt;&lt;/a0&gt;) in your project named “&lt;c2&gt;signStuffZip&lt;/c2&gt;”, that will build the input task's archive (if needed) and then sign it. The signature file will be placed alongside the artifact being signed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T140440Z" creationid="huanghaohang" creationdate="20190608T140212Z">
        <seg>这将在你的项目创建一个名为“&lt;c2&gt;signStuffZip&lt;/c2&gt;”的（&lt;a0&gt;&lt;c1&gt;Sign&lt;/c1&gt;&lt;/a0&gt;类型的）任务，这个任务会构建输入任务的归档（如果需要）并对其进行签字。签名文件将和正在签名的工件放在一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This works for &lt;s0&gt;&lt;e1&gt;any&lt;/e1&gt;&lt;/s0&gt; task. Line 3 of the example is just a shortcut for the &lt;c2&gt;tasks.getByName()&lt;/c2&gt; method. It is important to note that if you pass a closure to the &lt;c3&gt;getByName()&lt;/c3&gt; method, this closure is applied to &lt;s4&gt;&lt;e5&gt;configure&lt;/e5&gt;&lt;/s4&gt; the task, not when the task executes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124903Z" creationid="huanghaohang" creationdate="20170919T124629Z">
        <seg>这种方式适用于&lt;s0&gt;&lt;e1&gt;任何&lt;/e1&gt;&lt;/s0&gt;的任务。该例子的第3行只是&lt;c2&gt;tasks.getByName()&lt;/c2&gt;方法的快捷写法。特别要注意的是，如果你向&lt;c3&gt;getByName()&lt;/c3&gt;方法传入一个闭包，这个闭包是在&lt;s4&gt;&lt;e5&gt;配置&lt;/e5&gt;&lt;/s4&gt;这个任务的时候应用，而不是任务执行的时候。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access a Maven repository which uses basic authentication, you specify the username and password to use when you define the repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034049Z" creationid="huanghaohang" creationdate="20190603T034049Z">
        <seg>要访问一个使用基本认证的 Maven 仓库，请在定义该仓库时指定要使用的用户名和密码：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access a configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153612Z" creationid="huanghaohang" creationdate="20190527T153612Z">
        <seg>如果要访问配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access a repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025306Z" creationid="huanghaohang" creationdate="20190604T025247Z">
        <seg>要访问一个仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To access an Ivy repository which uses basic authentication, you specify the username and password to use when you define the repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025220Z" creationid="huanghaohang" creationdate="20190604T025220Z">
        <seg>要访问一个使用基本认证的 Ivy 仓库，请在定义该仓库时指定要使用的用户名和密码：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add a dependency, the corresponding task does not need to exist.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160246Z" creationid="95" creationdate="20170726T160246Z">
        <seg>在添加依赖时，对应的任务不一定要存在。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add additional content to the POM, the &lt;c0&gt;pom.project&lt;/c0&gt; builder can be used. With this builder, any element listed in the &lt;a1&gt;Maven POM reference&lt;/a1&gt; can be added.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100823Z" creationid="huanghaohang" creationdate="20190607T100823Z">
        <seg>如果要将其他内容添加到 POM，可以用 &lt;c0&gt;pom.project&lt;/c0&gt; 构建器。通过这个构建器，&lt;a1&gt;Maven POM 参考&lt;/a1&gt; 中所列出的任何元素都可以被添加进来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add any kind of repository (you can pretty easy write your own ones) you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030416Z" creationid="huanghaohang" creationdate="20190604T030416Z">
        <seg>要添加任何一种仓库（你可以很方便地编写自己的仓库），你可以这样做：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add some files as a dependency for a configuration, you simply pass a &lt;a0&gt;file collection&lt;/a0&gt; as a dependency:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105443Z" creationid="huanghaohang" creationdate="20190602T105443Z">
        <seg>要将一些文件添加为配置的依赖，你只需要把&lt;a0&gt;文件集合&lt;/a0&gt;作为依赖传入：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add the JCenter Maven repository (&lt;a0&gt;http://jcenter.bintray.com&lt;/a0&gt;) simply add this to your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031523Z" creationid="huanghaohang" creationdate="20190603T031523Z">
        <seg>若要添加 JCenter Maven 仓库（&lt;a0&gt;http://jcenter.bintray.com&lt;/a0&gt;），只需添加下面的内容到你的构建脚本中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add the central Maven 2 repository (&lt;a0&gt;http://repo1.maven.org/maven2&lt;/a0&gt;) simply add this to your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030933Z" creationid="huanghaohang" creationdate="20190603T030933Z">
        <seg>若要添加中央 Maven 2 仓库（&lt;a0&gt;http://repo1.maven.org/maven2&lt;/a0&gt;），只需添加下面的代码到你的构建脚本中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To analyze a project hierarchy, apply the Sonar Runner plugin to the root project of the hierarchy. Typically (but not necessarily) this will be the root project of the Gradle build. Information pertaining to the analysis as a whole, like server and database connections settings, have to be configured in the &lt;c0&gt;sonarRunner&lt;/c0&gt; block of this project. Any Sonar properties set on the command line also apply to this project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042737Z" creationid="huanghaohang" creationdate="20181202T042737Z">
        <seg>要分析项目层次结构，请将 Sonar Runner 插件应用于层次结构的根项目。通常（但不一定）是 Gradle 构建的根项目。有关整个分析的信息，如服务器和数据库连接设置，必须在这个项目的 &lt;c0&gt;sonarRunner&lt;/c0&gt; 块中进行配置。在命令行上设置的任何 Sonar 属性也会应用到该项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To analyze a project hierarchy, the Sonar plugin needs to be applied to the top-most project of the hierarchy. Typically (but not necessarily) this will be the root project. The &lt;c0&gt;sonar&lt;/c0&gt; block in that project configures an object of type &lt;a1&gt;&lt;c2&gt;SonarRootModel&lt;/c2&gt;&lt;/a1&gt;. It holds all global configuration, most importantly server and database connection settings.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152247Z" creationid="huanghaohang" creationdate="20180811T152247Z">
        <seg>要分析项目的层次结构，需要将 Sonar 插件应用于层次结构的最顶层项目。这通常（但也不一定）会是根项目。在该项目的 &lt;c0&gt;sonar&lt;/c0&gt; 块配置的是一个 &lt;a1&gt;&lt;c2&gt;SonarRootModel&lt;/c2&gt;&lt;/a1&gt; 类型的对象。它包含了所有全局配置，最重要的是服务器和数据库的连接设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To analyze code written in a language other than Java, install the corresponding &lt;a0&gt;Sonar plugin&lt;/a0&gt;, and set &lt;c1&gt;sonar.project.language&lt;/c1&gt; accordingly:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072335Z" creationid="huanghaohang" creationdate="20180812T072335Z">
        <seg>要分析非 Java 语言编写的代码，请安装相应的 &lt;a0&gt;Sonar 插件&lt;/a0&gt;，并相应地设置 &lt;c1&gt;sonar.project.language&lt;/c1&gt;：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To build a Groovy project, you use the &lt;e0&gt;Groovy plugin&lt;/e0&gt;. This plugin extends the Java plugin to add Groovy compilation capabilities to your project. Your project can contain Groovy source code, Java source code, or a mix of the two. In every other respect, a Groovy project is identical to a Java project, which we have already seen in &lt;a1&gt;Chapter 7, &lt;i2&gt;Java Quickstart&lt;/i2&gt;&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T001546Z" creationid="huanghaohang" creationdate="20170908T052108Z">
        <seg>要构建一个Groovy项目，你可以使用&lt;e0&gt;Groovy插件&lt;/e0&gt;。此插件继承了Java插件，以便将Groovy的编译功能添加到项目中。你的Groovy项目可以包含Groovy源代码，Java源代码，或者两者都有。在其他各方面，Groovy项目与我们之前在《&lt;a1&gt;第七章，&lt;i2&gt;Java快速入门&lt;/i2&gt;&lt;/a1&gt;》所看到的都是相同的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To build a WAR file, you apply the War plugin to your project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004607Z" creationid="huanghaohang" creationdate="20170909T004607Z">
        <seg>要构建一个WAR文件，你需要在你的项目当中应用War插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To build an executable binary, an &lt;a0&gt;&lt;c1&gt;NativeExecutable&lt;/c1&gt;&lt;/a0&gt; component is added to the &lt;c2&gt;executables&lt;/c2&gt; container and associated with a set of sources.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030729Z" creationid="huanghaohang" creationdate="20190609T030729Z">
        <seg>要构建可执行的二进制文件，请将 &lt;a0&gt;&lt;c1&gt;Executable&lt;/c1&gt;&lt;/a0&gt; 组件添加到 &lt;c2&gt;executables&lt;/c2&gt; 容器中，并关联到一组源码上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To build either a static or shared native library binary, a &lt;a0&gt;&lt;c1&gt;NativeLibrary&lt;/c1&gt;&lt;/a0&gt; component is added to the &lt;c2&gt;libraries&lt;/c2&gt; container. Each &lt;c3&gt;library&lt;/c3&gt; component can produce at least one &lt;a4&gt;&lt;c5&gt;SharedLibraryBinary&lt;/c5&gt;&lt;/a4&gt; and at least one &lt;a6&gt;&lt;c7&gt;StaticLibraryBinary&lt;/c7&gt;&lt;/a6&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030559Z" creationid="huanghaohang" creationdate="20190609T030559Z">
        <seg>要构建静态或共享本机库二进制文件，请将 &lt;a0&gt;&lt;c1&gt;NativeLibrary&lt;/c1&gt;&lt;/a0&gt; 组件添加到 &lt;c2&gt;libraries&lt;/c2&gt; 容器中。每个 &lt;c3&gt;library&lt;/c3&gt; 组件都可以生成至少一个 &lt;a4&gt;&lt;c5&gt;SharedLibraryBinary&lt;/c5&gt;&lt;/a4&gt; 和至少一个 &lt;a6&gt;&lt;c7&gt;StaticLibraryBinary&lt;/c7&gt;&lt;/a6&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To change the log level for standard out or error during task execution, tasks also provide a &lt;a0&gt;&lt;c1&gt;LoggingManager&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025401Z" creationid="huanghaohang" creationdate="20180107T025401Z">
        <seg>为能在任务执行过程中更改标准输出或错误的日志级别，任务也提供了一个 &lt;a0&gt;&lt;c1&gt;LoggingManager&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To change the the default configuration order to be bottom up, That means that a project configuration depends on the configuration of its child projects, the &lt;c0&gt;evaluationDependsOnChildren()&lt;/c0&gt; method can be used.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T145703Z" creationid="huanghaohang" creationdate="20190617T145703Z">
        <seg>如果要把默认配置的顺序改为从下到上，这意味着一个项目的配置将会依赖于它的子项目的配置，可以使用 &lt;c0&gt;evaluationDependsOnChildren()&lt;/c0&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To completely overwrite existing Eclipse files, execute a clean task together with its corresponding generation task, for example &lt;s0&gt;&lt;c1&gt;gradle cleanEclipse eclipse&lt;/c1&gt;&lt;/s0&gt; (in that order). If you want to make this the default behavior, add &lt;c2&gt;tasks.eclipse.dependsOn(cleanEclipse)&lt;/c2&gt; to your build script. This makes it unnecessary to execute the clean task explicitly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T081939Z" creationid="huanghaohang" creationdate="20181210T081939Z">
        <seg>要完全覆盖现有 Eclipse 文件，请执行 clean 任务及其相应的生成任务，例如 &lt;s0&gt;&lt;c1&gt;gradle cleanEclipse eclipse&lt;/c1&gt;&lt;/s0&gt;（按此顺序）。如果要让它成为默认行为，请添加 &lt;c2&gt;tasks.eclipse.dependsOn(cleanEclipse)&lt;/c2&gt; 到构建脚本中。这样我们就不用显式执行清理任务了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To completely overwrite existing IDEA files, execute a clean task together with its corresponding generation task, for example &lt;s0&gt;&lt;c1&gt;gradle cleanIdea idea&lt;/c1&gt;&lt;/s0&gt; (in that order). If you want to make this the default behavior, add &lt;c2&gt;tasks.idea.dependsOn(cleanIdea)&lt;/c2&gt; to your build script. This makes it unnecessary to execute the clean task explicitly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190121T160445Z" creationid="huanghaohang" creationdate="20190121T160445Z">
        <seg>要完全覆盖现有IDEA文件，请执行clean任务及其相应的生成任务，例如&lt;s0&gt;&lt;c1&gt;gradle cleanIdea idea&lt;/c1&gt;&lt;/s0&gt;（按此顺序）。如果要让它成为默认行为，请添加 &lt;c2&gt;tasks.idea.dependsOn(cleanIdea)&lt;/c2&gt; 到构建脚本中。这样我们就不用显式执行清理任务了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To configure a configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153640Z" creationid="huanghaohang" creationdate="20190527T153632Z">
        <seg>如果要配置一个配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To configure a repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025302Z" creationid="huanghaohang" creationdate="20190604T025302Z">
        <seg>要配置一个仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To configure an existing source set, you simply use one of the above access methods to set the properties of the source set. The properties are described below. Here is an example which configures the main Java and resources directories:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094908Z" creationid="haohang" creationdate="20180320T094745Z">
        <seg>要配置一个现有的源集，你只需要使用上面的其中一种访问方法来设置源集的属性。这些属性将在下文中进行介绍。以下是配置main 的 Java 和资源目录的示例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a custom plugin, you need to write an implementation of &lt;a0&gt;&lt;c1&gt;Plugin&lt;/c1&gt;&lt;/a0&gt;. Gradle instantiates the plugin and calls the plugin instance's &lt;a2&gt;&lt;c3&gt;Plugin.apply()&lt;/c3&gt;&lt;/a2&gt; method when the plugin is used with a project. The project object is passed as a parameter, which the plugin can use to configure the project however it needs to. The following sample contains a greeting plugin, which adds a &lt;c4&gt;hello&lt;/c4&gt; task to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150917Z" creationid="huanghaohang" creationdate="20190719T150917Z">
        <seg>要创建自定义插件，你需要编写一个 &lt;a0&gt;&lt;c1&gt;Plugin&lt;/c1&gt;&lt;/a0&gt; 的实现。当插件用于项目时， Gradle 将实例化插件并调用插件实例的 &lt;a2&gt;&lt;c3&gt;Plugin.apply()&lt;/c3&gt;&lt;/a2&gt; 方法。项目对象将作为参数传进去，插件可使用该参数来配置项目。以下示例包含了一个 greeting 插件，其向项目添加了一个 &lt;c4&gt;hello&lt;/c4&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To customize the settings for the Maven installer (see&lt;a0&gt;Section 52.6.3, “Installing to the local repository”&lt;/a0&gt;), you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111304Z" creationid="huanghaohang" creationdate="20190607T111304Z">
        <seg>要自定义 Maven 安装器（见&lt;a0&gt;第 52.6.3 节，“安装到本地仓库”&lt;/a0&gt;)的设置，你可以：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To deal with problems due to version conflicts, reports with dependency graphs are also very helpful. Such reports are another feature of dependency management.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T143358Z" creationid="huanghaohang" creationdate="20190411T143358Z">
        <seg>为了解决版本冲突的问题，带有依赖关系图的报告也是很有帮助的。这种报告是依赖管理的另一个功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define a configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153559Z" creationid="huanghaohang" creationdate="20190527T153559Z">
        <seg>如果要定义配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define a multi-project build, you need to create a &lt;e0&gt;settings file&lt;/e0&gt;. The settings file lives in the root directory of the source tree, and specifies which projects to include in the build. It must be called &lt;c1&gt;settings.gradle&lt;/c1&gt;. For this example, we are using a simple hierarchical layout. Here is the corresponding settings file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123519Z" creationid="95" creationdate="20170803T123149Z">
        <seg>定义一个多项目构建，需要在源码树的根目录下创建一个&lt;e0&gt;设置文件&lt;/e0&gt;。这个设置文件的名字必须是&lt;c1&gt;settings.gradle&lt;/c1&gt;，它会指定要包含哪些项目。在这个例子中，我们会使用一个简单的层次布局，以下是对应的设置文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define a new source set, you simply reference it in the &lt;c0&gt;sourceSets { }&lt;/c0&gt; block. Here's an example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094613Z" creationid="haohang" creationdate="20180326T094530Z">
        <seg>要定义一个新的源集，你只需在 &lt;c0&gt;sourceSets {}&lt;/c0&gt; 块引用它。示例如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define a repository use the &lt;c0&gt;repositories&lt;/c0&gt; configuration block. Within the &lt;c1&gt;repositories&lt;/c1&gt; closure, a Maven repository is declared with &lt;c2&gt;maven&lt;/c2&gt;. An Ivy repository is declared with &lt;c3&gt;ivy&lt;/c3&gt;. The transport protocol is part of the URL definition for a repository. The following build script demonstrates how to create a HTTP-based Maven and Ivy repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030640Z" creationid="huanghaohang" creationdate="20190603T030401Z">
        <seg>要定义仓库，请使用 &lt;c0&gt;repositories&lt;/c0&gt; 配置块。在 &lt;c1&gt;repositories&lt;/c1&gt; 闭包中，使用 &lt;c2&gt;maven&lt;/c2&gt; 声明 Maven 仓库，使用 &lt;c3&gt;ivy&lt;/c3&gt; 声明Ivy 仓库。传输协议是仓库 URL 定义的一部分。以下构建脚本演示了如何创建基于 HTTP 的 Maven 和 Ivy 仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define an Ivy repository which fetches Ivy files and artifacts from different locations, you can define separate patterns to use to locate the Ivy files and artifacts:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T024308Z" creationid="huanghaohang" creationdate="20190604T024308Z">
        <seg>要定义一个从不同的位置获取 Ivy 文件和工件的 Ivy 仓库，你可以定义用于查找 Ivy 文件和工件的单独模式：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define an Ivy repository with a non-standard layout, you can define a 'pattern' layout for the repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T023814Z" creationid="huanghaohang" creationdate="20190604T023814Z">
        <seg>要定义非标准布局的 Ivy 仓库，你可以为这个仓库定义一个“模式”布局：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define an external dependency, you add it to a dependency configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043233Z" creationid="huanghaohang" creationdate="20170908T043233Z">
        <seg>要定义外部依赖，你需要把一个依赖添加到依赖配置中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define the main-class for the application you have to set the &lt;c0&gt;mainClassName&lt;/c0&gt; property as shown below</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233738Z" creationid="95" creationdate="20190130T233738Z">
        <seg>要定义应用程序的主类，你必须设置&lt;c0&gt;mainClassName&lt;/c0&gt;属性，如下所示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define the name for the distribution you have to set the &lt;c0&gt;baseName&lt;/c0&gt; property as shown below:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143511Z" creationid="95" creationdate="20190131T143511Z">
        <seg>要定义分发的名称，必须设置&lt;c0&gt;baseName&lt;/c0&gt;属性，如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To do the same for project dependencies you need to declare:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141553Z" creationid="huanghaohang" creationdate="20190602T141436Z">
        <seg>要对项目依赖执行同样操作，你需要声明：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To enable dynamic resolve mode, you need to set the appropriate option on the repository definition. A couple of examples are shown below. Note that dynamic resolve mode is only available for Gradle's Ivy repositories. It is not available for Maven repositories, or custom Ivy &lt;c0&gt;DependencyResolver&lt;/c0&gt; implementations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025823Z" creationid="huanghaohang" creationdate="20190605T025823Z">
        <seg>要启用动态解析模式，需要在仓库定义上设置相应的选项，示例如下。注意，动态解析方式只可用于 Gradle 的 Ivy 仓库，不能用于 Maven 仓库或自定义的 Ivy &lt;c0&gt;DependencyResolver&lt;/c0&gt; 实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find out more about defining and working with dependencies, have a look at &lt;a0&gt;Section 50.4, “How to declare your dependencies”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044045Z" creationid="huanghaohang" creationdate="20170908T044045Z">
        <seg>要了解有关定义和使用依赖的更多信息，请查看&lt;a0&gt;第50.4节，“如何声明你的依赖”&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find out more about defining and working with repositories, have a look at &lt;a0&gt;Section 50.6, “Repositories”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050015Z" creationid="huanghaohang" creationdate="20170908T050015Z">
        <seg>要了解有关定义和使用仓库的更多信息，请查看&lt;a0&gt;第50.6节，“仓库”&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To find out more about publication, have a look at &lt;a0&gt;Chapter 51, &lt;i1&gt;Publishing artifacts&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051110Z" creationid="huanghaohang" creationdate="20170908T051110Z">
        <seg>要了解有关发布的更多信息，请查看《&lt;a0&gt;第五十一章，&lt;i1&gt;发布构件&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get started, apply the JaCoCo plugin to the project you want to calculate code coverage for.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133840Z" creationid="huanghaohang" creationdate="20180712T133759Z">
        <seg>首先，请将 JaCoCo 插件应用于你想要计算代码覆盖率的项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get started, apply the Sonar Runner plugin to the project to be analyzed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T015427Z" creationid="huanghaohang" creationdate="20181202T015427Z">
        <seg>首先，将 Sonar Runner 插件应用于要分析的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get the library files of the configuration dependencies you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143244Z" creationid="huanghaohang" creationdate="20190602T143244Z">
        <seg>要获得配置依赖的库文件，你可以执行如下操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To implement a custom task class, you extend &lt;a0&gt;&lt;c1&gt;DefaultTask&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T154022Z" creationid="huanghaohang" creationdate="20190704T154022Z">
        <seg>要实现自定义任务类，请扩展 &lt;a0&gt;&lt;c1&gt;DefaultTask&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To import your project into Eclipse, you need to add another plugin to your build file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153823Z" creationid="95" creationdate="20170731T153823Z">
        <seg>要想导入项目到Eclipse中，你需要在你的构建文件中添加另一个插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To improve responsiveness Gradle caches all compiled scripts by default. This includes all build scripts, initialization scripts, and other scripts. The first time you run a build for a project, Gradle creates a &lt;c0&gt;.gradle&lt;/c0&gt; directory in which it puts the compiled script. The next time you run this build, Gradle uses the compiled script, if the script has not changed since it was compiled. Otherwise the script gets compiled and the new version is stored in the cache. If you run Gradle with the &lt;c1&gt;--recompile-scripts&lt;/c1&gt; option, the cached script is discarded and the script is compiled and stored in the cache. This way you can force Gradle to rebuild the cache.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150603Z" creationid="huanghaohang" creationdate="20170918T150109Z">
        <seg>为了提高响应速度，Gradle默认情况下会缓存所有已编译的脚本，包括所有构建脚本，初始化脚本和其他脚本。当你第一次运行项目构建时，Gradle会创建一个&lt;c0&gt;.gradle&lt;/c0&gt;目录用于存放已编译的脚本。下次运行此构建时，如果脚本上次编译之后没有更改，则Gradle将使用已编译的脚本。否则该脚本会被重新编译，并把新版本存储在缓存中。如果你使用 &lt;c1&gt;--recompile-scripts&lt;/c1&gt;选项来执行Gradle，那么会放弃所缓存的脚本，然后重新编译脚本并将其存在缓存中。通过这种方式，你就可以强制Gradle重新生成缓存。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To learn more about the API of the configuration class see the API documentation: &lt;a0&gt;&lt;c1&gt;Configuration&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T160203Z" creationid="huanghaohang" creationdate="20190602T160203Z">
        <seg>想了解更多关于这个配置类的 API，请参阅 API 文档：&lt;a0&gt;&lt;c1&gt;Configuration&lt;/c1&gt;&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make custom tasks available in your build, you can use the &lt;c0&gt;taskdef&lt;/c0&gt; (usually easier) or &lt;c1&gt;typedef&lt;/c1&gt; Ant task, just as you would in a &lt;c2&gt;build.xml&lt;/c2&gt; file. You can then refer to the custom Ant task as you would a built-in Ant task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083822Z" creationid="huanghaohang" creationdate="20180105T083543Z">
        <seg>要使自定义任务在你的构建中可用，你可以使用 &lt;c0&gt;taskdef&lt;/c0&gt;（通常更容易）或者是&lt;c1&gt;typedef&lt;/c1&gt; Ant 任务，就像在&lt;c2&gt;build.xml&lt;/c2&gt;文件中一样。然后，你可以像引用内置的 Ant 任务一样引用这个自定义 Ant 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To publish the JAR file, run &lt;s0&gt;&lt;c1&gt;gradle uploadArchives&lt;/c1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153732Z" creationid="95" creationdate="20170731T153732Z">
        <seg>执行 &lt;s0&gt;&lt;c1&gt;gradle uploadArchives&lt;/c1&gt;&lt;/s0&gt;以发布JAR文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To run your web application, you apply the Jetty plugin to your project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005544Z" creationid="huanghaohang" creationdate="20170909T005544Z">
        <seg>要运行 web 应用程序，需要将 Jetty 插件应用于项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To show more of the power of configuration injection, let's add another project called &lt;c0&gt;tropicalFish&lt;/c0&gt; and add more behavior to the build via the build script of the &lt;c1&gt;water&lt;/c1&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143554Z" creationid="huanghaohang" creationdate="20190615T143554Z">
        <seg>要体现配置注入的更强大之处，让我们添加另一个项目 &lt;c0&gt;tropicalFish&lt;/c0&gt;，并通过 &lt;c1&gt;water&lt;/c1&gt; 项目的构建脚本向这个构建添加更多的行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify a "must run after" or "should run after" ordering between 2 tasks, you use the &lt;a0&gt;&lt;c1&gt;Task.mustRunAfter()&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Task.shouldRunAfter()&lt;/c3&gt;&lt;/a2&gt; methods. These method accept a task instance, a task name or any other input accepted by &lt;a4&gt;&lt;c5&gt;Task.dependsOn()&lt;/c5&gt;&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T040157Z" creationid="huanghaohang" creationdate="20170922T040157Z">
        <seg>如果想指定两个任务之间的“必须在之后运行”或“应该在之后运行”的排序，可以使用&lt;a0&gt;&lt;c1&gt;Task.mustRunAfter()&lt;/c1&gt;&lt;/a0&gt;和&lt;a2&gt;&lt;c3&gt;Task.shouldRunAfter()&lt;/c3&gt;&lt;/a2&gt;方法。这些方法接受一个任务实例、任务名称或&lt;a4&gt;&lt;c5&gt;Task.dependsOn()&lt;/c5&gt;&lt;/a4&gt;所接受的任何其他输入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify a finalizer task you use the &lt;a0&gt;&lt;c1&gt;Task.finalizedBy()&lt;/c1&gt;&lt;/a0&gt; method. This method accepts a task instance, a task name or any other input accepted by &lt;a2&gt;&lt;c3&gt;Task.dependsOn()&lt;/c3&gt;&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T045153Z" creationid="huanghaohang" creationdate="20170923T044616Z">
        <seg>你可以使用&lt;a0&gt;&lt;c1&gt;Task.finalizedBy()&lt;/c1&gt;&lt;/a0&gt;方法来指定一个析构器任务。这个方法接受一个任务实例，任务名称或&lt;a2&gt;&lt;c3&gt;Task.dependsOn()&lt;/c3&gt;&lt;/a2&gt;所能接受的任何其他输入。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To try this out, create the following build script named &lt;c0&gt;build.gradle&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144931Z" creationid="95" creationdate="20170724T144931Z">
        <seg>试着创建一个叫 &lt;c0&gt;build.gradle&lt;/c0&gt;的构建脚本，如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To try your current build with a different Gradle version, simply add the following to the &lt;c0&gt;build.gradle&lt;/c0&gt; of the &lt;e1&gt;root project&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140513Z" creationid="huanghaohang" creationdate="20210515T140513Z">
        <seg>想尝试对你当前的构建使用一个不同的Gradle版本，只需要对 &lt;e1&gt;根项目&lt;/e1&gt;的 &lt;c0&gt;build.gradle&lt;/c0&gt; 添加以下的配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use a plugin in a build script, you need to add the plugin classes to the build script's classpath. To do this, you use a &lt;c0&gt;buildscript { }&lt;/c0&gt; block, as described in &lt;a1&gt;Section 59.5, “External dependencies for the build script”&lt;/a1&gt;. The following example shows how you might do this when the JAR containing the plugin has been published to a local repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130711Z" creationid="huanghaohang" creationdate="20190728T130711Z">
        <seg>要在构建脚本中使用一个插件，你需要将这个插件添加到构建脚本的类路径中。对此，你可以使用《&lt;a1&gt;第 59.5 节，“构建脚本的外部依赖”&lt;/a1&gt;》中所述的 &lt;c0&gt;buildscript { }&lt;/c0&gt; 块。以下示例展示了当包含插件的 JAR 已经发布到本地仓库时，如何执行此操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use a task class in a build script, you need to add the class to the build script's classpath. To do this, you use a &lt;c0&gt;buildscript { }&lt;/c0&gt; block, as described in &lt;a1&gt;Section 59.5, “External dependencies for the build script”&lt;/a1&gt;. The following example shows how you might do this when the JAR containing the task class has been published to a local repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123727Z" creationid="huanghaohang" creationdate="20190706T123727Z">
        <seg>要在一个构建脚本中使用一个任务类，你需要将这个类添加到构建脚本的类路径中。要做到这一点，请使用《&lt;a1&gt;第 59.5 节，“构建脚本的外部依赖”&lt;/a1&gt;》中所述的 &lt;c0&gt;buildscript { }&lt;/c0&gt; 块。以下示例展示了当包含任务类的 JAR 已发布到本地存储库时，你可以如何操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the &lt;c0&gt;Copy&lt;/c0&gt; task, you must provide a set of source files to copy, and a destination directory to copy the files to. You may also specify how to transform the files as they are copied. You do all this using a &lt;e1&gt;copy spec&lt;/e1&gt;. A copy spec is represented by the &lt;a2&gt;&lt;c3&gt;CopySpec&lt;/c3&gt;&lt;/a2&gt; interface. The &lt;c4&gt;Copy&lt;/c4&gt; task implements this interface. You specify the source files using the &lt;a5&gt;&lt;c6&gt;CopySpec.from()&lt;/c6&gt;&lt;/a5&gt; method. To specify the destination directory, use the &lt;a7&gt;&lt;c8&gt;CopySpec.into()&lt;/c8&gt;&lt;/a7&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T135552Z" creationid="huanghaohang" creationdate="20171002T135552Z">
        <seg>要使用&lt;c0&gt;Copy&lt;/c0&gt;任务，你必须提供一组要复制的源文件，以及复制过去的目标目录。你还可以指定在复制文件时如何转换文件。你可以使用一个&lt;e1&gt;复制规范&lt;/e1&gt;。复制规范通过&lt;a2&gt;&lt;c3&gt;CopySpec&lt;/c3&gt;&lt;/a2&gt;接口来表示。&lt;c4&gt;Copy&lt;/c4&gt;任务实现了这个接口。你可以使用&lt;a5&gt;&lt;c6&gt;CopySpec.from()&lt;/c6&gt;&lt;/a5&gt;方法指定源文件。指定目标目录则是使用&lt;a7&gt;&lt;c8&gt;CopySpec.into()&lt;/c8&gt;&lt;/a7&gt;方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the ANTLR plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013441Z" creationid="huanghaohang" creationdate="20190123T013441Z">
        <seg>要使用 ANTLR 插件，请在构建脚本中包含以下语句：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Build Dashboard plugin, include the following in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T233128Z" creationid="95" creationdate="20190201T233128Z">
        <seg>要使用 Build Dashboard 插件，请在构建脚本中包含以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Checkstyle plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180424T134701Z" creationid="huanghaohang" creationdate="20180424T134701Z">
        <seg>要使用 Checkstyle 插件，请在构建脚本中包含以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the CodeNarc plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141754Z" creationid="huanghaohang" creationdate="20180516T141754Z">
        <seg>要使用 CodeNarc 插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Ear plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145014Z" creationid="huanghaohang" creationdate="20180415T145014Z">
        <seg>要使用 Ear 的插件，请在构建脚本中包含以下语句：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Eclipse plugin, include this in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025654Z" creationid="huanghaohang" creationdate="20181210T025654Z">
        <seg>要使用 Eclipse 插件，请在构建脚本中包含以下语句：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the FindBugs plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142233Z" creationid="huanghaohang" creationdate="20180516T142233Z">
        <seg>要使用 FindBugs 插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Groovy library that ships with Gradle, declare a &lt;c0&gt;localGroovy()&lt;/c0&gt; dependency. Note that different Gradle versions ship with different Groovy versions; as such, using &lt;c1&gt;localGroovy()&lt;/c1&gt; is less safe then declaring a regular Groovy dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122854Z" creationid="huanghaohang" creationdate="20180406T122643Z">
        <seg>如果要使用 Gradle 附带的 Groovy 库，请声明一个 &lt;c0&gt;localGroovy()&lt;/c0&gt; 依赖。请注意，不同的 Gradle 版本所附带的 Groovy 版本不同；因此，声明一个固定的 Groovy 依赖要比使用 &lt;c1&gt;localGroovy()&lt;/c1&gt; 更安全一些。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Groovy plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120702Z" creationid="huanghaohang" creationdate="20180406T120702Z">
        <seg>要使用 Groovy 的插件，请在构建脚本中包含以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the IDEA plugin, include this in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031104Z" creationid="huanghaohang" creationdate="20181212T031104Z">
        <seg>要使用 IDEA 插件，请在构建脚本中包含以下语句：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the JDepend plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142624Z" creationid="huanghaohang" creationdate="20180516T142624Z">
        <seg>要使用 JDepend 插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Java library distribution plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141611Z" creationid="95" creationdate="20190131T141611Z">
        <seg>要使用 Java 分发插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Java plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T153434Z" creationid="huanghaohang" creationdate="20180218T153434Z">
        <seg>要使用 Java 插件，请在构建脚本中加入以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Jetty plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143953Z" creationid="huanghaohang" creationdate="20180416T143953Z">
        <seg>要使用 Jetty 的插件，请在构建脚本中包含以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Maven plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091208Z" creationid="huanghaohang" creationdate="20190606T091208Z">
        <seg>要使用 Maven 插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the OSGi plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025904Z" creationid="huanghaohang" creationdate="20181203T025904Z">
        <seg>要使用 OSGi 插件，请在构建脚本中包含以下语句：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the PMD plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143131Z" creationid="huanghaohang" creationdate="20180516T143131Z">
        <seg>要使用 PMD 插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Project report plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T035955Z" creationid="huanghaohang" creationdate="20190123T035955Z">
        <seg>要使用项目报告插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Scala plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010153Z" creationid="huanghaohang" creationdate="20180407T010153Z">
        <seg>要使用 Scala 插件，请在构建脚本中包含以下语句：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the Signing plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130421Z" creationid="huanghaohang" creationdate="20190608T130421Z">
        <seg>要使用 Signing 插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the War plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140145Z" creationid="huanghaohang" creationdate="20180408T140145Z">
        <seg>要使用 War 的插件，请在构建脚本中包含以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the announce plugin, apply it to your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085736Z" creationid="huanghaohang" creationdate="20190124T085736Z">
        <seg>要使用公告插件，请在构建脚本中应用它：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the application plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233610Z" creationid="95" creationdate="20190130T233610Z">
        <seg>要使用这个应用程序插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the build announcements plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092628Z" creationid="huanghaohang" creationdate="20190124T092628Z">
        <seg>要使用构建公告插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the classpath configuration, use the &lt;c0&gt;asPath&lt;/c0&gt; property of the custom configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084314Z" creationid="huanghaohang" creationdate="20180105T084314Z">
        <seg>要使用类路径配置，请使用自定义配置里的&lt;c0&gt;asPath&lt;/c0&gt;属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the distribution plugin, include in your build script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093711Z" creationid="huanghaohang" creationdate="20190124T093711Z">
        <seg>要使用分发插件，请在构建脚本中包含：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the groovy compilation tasks, you must also declare the Groovy version to use and where to find the Groovy libraries. You do this by adding a dependency to the &lt;c0&gt;groovy&lt;/c0&gt; configuration. The &lt;c1&gt;compile&lt;/c1&gt; configuration inherits this dependency, so the groovy libraries will be included in classpath when compiling Groovy and Java source. For our sample, we will use Groovy 2.2.0 from the public Maven repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002702Z" creationid="huanghaohang" creationdate="20170909T002407Z">
        <seg>要使用groovy编译任务，还必须声明使用的Groovy版本以及可以在哪里找到Groovy库。你可以通过在&lt;c0&gt;groovy&lt;/c0&gt;配置中添加依赖来实现。&lt;c1&gt;compile&lt;/c1&gt;配置会继承于它，因此当编译Groovy和Java源码时，groovy库会被包含在类路径中。以下例子，我们将使用公共Maven仓库中的Groovy 2.2.0版本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the local Maven cache as a repository you can do:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031646Z" creationid="huanghaohang" creationdate="20190603T031646Z">
        <seg>要把本地的 Maven 缓存用作仓库，你可以这样操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tool Chain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022223Z" creationid="huanghaohang" creationdate="20190609T022223Z">
        <seg>工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tool chain support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091056Z" creationid="huanghaohang" creationdate="20190611T091056Z">
        <seg>工具链支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tool chains</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091144Z" creationid="huanghaohang" creationdate="20190611T091144Z">
        <seg>工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tooling API can download and install the appropriate Gradle version, similar to the wrapper. Bear in mind that the tooling API is wrapper aware so you should not need to configure a Gradle distribution directly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T143053Z" creationid="huanghaohang" creationdate="20191220T143053Z">
        <seg>Tooling API 可以下载并安装相应的 Gradle 版本，类似于包装器。请记住，tooling API 是有包装器感知的，因此你不应该直接配置 Gradle 分发包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Top level element that enables configuration of the Eclipse plugin in a DSL-friendly fashion</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061707Z" creationid="huanghaohang" creationdate="20181210T030129Z">
        <seg>顶级元素，支持以 DSL 友好的方式配置 Eclipse 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Top level element that enables configuration of the idea plugin in a DSL-friendly fashion</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061219Z" creationid="huanghaohang" creationdate="20181212T061219Z">
        <seg>顶级元素，支持以 DSL 友好的方式配置 idea 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transitive dependency management is a technique that enables your project to depend on libraries which, in turn, depend on other libraries. This recursive pattern of transitive dependencies results in a tree of dependencies including your project's first-level dependencies, second-level dependencies, and so on. If you don't model your dependencies as a hierarchical tree of first-level and second-level dependencies it is very easy to quickly lose control over an assembled mess of unstructured dependencies. Consider the Gradle project itself, while Gradle only has a few direct, first-level dependencies, when Gradle is compiled it needs more that one hundred dependencies on the classpath. On a far larger scale, Enterprise projects using Spring, Hibernate, and other libraries, alongside hundreds or thousands of internal projects can have very large dependency trees.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T163459Z" creationid="95" creationdate="20190315T163459Z">
        <seg>传递依赖管理是一种使你的项目依赖于一些库，而这些库又依赖于其他库技术。这种传递依赖的递归模式导致的结果说，在依赖树中，会包含项目的第一级依赖，第二级依赖，等等。如果你不按层级树的第一级和二级依赖对你的依赖建模，那么就会很容易失去对组合的非结构化依赖的控制。请考虑Gradle项目本身，而Gradle仅具有几个直接的第一级依赖，当编译Gradle时，在它的类路径上会需要超过一百个依赖。在规模更大的范围内，使用Spring、Hibernate和其他库，以及成百上千的内部项目的企业项目，可能有非常大的依赖树。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013414Z" creationid="huanghaohang" creationdate="20170919T013414Z">
        <seg>疑难解答</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Truncated stacktraces are printed. We recommend this over full stacktraces. Groovy full stacktraces are extremely verbose (Due to the underlying dynamic invocation mechanisms. Yet they usually do not contain relevant information for what has gone wrong in &lt;s0&gt;&lt;e1&gt;your&lt;/e1&gt;&lt;/s0&gt; code.)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T011830Z" creationid="huanghaohang" creationdate="20180107T003212Z">
        <seg>打印截断的堆栈跟踪。我们推荐使用这一个选项，而不是打印完整的堆栈跟踪信息。Groovy 完整的堆栈跟踪是非常详细的（由于底层的动态调用机制，但它们通常不包含&lt;s0&gt;&lt;e1&gt;你的&lt;/e1&gt;&lt;/s0&gt;代码哪里出错了的相关信息）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tutorial - 'This and That'</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034010Z" creationid="huanghaohang" creationdate="20180131T034010Z">
        <seg>教程——杂七杂八</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tutorials</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014535Z" creationid="haohang" creationdate="20170801T014535Z">
        <seg>教程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Twitter</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085657Z" creationid="huanghaohang" creationdate="20190124T085657Z">
        <seg>Twitter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two projects are said to be &lt;s0&gt;&lt;e1&gt;decoupled&lt;/e1&gt;&lt;/s0&gt; if they do not directly access each other's project model. Decoupled projects may only interact in terms of declared dependencies: project dependencies (&lt;a2&gt;Section 50.4.3, “Project dependencies”&lt;/a2&gt;) and/or task dependencies (&lt;a3&gt;Section 6.5, “Task dependencies”&lt;/a3&gt;). Any other form of project interaction (i.e. by modifying another project object or by reading a value from another project object) causes the projects to be coupled.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T151123Z" creationid="huanghaohang" creationdate="20190621T150659Z">
        <seg>如果两个项目不直接访问彼此的项目模型，那么它们就被认为是&lt;s0&gt;&lt;e1&gt;解耦的&lt;/e1&gt;&lt;/s0&gt;。解耦的项目可能只在声明依赖方面会互相影响：项目依赖（《&lt;a2&gt;第50.4.3节，项目依赖&lt;/a2&gt;》），或者是任务依赖（《&lt;a3&gt;第6.5节，任务依赖&lt;/a3&gt;》）。任何其他形式的项目交互（即通过修改另一个项目对象或从另一个项目对象中读值)都会导致项目耦合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132109Z" creationid="huanghaohang" creationdate="20170913T132109Z">
        <seg>类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ubuntu</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092218Z" creationid="huanghaohang" creationdate="20190124T092218Z">
        <seg>Ubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless Sonar is run locally and with default settings, it is necessary to configure connection settings for the Sonar server and database.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100108Z" creationid="huanghaohang" creationdate="20180715T100108Z">
        <seg>除非 Sonar 是在本地上运行，并且有默认的配置，否则有必要配置 Sonar 服务器及数据库的连接设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless a task's &lt;c0&gt;groovyClasspath&lt;/c0&gt; is configured explicitly, the Groovy (base) plugin will try to infer it from the task's &lt;c1&gt;classpath&lt;/c1&gt;. This is done as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T132540Z" creationid="huanghaohang" creationdate="20180406T132540Z">
        <seg>除非显式地配置了一个任务的 &lt;c0&gt;groovyClasspath&lt;/c0&gt;，否则 Groovy（基础）插件会尝试从任务的 &lt;c1&gt;classpath&lt;/c1&gt; 推断出它，以如下方式进行：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unless a task's &lt;c0&gt;scalaClasspath&lt;/c0&gt; is configured explicitly, the Scala (base) plugin will try to infer it from the task's &lt;c1&gt;classpath&lt;/c1&gt;. This is done as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015937Z" creationid="huanghaohang" creationdate="20180407T015937Z">
        <seg>除非显式地配置一个任务的 &lt;c0&gt;scalaClasspath&lt;/c0&gt;，否则 Scala（基础）插件会尝试以如下方式从任务的 &lt;c1&gt;classpath&lt;/c1&gt; 推断出它：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unpacking</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013341Z" creationid="huanghaohang" creationdate="20170919T013341Z">
        <seg>解压</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upload</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063225Z" creationid="haohang" creationdate="20180312T063225Z">
        <seg>Upload</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uploading</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130111Z" creationid="huanghaohang" creationdate="20180517T130111Z">
        <seg>上传</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uploading to a Maven repository is described in &lt;a0&gt;Section 52.6, “Interacting with Maven repositories”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T085432Z" creationid="huanghaohang" creationdate="20190606T085432Z">
        <seg>关于上传到 Maven 仓库的内容，在&lt;a0&gt;么 52.6 节，《与 Maven 仓库的交互》&lt;/a0&gt;中有描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uploads the artifacts in the &lt;c0&gt;archives&lt;/c0&gt; configuration, including the JAR file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063408Z" creationid="haohang" creationdate="20180312T063258Z">
        <seg>上传在 &lt;c0&gt;archives&lt;/c0&gt; 中所配置的工件，包括 JAR 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Usage</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130009Z" creationid="huanghaohang" creationdate="20180517T130009Z">
        <seg>用法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Usage and troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143350Z" creationid="huanghaohang" creationdate="20180516T143350Z">
        <seg>用法和故障排除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use Custom Gradle Executor - Advanced feature</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150231Z" creationid="huanghaohang" creationdate="20170911T150231Z">
        <seg>使用自定义的 Gradle 执行器  - 高级功能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Used by tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053718Z" creationid="haohang" creationdate="20180313T053718Z">
        <seg>在哪些任务中使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Used for</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221516Z" creationid="huanghaohang" creationdate="20180105T221516Z">
        <seg>用于</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses &lt;a0&gt;JUnit&lt;/a0&gt; for testing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154546Z" creationid="95" creationdate="20190201T154546Z">
        <seg>使用&lt;a0&gt;JUnit&lt;/a0&gt;进行测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses &lt;a0&gt;ScalaTest&lt;/a0&gt; is used for testing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154734Z" creationid="95" creationdate="20190201T154734Z">
        <seg>使用&lt;a0&gt;ScalaTest&lt;/a0&gt;进行测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses &lt;a0&gt;Spock testing framework&lt;/a0&gt; for testing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154930Z" creationid="95" creationdate="20190201T154930Z">
        <seg>使用 &lt;a0&gt;Spock testing framework&lt;/a0&gt; 进行测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses Groovy 2.x</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154851Z" creationid="95" creationdate="20190201T154851Z">
        <seg>使用 Groovy 2.x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses Scala 2.10</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154721Z" creationid="95" creationdate="20190201T154721Z">
        <seg>使用 Scala 2.10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses effective POM and effective settings (support for POM inheritance, dependency management, properties)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T142437Z" creationid="95" creationdate="20190201T142437Z">
        <seg>使用有效的 POM 和有效设置（支持 POM 继承、 依赖管理、 属性）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses the " &lt;c0&gt;mavenCentral()&lt;/c0&gt; dependency repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154526Z" creationid="95" creationdate="20190201T154526Z">
        <seg>使用“&lt;c0&gt;mavenCentral()&lt;/c0&gt;”依赖仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses the "&lt;c0&gt;groovy&lt;/c0&gt;" plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154829Z" creationid="95" creationdate="20190201T154829Z">
        <seg>使用“&lt;c0&gt;groovy&lt;/c0&gt;”插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses the "&lt;c0&gt;java&lt;/c0&gt;" plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154523Z" creationid="95" creationdate="20190201T154523Z">
        <seg>使用“&lt;c0&gt;java&lt;/c0&gt;”插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses the "&lt;c0&gt;scala&lt;/c0&gt;" plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154718Z" creationid="95" creationdate="20190201T154718Z">
        <seg>使用“&lt;c0&gt;scala&lt;/c0&gt;”插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Uses the Clang tool chain bundled with XCode.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022504Z" creationid="huanghaohang" creationdate="20190609T022328Z">
        <seg>使用 XCode 捆绑的 Clang 工具链。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Ant Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031856Z" creationid="huanghaohang" creationdate="20170927T031856Z">
        <seg>使用 Ant 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Ant from Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015150Z" creationid="huanghaohang" creationdate="20180314T015150Z">
        <seg>从 Gradle 中调用 Ant</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Ant tasks and types in your build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015159Z" creationid="huanghaohang" creationdate="20180314T015159Z">
        <seg>在构建中使用 Ant 任务和类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Gradle's build-by-convention support for Groovy projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080954Z" creationid="95" creationdate="20170723T080954Z">
        <seg>使用Gradle对于Groovy项目的基于约定的构建的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Gradle's build-by-convention support for Web applications.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T081041Z" creationid="95" creationdate="20170723T081029Z">
        <seg>使用Gradle对于Web应用的基于约定的构建的支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using custom descriptor file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142232Z" creationid="huanghaohang" creationdate="20181201T142232Z">
        <seg>使用自定义的描述符文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031916Z" creationid="huanghaohang" creationdate="20170927T031916Z">
        <seg>使用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using pre-built artifacts in the place of building dependent projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T144418Z" creationid="huanghaohang" creationdate="20190621T144418Z">
        <seg>在构建依赖项目时使用预构建的工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the &lt;c0&gt;Sync&lt;/c0&gt; task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093108Z" creationid="huanghaohang" creationdate="20180218T093108Z">
        <seg>使用 &lt;c0&gt;Sync&lt;/c0&gt; 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Gradle Command-Line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233848Z" creationid="huanghaohang" creationdate="20171206T233848Z">
        <seg>使用 Gradle 命令行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Gradle Graphical User Interface</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234008Z" creationid="huanghaohang" creationdate="20171206T234008Z">
        <seg>使用 Gradle 图形用户界面</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the contents of an archive as a file tree</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093039Z" creationid="huanghaohang" creationdate="20180218T093039Z">
        <seg>使用归档的内容作为文件树</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the project name for filtering is one option. Using extra project properties is another. (See &lt;a0&gt;Section 13.4.2, “Extra properties”&lt;/a0&gt; for more information on extra properties.)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T144828Z" creationid="huanghaohang" creationdate="20190615T144828Z">
        <seg>我们可以选择使用项目的名称，或者是额外的项目属性来进行过滤。（请参阅《&lt;a0&gt;第13.4.2节，额外属性&lt;/a0&gt; &gt;，以获取有关额外属性的更多信息。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this descriptor you can change the name, project directory and build file of a project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153154Z" creationid="huanghaohang" creationdate="20190612T153040Z">
        <seg>通过使用这个描述符，你可以更改项目的名称、目录和构建文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using this method is a useful way to convert some user provided value into an absolute &lt;c0&gt;File&lt;/c0&gt;. It is preferable to using &lt;c1&gt;new File(somePath)&lt;/c1&gt;, as &lt;c2&gt;file()&lt;/c2&gt; always evaluates the supplied path relative to the project directory, which is fixed, rather than the current working directory, which can change depending on how the user runs Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T130135Z" creationid="huanghaohang" creationdate="20170923T125743Z">
        <seg>这是把一些用户提供的值转换为一个相对路径的&lt;c0&gt;File&lt;/c0&gt;对象的有用方法。由于&lt;c2&gt;file()&lt;/c2&gt;方法总是去计算所提供的路径相对于项目目录的路径，最好是使用&lt;c1&gt;new File(somePath)&lt;/c1&gt;，因为它是一个固定的路径，而不是会因为用户运行Gradle的具体工作目录而改变的当前目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Usually the JAR file needs to be published somewhere. To do this, you need to tell Gradle where to publish the JAR file. In Gradle, artifacts such as JAR files are published to repositories. In our sample, we will publish to a local directory. You can also publish to a remote location, or multiple locations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153654Z" creationid="95" creationdate="20170731T150129Z">
        <seg>通常，JAR文件都需要发布到某个地方。为此，你需要告诉Gradle要把JAR文件发布到哪里。在Gradle里，诸如JAR文件这样的工件会被发布到仓库中。在我们的示例中，将发布到一个本地仓库里。当然，你也可以发布到一个远程的位置，或者是多个位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Usually, a Java project will have some dependencies on external JAR files. To reference these JAR files in the project, you need to tell Gradle where to find them. In Gradle, artifacts such as JAR files, are located in a &lt;e0&gt;repository&lt;/e0&gt;. A repository can be used for fetching the dependencies of a project, or for publishing the artifacts of a project, or both. For this example, we will use the public Maven repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124317Z" creationid="95" creationdate="20170730T124317Z">
        <seg>通常一个Java项目都会依赖一些外部JAR文件。如果想在项目里引用这些JAR文件，你需要告诉Gradle如何找到这们。在Gradle中，像JAR文件这样的工件都存在于 &lt;e0&gt;仓库&lt;/e0&gt;。仓库可以用于获取项目中的依赖，或是发布项目的工件。在下面的例子中，我们将使用公共的Maven仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Usually, there is a method with the same name as the property, which appends to the set of files. Again, this method accepts any of the types supported by the &lt;a0&gt;files()&lt;/a0&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134301Z" creationid="huanghaohang" creationdate="20171002T134106Z">
        <seg>通常情况下，有一个与属性名称相同的方法，可以追加到文件集中。再者，该方法接受&lt;a0&gt;files()&lt;/a0&gt;方法所支持的任何类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Utilize a pool of reusable processes available for compilation and testing. For example, both the Groovy and Scala compilers have a large startup cost. The build daemon could maintain a process with Groovy and/or Scala already loaded.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180109T141925Z" creationid="huanghaohang" creationdate="20180109T141711Z">
        <seg>使用可用于编译和测试的一个可复用过程池。例如，Groovy 和 Scala 的编译器都有很大的启动成本，构建守护进程可以维护已经加载了 Groovy 或 Scala 的进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Valid named layout values are &lt;c0&gt;'gradle'&lt;/c0&gt; (the default), &lt;c1&gt;'maven'&lt;/c1&gt; and &lt;c2&gt;'ivy'&lt;/c2&gt;. See &lt;a3&gt;&lt;c4&gt;IvyArtifactRepository.layout()&lt;/c4&gt;&lt;/a3&gt; for details of these named layouts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041658Z" creationid="huanghaohang" creationdate="20190603T041658Z">
        <seg>布局名称的有效值为 &lt;c0&gt;'gradle'&lt;/c0&gt; （默认值）,&lt;c1&gt;'maven'&lt;/c1&gt; 和 &lt;c2&gt;'ivy'&lt;/c2&gt;。有关这些指定的布局，请参阅 &lt;a3&gt;&lt;c4&gt;IvyArtifactRepository.layout()&lt;/c4&gt;&lt;/a3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Validating and prompting for user supplied configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191231T122921Z" creationid="huanghaohang" creationdate="20191231T122921Z">
        <seg>对用户提供的配置进行验证和输入提示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Value of the current used JVM</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094323Z" creationid="haohang" creationdate="20180314T094323Z">
        <seg>当前所使用的 JVM 的值</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Various plugins add further standard configurations. You can also define your own custom configurations to use in your build. Please see &lt;a0&gt;Section 50.3, “Dependency configurations”&lt;/a0&gt; for the details of defining and customizing dependency configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T042917Z" creationid="huanghaohang" creationdate="20170908T042917Z">
        <seg>各种插件添加了更多的标准配置。你也可以定义一些自定义配置以在构建中使用。有关定义和定制依赖配置的详细内容，请参见&lt;a0&gt;第50.3节，“依赖配置”&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Version 2.0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072300Z" creationid="haohang" creationdate="20170720T072300Z">
        <seg>版本 2.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Versions in jar names increase the expressiveness of your project and make them easier to maintain. This practice also reduces the potential for error.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T162505Z" creationid="95" creationdate="20190315T161509Z">
        <seg>在 jar 名称中的版本增强了项目的表现性，并使其更易于维护。这种做法也减少了发生错误的可能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Very powerful dependency management (based on Apache Ivy).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T135756Z" creationid="95" creationdate="20170721T135756Z">
        <seg>（基于Apache Ivy的）非常强大的依赖管理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Very powerful support for multi-project builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T135728Z" creationid="95" creationdate="20170721T135728Z">
        <seg>非常强大的多项目构建支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Very roughly, dependency management is made up of two pieces. Firstly, Gradle needs to know about the things that your project needs to build or run, in order to find them. We call these incoming files the &lt;e0&gt;dependencies&lt;/e0&gt; of the project. Secondly, Gradle needs to build and upload the things that your project produces. We call these outgoing files the &lt;e1&gt;publications&lt;/e1&gt; of the project. Let's look at these two pieces in more detail:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170905T145223Z" creationid="95" creationdate="20170803T130530Z">
        <seg>通俗来讲，依赖管理由两部分组成。首先，Gradle需要知道构建或运行你的项目所需要的东西，才能找到它们。 我们把这些传入的文件称为这个项目的 &lt;e0&gt;依赖&lt;/e0&gt;。其次，Gradle需要构建并且上传你的项目所产生的东西，我们把这些输出的文件称为项目的 &lt;e1&gt;发布&lt;/e1&gt;。下面详细介绍这两部分：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Visual C++</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022507Z" creationid="huanghaohang" creationdate="20190609T022507Z">
        <seg>Visual C++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Visual Studio IDE integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091153Z" creationid="huanghaohang" creationdate="20190611T091153Z">
        <seg>Visual Studio IDE 集成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>VisualCpp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084901Z" creationid="huanghaohang" creationdate="20190610T084901Z">
        <seg>VisualCpp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>WAR file base name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144553Z" creationid="huanghaohang" creationdate="20180416T144553Z">
        <seg>WAR 文件的基本名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>WARNING</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221525Z" creationid="huanghaohang" creationdate="20180105T221525Z">
        <seg>WARNING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>War</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140212Z" creationid="huanghaohang" creationdate="20180408T140212Z">
        <seg>War</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>War plugin - tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140301Z" creationid="huanghaohang" creationdate="20180408T140301Z">
        <seg>War 插件——任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Warning messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221526Z" creationid="huanghaohang" creationdate="20180105T221526Z">
        <seg>警告消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We also add a distribution, that gets shipped to the client:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125649Z" creationid="95" creationdate="20170803T125649Z">
        <seg>在下面的例子中，我们创建了一个分发，来发送给客户端：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We are not that happy with the build script of the &lt;c0&gt;water&lt;/c0&gt; project. It is inconvenient to add the task explicitly for every project. We can do better. Let's first add another project called &lt;c1&gt;krill&lt;/c1&gt; to our multi-project build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155516Z" creationid="huanghaohang" creationdate="20190614T155516Z">
        <seg>我们对这个 &lt;c0&gt;water&lt;/c0&gt; 项目的构建脚本不是很满意，因为要为每个项目显式地添加任务很不方便。我们可以进行改善。让我们首先将另一个名为 &lt;c1&gt;krill&lt;/c1&gt; 的项目添加到我们的多项目构建中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We came up with several use cases where the daemon is very useful. For some workflows, the user invokes Gradle many times to execute a small number of relatively quick tasks. For example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133507Z" creationid="huanghaohang" creationdate="20180108T133332Z">
        <seg>我们想到了几个关于守护进程非常有用的情形。对于一些工作流，用户会多次调用 Gradle 以执行少量相对较快的任务。例如：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can change this property simply by giving it a new value.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022540Z" creationid="huanghaohang" creationdate="20180131T022540Z">
        <seg>我们可以简单地通过给它一个新的值来更改此属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can change where the class files are written via the source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024626Z" creationid="huanghaohang" creationdate="20180131T024528Z">
        <seg>我们可以通过这个源文件集来修改类文件的写入位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We could also have used the following syntax:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093144Z" creationid="huanghaohang" creationdate="20180130T093144Z">
        <seg>我们还可以使用下面的语法：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We could not find a good overview for all possible proxy settings. One place to look are the constants in a file from the Ant project. Here a &lt;a0&gt; link &lt;/a0&gt; to the Subversion view. The other is a &lt;a1&gt; Networking Properties page &lt;/a1&gt; from the JDK docs. If anyone knows a better overview, please let us know via the mailing list.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T080547Z" creationid="huanghaohang" creationdate="20180130T080547Z">
        <seg>我们无法很好地概述所有可能的代理服务器设置。其中可以去查看的地方一个是 Ant 项目的一个文件中的常量，这里有一个到 Subversion 视图的&lt;a0&gt;链接&lt;/a0&gt;；另一个是 JDK 文档里的&lt;a1&gt;网络属性页面&lt;/a1&gt;。如果有人知道更好的概述，请通过邮件列表告诉我们。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We fork a separate daemon process if the jvm arguments for the build are sufficiently different. For example we will not fork a new daemon if a some system property has changed. However if -Xmx memory setting change or some fundamental immutable system property changes (e.g. file.encoding) then new daemon will be forked.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180116T143144Z" creationid="huanghaohang" creationdate="20180116T143144Z">
        <seg>如果构建的 jvm 参数足够不同，我们也会 fork 一个单独的守护进程。例如，如果某个系统属性发生改变，我们不会 fork 一个新的守护进程。但是如果 -Xmx 内存设置或者一些基本的不可变的系统属性修改了（例如 file.encoding），那么就会 fork 新的守护进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We fork a separate daemon process per java home. So even if there is some idle daemon waiting for build requests but you happen to run build with a different java home then a brand new daemon will be forked.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180116T141927Z" creationid="huanghaohang" creationdate="20180116T141927Z">
        <seg>我们为每一个 java home 分配一个独立的守护进程。所以，即使有一些闲置的守护进程正在等待构建请求，但你碰巧用另一个 java home 运行构建，那么还是会 fork 一个全新的守护进程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have already seen how to define tasks using a keyword style in &lt;a0&gt;Chapter 6, &lt;i1&gt;Build Script Basics&lt;/i1&gt;&lt;/a0&gt;. There are a few variations on this style, which you may need to use in certain situations. For example, the keyword style does not work in expressions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120825Z" creationid="huanghaohang" creationdate="20170919T120825Z">
        <seg>在《&lt;a0&gt;第六章，&lt;i1&gt;构建脚本基础&lt;/i1&gt;&lt;/a0&gt; 》中我们已经看到如何通过关键字这种风格来定义任务。这种风格有一些变式，可能你在一些具体的场景中会需要。例如，在表达式中不能使用这种关键字风格。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have an interesting set of dependencies. Obviously the &lt;c0&gt;date&lt;/c0&gt; and &lt;c1&gt;hello&lt;/c1&gt; projects have a &lt;s2&gt;&lt;e3&gt;configuration&lt;/e3&gt;&lt;/s2&gt; dependency on &lt;c4&gt;webDist&lt;/c4&gt;, as all the build logic for the webapp projects is injected by &lt;c5&gt;webDist&lt;/c5&gt;. The &lt;s6&gt;&lt;e7&gt;execution&lt;/e7&gt;&lt;/s6&gt; dependency is in the other direction, as &lt;c8&gt;webDist&lt;/c8&gt; depends on the build artifacts of &lt;c9&gt;date&lt;/c9&gt; and &lt;c10&gt;hello&lt;/c10&gt;. There is even a third dependency. &lt;c11&gt;webDist&lt;/c11&gt; has a &lt;s12&gt;&lt;e13&gt;configuration&lt;/e13&gt;&lt;/s12&gt; dependency on &lt;c14&gt;date&lt;/c14&gt; and &lt;c15&gt;hello&lt;/c15&gt; because it needs to know the &lt;c16&gt;archivePath&lt;/c16&gt;. But it asks for this information at &lt;s17&gt;&lt;e18&gt;execution time&lt;/e18&gt;&lt;/s17&gt;. Therefore we have no circular dependency.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T155558Z" creationid="huanghaohang" creationdate="20190617T155032Z">
        <seg>我们有一套有意思的依赖。显然，&lt;c0&gt;date&lt;/c0&gt; 和 &lt;c1&gt;hello&lt;/c1&gt; 项目都对 &lt;c4&gt;webDist&lt;/c4&gt; 有&lt;s2&gt;&lt;e3&gt;配置&lt;/e3&gt;&lt;/s2&gt;依赖，因为 web 应用程序项目的所有构建逻辑都由 &lt;c5&gt;webDist&lt;/c5&gt; 注入。&lt;s6&gt;&lt;e7&gt;执行&lt;/e7&gt;&lt;/s6&gt;依赖则反过来，因为 &lt;c8&gt;webDist&lt;/c8&gt; 依赖于 &lt;c9&gt;date&lt;/c9&gt; 和 &lt;c10&gt;hello&lt;/c10&gt; 的构建工件。这里甚至还有第三个依赖。&lt;c11&gt;webDist&lt;/c11&gt; 对 &lt;c14&gt;date&lt;/c14&gt; 和 &lt;c15&gt;hello&lt;/c15&gt; 有&lt;s12&gt;&lt;e13&gt;配置&lt;/e13&gt;&lt;/s12&gt;依赖，因为它需要知道 &lt;c16&gt;archivePath&lt;/c16&gt;。但是，它会在&lt;s17&gt;&lt;e18&gt;执行时&lt;/e18&gt;&lt;/s17&gt;才要求提供该信息。因此，我们没有循环依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have in-depth coverage with many examples about the Java plugin, dependency management and multi-project builds in later chapters. In this chapter we want to give you an initial idea of how to use the Java plugin to build a Java project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012344Z" creationid="95" creationdate="20170730T012101Z">
        <seg>在后续章节中，我们有深入介绍与Java插件，依赖管理以及多项目构建的相关的许多例子。在本章里，我们还是先了解一下使用Java插件来构建Java项目的基本用法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have now declared that the &lt;c0&gt;action&lt;/c0&gt; task in the &lt;c1&gt;consumer&lt;/c1&gt; project has an &lt;s2&gt;&lt;e3&gt;execution dependency&lt;/e3&gt;&lt;/s2&gt; on the &lt;c4&gt;action&lt;/c4&gt; task on the &lt;c5&gt;producer&lt;/c5&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152537Z" creationid="huanghaohang" creationdate="20190616T152537Z">
        <seg>我们现在声明了 &lt;c1&gt;consumer&lt;/c1&gt; 项目的 &lt;c0&gt;action&lt;/c0&gt; 任务对 &lt;c5&gt;producer&lt;/c5&gt; 项目的 &lt;c4&gt;action&lt;/c4&gt; 任务有&lt;s2&gt;&lt;e3&gt;执行依赖&lt;/e3&gt;&lt;/s2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have said that there is a specific upload task for each configuration. But before you can do an upload, you have to configure the upload task and define where to publish the artifacts to. The repositories you have defined (as described in &lt;a0&gt;Section 50.6, “Repositories”&lt;/a0&gt;) are not automatically used for uploading. In fact, some of those repositories allow only for artifact downloading. Here is an example how you can configure the upload task of a configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080201Z" creationid="huanghaohang" creationdate="20190606T075838Z">
        <seg>我们说过，每个配置都有一个特定的上传任务。但是在执行上传之前，你必须配置上传任务，并定义这些工件要发布到的位置。你所定义的仓库（如&lt;a0&gt;第 50.6 节，《仓库》&lt;/a0&gt;中所述）不会自动地用于上传。实际上，有些仓库仅允许下载工件。以下是有关如何对配置的上传任务进行配置的例子：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have the following project tree. This is a multi-project build with a root project &lt;c0&gt;water&lt;/c0&gt; and a subproject &lt;c1&gt;bluewhale&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154359Z" creationid="huanghaohang" creationdate="20190614T154359Z">
        <seg>我们有以下项目树。 它是一个多项目构建，有一个根项目 &lt;c0&gt;water&lt;/c0&gt; 和子项目 &lt;c1&gt;bluewhale&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have the projects &lt;c0&gt;shared&lt;/c0&gt;, &lt;c1&gt;api&lt;/c1&gt; and&lt;c2&gt;personService&lt;/c2&gt;. &lt;c3&gt;personService&lt;/c3&gt; has a lib dependency on the other two projects. &lt;c4&gt;api&lt;/c4&gt; has a lib dependency on &lt;c5&gt;shared&lt;/c5&gt;. &lt;s6&gt;[&lt;a7&gt;22&lt;/a7&gt;]&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160609Z" creationid="huanghaohang" creationdate="20190617T160609Z">
        <seg>我们有这些项目：&lt;c0&gt;shared&lt;/c0&gt;，&lt;c1&gt;api&lt;/c1&gt; 和 &lt;c2&gt;personService&lt;/c2&gt;。&lt;c3&gt;personService&lt;/c3&gt; 对其他两个项目有一个库依赖，&lt;c4&gt;api&lt;/c4&gt; 对 &lt;c5&gt;shared&lt;/c5&gt;上有一个库依赖。&lt;s6&gt;[&lt;a7&gt;22&lt;/a7&gt;]&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We just follow the convention for where the source for the task class should go.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123341Z" creationid="huanghaohang" creationdate="20190706T123341Z">
        <seg>我们只是按照约定将任务类的源码放在对应的位置。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We plan to add much more to the existing reports and create additional ones in future releases of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T035942Z" creationid="huanghaohang" creationdate="20190123T035942Z">
        <seg>我们计划在未来发布的版本中，向现有的报告添加更多的内容，并创建其他报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We plan to improve the ways of managing / pooling the daemons in future.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180116T143752Z" creationid="huanghaohang" creationdate="20180116T143752Z">
        <seg>我们计划在将来改进管理及合并守护进程的方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We said earlier, that the core of Gradle is a language for dependency based programming. In Gradle terms this means that you can define tasks and dependencies between tasks. Gradle guarantees that these tasks are executed in the order of their dependencies, and that each task is executed only once. Those tasks form a &lt;a0&gt;Directed Acyclic Graph&lt;/a0&gt;. There are build tools that build up such a dependency graph as they execute their tasks. Gradle builds the complete dependency graph &lt;s1&gt;&lt;e2&gt;before&lt;/e2&gt;&lt;/s1&gt; any task is executed. This lies at the heart of Gradle and makes many things possible which would not be possible otherwise.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T102452Z" creationid="huanghaohang" creationdate="20190611T102452Z">
        <seg>我们之前说过，Gradle 的核心是一种基于依赖编程的语言。用 Gradle 的话说，这意味着你可以定义任务以及任务之间的依赖。Gradle 保证这些任务按其依赖的顺序执行，并且每个任务只执行一次。这些任务形成一个 &lt;a0&gt;有向无环图&lt;/a0&gt;。有许多构建工具在执行任务时生成了一个这样的依赖图。Gradle 则是在执行所有任务&lt;s1&gt;&lt;e2&gt;之前&lt;/e2&gt;&lt;/s1&gt; 生成这个完整的依赖图。这就是 Gradle 的核心，并且它使得许多事情由不可能变得可能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We saw in the example above that the Java plugins adds a task named &lt;c0&gt;compileJava&lt;/c0&gt; that has a property named &lt;c1&gt;destinationDir&lt;/c1&gt; (that configures where the compiled Java source should be placed). The Java plugin defaults this property to point to &lt;c2&gt;build/classes/main&lt;/c2&gt; in the project directory. This is an example of convention-over-configuration via a &lt;s3&gt;&lt;e4&gt;reasonable default&lt;/e4&gt;&lt;/s3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022533Z" creationid="huanghaohang" creationdate="20180131T022533Z">
        <seg>在上面的示例中我们看到，Java 插件添加了一个名为 &lt;c0&gt;compileJava&lt;/c0&gt; 的任务，这个任务有一个名为 &lt;c1&gt;destinationDir&lt;/c1&gt; 的属性（即配置编译后的 Java 代码存放的地方）。Java 插件默认设置这个属性指向项目目录中的 &lt;c2&gt;build/classes/main&lt;/c2&gt;。这就是一个&lt;s3&gt;&lt;e4&gt;合理的默认值&lt;/e4&gt;&lt;/s3&gt;的约定优于配置的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We think the advantages of an internal DSL (based on a dynamic language) over XML are tremendous in case of &lt;s0&gt;&lt;e1&gt;build scripts&lt;/e1&gt;&lt;/s0&gt;. There are a couple of dynamic languages out there. Why Groovy? The answer lies in the context Gradle is operating in. Although Gradle is a general purpose build tool at its core, its main focus are Java projects. In such projects obviously the team members know Java. We think a build should be as transparent as possible to &lt;s2&gt;&lt;e3&gt;all&lt;/e3&gt;&lt;/s2&gt; team members.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T070852Z" creationid="95" creationdate="20170723T065620Z">
        <seg>我们认为在 &lt;s0&gt;&lt;e1&gt;构建脚本&lt;/e1&gt;&lt;/s0&gt;这种情况中，比起使用XML，（基于一种动态语言的）一种内部DSL会有很大的优点。 那么，有那么多的动态语言，我们为什么要使用Groovy？答案在于Gradle的操作环境。尽管Gradle的核心是成为一个通用的构建工具，但是它的主要重点还是Java项目。这样的项目的团队成员都知道Java。我们认为 ，构建应尽可能对 &lt;s2&gt;&lt;e3&gt;所有&lt;/e3&gt;&lt;/s2&gt; 的团队成员透明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We would like to introduce Gradle to you, a build system that we think is a quantum leap for build technology in the Java (JVM) world.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T133736Z" creationid="95" creationdate="20170721T133736Z">
        <seg>我们很高兴向大家介绍Gradle，一个我们认为在Java（JVM）世界的构建技术上富有突破性的构建系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We would like to introduce Gradle to you, a build system that we think is a quantum leap for build technology in the Java (JVM) world. Gradle provides:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T135513Z" creationid="95" creationdate="20170721T135513Z">
        <seg>我们很高兴向大家介绍Gradle，一个我们认为在Java（JVM）世界的构建技术上富有突破性的构建系统。它提供了：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Web Application Quickstart</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233814Z" creationid="huanghaohang" creationdate="20171206T233814Z">
        <seg>Web 应用程序快速入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Web application sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140416Z" creationid="huanghaohang" creationdate="20180408T140416Z">
        <seg>Web 应用程序源码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What does &lt;c0&gt;-q&lt;/c0&gt; do?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T145132Z" creationid="95" creationdate="20170724T145132Z">
        <seg> &lt;c0&gt;-q&lt;/c0&gt; 参数的作用是什么？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What exactly the Eclipse plugin generates depends on which other plugins are used:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025204Z" creationid="huanghaohang" creationdate="20181210T025204Z">
        <seg>Eclipse 插件生成的内容具体取决于使用的其他插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What exactly the IDEA plugin generates depends on which other plugins are used:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T030908Z" creationid="huanghaohang" creationdate="20181212T030908Z">
        <seg>IDEA 插件生成的内容具体取决于使用了哪些其他插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What if one projects needs the jar produced by another project in its compile path? And not just the jar but also the transitive dependencies of this jar? Obviously this is a very common use case for Java multi-project builds. As already mentioned in &lt;a0&gt;Section 50.4.3, “Project dependencies”&lt;/a0&gt;, Gradle offers project lib dependencies for this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160307Z" creationid="huanghaohang" creationdate="20190617T160307Z">
        <seg>如果一个项目在其编译路径上需要另一个项目生成的 jar 呢？并且不仅是 jar，还有它的传递依赖呢？显然，这是 Java 多项目构建中非常常见的情况。如《&lt;a0&gt;第50.4.3节，项目依赖&lt;/a0&gt;》中所述，Gradle 为此提供了项目库依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What is dependency management?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233627Z" creationid="huanghaohang" creationdate="20171206T233627Z">
        <seg>什么是依赖管理？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What is the purpose of this behavior? Somehow Gradle has to find out, whether the project you are into, is a subproject of a multiproject build or not. Of course, if it is a subproject, only the subproject and its dependent projects are build. But Gradle needs to create the build configuration for the whole multiproject build (see &lt;a0&gt;Chapter 56, &lt;i1&gt;Multi-project Builds&lt;/i1&gt;&lt;/a0&gt;). Via the &lt;c2&gt;-u&lt;/c2&gt; command line option, you can tell Gradle not to look in the parent hierarchy for a &lt;c3&gt;settings.gradle&lt;/c3&gt; file. The current project is then always build as a single project build. If the current project contains a &lt;c4&gt;settings.gradle&lt;/c4&gt; file, the &lt;c5&gt;-u&lt;/c5&gt; option has no meaning. Such a build is always executed as:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143055Z" creationid="huanghaohang" creationdate="20190613T143055Z">
        <seg>这种行为的目的是什么？无论你进入的项目是否为多项目构建的子项目，Gradle 都必须查明该项目是否为多项目构建的子项目。当然，如果它是子项目，那么就只构建子项目及其依赖的项目。但是 Gradle 需要为整个多项目构建创建构建配置（请参阅《&lt;a0&gt;第五十六章，&lt;i1&gt;多项目构建&lt;/i1&gt;&lt;/a0&gt;》）。通过 &lt;c2&gt;-u&lt;/c2&gt; 命令行选项，你可以告诉 Gradle 不要在父层次结构中查找 &lt;c3&gt;settings.gradle&lt;/c3&gt; 文件。然后，当前项目将始终作为单项目进行构建。如果当前项目包含了 &lt;c4&gt;settings.gradle&lt;/c4&gt; 文件，那么 &lt;c5&gt;-u&lt;/c5&gt; 选项将没有意义。这样的构建始终这样执行：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What plugins do</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034753Z" creationid="huanghaohang" creationdate="20180517T034753Z">
        <seg>插件都做了什么</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What properties are available?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132614Z" creationid="95" creationdate="20170730T132614Z">
        <seg>有哪些属性可用？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What tasks are available?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012911Z" creationid="95" creationdate="20170730T012911Z">
        <seg>有哪些任务可用？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What to set up</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070559Z" creationid="huanghaohang" creationdate="20190205T070559Z">
        <seg>要设置什么</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What's going on here? This build script defines a single task, called &lt;c0&gt;hello&lt;/c0&gt;, and adds an action to it. When you run &lt;s1&gt;&lt;c2&gt;gradle hello&lt;/c2&gt;&lt;/s1&gt;, Gradle executes the &lt;c3&gt;hello&lt;/c3&gt; task, which in turn executes the action you've provided. The action is simply a closure containing some Groovy code to execute.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T150523Z" creationid="95" creationdate="20170724T145851Z">
        <seg>我们来看看这个脚本做了些什么。它定义了一个叫做 &lt;c0&gt;hello&lt;/c0&gt;的任务，并且给它加了一个动作。当你执行&lt;s1&gt;&lt;c2&gt;gradle hello&lt;/c2&gt;&lt;/s1&gt;的时候，Gradle会执行这个&lt;c3&gt;hello&lt;/c3&gt;任务，而这个任务又会执行您所提供的动作。这个动作只是一个包含了一些要执行的Groovy代码的闭包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What's going on here? This build script says a few things about the project. Firstly, it states that Hibernate core 3.6.7.Final is required to compile the project's production source. By implication, Hibernate core and its dependencies are also required at runtime. The build script also states that any junit &gt;= 4.0 is required to compile the project's tests. It also tells Gradle to look in the Maven central repository for any dependencies that are required. The following sections go into the details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T024330Z" creationid="haohang" creationdate="20170908T013315Z">
        <seg>这里做了些什么？这个构建脚本说明了关于项目的一些事情。首先，它指出，Hibernate core 3.6.7.Final是编项目的生产源代码所必需的。同时也暗指了，运行时还需要使用Hibernate core及其依赖。构建脚本还指出，编译项目的测试时需要4.0或以上的junit。它还告诉Gradle在Maven中央存储库中查找所需的任何依赖。以下各节内容会进行详细介绍。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;c0&gt;scalaCompileOptions.fork&lt;/c0&gt; is set to &lt;c1&gt;true&lt;/c1&gt;, compilation will take place in an external process. The details of forking depend on which compiler is used. The Ant based compiler (&lt;c2&gt;scalaCompileOptions.useAnt = true&lt;/c2&gt;) will fork a new process for every &lt;c3&gt;ScalaCompile&lt;/c3&gt; task, and does not fork by default. The Zinc based compiler (&lt;c4&gt;scalaCompileOptions.useAnt = false&lt;/c4&gt;) will leverage the Gradle compiler daemon, and does so by default.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053329Z" creationid="huanghaohang" creationdate="20180407T022121Z">
        <seg>当 &lt;c0&gt;scalaCompileOptions.fork&lt;/c0&gt; 被设为 &lt;c1&gt;true&lt;/c1&gt; 的时候，汇编将在外部进程中进行。fork 的详细情况取决于所使用的编译器。基于 Ant 的编译器（&lt;c2&gt;scalaCompileOptions.useAnt = true&lt;/c2&gt;）将为每一个 &lt;c3&gt;ScalaCompile&lt;/c3&gt; 任务 fork 一个新的进程，并且默认情况下不 fork。基于 Zinc 的编译器（&lt;c4&gt;scalaCompileOptions.useAnt = false&lt;/c4&gt;）则是使用 Gradle 编译器守护进程，并且默认情况下也是这样。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Gradle executes a script, it compiles the script into a class which implements &lt;a0&gt;&lt;c1&gt;Script&lt;/c1&gt;&lt;/a0&gt;. This means that all of the properties and methods declared by the &lt;c2&gt;Script&lt;/c2&gt; interface are available in your script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132523Z" creationid="huanghaohang" creationdate="20170913T132523Z">
        <seg>当Gradle执行脚本时，它会将脚本编译成一个实现&lt;a0&gt;&lt;c1&gt;Script&lt;/c1&gt;&lt;/a0&gt;接口的类。这意味着&lt;c2&gt;Script&lt;/c2&gt;接口声明的所有属性和方法都可以在你的脚本中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Gradle has history of a previous task execution, and the only changes to the task execution context since that execution are to input files, then Gradle is able to determine which input files need to be reprocessed by the task. In this case, the &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.outOfDate()&lt;/c1&gt;&lt;/a0&gt; action will be executed for any input file that was &lt;s2&gt;&lt;e3&gt;added&lt;/e3&gt;&lt;/s2&gt; or &lt;s4&gt;&lt;e5&gt;modified&lt;/e5&gt;&lt;/s4&gt;, and the &lt;a6&gt;&lt;c7&gt;IncrementalTaskInputs.removed()&lt;/c7&gt;&lt;/a6&gt; action will be executed for any &lt;s8&gt;&lt;e9&gt;removed&lt;/e9&gt;&lt;/s8&gt; input file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140254Z" creationid="huanghaohang" creationdate="20190706T135144Z">
        <seg>当 Gradle 有了前一次任务执行的历史，并且从那一次执行之后任务执行的上下文中只有输入有修改，那么 Gradle 就能够确定这个任务需要重新处理哪些文件。在这种情况下，将对&lt;s2&gt;&lt;s2&gt;&lt;e3&gt;已添加的&lt;/e3&gt;&lt;/s2&gt;或&lt;s4&gt;&lt;e5&gt;已修改的&lt;/e5&gt;&lt;/s4&gt;的输入文件执行 &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.outOfDate()&lt;/c1&gt;&lt;/a0&gt; 操作，并且对任何&lt;s8&gt;&lt;e9&gt;已移除的&lt;/e9&gt;&lt;/s8&gt;输入文件执行 &lt;a6&gt;&lt;c7&gt;IncrementalTaskInputs.removal()&lt;/c7&gt;&lt;/a6&gt; 操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a platform does not define an architecture or operating system, the default target of the tool chain is assumed. So if a platform does not define a value for &lt;c0&gt;operatingSystem&lt;/c0&gt;, Gradle will find the first available tool chain that can build for the specified &lt;c1&gt;architecture&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085652Z" creationid="huanghaohang" creationdate="20190610T085400Z">
        <seg>当一个平台没有定义架构或操作系统时，会假定工具链的默认目标。所以如果平台没有为 &lt;c0&gt;operatingSystem&lt;/c0&gt; 定义值的话，Gradle 将找到第一个可以为指定的 &lt;c1&gt;architecture&lt;/c1&gt; 构建的可用工具链。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a set of build types, target platforms, and flavors is defined for a component, a &lt;a0&gt;&lt;c1&gt;NativeBinary&lt;/c1&gt;&lt;/a0&gt; model element is created for every possible combination of these. However, in many cases it is not possible to build a particular variant, perhaps because no tool chain is available to build for a particular platform.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084445Z" creationid="huanghaohang" creationdate="20190610T084041Z">
        <seg>当为一个组件定义了一组构建类型，目标平台及风格时，将会为它们的每种可能的组合创建一个 &lt;a0&gt;&lt;c1&gt;NativeBinary&lt;/c1&gt;&lt;/a0&gt; 模型元素。然而，在许多情况下无法构建特定的变体，可能的原因是没有可用于某个特定平台的构建的工具链。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a task input property modified, Gradle is not able to determine how this property impacted the task outputs, so all input files are assumed to be out of date. So similar to the changed output file example, &lt;s0&gt;&lt;e1&gt;all&lt;/e1&gt;&lt;/s0&gt; input files are reported to the &lt;a2&gt;&lt;c3&gt;IncrementalTaskInputs.outOfDate()&lt;/c3&gt;&lt;/a2&gt; action, and no input files are reported to the &lt;a4&gt;&lt;c5&gt;IncrementalTaskInputs.removed()&lt;/c5&gt;&lt;/a4&gt; action:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143228Z" creationid="huanghaohang" creationdate="20190707T143228Z">
        <seg>当修改任务的输入属性时，Gradle 无法确定该属性对任务的输出会有怎样的影响，因此将假定所有输入文件都已过时。所以与更改输出文件的示例类似，&lt;s0&gt;&lt;e1&gt;所有的&lt;/e1&gt;&lt;/s0&gt;输入文件将报告给 &lt;a2&gt;&lt;c3&gt;IncrementalTaskInputs.outOfDate()&lt;/c3&gt;&lt;/a2&gt; 操作，并且不会向 &lt;a4&gt;&lt;c5&gt;IncrementalTaskInputs.removal()&lt;/c5&gt;&lt;/a4&gt; 操作报告任何输入文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an existing input file is removed, then re-executing the task results that file being reported to &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.removed()&lt;/c1&gt;&lt;/a0&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142515Z" creationid="huanghaohang" creationdate="20190707T142515Z">
        <seg>当删除一个现有的输入文件后，重新执行这个任务会使该文件被报告给 &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.removal()&lt;/c1&gt;&lt;/a0&gt;：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an input file is modified in some way or a new input file is added, then re-executing the task results in those files being reported to &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.outOfDate()&lt;/c1&gt;&lt;/a0&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142234Z" creationid="huanghaohang" creationdate="20190707T142234Z">
        <seg>当以某种方式修改了输入文件，或者新增输入文件时，重新执行这个任务会使这些文件被上报到 &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.outOfDate()&lt;/c1&gt;&lt;/a0&gt;：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an output file is deleted (or modified), then Gradle is unable to determine which input files are out of date. In this case, &lt;s0&gt;&lt;e1&gt;all&lt;/e1&gt;&lt;/s0&gt; input files are reported to the &lt;a2&gt;&lt;c3&gt;IncrementalTaskInputs.outOfDate()&lt;/c3&gt;&lt;/a2&gt; action, and no input files are reported to the &lt;a4&gt;&lt;c5&gt;IncrementalTaskInputs.removed()&lt;/c5&gt;&lt;/a4&gt; action:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142958Z" creationid="huanghaohang" creationdate="20190707T142958Z">
        <seg>当删除（或修改）输出文件时，Gradle 无法确定哪些输入文件是已过时的。在这种情况下，&lt;s0&gt;&lt;e1&gt;所有的&lt;/e1&gt;&lt;/s0&gt; 输入文件都会被报告给 &lt;a2&gt;&lt;c3&gt;IncrementalTaskInputs.outOfDate()&lt;/c3&gt;&lt;/a2&gt; 操作，并且不会向 &lt;a4&gt;&lt;c5&gt;IncrementalTaskInputs.removal()&lt;/c5&gt;&lt;/a4&gt; 操作报告任何输入文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When applying plugins within the init script, Gradle instantiates the plugin and calls the plugin instance's &lt;a0&gt;&lt;c1&gt;Plugin.apply()&lt;/c1&gt;&lt;/a0&gt; method. The &lt;c2&gt;gradle&lt;/c2&gt; object is passed as a parameter, which can be used to configure all aspects of a build. Of course, the applied plugin can be resolved as external dependency as described in &lt;a3&gt;Section 60.4, “External dependencies for the init script”&lt;/a3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151703Z" creationid="huanghaohang" creationdate="20191206T151703Z">
        <seg>当在初始化脚本中应用插件时，Gradle 将实例化插件并调用插件实例的 &lt;a0&gt;&lt;c1&gt;Plugin.apply()&lt;/c1&gt;&lt;/a0&gt; 方法。然后 &lt;c2&gt;gradle&lt;/c2&gt; 对象作为参数传入，用于配置构建的所有方面。当然，应用的插件也可以解析为外部依赖，如&lt;a3&gt;第 60.4 节，《初始化脚本的外部依赖》&lt;/a3&gt;中所述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When configured, Gradle will run in incubating parallel mode.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T020554Z" creationid="huanghaohang" creationdate="20180126T020554Z">
        <seg>配置之后，Gradle 将在试验性的并行模式下运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When deploying an artifact to a Maven repository, Gradle automatically generates a POM for it. The &lt;c0&gt;groupId&lt;/c0&gt;, &lt;c1&gt;artifactId&lt;/c1&gt;, &lt;c2&gt;version&lt;/c2&gt; and &lt;c3&gt;packaging&lt;/c3&gt; elements used for the POM default to the values shown in the table below. The &lt;c4&gt;dependency&lt;/c4&gt; elements are created from the project's dependency declarations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094839Z" creationid="huanghaohang" creationdate="20190607T094839Z">
        <seg>当部署一个工件到 Maven 仓库时，Gradle 会自动为它生成一个 POM。下表展示了用于 POM 的 &lt;c0&gt;groupId&lt;/c0&gt;、&lt;c1&gt;artifactId&lt;/c1&gt;、 &lt;c2&gt;version&lt;/c2&gt; 和 &lt;c3&gt;package&lt;/c3&gt; 元素的默认值。&lt;c4&gt;dependency&lt;/c4&gt; 元素则是根据项目的依赖声明来创建的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When deploying signatures for your artifacts to a Maven repository, you will also want to sign the published POM file. The signing plugin adds a &lt;c0&gt;signing.signPom()&lt;/c0&gt; (see: &lt;a1&gt;&lt;c2&gt;SigningExtension.signPom()&lt;/c2&gt;&lt;/a1&gt;) method that can be used in the &lt;c3&gt;beforeDeployment()&lt;/c3&gt; block in your upload task configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010402Z" creationid="huanghaohang" creationdate="20190609T010402Z">
        <seg>在将工件签名部署签名到 Maven 仓库时，你还希望对发布的 POM 文件也进行签名。签名插件添加了一个 &lt;c0&gt;signing.signPom()&lt;/c0&gt; （请参见： &lt;a1&gt; &lt;c2&gt;SigningExtension.signPom()&lt;/c2&gt;&lt;/a1&gt;）方法，这个方法可以在你的上传任务配置的 &lt;c3&gt;beforeDeployment()&lt;/c3&gt; 块中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When developing a web application, where the application is assembled many times.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133647Z" creationid="huanghaohang" creationdate="20180108T133647Z">
        <seg>当开发一个 web 应用程序中，应用程序会被组装多次。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When developing custom tasks and plugins, it's a good idea to be very flexible when accepting input configuration for file locations. To do this, you can leverage the &lt;a0&gt;&lt;c1&gt;Project.file()&lt;/c1&gt;&lt;/a0&gt; method to resolve values to files as late as possible.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151124Z" creationid="huanghaohang" creationdate="20190727T151124Z">
        <seg>在开发自定义任务和插件时，文件位置如果能够配置将使插件非常灵活。为此，你可以利用 &lt;a0&gt;&lt;c1&gt;Project.file()&lt;/c1&gt;&lt;/a0&gt; 方法尽可能晚地将值解析为文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When discovering what a build can do, where &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt; is executed a number of times.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133741Z" creationid="huanghaohang" creationdate="20180108T133741Z">
        <seg>当要了解一个构建能做什么时，&lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt; 会被执行多次。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When executed with &lt;c0&gt;--continue&lt;/c0&gt;, Gradle will execute &lt;s1&gt;&lt;e2&gt;every&lt;/e2&gt;&lt;/s1&gt; task to be executed where all of the dependencies for that task completed without failure, instead of stopping as soon as the first failure is encountered. Each of the encountered failures will be reported at the end of the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T074848Z" creationid="huanghaohang" creationdate="20170909T074105Z">
        <seg>当带上&lt;c0&gt;--continue&lt;/c0&gt;参数执行时，Gradle将执行&lt;s1&gt;&lt;e2&gt;所有&lt;/e2&gt;&lt;/s1&gt;要执行的任务，即该任务的所有依赖任务都会完成执行，而不是一出现错误就停止。所有失败的信息将在构建结束时报告出来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When run with &lt;c0&gt;--continue&lt;/c0&gt;, it is possible for &lt;c1&gt;B&lt;/c1&gt; to execute in the event that &lt;c2&gt;A&lt;/c2&gt; fails.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081416Z" creationid="huanghaohang" creationdate="20170922T081416Z">
        <seg>当使用&lt;c0&gt;--continue&lt;/c0&gt;参数运行时，可能会存在&lt;c2&gt;A&lt;/c2&gt;执行失败后&lt;c1&gt;B&lt;/c1&gt;执行了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When set to &lt;c0&gt;true&lt;/c0&gt; the Gradle daemon is to run the build. For local developer builds this is our favorite property. The developer environment is optimized for speed and feedback so we nearly always run Gradle jobs with the daemon. We don't run CI builds with the daemon (i.e. a long running process) as the CI environment is optimized for consistency and reliability.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T012614Z" creationid="huanghaohang" creationdate="20180126T012237Z">
        <seg>当设置为 &lt;c0&gt;true&lt;/c0&gt; 时，Gradle 守护进程会运行构建。对于本地开发者的构建而言，这是我们最喜欢的属性。开发人员的环境在速度和反馈上会优化，因此我们几乎总是使用守护进程运行 Gradle 作业。我们不会使用守护进程（即长时间运行的进程）运行 CI 构建，因为 CI 环境已经进行了优化以保持一致性和可靠性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When setting only a single property at a time, the equivalent property syntax is more succinct:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153315Z" creationid="huanghaohang" creationdate="20180811T153315Z">
        <seg>当一次只设置一个属性时，等效属性的语法更加简洁：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When signing is not required and the POM cannot be signed due to insufficient configuration (i.e. no credentials for signing) then the &lt;c0&gt;signPom()&lt;/c0&gt; method will silently do nothing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010945Z" creationid="huanghaohang" creationdate="20190609T010945Z">
        <seg>当不需要签名，以及由于缺少配置（即没有签名证书）而不能签名 POM 时，&lt;c0&gt;signPom()&lt;/c0&gt; 方法将不执行任何操作，并且不会有提示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When specifying what is to be signed via the Signing DSL, the resultant signature artifacts are automatically added to the &lt;c0&gt;signatures&lt;/c0&gt; and &lt;c1&gt;archives&lt;/c1&gt; dependency configurations. This means that if you want to upload your signatures to your distribution repository along with the artifacts you simply execute the &lt;c2&gt;uploadArchives&lt;/c2&gt; task as normal.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010054Z" creationid="huanghaohang" creationdate="20190609T010054Z">
        <seg>当通过 Signing DSL 指定要签名的内容时，会自动将生成的签名工件添加到 &lt;c0&gt;signatures&lt;/c0&gt; 和 &lt;c1&gt;archives&lt;/c1&gt; 依赖配置中。这意味着，如果你想要将签名随工件一起上传到分发仓库，正常来讲，你只需要简单地执行 &lt;c2&gt;uploadArchives&lt;/c2&gt; 任务就可以了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the &lt;c0&gt;visual-studio&lt;/c0&gt; plugin is applied, a task name &lt;c1&gt;${component.name}VisualStudio&lt;/c1&gt; is created for each defined component. This task will generate a Visual Studio Solution file for the named component. This solution will include a Visual Studio Project for that component, as well as linking to project files for each depended-on binary.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T031446Z" creationid="huanghaohang" creationdate="20190611T031446Z">
        <seg>应用 &lt;c0&gt;visual-studio&lt;/c0&gt; 插件时，会为每个定义的组件创建名称为 &lt;c1&gt;${component.name}VisualStudio&lt;/c1&gt; 的任务。这个任务将为所命名的组件一个 Visual Studio Solution 文件。这个解决方案将包含该组件的 Visual Studio Project，以及链接至每个依赖二进制文件的项目文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the Eclipse plugin encounters a Scala project, it adds additional configuration to make the project work with Scala IDE out of the box. Specifically, the plugin adds a Scala nature and dependency container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141513Z" creationid="huanghaohang" creationdate="20180407T141513Z">
        <seg>当 Eclipse 插件遇到 Scala 项目时，它会添加额外的配置，以使该项目能够与 Scala IDE 直接配合使用。具体而言，该插件添加了一个 Scala 特性和依赖容器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the IDEA plugin encounters a Scala project, it adds additional configuration to make the project work with IDEA out of the box. Specifically, the plugin adds a Scala facet and a Scala compiler library that matches the Scala version on the project's class path.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141759Z" creationid="huanghaohang" creationdate="20180407T141525Z">
        <seg>当 IDEA 插件遇到 Scala 项目时，它会添加额外的配置以使该项目能够与 IDEA 直接配合使用。具体来说，该插件添加了一个 Scala facet 和一个与项目类路径上的 Scala 版本相匹配 Scala 编译器库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the dependency is declared by a static version and a module descriptor file is found in a repository, there is no need to continue searching later repositories and the remainder of the process is short-circuited.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T033318Z" creationid="huanghaohang" creationdate="20190604T033318Z">
        <seg>当依赖声明为静态版本，并且在仓库中找到模块描述符文件时，将不再需要继续搜索后面的仓库，这个过程的其余部分是短路的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When these large dependency trees need to change, you'll often have to solve some dependency version conflicts. Say one open source library needs one version of a logging library and a another uses an alternative version. Gradle and other build tools all have the ability to solve this dependency tree and resolve conflicts, but what differentiates Gradle is the control it gives you over transitive dependencies and conflict resolution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T163759Z" creationid="95" creationdate="20190315T163759Z">
        <seg>当这些大的依赖树需要更改时，你通常需要解决某些依赖的版本冲突。比如说某个开源代码库需要一个版本的日志记录库，而另一个需要另一个版本。 Gradle和其他构建工具都能够解决这种依赖树并解决冲突，但不同的是，Gradle使你可以控制传递依赖冲突解决。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using Gradle (or any software package), you can run into problems. You may not understand how to use a particular feature, or you may encounter a defect. Or, you may have a general question about Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T120847Z" creationid="95" creationdate="20170723T120847Z">
        <seg>当使用Gradle（或者是其他软件包）的时候，或多或少都会遇到一些问题。或许是您无法驾驭的新特性，或许是正好遇到了缺陷，也可能是关于Gradle的一些常见问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using JUnit, we scan for both JUnit 3 and 4 test classes. If any of the following criteria match, the class is considered to be a JUnit test class:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155222Z" creationid="huanghaohang" creationdate="20180405T155222Z">
        <seg>当使用 JUnit 时，我们扫描 JUnit 3 和 4 的测试类。如果符合以下任何标准，则该类将被视为 JUnit 测试类：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using TestNG, we scan for methods annotated with &lt;c0&gt;@Test&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T155345Z" creationid="huanghaohang" creationdate="20180405T155345Z">
        <seg>当使用 TestNG 时，我们扫描带有 &lt;c0&gt;@Test&lt;/c0&gt; 注解的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using test driven development, where the unit tests are executed many times.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133538Z" creationid="huanghaohang" creationdate="20180108T133538Z">
        <seg>当使用测试驱动开发时，单元测试会被执行多次。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When using the &lt;a0&gt;&lt;c1&gt;VisualCpp&lt;/c1&gt;&lt;/a0&gt; tool chain, Gradle is able to compile Window Resource (&lt;c2&gt;rc&lt;/c2&gt;) files and link them into a native binary. This functionality is provided by the &lt;c3&gt;'windows-resources'&lt;/c3&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012928Z" creationid="huanghaohang" creationdate="20190610T012545Z">
        <seg>使用 &lt;a0&gt;&lt;c1&gt;VisualCpp&lt;/c1&gt;&lt;/a0&gt; 工具链时， Gradle 能够编译 Window Resource（&lt;c2&gt;rc&lt;/c2&gt;）文件，并将它们链接到本机二进制文件。 这个功能是由 &lt;c3&gt;'windows-resources'&lt;/c3&gt; 插件提供的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When we have executed the &lt;c0&gt;hello&lt;/c0&gt; task from the root project dir things behaved in an intuitive way. All the &lt;c1&gt;hello&lt;/c1&gt; tasks of the different projects were executed. Let's switch to the &lt;c2&gt;bluewhale&lt;/c2&gt; dir and see what happens if we execute Gradle from there.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T161714Z" creationid="huanghaohang" creationdate="20190615T161714Z">
        <seg>当我们从根项目目录执行了 &lt;c0&gt;hello&lt;/c0&gt; 任务时，会以一种直观的方式表现出来。不同项目中的所有 &lt;c1&gt;hello&lt;/c1&gt; 任务都被执行了。让我们切换到 &lt;c2&gt;bluewhale&lt;/c2&gt; 目录，看看如果我们在那里执行 Gradle，会发生什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you configure the &lt;c0&gt;Wrapper&lt;/c0&gt; task, you can specify the Gradle version you wish to use. The &lt;s1&gt;&lt;s2&gt;gradlew&lt;/s2&gt;&lt;/s1&gt; command will download the appropriate distribution from the Gradle repository. Alternatively, you can specify the download URL of the Gradle distribution. The &lt;s3&gt;&lt;s4&gt;gradlew&lt;/s4&gt;&lt;/s3&gt; command will use this URL to download the distribution. If you specify neither a Gradle version or download URL, the &lt;s5&gt;&lt;s6&gt;gradlew&lt;/s6&gt;&lt;/s5&gt; command will by default download whichever version of Gradle was used to generate the wrapper files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T140050Z" creationid="huanghaohang" creationdate="20191219T140050Z">
        <seg>配置 &lt;c0&gt;Wrapper&lt;/c0&gt; 任务时，可以指定要使用的 Gradle 版本。&lt;s1&gt;&lt;s2&gt;gradlew&lt;/s2&gt;&lt;/s1&gt; 命令将从 Gradle 仓库下载相应的分发。另外，你也可以指定 Gradle 分发包的下载 URL，&lt;s3&gt;&lt;s4&gt;gradlew&lt;/s4&gt;&lt;/s3&gt; 命令将使用这个 URL 下载分发。如果你没有指定 Gradle 版本或下载 URL，那么 &lt;s5&gt;&lt;s6&gt;gradlew&lt;/s6&gt;&lt;/s5&gt; 命令默认情况下将下载生成了包装器文件的 Gradle 版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you define a new source set, the Java plugin adds some dependency configurations for the source set, as shown in &lt;a0&gt;Table 23.6, “Java plugin - source set dependency configurations”&lt;/a0&gt;. You can use these configurations to define the compile and runtime dependencies of the source set.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094833Z" creationid="haohang" creationdate="20180326T094833Z">
        <seg>当你定义一个新的源集时，Java 插件会为该源集添加一些依赖配置，如&lt;a0&gt;表 23.6，“Java 插件——源集依赖性配置”&lt;/a0&gt;所示。你可以使用这些配置来定义源集的编译和运行时依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you run Gradle, it checks for the existence of a directory called &lt;c0&gt;buildSrc&lt;/c0&gt;. Gradle then automatically compiles and tests this code and puts it in the classpath of your build script. You don't need to provide any further instruction. This can be a good place to add your custom tasks and plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T133653Z" creationid="huanghaohang" creationdate="20191201T133653Z">
        <seg>当你运行 Gradle 时，它会检查 &lt;c0&gt;buildSrc&lt;/c0&gt; 目录是否存在。如果存在，Gradle 会自动编译和测试其代码，并将它加到构建脚本的类路径中。你不需要提供任何进一步的指示信息。这可能是添加自定义任务和插件的好地方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you run the &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; command, it looks for a build file in the current directory. You can use the &lt;c2&gt;-b&lt;/c2&gt; option to select another build file. If you use &lt;c3&gt;-b&lt;/c3&gt; option then &lt;c4&gt;settings.gradle&lt;/c4&gt; file is not used. Example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113705Z" creationid="huanghaohang" creationdate="20170909T113421Z">
        <seg>当你运行&lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt;这个命令时，它会在当前目录中查找一个构建文件。你也可以使用&lt;c2&gt;-b&lt;/c2&gt;选项来选择另一个构建文件。如果你使用&lt;c3&gt;-b&lt;/c3&gt;选项，那么Gradle就不会去用到&lt;c4&gt;settings.gradle&lt;/c4&gt;文件。例：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you set &lt;c0&gt;archiveTask.baseName&lt;/c0&gt; to a value other than the default, make sure to set &lt;c1&gt;uploadTask.repositories.mavenDeployer.pom.artifactId&lt;/c1&gt; to the same value. Otherwise, the project at hand may be referenced with the wrong artifact ID from generated POMs for other projects in the same build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100418Z" creationid="huanghaohang" creationdate="20190607T100103Z">
        <seg>当你把 &lt;c0&gt;archiveTask.baseName&lt;/c0&gt; 设置为非默认值时，请确保将 &lt;c1&gt;uploadTask.repositories.mavenDeployer.pom.artifactId&lt;/c1&gt; 设置为相同的值。否则在同一个构建中，其他项目引用到的这个项目所生成的 POM 的 artifact ID 可能会有误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you specify tasks on the command-line, you don't have to provide the full name of the task. You only need to provide enough of the task name to uniquely identify the task. For example, in the sample build above, you can execute task &lt;c0&gt;dist&lt;/c0&gt; by running &lt;s1&gt;&lt;c2&gt;gradle d&lt;/c2&gt;&lt;/s1&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T112734Z" creationid="huanghaohang" creationdate="20170909T112734Z">
        <seg>在命令行中指定任务时，可以不输入任务的全名，只需要提供可以足够唯一标识任务的任务名。例如，在上面的示例构建中，你可以通过运行&lt;s1&gt;&lt;c2&gt;gradle d&lt;/c2&gt;&lt;/s1&gt;来执行&lt;c0&gt;dist&lt;/c0&gt;任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Where to next?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T032009Z" creationid="huanghaohang" creationdate="20170927T032009Z">
        <seg>下一步目标？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While Gradle has strong opinions on dependency management, the tool gives you a choice between two options: follow recommended best practices or support any kind of pattern you can think of. This section outlines the Gradle project's recommended best practices for managing dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190210T143905Z" creationid="95" creationdate="20190210T143602Z">
        <seg>由于Gradle在依赖管理方面有强烈的主张，该工具提供了两个选项让你从中选择：遵循推荐的最佳实践，或支持你可以想到的任何类型的模式。 本节概述Gradle项目建议的用于管理依赖的最佳实践。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While all tasks of type &lt;a0&gt;&lt;c1&gt;Test&lt;/c1&gt;&lt;/a0&gt; are automatically enhanced to provide coverage information when the &lt;c2&gt;java&lt;/c2&gt; plugin has been applied, any task that implements &lt;a3&gt;&lt;c4&gt;JavaForkOptions&lt;/c4&gt;&lt;/a3&gt; can be enhanced by the JaCoCo plugin. That is, any task that forks Java processes can be used to generate coverage information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093726Z" creationid="huanghaohang" creationdate="20180715T093313Z">
        <seg>虽然所有 &lt;a0&gt;&lt;c1&gt;Test&lt;/c1&gt;&lt;/a0&gt; 类型的任务会在应用 &lt;c2&gt;java&lt;/c2&gt; 插件时自动增强以提供覆盖率信息，但是任何实现了 &lt;a3&gt;&lt;c4&gt;JavaForkOptions&lt;/c4&gt;&lt;/a3&gt; 的任务都可以通过 JaCoCo 插件得到增强。也就是说，任何 fork Java 进程的任务都可生成覆盖信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While certainly useful at times, we do recommend to keep the bulk of the configuration in a (versioned) build script, readily available to everyone.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T045544Z" creationid="huanghaohang" creationdate="20181202T045544Z">
        <seg>虽然有时肯定有用，但我们建议将大部分配置保存在（版本化的）构建脚本中，随时可供所有人使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While the &lt;c0&gt;c&lt;/c0&gt; plugin defines these default locations for each &lt;a1&gt;&lt;c2&gt;CSourceSet&lt;/c2&gt;&lt;/a1&gt;, it is possible to extend or override these defaults to allow for a different project layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051612Z" creationid="huanghaohang" creationdate="20190609T051612Z">
        <seg>当 &lt;c0&gt;c&lt;/c0&gt; 插件为每个 &lt;a1&gt;&lt;c2&gt;CSourceSet&lt;/c2&gt;&lt;/a1&gt; 定义了这些默认的位置时，可以扩展或重写这些默认值实现不同的项目布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While the &lt;c0&gt;cpp&lt;/c0&gt; plugin defines these default locations for each &lt;a1&gt;&lt;c2&gt;CppSourceSet&lt;/c2&gt;&lt;/a1&gt;, it is possible to extend or override these defaults to allow for a different project layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043345Z" creationid="huanghaohang" creationdate="20190609T043345Z">
        <seg>当 &lt;c0&gt;cpp&lt;/c0&gt; 插件为每个 &lt;a1&gt;&lt;c2&gt;CppSourceSet&lt;/c2&gt;&lt;/a1&gt; 定义了这些默认的位置时，可以扩展或重写这些默认值实现不同的项目布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While the strategies introduced above are usually enough to solve most conflicts, Gradle provides more fine-grained mechanisms to resolve version conflicts:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T131247Z" creationid="95" creationdate="20190316T131247Z">
        <seg>虽然上面介绍的策略通常足够解决大部分的冲突，但是 Gradle 也提供了更细粒度的机制来解决版本冲突：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While you are working in a typical development cycle repeatedly building and testing changes to the :api project (knowing that you are only changing files in this one project), you may not want to even suffer the expense of :shared:compile checking to see what has changed in the :shared project. Adding the &lt;c0&gt;-a&lt;/c0&gt; option will cause Gradle to use cached jars to resolve any project lib dependencies and not try to re-build the depended on projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T140952Z" creationid="huanghaohang" creationdate="20190622T140952Z">
        <seg>当你在典型的开发周期中反复构建并测试对 :api 项目所作的修改（要知道你只修改了这个项目中的一个文件）时，你可能不想查看 :shared 项目中所修改的内容时承担 :shared:compile 检查的成本。添加 &lt;c0&gt;-a&lt;/c0&gt; 选项能够让 Gradle 使用缓存的 jar 来解析所有项目库依赖，而不会尝试重新构建所依赖的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While you could try to manage this problem manually, you will quickly find that this approach doesn't scale. If you want to get rid of a first level dependency you really can't be sure which other jars you should remove. A dependency of a first level dependency might also be a first level dependency itself, or it might be a transitive dependency of yet another first level dependency. If you try to manage transitive dependencies yourself, the end of the story is that your build becomes brittle: no one dares to change your dependencies because the risk of breaking the build is too high. The project classpath becomes a complete mess, and, if a classpath problem arises, hell on earth invites you for a ride.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190315T220451Z" creationid="95" creationdate="20190315T215908Z">
        <seg>虽然你可以尝试手动管理此问题，但你很快就会发现此方法不能扩展。 如果你要去掉第一级依赖，你确实不能确定还有其他哪些 jar 是你需要移除的。第一级依赖的依赖本身也可能是第一级依赖，或者是另一个第一级依赖的传递依赖。 如果你想自己管理传递依赖，最终的结局是你的构建会变得很脆弱：没人敢更改你的依赖，因为破坏构建的风险太高了。 项目类路径将变得完全混乱，如果发生类路径问题，那简直就是人间地狱。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Why Groovy?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072502Z" creationid="haohang" creationdate="20170720T072502Z">
        <seg>为什么使用 Groovy?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Why are you using the Java plugin?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135322Z" creationid="huanghaohang" creationdate="20171126T135322Z">
        <seg>为什么要用 Java 插件？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wildcard '*' is supported for matching any characters</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T130812Z" creationid="huanghaohang" creationdate="20180405T130812Z">
        <seg>通配符 “*” 支持匹配任何字符</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092213Z" creationid="huanghaohang" creationdate="20190124T092213Z">
        <seg>Windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows Resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091122Z" creationid="huanghaohang" creationdate="20190611T091122Z">
        <seg>Windows Resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows XP and later, Visual C++ 2010 and later.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022537Z" creationid="huanghaohang" creationdate="20190609T022537Z">
        <seg>Windows XP 及更高版本，Visual C++ 2010 及以上版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows XP and later. &lt;a0&gt;Mingw-w64&lt;/a0&gt; is currently not supported.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024259Z" creationid="huanghaohang" creationdate="20190609T024259Z">
        <seg>Windows XP 和更高版本。当前不支持 &lt;a0&gt;Mingw-w64&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows XP and later. Cygwin 64 is currently not supported.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024222Z" creationid="huanghaohang" creationdate="20190609T024153Z">
        <seg>Windows XP 和更高版本。当前不支持 Cygwin 64。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021846Z" creationid="huanghaohang" creationdate="20190609T021846Z">
        <seg>Windows resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows resources to be included in a native binary are provided via a &lt;a0&gt;&lt;c1&gt;WindowsResourceSet&lt;/c1&gt;&lt;/a0&gt;, which defines a set of Windows Resource source files. By default, for any named component the &lt;a2&gt;&lt;c3&gt;WindowsResourceSet&lt;/c3&gt;&lt;/a2&gt; contains &lt;c4&gt;.rc&lt;/c4&gt; source files under &lt;c5&gt;src/${name}/rc&lt;/c5&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013235Z" creationid="huanghaohang" creationdate="20190610T013235Z">
        <seg>把 Windows 资源包含到本机二进制文件中，是通过 &lt;a0&gt;&lt;c1&gt;WindowsResourceSet&lt;/c1&gt;&lt;/a0&gt; 来实现的，其定义了一组 Windows Resource 源文件。默认情况下，对于任何已命名的组件，&lt;a2&gt;&lt;c3&gt;WindowsResourceSet&lt;/c3&gt;&lt;/a2&gt; 包含了在 &lt;c5&gt;src/${name}/rc&lt;/c5&gt; 中的 &lt;c4&gt;.rc&lt;/c4&gt; 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Windows, Mac OS X, Ubuntu</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092248Z" creationid="huanghaohang" creationdate="20190124T092248Z">
        <seg>Windows, Mac OS X, Ubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With Gradle you can deploy to remote Maven repositories or install to your local Maven repository. This includes all Maven metadata manipulation and works also for Maven snapshots. In fact, Gradle's deployment is 100 percent Maven compatible as we use the native Maven Ant tasks under the hood.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074518Z" creationid="huanghaohang" creationdate="20190607T074518Z">
        <seg>通过 Gradle，你可以部署到远程 Maven 仓库或是安装到本地 Maven 仓库。这包括所有 Maven 元数据的操作，并且 Maven 快照也可以用。实际上，Gradle 的部署是 100% 兼容 Maven 的，因为我们在本质上使用的是原生 Maven Ant 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With Gradle, it's very simple to implement a task that gets skipped when all of it's inputs and outputs are up to date (see &lt;a0&gt;Section 15.9, “Skipping tasks that are up-to-date”&lt;/a0&gt;). However, there are times when only a few input files have changed since the last execution, and you'd like to avoid reprocessing all of the unchanged inputs. This can be particularly useful for a transformer task, that converts input files to output files on a 1:1 basis.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T133636Z" creationid="huanghaohang" creationdate="20190706T133636Z">
        <seg>通过 Gradle，实现一个在所有输入和输出都是最新状态时跳过的任务是非常简单的（参见《&lt;a0&gt;第 15.9 节，“跳过最新的任务”&lt;/a0&gt;）。然而，有时候从上次执行以来，只有少数输入文件发生了更改，而你想避免重新处理所有未修改的输入。这对于将输入文件按1:1的基础转换为输出文件的转换任务来说特别有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With hundreds of thousands of interdependent open source components each with a range of versions and incompatibilities, dependency management has a habit of causing problems as builds grow in complexity. When a build's dependency tree becomes unwieldy, your build tool shouldn't force you to adopt a single, inflexible approach to dependency management. A proper build system has to be designed to be flexible, and Gradle can handle any situation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190204T003605Z" creationid="95" creationdate="20190204T003605Z">
        <seg>由于成千上万相互依赖的开源组件各有一系列版本和不兼容性，依赖管理常常导致问题的复杂性增加。 当一个构建的依赖树变得笨拙时，你的构建工具不应强制你对依赖管理采取单一、不灵活的方法。 一个正确的构建系统必须设计得灵活，而Gradle可以处理任何情况。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With more and more CPU cores available on developer desktops and CI servers, it is important that Gradle is able to fully utilise these processing resources. More specifically, the parallel execution attempts to:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T142813Z" creationid="huanghaohang" creationdate="20190621T142813Z">
        <seg>随着在开发人员的台式机和 CI 服务器上，有越来越多的 CPU 内核可用，Gradle 能够充分利用这些处理资源就很重要。更具体地说，并行执行将尝试：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With the &lt;c0&gt;gradle.properties&lt;/c0&gt; files you can also set system properties. If a property in such a file has the prefix &lt;c1&gt;systemProp.&lt;/c1&gt; the property and its value are added to the system properties, without the prefix. In a multi project build, &lt;c2&gt;systemProp.&lt;/c2&gt; properties set in any project except the root will be ignored. That is, only &lt;c3&gt;systemProp.&lt;/c3&gt; in the root project's &lt;c4&gt;gradle.properties&lt;/c4&gt; file will be set as system properties.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135007Z" creationid="huanghaohang" creationdate="20170917T134626Z">
        <seg>通过&lt;c0&gt;gradle.properties&lt;/c0&gt;文件，你还可以设置一些系统属性。如果这类文件中的属性具有&lt;c1&gt;systemProp.&lt;/c1&gt;前缀，该属性及其值将被添加到系统属性中，而不带此前缀。在多项目建设中，非根目录下的&lt;c2&gt;systemProp.&lt;/c2&gt;属性会被忽略。也就是说，只有在根项目中的&lt;c4&gt;gradle.properties&lt;/c4&gt;文件里的&lt;c3&gt;systemProp.&lt;/c3&gt;属性才会被设置为系统属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With these rules present it is still possible to execute &lt;c0&gt;taskA&lt;/c0&gt; without &lt;c1&gt;taskB&lt;/c1&gt; and vice-versa.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T031953Z" creationid="huanghaohang" creationdate="20170922T031953Z">
        <seg>目前使用这些规则仍有可能出现&lt;c0&gt;taskA&lt;/c0&gt;执行而&lt;c1&gt;taskB&lt;/c1&gt; 没有执行，或者&lt;c0&gt;taskB&lt;/c0&gt;执行而&lt;c1&gt;taskA&lt;/c1&gt; 没有执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Without modifying the &lt;c0&gt;build.gradle&lt;/c0&gt; file, the wrapper plugin can be auto-applied to the rootproject of the current build by running &lt;c1&gt;gradle wrapper&lt;/c1&gt; from the commandline. This applies the plugin if no task named &lt;c2&gt;wrapper&lt;/c2&gt; is already defined in the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155916Z" creationid="95" creationdate="20190201T155746Z">
        <seg>在不修改 &lt;c0&gt;build.gradle&lt;/c0&gt; 文件的情况下，可以通过从命令行运行 &lt;c1&gt;gradle wrapper&lt;/c1&gt; 来自动将包装器插件应用于当前构建的根项目。 如果未在构建中定义名为 &lt;c2&gt;wrapper&lt;/c2&gt; 的任务，那么将会应用此插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working With Files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093001Z" creationid="huanghaohang" creationdate="20180218T093001Z">
        <seg>使用文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working through problems</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013426Z" creationid="huanghaohang" creationdate="20170919T013426Z">
        <seg>解决问题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141828Z" creationid="huanghaohang" creationdate="20190411T141828Z">
        <seg>使用依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with files in custom tasks and plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132349Z" creationid="huanghaohang" creationdate="20190728T132349Z">
        <seg>在自定义任务和插件中使用文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with source sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130038Z" creationid="huanghaohang" creationdate="20180517T130038Z">
        <seg>使用源集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Works with</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140614Z" creationid="huanghaohang" creationdate="20180205T140614Z">
        <seg>与什么一起使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Workspace</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012502Z" creationid="huanghaohang" creationdate="20190123T012502Z">
        <seg>Workspace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrapper</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213740Z" creationid="95" creationdate="20190131T213740Z">
        <seg>Wrapper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wrapper Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070620Z" creationid="huanghaohang" creationdate="20190205T070620Z">
        <seg>包装插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Build Scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032746Z" creationid="huanghaohang" creationdate="20180131T032746Z">
        <seg>编写构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Custom Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132311Z" creationid="huanghaohang" creationdate="20190728T132311Z">
        <seg>编写自定义插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Custom Task Classes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145300Z" creationid="huanghaohang" creationdate="20190708T145300Z">
        <seg>编写自定义任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing a simple plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132333Z" creationid="huanghaohang" creationdate="20190728T132333Z">
        <seg>编写一个简单的插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing a simple task class</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145324Z" creationid="huanghaohang" creationdate="20190708T145324Z">
        <seg>编写一个简单的任务类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing this chapter was pretty exhausting and reading it might have a similar effect. Our final message for this chapter is that multi-project builds with Gradle are usually &lt;s0&gt;&lt;e1&gt;not&lt;/e1&gt;&lt;/s0&gt; difficult. There are five elements you need to remember: &lt;c2&gt;allprojects&lt;/c2&gt;, &lt;c3&gt; subprojects&lt;/c3&gt;, &lt;c4&gt;evaluationDependsOn&lt;/c4&gt;, &lt;c5&gt;evaluationDependsOnChildren&lt;/c5&gt; and project lib dependencies. &lt;s6&gt;[&lt;a7&gt;24&lt;/a7&gt;]&lt;/s6&gt; With those elements, and keeping in mind that Gradle has a distinct configuration and execution phase, you have already a lot of flexibility. But when you enter steep territory Gradle does not become an obstacle and usually accompanies and carries you to the top of the mountain.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152910Z" creationid="huanghaohang" creationdate="20190623T152910Z">
        <seg>写这一章相当耗费精力，可能你读起来也有同样的感受。我们对这一章最后要说的是，使用 Gradle 的多项目构建通常&lt;s0&gt;&lt;e1&gt;不&lt;/e1&gt;&lt;/s0&gt;难。你需要记住五个元素：&lt;c2&gt;allproject&lt;/c2&gt;，&lt;c3&gt; subproject&lt;/c3&gt;，&lt;c4&gt;evaluationDependsOn&lt;/c4&gt;，&lt;c5&gt;evaluationDependsOnChildren&lt;/c5&gt; 和项目库依赖。&lt;s6&gt;[&lt;a7&gt;24&lt;/a7&gt;]&lt;/s6&gt; 使用这些元素，并记住 Gradle 有不同的配置和执行阶段，你就已经可以很灵活地运用它。但当你进入一个陡峭的领域时，Gradle 不会成为你的障碍，并且通常会伴随你带你到峰顶。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing your own log messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140437Z" creationid="huanghaohang" creationdate="20180516T140437Z">
        <seg>编写自己的日志消息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>WtpComponent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082554Z" creationid="huanghaohang" creationdate="20181210T082554Z">
        <seg>WtpComponent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>WtpFacet</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082555Z" creationid="huanghaohang" creationdate="20181210T082555Z">
        <seg>WtpFacet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>XCode</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022232Z" creationid="huanghaohang" creationdate="20190609T022232Z">
        <seg>XCode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>XmlProvider</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T082548Z" creationid="huanghaohang" creationdate="20181210T082548Z">
        <seg>XmlProvider</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You also might want to refactor some part of the :api project that is used in other projects. If you make these types of changes, it is not sufficient to test just the :api project, you also need to test all projects that depend on the :api project. The &lt;c0&gt;buildDependents&lt;/c0&gt; task also tests all the projects that have a project lib dependency (in the testRuntime configuration) on the specified project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T142300Z" creationid="huanghaohang" creationdate="20190622T142300Z">
        <seg>你还可能想要重构 :api 项目中被其他项目使用的部分内容。如果你做这一类的修改，那么只测试 :api 项目是不够的，你还需要测试依赖于 :api 项目的所有项目。&lt;c0&gt;buildDependents&lt;/c0&gt; 任务也用于测试依赖于（在 testRuntime 配置中）指定项目上的所有项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are able to construct a resource-only library by providing Windows Resource sources with no other language sources, and configure the linker as appropriate:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013738Z" creationid="huanghaohang" creationdate="20190610T013430Z">
        <seg>你能够通过提供不包含其他语言源码的 Windows Resource 源文件，来构造纯资源库，并根据需要配置链接器︰  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are building with a different version of Gradle. Currently, Gradle does not use task history from a different version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T140629Z" creationid="huanghaohang" creationdate="20190707T140629Z">
        <seg>你正在使用不同版本的 Gradle 构建。Gradle 目前不使用来自不同版本的任务历史记录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access Ant types in the same way that you access tasks, using the name of the type as the method name. The method call returns the Ant data type, which you can then use directly in your build script. In the following example, we create an Ant &lt;c0&gt;path&lt;/c0&gt; object, then iterate over the contents of it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T091117Z" creationid="huanghaohang" creationdate="20171219T090833Z">
        <seg>你可以像访问任务一样，使用类型名作为方法名来访问 Ant 类型。方法调用将返回 Ant 数据类型，可以让你在构建脚本直接中使用。在下面的例子中，我们创建了一个 Ant &lt;c0&gt;path&lt;/c0&gt; 对象，然后遍历它的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access a project property in your build script simply by using its name as you would use a variable. In case this property does not exists, an exception is thrown and the build fails. If your build script relies on optional properties the user might set for example in a gradle.properties file, you need to check for existence before you can access them. You can do this by using the method &lt;c0&gt;hasProperty('propertyName')&lt;/c0&gt; which returns &lt;c1&gt;true&lt;/c1&gt; or &lt;c2&gt;false&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145149Z" creationid="huanghaohang" creationdate="20170918T145149Z">
        <seg>你可以通过属性的名称在构建脚本里访问这个属性，如同使用一个变量一样。如果这个属性不存在，那么就会抛出异常并且构建失败。如果你的构建脚本依赖于一些可选属性，而这些属性用户可能在比如gradle.properties文件中设置，你就需要在访问它们之前先检查它们是否存在。你可以通过使用 &lt;c0&gt;hasProperty('propertyName')&lt;/c0&gt; 方法来进行检查，它会返回&lt;c1&gt;true&lt;/c1&gt; 或 &lt;c2&gt;false&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access tasks from any project using the task's path using the &lt;c0&gt;tasks.getByPath()&lt;/c0&gt; method. You can call the &lt;c1&gt;getByPath()&lt;/c1&gt; method with a task name, or a relative path, or an absolute path.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121934Z" creationid="huanghaohang" creationdate="20170919T121934Z">
        <seg>你可以在任何项目中使用&lt;c0&gt;tasks.getByPath()&lt;/c0&gt;方法获取任务路径，并且通过这个路径来访问任务。你也可以用一个任务的名称，相对路径或者是绝对路径作为参数，来调用&lt;c1&gt;getByPath()&lt;/c1&gt;方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can access the source sets of a project using the &lt;c0&gt;sourceSets&lt;/c0&gt; property. This is a container for the project's source sets, of type &lt;a1&gt;&lt;c2&gt;SourceSetContainer&lt;/c2&gt;&lt;/a1&gt;. There is also a &lt;c3&gt;sourceSets { }&lt;/c3&gt; script block, which you can pass a closure to configure the source set container. The source set container works pretty much the same way as other containers, such as &lt;c4&gt;tasks&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094610Z" creationid="haohang" creationdate="20180320T094610Z">
        <seg>你可以使用 &lt;c0&gt;sourceSets&lt;/c0&gt; 属性访问项目的源集。这是项目源集的容器，它的类型是 &lt;a1&gt;&lt;c2&gt;SourceSetContainer&lt;/c2&gt;&lt;/a1&gt;。除此之外，还有一个 &lt;c3&gt;sourceSets{}&lt;/c3&gt; 脚本块，可以传入一个闭包来配置源集容器。源集容器的使用方式与其他的容器几乎一样，例如 &lt;c4&gt;tasks&lt;/c4&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add a description to your task. This description is for example displayed when executing &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082254Z" creationid="huanghaohang" creationdate="20170922T082254Z">
        <seg>你可以向你的任务添加描述。例如在执行&lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt;时显示该描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add a task which depends on an Ant target:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084629Z" creationid="huanghaohang" creationdate="20180105T084629Z">
        <seg>你可以添加一个依赖于 Ant 目标的任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add dependencies between projects in the same build, so that, for example, the JAR file of one project is used to compile another project. In the &lt;c0&gt;api&lt;/c0&gt; build file we will add a dependency on the JAR produced by the &lt;c1&gt;shared&lt;/c1&gt; project. Due to this dependency, Gradle will ensure that project &lt;c2&gt;shared&lt;/c2&gt; always gets built before project &lt;c3&gt;api&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125305Z" creationid="95" creationdate="20170803T125256Z">
        <seg>你可以向同一个构建的项目之间添加依赖关系，这样，某个项目中的 JAR 文件就能用于编译另一个项目了。在 &lt;c0&gt;api&lt;/c0&gt;项目的构建文件里，我们让它依赖 &lt;c1&gt;shared&lt;/c1&gt; 项目所生成的JAR文件。由于这个依赖关系，Gradle会确保 &lt;c2&gt;shared&lt;/c2&gt;项目总是在 &lt;c3&gt;api&lt;/c3&gt;项目之前构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add specific behavior on top of the common behavior. Usually we put the project specific behavior in the build script of the project where we want to apply this specific behavior. But as we have already seen, we don't have to do it this way. We could add project specific behavior for the &lt;c0&gt;bluewhale&lt;/c0&gt; project like this:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142617Z" creationid="huanghaohang" creationdate="20190615T142617Z">
        <seg>你可以在共同行为的上面再添加特定行为。通常我们会把项目的特定行为放在要应用该行为的项目的构建脚本里。但正如我们已经看到的，我们可以不这样做。我们可以这样为 &lt;c0&gt;bluewhale&lt;/c0&gt; 项目添加项目的特定行为：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can add your own properties to a task. To add a property named &lt;c0&gt;myProperty&lt;/c0&gt;, set &lt;c1&gt;ext.myProperty&lt;/c1&gt; to an initial value. From that point on, the property can be read and set like a predefined task property.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141932Z" creationid="95" creationdate="20170727T141635Z">
        <seg>您可以把您自己的属性添加到一个任务中。譬如如果要添加一个 &lt;c0&gt;myProperty&lt;/c0&gt;属性，可以为 &lt;c1&gt;ext.myProperty&lt;/c1&gt;设置一个初始值，然后您就可以像使用预定义的任务属性一样对它进行读取或设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also abbreviate each word in a camel case task name. For example, you can execute task &lt;c0&gt;compileTest&lt;/c0&gt; by running &lt;s1&gt;&lt;c2&gt;gradle compTest&lt;/c2&gt;&lt;/s1&gt; or even &lt;s3&gt;&lt;c4&gt;gradle cT&lt;/c4&gt;&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113153Z" creationid="huanghaohang" creationdate="20170909T112920Z">
        <seg>你也可以对驼峰命名的任务名称的每一个单词进行缩写。例如，你可以通过运行&lt;s1&gt;&lt;c2&gt;gradle compTest&lt;/c2&gt;&lt;/s1&gt;或&lt;s3&gt;&lt;c4&gt;gradle cT&lt;/c4&gt;&lt;/s3&gt;执行&lt;c0&gt;compileTest&lt;/c0&gt;任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also add a &lt;a0&gt;&lt;c1&gt;ProjectEvaluationListener&lt;/c1&gt;&lt;/a0&gt; to the &lt;a2&gt;&lt;c3&gt;Gradle&lt;/c3&gt;&lt;/a2&gt; to receive these events.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150900Z" creationid="huanghaohang" creationdate="20190613T150900Z">
        <seg>你也可以将一个 &lt;a0&gt;&lt;c1&gt;ProjectEvaluationListener&lt;/c1&gt;&lt;/a0&gt; 添加到 &lt;a2&gt;&lt;c3&gt;Gradle&lt;/c3&gt;&lt;/a2&gt; 中，来接收这些事件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also add a &lt;a0&gt;&lt;c1&gt;TaskExecutionGraphListener&lt;/c1&gt;&lt;/a0&gt; to the &lt;a2&gt;&lt;c3&gt;TaskExecutionGraph&lt;/c3&gt;&lt;/a2&gt; to receive these events.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152403Z" creationid="huanghaohang" creationdate="20190613T152403Z">
        <seg>你也可以向 &lt;a2&gt;&lt;c3&gt;TaskExecutionGraph&lt;/c3&gt;&lt;/a2&gt; 添加一个 &lt;a0&gt;&lt;c1&gt;TaskExecutionGraphListener&lt;/c1&gt;&lt;/a0&gt; 来接收这些事件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also add an &lt;a0&gt;&lt;c1&gt;Action&lt;/c1&gt;&lt;/a0&gt; to a &lt;a2&gt;&lt;c3&gt;TaskContainer&lt;/c3&gt;&lt;/a2&gt; to receive these events.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151343Z" creationid="huanghaohang" creationdate="20190613T151343Z">
        <seg>你还可以向 &lt;a2&gt;&lt;c3&gt;TaskContainer&lt;/c3&gt;&lt;/a2&gt; 添加一个 &lt;a0&gt;&lt;c1&gt;Action&lt;/c1&gt;&lt;/a0&gt; 来接收这些事件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also add properties directly to your project object via the &lt;c0&gt;-P&lt;/c0&gt; command line option. For more exotic use cases you can even pass properties &lt;s1&gt;&lt;e2&gt;directly&lt;/e2&gt;&lt;/s1&gt; to the project object via system and environment properties. For example if you run a build on a continuous integration server where you have no admin rights for the &lt;s3&gt;&lt;e4&gt;machine&lt;/e4&gt;&lt;/s3&gt;. Your build script needs properties which values should not be seen by others. Therefore you can't use the &lt;c5&gt;-P&lt;/c5&gt; option. In this case you can add an environment property in the project administration section (invisible to normal users). &lt;s6&gt;[&lt;a7&gt;6&lt;/a7&gt;]&lt;/s6&gt; If the environment property follows the pattern &lt;c8&gt;ORG_GRADLE_PROJECT_&lt;e9&gt;&lt;c10&gt;propertyName&lt;/c10&gt;&lt;/e9&gt;=somevalue&lt;/c8&gt;, &lt;c11&gt;propertyName&lt;/c11&gt; is added to your project object. We also support the same mechanism for system properties. The only difference is the pattern, which is &lt;c12&gt;org.gradle.project.&lt;e13&gt;&lt;c14&gt;propertyName&lt;/c14&gt;&lt;/e13&gt;&lt;/c12&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T134625Z" creationid="huanghaohang" creationdate="20170917T133700Z">
        <seg>您还可以通过&lt;c0&gt;-P&lt;/c0&gt;命令行选项直接添加属性到project对象。在更多的用法中，你甚至可以通过系统和环境属性把属性&lt;s1&gt;&lt;e2&gt;直接&lt;/e2&gt;&lt;/s1&gt;传到project对象。例如，如果你在持续集成服务器上运行构建，但你没有这台&lt;s3&gt;&lt;e4&gt;机器&lt;/e4&gt;&lt;/s3&gt;的管理员权限，而你的构建脚本需要一些属性，这些属性又不能让其他人看到。那么你就不能使用&lt;c5&gt;-P&lt;/c5&gt;选项。在这种情况下，您可以在项目管理部分（对普通用户不可见）添加一个环境属性。 &lt;s6&gt;[&lt;a7&gt;6&lt;/a7&gt;]&lt;/s6&gt;如果这个环境属性遵循&lt;c8&gt;ORG_GRADLE_PROJECT_&lt;e9&gt;&lt;c10&gt;propertyName&lt;/c10&gt;&lt;/e9&gt;=someValue&lt;/c8&gt;的模式， &lt;c11&gt;propertyName&lt;/c11&gt;就会被添加到你的项目对象中。我们也支持系统属性相同的机制。唯一的区别就是模式，它是&lt;c12&gt;org.gradle.project.&lt;e13&gt;&lt;c14&gt;propertyName&lt;/c14&gt;&lt;/e13&gt;&lt;/c12&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also apply the plugin from an init script:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092733Z" creationid="huanghaohang" creationdate="20190124T092733Z">
        <seg>你还可以从 init 脚本中应用这个插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also assign collections or arrays of dependency notations to a configuration:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140932Z" creationid="huanghaohang" creationdate="20190602T140932Z">
        <seg>你也可以将依赖的集合或数组指定给配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also configure arbitrary objects using an external script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145951Z" creationid="huanghaohang" creationdate="20170918T145951Z">
        <seg>你还可以使用外部脚本配置任意对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also copy a configuration. You can optionally specify that only a subset of dependencies from the original configuration should be copied. The copying methods come in two flavors. The &lt;c0&gt;copy&lt;/c0&gt; method copies only the dependencies belonging explicitly to the configuration. The &lt;c1&gt;copyRecursive&lt;/c1&gt; method copies all the dependencies, including the dependencies from extended configurations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152830Z" creationid="huanghaohang" creationdate="20190602T152628Z">
        <seg>你也可以复制一个配置。你可以选择仅复制原配置中的一部分依赖。复制方法有两种：&lt;c0&gt;copy&lt;/c0&gt; 方法仅复制显式属于配置的依赖； &lt;c1&gt;copyRecursive&lt;/c1&gt; 方法会复制所有的依赖，包括扩展配置中的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also directly add properties to your project objects using properties files. You can place a &lt;c0&gt;gradle.properties&lt;/c0&gt; file in the Gradle user home directory (defaults to &lt;c1&gt;&lt;e2&gt;&lt;c3&gt;USER_HOME&lt;/c3&gt;&lt;/e2&gt;/.gradle&lt;/c1&gt;) or in your project directory. For multi-project builds you can place &lt;c4&gt;gradle.properties&lt;/c4&gt; files in any subproject directory. The properties of the &lt;c5&gt;gradle.properties&lt;/c5&gt; can be accessed via the project object. The properties file in the user's home directory has precedence over property files in the project directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T133656Z" creationid="huanghaohang" creationdate="20170917T132847Z">
        <seg>你也可以使用属性文件直接向项目对象添加属性。你可以在Gradle用户主目录（默认为&lt;c1&gt;&lt;e2&gt;&lt;c3&gt;USER_HOME&lt;/c3&gt;&lt;/e2&gt;/.gradle&lt;/c1&gt;），或是项目目录中放一个&lt;c0&gt;gradle.properties&lt;/c0&gt;文件。对于多项目构建，&lt;c4&gt;gradle.properties&lt;/c4&gt;文件可以放在任何子项目的目录中。&lt;c5&gt;gradle.properties&lt;/c5&gt;的属性可以通过project对象访问。用户主目录中的属性文件会比项目目录中的属性文件更先被访问到。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also have repositories on the local file system. This works for both Maven and Ivy repositories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T045140Z" creationid="huanghaohang" creationdate="20170908T045119Z">
        <seg>你还可以在本地文件系统上部署一个仓库，它对于Maven和Ivy仓库都支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also hook into Gradle's logging system from within other classes used in the build (classes from the &lt;c0&gt;buildSrc&lt;/c0&gt; directory for example). Simply use an SLF4J logger. You can use this logger the same way as you use the provided logger in the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T024328Z" creationid="huanghaohang" creationdate="20180107T012515Z">
        <seg>你也可以通过在构建中使用的其他类（例如 &lt;c0&gt;buildSrc&lt;/c0&gt; 目录中的类） hook 到 Gradle 的日志系统。只需使用一个 SLF4J logger，你可以像使用构建脚本中提供的 logger 一样使用它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also pass the &lt;c0&gt;files()&lt;/c0&gt; method a closure or a &lt;c1&gt;Callable&lt;/c1&gt; instance. This is called when the contents of the collection are queried, and its return value is converted to a set of &lt;c2&gt;File&lt;/c2&gt; instances. The return value can be an object of any of the types supported by the &lt;c3&gt;files()&lt;/c3&gt; method. This is a simple way to 'implement' the &lt;c4&gt;FileCollection&lt;/c4&gt; interface.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150346Z" creationid="huanghaohang" creationdate="20170923T132352Z">
        <seg>你也可以向&lt;c0&gt;files()&lt;/c0&gt;方法传一个闭包或&lt;c1&gt;Callable&lt;/c1&gt;实例。它会在查询集合的内容时被调用，并将其返回值转换为一组&lt;c2&gt;File&lt;/c2&gt;实例。返回值可以是&lt;c3&gt;files()&lt;/c3&gt;方法所支持的任何类型的对象。这是一个“实现”&lt;c4&gt;FileCollection&lt;/c4&gt;接口的简单方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also publish to Maven repositories. The syntax is slightly different.&lt;s0&gt;[&lt;a1&gt;4&lt;/a1&gt;]&lt;/s0&gt; Note that you also need to apply the Maven plugin in order to publish to a Maven repository. In this instance, Gradle will generate and upload a &lt;c2&gt;pom.xml&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050945Z" creationid="huanghaohang" creationdate="20170908T050945Z">
        <seg>当然，你也可以发布到Maven仓库。语法略有不同。&lt;s0&gt;[&lt;a1&gt;4&lt;/a1&gt;]&lt;/s0&gt;请注意，你需要应用Maven插件才能发布到Maven存储库。在这种情况下，Gradle也会生成&lt;c2&gt;pom.xml&lt;/c2&gt;并上传。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use a &lt;a0&gt;&lt;c1&gt;TaskExecutionListener&lt;/c1&gt;&lt;/a0&gt; to the &lt;a2&gt;&lt;c3&gt;TaskExecutionGraph&lt;/c3&gt;&lt;/a2&gt; to receive these events.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152657Z" creationid="huanghaohang" creationdate="20190613T152657Z">
        <seg>你也可以对 &lt;a2&gt;&lt;c3&gt;TaskExecutionGraph&lt;/c3&gt;&lt;/a2&gt; 使用一个 &lt;a0&gt;&lt;c1&gt;TaskExecutionListener&lt;/c1&gt;&lt;/a0&gt; 来接收这些事件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use a configuration closure when you define a task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124925Z" creationid="huanghaohang" creationdate="20170919T124925Z">
        <seg>你也可以在定义任务的时候使用配置闭包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use a file to define an artifact:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075404Z" creationid="huanghaohang" creationdate="20190606T075404Z">
        <seg>你也可以使用文件来定义工件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use customization options that the &lt;a0&gt;&lt;c1&gt;Ear&lt;/c1&gt;&lt;/a0&gt; task provides, such as &lt;c2&gt;from&lt;/c2&gt; and &lt;c3&gt;metaInf&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143126Z" creationid="huanghaohang" creationdate="20180416T143126Z">
        <seg>你也可以使用 &lt;a0&gt;&lt;c1&gt;Ear&lt;/c1&gt;&lt;/a0&gt; 任务提供的自定义选项，如 &lt;c2&gt;from&lt;/c2&gt; 和 &lt;c3&gt;metaInf&lt;/c3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use strings for the task names:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121037Z" creationid="huanghaohang" creationdate="20170919T121037Z">
        <seg>你还可以使用字符串作为任务名称：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the &lt;a0&gt;&lt;c1&gt;Project.copy()&lt;/c1&gt;&lt;/a0&gt; method to copy files. It works the same way as the task with some major limitations though. First, the &lt;c2&gt;copy()&lt;/c2&gt; is not incremental (see &lt;a3&gt;Section 15.9, “Skipping tasks that are up-to-date”&lt;/a3&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T094146Z" creationid="huanghaohang" creationdate="20171015T075135Z">
        <seg>你也可以使用&lt;a0&gt;&lt;c1&gt;Project.copy()&lt;/c1&gt;&lt;/a0&gt;方法来复制文件。它的工作方式与具有一些主要限制的任务一样。首先， &lt;c2&gt;copy()&lt;/c2&gt;不是增量的（见《&lt;a3&gt;第15.9节，“跳过最新的任务”&lt;/a3&gt;》）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use these abbreviations with the &lt;c0&gt;-x&lt;/c0&gt; command-line option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T113349Z" creationid="huanghaohang" creationdate="20170909T113349Z">
        <seg>在使用&lt;c0&gt;-x&lt;/c0&gt;命令行选项时，依然可以使用这些缩写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check if Gradle was able to determine the incremental changes to input files with &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.isIncremental()&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141120Z" creationid="huanghaohang" creationdate="20190707T141120Z">
        <seg>你可以使用 &lt;a0&gt;&lt;c1&gt;IncrementalTaskInputs.isIncremental()&lt;/c1&gt;&lt;/a0&gt; 来检查 Gradle 是否能够确定输入文件的增量更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can combine multiple plugins in a single project, so you can use the War and Groovy plugins together to build a Groovy based web application. The appropriate groovy libraries will be added to the WAR file for you.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005441Z" creationid="huanghaohang" creationdate="20170909T005441Z">
        <seg>你可以在单个project中组合多个插件，因此你可以将War和Groovy插件一起使用，构建一个基于Groovy的web应用程序。相应的groovy库也会被加入到WAR文件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can configure arbitrary objects in the following very readable way.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145439Z" creationid="huanghaohang" creationdate="20170918T145406Z">
        <seg>你可以使用以下非常易于理解的方式配置任意对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can configure the current project using an external build script. All of the Gradle build language is available in the external script. You can even apply other scripts from the external script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145326Z" creationid="huanghaohang" creationdate="20170918T145326Z">
        <seg>你可以使用外部构建脚本来配置当前项目。所有的Gradle构建语言都可以在外部脚本中使用，甚至你也可以从外部脚本应用其他脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can configure the task to not fail on compared outcome differences by setting the &lt;c0&gt;ignoreFailures&lt;/c0&gt; property to true.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141340Z" creationid="huanghaohang" creationdate="20210515T141340Z">
        <seg>你也可以通过设置&lt;c0&gt;ignoreFailures&lt;/c0&gt;属性为true，来配置构建结果不同时任务不失败。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a separate project for your plugin. This project produces and publishes a JAR which you can then use in multiple builds and share with others. Generally, this JAR might include some custom plugins, or bundle several related task classes into a single library. Or some combination of the two.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150002Z" creationid="huanghaohang" creationdate="20190719T150002Z">
        <seg>你可以为你的插件创建单独的项目。这个项目会生成和发布一个 JAR，随后你可以在多个构建中使用它并分享出去。通常，这个 JAR 可能包含一些自定义插件，或者将多个相关的任务类捆绑到一个库中，或两者皆有。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a separate project for your task class. This project produces and publishes a JAR which you can then use in multiple builds and share with others. Generally, this JAR might include some custom plugins, or bundle several related task classes into a single library. Or some combination of the two.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T153804Z" creationid="huanghaohang" creationdate="20190704T153804Z">
        <seg>你可以为你的任务类创建单独的项目。这个项目会生成和发布一个 JAR，你可以在多个构建中使用并分享出去。通常，这个 JAR 可能包含一些定制插件，或者将多个相关任务类捆绑到一个库中，或两者皆有。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create stand alone instances of a &lt;c0&gt;Manifest&lt;/c0&gt;. You can use that for example, to share manifest information between jars.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111601Z" creationid="huanghaohang" creationdate="20180406T111455Z">
        <seg>你可以创建一个独立的 &lt;c0&gt;Manifest&lt;/c0&gt; 实例。例如，可以用它来在 jar 之间共享清单信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can declare a dependency on the API of the current version of Gradle by using the &lt;a0&gt;&lt;c1&gt;DependencyHandler.gradleApi()&lt;/c1&gt;&lt;/a0&gt; method. This is useful when you are developing custom Gradle tasks or plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105550Z" creationid="huanghaohang" creationdate="20190602T105550Z">
        <seg>你可以通过使用 &lt;a0&gt;&lt;c1&gt;DependencyHandler.gradleApi()&lt;/c1&gt;&lt;/a0&gt; 方法，来声明一个当前版本的 Gradle API 的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can declare a dependency on the Groovy that is distributed with Gradle by using the &lt;a0&gt;&lt;c1&gt;DependencyHandler.localGroovy()&lt;/c1&gt;&lt;/a0&gt; method. This is useful when you are developing custom Gradle tasks or plugins in Groovy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105626Z" creationid="huanghaohang" creationdate="20190602T105626Z">
        <seg>你可以通过使用 &lt;a0&gt;&lt;c1&gt;DependencyHandler.localGroovy()&lt;/c1&gt;&lt;/a0&gt; 方法，来声明对与 Gradle 一起分发的 Groovy 的依赖。当你使用 Groovy 开发自定义 Gradle 任务或插件时，这会很有用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can declare which tasks produce the files for a file dependency. You might do this when, for example, the files are generated by the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105515Z" creationid="huanghaohang" creationdate="20190602T105515Z">
        <seg>你可以声明哪些任务将产生文件依赖的文件。例如，你可以在通过构建生成文件的时候这样做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can download one of the Gradle distributions from the &lt;a0&gt;Gradle web site&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114403Z" creationid="95" creationdate="20170723T114319Z">
        <seg>您可以从&lt;a0&gt;Gradle 官方网站&lt;/a0&gt;上下载Gradle的发行包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can easily write a manifest to disk.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113331Z" creationid="huanghaohang" creationdate="20180406T113331Z">
        <seg>你可以很轻松地把一个清单写入磁盘。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can exclude a &lt;s0&gt;&lt;e1&gt;transitive&lt;/e1&gt;&lt;/s0&gt; dependency either by configuration or by dependency:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105647Z" creationid="huanghaohang" creationdate="20190602T105647Z">
        <seg>通过配置或是依赖，你可以排除掉&lt;s0&gt;&lt;e1&gt;传递&lt;/e1&gt;&lt;/s0&gt;依赖：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can exclude a task from being executed using the &lt;c0&gt;-x&lt;/c0&gt; command-line option and providing the name of the task to exclude. Let's try this with the sample build file above.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031945Z" creationid="huanghaohang" creationdate="20170909T031945Z">
        <seg>你可以使用&lt;c0&gt;-x&lt;/c0&gt;命令行选项加上任务名称来排除某些会被执行的任务。让我们用上面的例子来演示一下。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can execute a build, and listen to stdout and stderr logging and progress (e.g. the stuff shown in the 'status bar' when you run on the command line).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T142951Z" creationid="huanghaohang" creationdate="20191220T142951Z">
        <seg>你可以执行构建，并且监听标准输出和错误输出的日志和进度（例如当你在命令上运行时显示在“状态栏”上的内容）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can execute multiple tasks in a single build by listing each of the tasks on the command-line. For example, the command &lt;s0&gt;&lt;c1&gt;gradle compile test&lt;/c1&gt;&lt;/s0&gt; will execute the &lt;c2&gt;compile&lt;/c2&gt; and &lt;c3&gt;test&lt;/c3&gt; tasks. Gradle will execute the tasks in the order that they are listed on the command-line, and will also execute the dependencies for each task. Each task is executed once only, regardless of how it came to be included in the build: whether it was specified on the command-line, or it a dependency of another task, or both. Let's look at an example.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T030834Z" creationid="huanghaohang" creationdate="20170909T030834Z">
        <seg>你可以通过在命令行中列出每个任务来在单个构建中执行多个任务。例如，&lt;s0&gt;&lt;c1&gt;gradle compile test&lt;/c1&gt;&lt;/s0&gt;命令将执行&lt;c2&gt;compile&lt;/c2&gt;和&lt;c3&gt;test&lt;/c3&gt;任务。 Gradle将按照命令行中的顺序依次执行这些任务以及每一个任务所依赖的其他任务。每个任务只会被执行一次，无论它们是如何被包含在构建中的：即无论是在命令行中指定的，还是另一个任务的依赖，抑或两者都有。来看下面的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find a list of external plugins on the &lt;a0&gt;wiki&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092913Z" creationid="huanghaohang" creationdate="20180218T092913Z">
        <seg>你可以在&lt;a0&gt;维基&lt;/a0&gt;上找到外部插件列表。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find out more about the Groovy plugin in &lt;a0&gt;Chapter 24, &lt;i1&gt;The Groovy Plugin&lt;/i1&gt;&lt;/a0&gt;, and you can find more sample Groovy projects in the &lt;c2&gt;samples/groovy&lt;/c2&gt; directory in the Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T003542Z" creationid="huanghaohang" creationdate="20170909T003402Z">
        <seg>你可以在《&lt;a0&gt;第二十四章， &lt;i1&gt;Groovy插件&lt;/i1&gt;&lt;/a0&gt;》中了解更多关于Groovy 插件的内容，或在Gradle的 &lt;c2&gt;samples/groovy&lt;/c2&gt;目录中找到更多Groovy 项目示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find out more about the War plugin in &lt;a0&gt;Chapter 26, &lt;i1&gt;The War Plugin&lt;/i1&gt;&lt;/a0&gt; and the Jetty plugin in &lt;a2&gt;Chapter 28, &lt;i3&gt;The Jetty Plugin&lt;/i3&gt;&lt;/a2&gt;. You can find more sample Java projects in the &lt;c4&gt;samples/webApplication&lt;/c4&gt; directory in the Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T010714Z" creationid="huanghaohang" creationdate="20170909T010632Z">
        <seg>你可以在《&lt;a0&gt;第二十六章， &lt;i1&gt;War插件&lt;/i1&gt;&lt;/a0&gt;》在《&lt;a2&gt;第二十八章，&lt;i3&gt;Jetty 插件&lt;/i3&gt;&lt;/a2&gt;》中分别了解更多关于War 及Jetty 插件的内容。并且可以在Gradle的发行包中的&lt;c4&gt;samples/webApplication&lt;/c4&gt;目录中找到更多Java 项目示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find out more about the settings file in &lt;a0&gt;Chapter 56, &lt;i1&gt;Multi-project Builds&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123753Z" creationid="95" creationdate="20170803T123550Z">
        <seg>更多的信息可参阅《&lt;a0&gt;第五十六章，&lt;i1&gt;多项目构建&lt;/i1&gt;&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find out more in &lt;a0&gt;Chapter 8, &lt;i1&gt;Dependency Management Basics&lt;/i1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124802Z" creationid="95" creationdate="20170730T124802Z">
        <seg>更多的信息请参阅《&lt;a0&gt;第八章，&lt;i1&gt;依赖管理基础&lt;/i1&gt;&lt;/a0&gt;》</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can fine-tune certain aspects of caching using the &lt;c0&gt;ResolutionStrategy&lt;/c0&gt; for a configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T150947Z" creationid="huanghaohang" creationdate="20190605T150846Z">
        <seg>你可以在配置中使用 &lt;c0&gt;ResolutionStrategy&lt;/c0&gt; 对缓存的某些方面进行微调。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can further customize the archive names:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232546Z" creationid="huanghaohang" creationdate="20171206T232546Z">
        <seg>你也可以进一步自定义存档名称：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can generate dependency reports from the command line (see &lt;a0&gt;Section 11.6.4, “Listing project dependencies”&lt;/a0&gt;). With the help of the Project report plugin (see &lt;a1&gt;Chapter 41, &lt;i2&gt;The Project Report Plugin&lt;/i2&gt;&lt;/a1&gt;) such a report can be created by your build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141834Z" creationid="huanghaohang" creationdate="20190602T141627Z">
        <seg>你可以从命令行生成依赖报告（请参阅 &lt;a0&gt;第11.6.4节，《列示项目依赖》&lt;/a0&gt;）。在项目报告插件的帮助下（请参阅 &lt;a1&gt;第41章，《&lt;i2&gt;项目报告插件&lt;/i2&gt;》&lt;/a1&gt;) ，你的构建能够创建这样一个报告。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can implement a custom plugin in any language you like, provided the implementation ends up compiled as bytecode. For the examples here, we are going to use Groovy as the implementation language. You could use Java or Scala instead, if you want.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190715T154221Z" creationid="huanghaohang" creationdate="20190715T154107Z">
        <seg>你可以任选一种自己喜欢的语言来实现自定义插件，只要这个实现最终能够被编译成字节码。这里我们以 Groovy 为例，你也可以使用 Java 或 Scala。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can include the source for the plugin directly in the build script. This has the benefit that the plugin is automatically compiled and included in the classpath of the build script without you having to do anything. However, the plugin is not visible outside the build script, and so you cannot reuse the plugin outside the build script it is defined in.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190717T133441Z" creationid="huanghaohang" creationdate="20190717T133441Z">
        <seg>你可以直接在构建脚本中包含插件源码。好处是你不需要再做什么，这个插件就会自动编译并加入构建脚本的类路径中。然而，在这个构建脚本之外，插件是不可见的，因此你不能够在你定义这个插件的脚本以外的地方来复用它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can include the task class directly in the build script. This has the benefit that the task class is automatically compiled and included in the classpath of the build script without you having to do anything. However, the task class is not visible outside the build script, and so you cannot reuse the task class outside the build script it is defined in.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190629T151042Z" creationid="huanghaohang" creationdate="20190629T151042Z">
        <seg>你可以直接在构建脚本中包含任务类。这样做的好处是，你不需要再另外做什么，这个任务类就会自动编译并包含在构建脚本的类路径中。但是在构建脚本之外，这个任务类是不可见的，因此你无法在定义这个它的构建脚本以外的地方复用这个任务类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can influence the location of build dashboard plugin generation via &lt;a0&gt;&lt;c1&gt;ReportingExtension&lt;/c1&gt;&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153851Z" creationid="95" creationdate="20190202T153851Z">
        <seg>你可以通过 &lt;a0&gt;&lt;c1&gt;ReportingExtension&lt;/c1&gt;&lt;/a0&gt; 修改构建仪表盘插件生成内容的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can locate a file relative to the project directory using the &lt;a0&gt;&lt;c1&gt;Project.file()&lt;/c1&gt;&lt;/a0&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T125024Z" creationid="huanghaohang" creationdate="20170923T125024Z">
        <seg>你可以使用&lt;a0&gt;&lt;c1&gt;Project.file()&lt;/c1&gt;&lt;/a0&gt;方法来找到相对于项目目录的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can merge other manifests into any &lt;c0&gt;Manifest&lt;/c0&gt; object. The other manifests might be either described by a file path or, like in the example above, by a reference to another &lt;c1&gt;Manifest&lt;/c1&gt; object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111838Z" creationid="huanghaohang" creationdate="20180406T111614Z">
        <seg>你可以把其他清单合并到任意的一个 &lt;c0&gt;Manifest&lt;/c0&gt; 对象。其他清单可以用文件路径来描述，或者像上面的例子那样，通过引用另一个 &lt;c1&gt;Manifest&lt;/c1&gt; 对象来描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can obtain more information in the task listing using the &lt;c0&gt;--all&lt;/c0&gt; option. With this option, the task report lists all tasks in the project, grouped by main task, and the dependencies for each task. Here is an example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012254Z" creationid="huanghaohang" creationdate="20170910T012010Z">
        <seg>当然你也可以使用&lt;c0&gt;--all&lt;/c0&gt;选项，来获取更多的任务信息。使用此选项时，任务报告将按主要任务以及每一个任务的依赖进行分组，来列出项目中的所有任务。例子如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass any object to the &lt;c0&gt;file()&lt;/c0&gt; method, and it will attempt to convert the value to an absolute &lt;c1&gt;File&lt;/c1&gt; object. Usually, you would pass it a &lt;c2&gt;String&lt;/c2&gt; or &lt;c3&gt;File&lt;/c3&gt; instance. If this path is an absolute path, it is used to construct a &lt;c4&gt;File&lt;/c4&gt; instance. Otherwise, a &lt;c5&gt;File&lt;/c5&gt; instance is constructed by prepending the project directory path to the supplied path. The &lt;c6&gt;file()&lt;/c6&gt; method also understands URLs, such as &lt;c7&gt;file:/some/path.xml&lt;/c7&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T125742Z" creationid="huanghaohang" creationdate="20170923T125742Z">
        <seg>你可以把任何对象传给&lt;c0&gt;file()&lt;/c0&gt;方法，它将尝试将该值转换为一个绝对路径的&lt;c1&gt;File&lt;/c1&gt;对象。通常你会传一个&lt;c2&gt;String&lt;/c2&gt;或&lt;c3&gt;File&lt;/c3&gt;实例给它。如果这个路径是一个绝对路径，它会被用来构造一个&lt;c4&gt;文件&lt;/c4&gt;实例。否则，会通过将项目目录的路径添加到所提供的路径的前面来构建&lt;c5&gt;File&lt;/c5&gt;实例。该&lt;c6&gt;file()&lt;/c6&gt;方法也可以识别URL，如&lt;c7&gt;file:/some/path.xml&lt;/c7&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can put the source for the plugin in the &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;rootProjectDir&lt;/c2&gt;&lt;/e1&gt;/buildSrc/src/main/groovy&lt;/c0&gt; directory. Gradle will take care of compiling and testing the plugin and making it available on the classpath of the build script. The plugin is visible to every build script used by the build. However, it is not visible outside the build, and so you cannot reuse the plugin outside the build it is defined in.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190717T133748Z" creationid="huanghaohang" creationdate="20190717T133748Z">
        <seg>你可以将插件源码放在 &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;rootProjectDir&lt;/c2&gt;&lt;/e1&gt;/buildSrc/src/main/rootvy&lt;/c0&gt; 目录中。Gradle 将负责编译和测试插件，并使其在构建脚本的类路径中可用。该插件对构建所使用的每个构建脚本都是可见的。但是，它在构建外部不可见，因此你无法在定义它的构建之外的地方复用这个插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can put the source for the task class in the &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;rootProjectDir&lt;/c2&gt;&lt;/e1&gt;/buildSrc/src/main/groovy&lt;/c0&gt; directory. Gradle will take care of compiling and testing the task class and making it available on the classpath of the build script. The task class is visible to every build script used by the build. However, it is not visible outside the build, and so you cannot reuse the task class outside the build it is defined in. Using the &lt;c3&gt;buildSrc&lt;/c3&gt; project approach keeps separate the task declaration - that is, what the task should do - from the task implementation - that is, how the task does it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190704T154508Z" creationid="huanghaohang" creationdate="20190704T150411Z">
        <seg>您可以将任务类的源码放在 &lt;c0&gt;&lt;e1&gt;&lt;c2&gt;rootProjectDir&lt;/c2&gt;&lt;/e1&gt;/buildSrc/src/main/rootvy&lt;/c0&gt; 目录中。Gradle 将会编译和测试这个任务类，并使其在构建脚本的类路径中可用。这个任务类对该构建所使用的每个构建脚本都可见。然而，它在构建外部不可见，因此你无法在定义这个任务类的构建之外的其他地方来复用它。使用 &lt;c3&gt;buildSrc&lt;/c3&gt; 项目方法能够保持任务声明——即任务应该做什么，与任务实现——即任务是怎么做的之间相互独立。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can query Gradle for the details of a build, including the project hierarchy and the project dependencies, external dependencies (including source and javadoc jars), source directories and tasks of each project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191220T142902Z" creationid="huanghaohang" creationdate="20191220T142715Z">
        <seg>你可以查询 Gradle 关于构建的详细信息，包括项目层次结构和项目依赖，外部依赖（包括源代码及 javadoc jars），每一个项目的源代码目录和任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can read about the new publishing plugins in &lt;a0&gt;Chapter 64, &lt;i1&gt;Ivy Publishing (new)&lt;/i1&gt;&lt;/a0&gt; and &lt;a2&gt;Chapter 65, &lt;i3&gt;Maven Publishing (new)&lt;/i3&gt;&lt;/a2&gt;. Please try them out and give us feedback.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T022954Z" creationid="huanghaohang" creationdate="20190606T022954Z">
        <seg>你可以阅读&lt;a0&gt;第 64 章《，&lt;i1&gt;Ivy 发布（新）&lt;/i1&gt;》&lt;/a0&gt;及&lt;a2&gt;第 65 章，《&lt;i3&gt;Maven 发布（新）&lt;/i3&gt;》&lt;/a2&gt;中新发布插件的内容。请尝试它们，并向我们反馈。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can receive a notification immediately after a task is added to a project. This can be used to set some default values or add behaviour before the task is made available in the build file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151207Z" creationid="huanghaohang" creationdate="20190613T151207Z">
        <seg>你可以在有任务添加到项目后立即收到通知。这可以用来在构建文件中的任务可用之前，设置一些默认值或添加行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can receive a notification immediately after the task execution graph has been populated. We have seen this already in &lt;a0&gt;Section 6.13, “Configure by DAG”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152341Z" creationid="huanghaohang" creationdate="20190613T152341Z">
        <seg>你可以在任务执行图生成之后立刻收到通知。在《&lt;a0&gt;第6.13节，使用 DAG 配置&lt;/a0&gt;》中，我们已经看到这一点了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can receive a notification immediately before and after a project is evaluated. This can be used to do things like performing additional configuration once all the definitions in a build script have been applied, or for some custom logging or profiling.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145724Z" creationid="huanghaohang" creationdate="20190613T145724Z">
        <seg>你可以在评估项目前后立刻接收通知。这可以用来做一些事情，比如一旦应用了构建脚本中的所有定义，就执行额外的配置；或者是做一些自定义的日志记录或分析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can receive a notification immediately before and after any task is executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152440Z" creationid="huanghaohang" creationdate="20190613T152440Z">
        <seg>你可以在任何任务执行前马上收到通知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can reorder favorites to your liking and even export them to disk so they can imported by others. If you edit them, you are given options to "Always Show Live Output." This only applies if you have 'Only Show Output When Errors Occur'. This override always forces the output to be shown.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145609Z" creationid="huanghaohang" creationdate="20170911T145609Z">
        <seg>你可以根据自己的喜好对收藏夹进行排序，甚至把它们导出来，以便其他人导入。如果你在编辑它们，选上“始终显示实时输出”，它只有在你选上“当发生错误时才显示输出”时有效。它会始终强制显示输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can replace much of Gradle's logging UI with your own. You might do this, for example, if you want to customize the UI in some way - to log more or less information, or to change the formatting. You replace the logging using the &lt;a0&gt;&lt;c1&gt;Gradle.useLogger()&lt;/c1&gt;&lt;/a0&gt; method. This is accessible from a build script, or an init script, or via the embedding API. Note that this completely disables Gradle's default output. Below is an example init script which changes how task execution and build completion is logged.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144018Z" creationid="huanghaohang" creationdate="20180107T114453Z">
        <seg>你可以用自己的 logging UI 替换大部分的 Gradle logging UI。你可能会这样，比如，如果你想以某种方式自定义 UI —— 来记录更多或更少的信息，或修改日志格式。你可以通过 &lt;a0&gt;&lt;c1&gt;Gradle.useLogger()&lt;/c1&gt;&lt;/a0&gt; 方法来替换这个 logging。它可以从构建脚本、init 脚本，或者是通过嵌入 API 访问。请注意，它完全禁用 Gradle的默认输出。下面是在 init 脚本中修改如何打印任务执行和构建完成的日志的示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can run "&lt;s0&gt;&lt;c1&gt;gradle distZip&lt;/c1&gt;&lt;/s0&gt;" to package the main distribution as a ZIP, or "&lt;s2&gt;&lt;c3&gt;gradle distTar&lt;/c3&gt;&lt;/s2&gt;" to create a GZip compressed TAR file. The files will be created at "&lt;c4&gt;&lt;e5&gt;&lt;c6&gt;$buildDir&lt;/c6&gt;&lt;/e5&gt;/distributions/&lt;e7&gt;&lt;c8&gt;$project.name&lt;/c8&gt;&lt;/e7&gt;-&lt;e9&gt;&lt;c10&gt;$project.version&lt;/c10&gt;&lt;/e9&gt;.&lt;e11&gt;&lt;c12&gt;«ext»&lt;/c12&gt;&lt;/e11&gt;&lt;/c4&gt;".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133707Z" creationid="huanghaohang" creationdate="20190127T133432Z">
        <seg>你可以运行“&lt;s0&gt;&lt;c1&gt;gradle distZip&lt;/c1&gt;&lt;/s0&gt;”把 main distribution 打包为 ZIP，或者是运行“&lt;s2&gt;&lt;c3&gt;gradle distTar&lt;/c3&gt;&lt;/s2&gt;”来创建一个 GZip 压缩的 TAR 文件。这些文件将会创建在“&lt;c4&gt;&lt;e5&gt;&lt;c6&gt;$buildDir&lt;/c6&gt;&lt;/e5&gt;/distributions/&lt;e7&gt;&lt;c8&gt;$project.name&lt;/c8&gt;&lt;/e7&gt;-&lt;e9&gt;&lt;c10&gt;$project.version&lt;/c10&gt;&lt;/e9&gt;.&lt;e11&gt;&lt;c12&gt;«ext»&lt;/c12&gt;&lt;/e11&gt;&lt;/c4&gt;”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can run "&lt;s0&gt;&lt;c1&gt;gradle installDist&lt;/c1&gt;&lt;/s0&gt;" to assembles the distribution content, uncompressed, into "&lt;c2&gt;&lt;e3&gt;&lt;c4&gt;$buildDir&lt;/c4&gt;&lt;/e3&gt;/install/&lt;e5&gt;&lt;c6&gt;main&lt;/c6&gt;&lt;/e5&gt;&lt;/c2&gt;".</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133812Z" creationid="huanghaohang" creationdate="20190127T133812Z">
        <seg>你可以运行“&lt;s0&gt;&lt;c1&gt;gradle installDist&lt;/c1&gt;&lt;/s0&gt;”将未经压缩的分发内容组装到“&lt;c2&gt;&lt;e3&gt;&lt;c4&gt;$buildDir&lt;/c4&gt;&lt;/e3&gt;/install/&lt;e5&gt;&lt;c6&gt;main&lt;/c6&gt;&lt;/e5&gt;&lt;/c2&gt;”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can see from the output of this example, that the &lt;c0&gt;test&lt;/c0&gt; task is not executed, even though it is a dependency of the &lt;c1&gt;dist&lt;/c1&gt; task. You will also notice that the &lt;c2&gt;test&lt;/c2&gt; task's dependencies, such as &lt;c3&gt;compileTest&lt;/c3&gt; are not executed either. Those dependencies of &lt;c4&gt;test&lt;/c4&gt; that are required by another task, such as &lt;c5&gt;compile&lt;/c5&gt;, are still executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T073608Z" creationid="huanghaohang" creationdate="20170909T073608Z">
        <seg>你可以本例的输出中看出&lt;c0&gt;test&lt;/c0&gt;任务并不执行，即使它被&lt;c1&gt;dist&lt;/c1&gt;任务所依赖。你也可能同时注意到&lt;c2&gt;test&lt;/c2&gt;任务所依赖的任务，如&lt;c3&gt;compileTest&lt;/c3&gt;也一样没有执行。而&lt;c4&gt;test&lt;/c4&gt;所依赖的同时也是另一个任务所需要的任务，如&lt;c5&gt;compile&lt;/c5&gt;，则仍然执行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can select the files to copy using Ant-style include or exclude patterns, or using a closure:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075108Z" creationid="huanghaohang" creationdate="20171015T075034Z">
        <seg>您可以使用 Ant 风格的包含或排除模式，或是闭包，来选择要复制的文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can specify that test processes should be restarted after it has executed a certain number of test classes. This can be a useful alternative to giving your test process a very large heap. The &lt;c0&gt;forkEvery&lt;/c0&gt; property specifies the maximum number of test classes to execute in a test process. The default is to execute an unlimited number of tests in each test process.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T060549Z" creationid="haohang" creationdate="20180330T060157Z">
        <seg>你可以指定在执行了一定数量的测试类之后，重新启动测试进程。这是一个很有用的替代方案，可以让你的测试进程有非常大的堆内存。&lt;c0&gt;forkEvery&lt;/c0&gt; 属性指定了要在测试进程中执行的最大测试类的数量。默认是在每个测试进程中执行的测试数量不限。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can specify that your repository conforms to the Ivy or Maven default layout by using a named layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041433Z" creationid="huanghaohang" creationdate="20190603T041205Z">
        <seg>通过使用指定名称的布局，可以指定仓库遵循 Ivy 或 Maven 的默认布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can specify whether or not to execute your tests in parallel. Gradle provides parallel test execution by running multiple test processes concurrently. Each test process executes only a single test at a time, so you generally don't need to do anything special to your tests to take advantage of this. The &lt;c0&gt;maxParallelForks&lt;/c0&gt; property specifies the maximum number of test processes to run at any given time. The default is 1, that is, do not execute the tests in parallel.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180330T055339Z" creationid="haohang" creationdate="20180330T055339Z">
        <seg>你可以指定是否要并行执行测试。Gradle 通过同时运行多个测试进程来提供并行测试的执行。每个测试进程一次只执行一个测试，所以通常不需要为测试做任何特殊的配置就可以利用这一点。&lt;c0&gt;maxParallelForks&lt;/c0&gt; 属性指定了在给定的任何时间可以运行的最大测试进程数。默认值为1，即不并行执行测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;s0&gt;&lt;c1&gt;gradle properties&lt;/c1&gt;&lt;/s0&gt; to list the properties of a project. This will allow you to see the properties added by the Java plugin, and their default values.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132758Z" creationid="95" creationdate="20170730T132619Z">
        <seg>你可以使用 &lt;s0&gt;&lt;c1&gt;gradle properties&lt;/c1&gt;&lt;/s0&gt;来列出一个项目的属性。这个命令会让你看到Java插件所添加的属性以及它们的默认值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt; to list the tasks of a project. This will let you see the tasks that the Java plugin has added to your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T013040Z" creationid="95" creationdate="20170730T013011Z">
        <seg>你可以使用 &lt;s0&gt;&lt;c1&gt;gradle tasks&lt;/c1&gt;&lt;/s0&gt; 来列出一个项目的任务，这样就会看到Java插件向项目添加了哪些项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use Gradle's Ant integration as a path for migrating your build from Ant to Gradle. For example, you could start by importing your existing Ant build. Then you could move your dependency declarations from the Ant script to your build file. Finally, you could move your tasks across to your build file, or replace them with some of Gradle's plugins. This process can be done in parts over time, and you can have a working Gradle build during the entire process.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171213T140858Z" creationid="huanghaohang" creationdate="20171213T135916Z">
        <seg>你可以将 Gradle 的 Ant 集成作为将你的构建从 Ant 迁移到 Gradle 的一种途径。例如，你可以从导入现有的 Ant 构建开始。然后，你可以将你的依赖声明从 Ant 脚本移到你的构建文件。最后，你可以把你的任务移到你的构建文件中，或者用一些 Gradle 插件来替换它们。这个过程可以在一段时间内完成，并且在这整个过程中你的 Gradle 构建都可以使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use Gradle's dependency management to assemble the classpath to use for the custom tasks. To do this, you need to define a custom configuration for the classpath, then add some dependencies to the configuration. This is described in more detail in &lt;a0&gt;Section 50.4, “How to declare your dependencies”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084245Z" creationid="huanghaohang" creationdate="20180105T083842Z">
        <seg>你可以使用 Gradle 的依赖管理来组装用于自定义任务的类路径。为此，你需要为类路径定义一个自定义配置，然后向这个配置添加一些依赖。这在《&lt;a0&gt;第 50.4 节，“如何声明你的依赖关系”&lt;/a0&gt;》中有更详细的描述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an archive task to define an artifact:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075200Z" creationid="huanghaohang" creationdate="20190606T075140Z">
        <seg>你可以使用归档任务来定义工件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use an init script to configure the projects in the build. This works in a similar way to configuring projects in a multi-project build. The following sample shows how to perform extra configuration from an init script &lt;s0&gt;&lt;e1&gt;before&lt;/e1&gt;&lt;/s0&gt; the projects are evaluated. This sample uses this feature to configure an extra repository to be used only for certain environments.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143612Z" creationid="huanghaohang" creationdate="20191206T143601Z">
        <seg>你可以在构建中使用初始化脚本配置项目，类似于在多项目构建中配置项目。以下的例子展示了如何在项目被评估 &lt;s0&gt;&lt;e1&gt;之前&lt;/e1&gt;&lt;/s0&gt; 从初始化脚本中执行额外的配置。这个示例使用此功能来配置一个额外仅用于特定环境的仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;a0&gt;&lt;c1&gt;Copy&lt;/c1&gt;&lt;/a0&gt; task to copy files. The copy task is very flexible, and allows you to, for example, filter the contents of the files as they are copied, and map to the file names.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134516Z" creationid="huanghaohang" creationdate="20171002T134324Z">
        <seg>你可以使用&lt;a0&gt;&lt;c1&gt;Copy&lt;/c1&gt;&lt;/a0&gt;任务来复制文件。复制任务非常灵活，并允许你在复制时过滤文件的内容，以及映射到文件名中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;a0&gt;&lt;c1&gt;GradleBuild&lt;/c1&gt;&lt;/a0&gt; task. You can use either of the &lt;c2&gt;dir&lt;/c2&gt; or &lt;c3&gt;buildFile&lt;/c3&gt; properties to specify which build to execute, and the &lt;c4&gt;tasks&lt;/c4&gt; property to specify which tasks to execute.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135658Z" creationid="huanghaohang" creationdate="20191201T135658Z">
        <seg>你可以使用 &lt;a0&gt;&lt;c1&gt;GradleBuild&lt;/c1&gt;&lt;/a0&gt; 任务。你可以使用 &lt;c2&gt;dir&lt;/c2&gt; 或 &lt;c3&gt;buildFile&lt;/c3&gt; 属性来指定要执行的构建，以及使用 &lt;c4&gt;tasks&lt;/c4&gt; 属性来指定要执行的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;a0&gt;&lt;c1&gt;Project.copySpec()&lt;/c1&gt;&lt;/a0&gt; method to share content between archives.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233427Z" creationid="huanghaohang" creationdate="20171206T233427Z">
        <seg>你可以使用&lt;a0&gt;&lt;c1&gt;Project.copySpec()&lt;/c1&gt;&lt;/a0&gt;方法来共享归档之间的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;a0&gt;&lt;c1&gt;ProjectBuilder&lt;/c1&gt;&lt;/a0&gt; class to create &lt;a2&gt;&lt;c3&gt;Project&lt;/c3&gt;&lt;/a2&gt; instances to use when you test your plugin implementation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130837Z" creationid="huanghaohang" creationdate="20190728T130742Z">
        <seg>你可以使用 &lt;a0&gt;&lt;c1&gt;ProjectBuilder&lt;/c1&gt;&lt;/a0&gt; 类来创建 &lt;a2&gt;&lt;c3&gt;Project&lt;/c3&gt;&lt;/a2&gt; 实例，以在测试插件的实现时使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;a0&gt;&lt;c1&gt;ProjectBuilder&lt;/c1&gt;&lt;/a0&gt; class to create &lt;a2&gt;&lt;c3&gt;Project&lt;/c3&gt;&lt;/a2&gt; instances to use when you test your task class.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124001Z" creationid="huanghaohang" creationdate="20190706T124001Z">
        <seg>你可以使用 &lt;a0&gt;&lt;c1&gt;ProjectBuilder&lt;/c1&gt;&lt;/a0&gt; 类来创建 &lt;a2&gt;&lt;c3&gt;Project&lt;/c3&gt;&lt;/a2&gt; 实例以在测试任务类时使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;ant.importBuild()&lt;/c0&gt; method to import an Ant build into your Gradle project. When you import an Ant build, each Ant target is treated as a Gradle task. This means you can manipulate and execute the Ant targets in exactly the same way as Gradle tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084604Z" creationid="huanghaohang" creationdate="20180105T084604Z">
        <seg>你可以使用 &lt;c0&gt;ant.importBuild()&lt;/c0&gt; 方法将 Ant 构建导入到你的 Gradle 项目中。导入 Ant 构建时，每个 Ant 目标都被视为是一个 Gradle 任务。这意味着你可以像 Gradle 任务一样操作和执行 Ant 目标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;c0&gt;onlyIf()&lt;/c0&gt; method to attach a predicate to a task. The task's actions are only executed if the predicate evaluates to true. You implement the predicate as a closure. The closure is passed the task as a parameter, and should return true if the task should execute and false if the task should be skipped. The predicate is evaluated just before the task is due to be executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084102Z" creationid="huanghaohang" creationdate="20170922T084102Z">
        <seg>你可以使用&lt;c0&gt;onlyIf()&lt;/c0&gt;方法将断言附加到任务中。只有当断言结果为true时，才会执行该任务的操作。你可以用闭包来实现断言。闭包会作为一个参数传给任务，如果任务应该执行，应该返回true，如果任务应该被跳过，则返回false。断言只会在任务执行之前才评估。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the build comparison functionality to very quickly try a new Gradle version with your build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140429Z" creationid="huanghaohang" creationdate="20210515T140429Z">
        <seg>你可以使用这个构建比较功能来快速尝试在你的构建中使用新的Gradle版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the command line switches shown in &lt;a0&gt;Table 18.2, “Log level command-line options”&lt;/a0&gt; to choose different log levels. In &lt;a1&gt;Table 18.3, “Stacktrace command-line options”&lt;/a1&gt; you find the command line switches which affect stacktrace logging.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221857Z" creationid="huanghaohang" creationdate="20180105T221741Z">
        <seg>你可以使用&lt;a0&gt;表 18.2，“日志级别的命令行选项”&lt;/a0&gt;中所示的命令行开关来选择不同的日志级别。在&lt;a1&gt;表 18.3，“栈跟踪的命令行选项”&lt;/a1&gt;中，你可以看到影响栈跟踪日志的命令行开关。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the configuration injection technique discussed in &lt;a0&gt;Section 56.1, “Cross project configuration”&lt;/a0&gt; and &lt;a1&gt;Section 56.2, “Subproject configuration”&lt;/a1&gt; to inject properties and methods into various projects. This is generally a better option than inheritance, for a number of reasons: The injection is explicit in the build script, You can inject different logic into different projects, And you can inject any kind of configuration such as repositories, plug-ins, tasks, and so on. The following sample shows how this works.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132512Z" creationid="huanghaohang" creationdate="20190925T162422Z">
        <seg>你可以使用在&lt;a0&gt;第 56.1 节，《跨项目配置》&lt;/a0&gt;和&lt;a1&gt;第 56.2 节，《子项目配置》&lt;/a1&gt; 中所论述的配置注入技术，将属性和方法注入到各个项目中。通常来说，它是比继承更好的选择，原因如下：在构建脚本中，注入是显式的，你可以将不同的逻辑注入到不同的项目，并且可以注入任何类型的配置，如仓库，插件，任务等等。以下是关于注入的示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the configuration to access the declared dependencies or a subset of those:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143010Z" creationid="huanghaohang" creationdate="20190602T143010Z">
        <seg>你可以使用配置来访问声明的依赖或其中的子集：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the contents of an archive, such as a ZIP or TAR file, as a file tree. You do this using the &lt;a0&gt;&lt;c1&gt;Project.zipTree()&lt;/c1&gt;&lt;/a0&gt; and &lt;a2&gt;&lt;c3&gt;Project.tarTree()&lt;/c3&gt;&lt;/a2&gt; methods. These methods return a &lt;c4&gt;FileTree&lt;/c4&gt; instance which you can use like any other file tree or file collection. For example, you can use it to expand the archive by copying the contents, or to merge some archives into another.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133502Z" creationid="huanghaohang" creationdate="20171002T133502Z">
        <seg>你可以通过使用&lt;a0&gt;&lt;c1&gt;Project.zipTree()&lt;/c1&gt;&lt;/a0&gt;和&lt;a2&gt;&lt;c3&gt;Project.tarTree()&lt;/c3&gt;&lt;/a2&gt;方法，将档案（如ZIP或TAR文件）的内容用作文件树。这些方法会返回一个 &lt;c4&gt;FileTree&lt;/c4&gt;实例，它可以像其他任何文件树或文件集一样去使用。例如，你可以用它来通过复制内容扩展归档，或者将某些归档合并到另一个归档文件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You configure the project layout by configuring the appropriate source set. This is discussed in more detail in the following sections. Here is a brief example which changes the main Java and resource source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053330Z" creationid="haohang" creationdate="20180313T053330Z">
        <seg>你可以通过配置适当的源集来配置项目的布局，这点将在下面的章节中详细讨论。以下是一个简单的例子，展示如何改变 main Java 和资源源目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You could also have a mixed strategy. If your main concern is bad metadata in the POM file and maintaining custom XML descriptors, &lt;s0&gt;&lt;e1&gt;Client Modules&lt;/e1&gt;&lt;/s0&gt; offer an alternative. But you can of course still use Maven2 repo and your custom repository as a repository for &lt;s2&gt;&lt;e3&gt;jars only&lt;/e3&gt;&lt;/s2&gt; and still enjoy &lt;s4&gt;&lt;e5&gt;transitive&lt;/e5&gt;&lt;/s4&gt; dependency management. Or you can only provide client modules for POMs with bad metadata. For the jars and the correct POMs you still use the remote repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T015421Z" creationid="huanghaohang" creationdate="20190606T014757Z">
        <seg>你也可以使用混合策略。如果你主要关注的是 POM 文件中的错误元数据以及维护自定义的 XML 描述符，&lt;s0&gt;&lt;e1&gt;客户端模块&lt;/e1&gt;&lt;/s0&gt;提供了一种替代方案。但你还是可以将 Maven2 仓库和自定义仓库用作 &lt;s2&gt;&lt;e3&gt;只放 jar&lt;/e3&gt;&lt;/s2&gt; 的仓库，并且仍然可以使用&lt;s4&gt;&lt;e5&gt;传递&lt;/e5&gt;&lt;/s4&gt;依赖管理。或者，你也可以只为带有错误元数据的 POM 提供客户端模块，而对于 jar 和正确的 POM 依然使用远程仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You don't want to expose people who want to build your project, to the downtimes or sometimes very long response times of Maven Central.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T152843Z" creationid="huanghaohang" creationdate="20190605T152843Z">
        <seg>你不希望 Maven 中央仓库故障停机或者有时候响应时间太长时，想要构建你的项目的人直接受到影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You execute an Ant task by calling a method on the &lt;c0&gt;AntBuilder&lt;/c0&gt; instance. You use the task name as the method name. For example, you execute the Ant &lt;c1&gt;echo&lt;/c1&gt; task by calling the &lt;c2&gt;ant.echo()&lt;/c2&gt; method. The attributes of the Ant task are passed as Map parameters to the method. Below is an example which executes the &lt;c3&gt;echo&lt;/c3&gt; task. Notice that we can also mix Groovy code and the Ant task markup. This can be extremely powerful.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022441Z" creationid="huanghaohang" creationdate="20171216T022027Z">
        <seg>通过调用 &lt;c0&gt;AntBuilder&lt;/c0&gt; 实例上的一个方法，可以来执行一个 Ant 任务。你可以把任务名称作为方法名称来使用。例如，通过调用 &lt;c2&gt;ant.echo()&lt;/c2&gt; 方法执行 Ant &lt;c1&gt;echo&lt;/c1&gt; 任务。Ant 任务的属性将作为 Map 参数传递给这个方法。下面是执行 &lt;c3&gt;echo&lt;/c3&gt; 任务的一个例子。请注意，我们也可以混合使用 Groovy 代码和 Ant 任务标记，这会很强大。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You install the wrapper into your project by adding and configuring a &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt; task in your build script, and then executing it.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130028Z" creationid="huanghaohang" creationdate="20191219T130028Z">
        <seg>你可以通过在你的构建脚本中添加一个 &lt;a0&gt;&lt;c1&gt;Wrapper&lt;/c1&gt;&lt;/a0&gt; 任务并配置，然后执行它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You may configure any number of repositories, each of which is treated independently by Gradle. If Gradle finds a module descriptor in a particular repository, it will attempt to download all of the artifacts for that module from &lt;s0&gt;&lt;e1&gt;the same repository&lt;/e1&gt;&lt;/s0&gt;. Although module meta-data and module artifacts must be located in the same repository, it is possible to compose a single repository of multiple URLs, giving multiple locations to search for meta-data files and jar files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025742Z" creationid="huanghaohang" creationdate="20190603T025742Z">
        <seg>你可以配置任意数量的仓库，每个仓库都会被 Gradle 独立处理。如果 Gradle 在一个特定的仓库中找到模块描述符，那么它将尝试从 &lt;s0&gt;&lt;e1&gt;同一仓库&lt;/e1&gt;&lt;/s0&gt;中下载该模块的所有工件。虽然模块元数据和模块工件必须位于同一仓库中，但也可能单个仓库由多个 URL 组成，同时提供多个位置来搜索元数据文件和 jar 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You may want to start the daemon in &lt;c0&gt;--foreground&lt;/c0&gt; mode to observe how the build is executed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025704Z" creationid="huanghaohang" creationdate="20180120T025704Z">
        <seg>你可能想要以 &lt;c0&gt;--foreground&lt;/c0&gt; 模式启动守护程序，来观察构建是怎么执行的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You may wish to use the new &lt;a0&gt;Sonar Runner Plugin&lt;/a0&gt; instead of this plugin. In particular, only the Sonar Runner plugin supports Sonar 3.4 and higher.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094633Z" creationid="huanghaohang" creationdate="20180715T094633Z">
        <seg>你可能会想使用新的 &lt;a0&gt;Sonar Runner 插件&lt;/a0&gt; 来代替现在这个插件。尤其是因为只有 Sonar Runner 插件支持 Sonar 3.4 及更高的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You might argue why not using Java then as the language for build scripts. We think this is a valid question. It would have the highest transparency for your team and the lowest learning curve. But due to limitations of Java such a build language would not be as nice, expressive and powerful as it could be. &lt;s0&gt;[&lt;a1&gt;1&lt;/a1&gt;]&lt;/s0&gt; Languages like Python, Groovy or Ruby do a much better job here. We have chosen Groovy as it offers by far the greatest transparency for Java people. Its base syntax is the same as Java's as well as its type system, its package structure and other things. Groovy builds a lot on top of that. But on a common ground with Java.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T071727Z" creationid="95" creationdate="20170723T070855Z">
        <seg>您可能会想问，为什么不使用Java来作为构建脚本的语言。这确实是一个很好的问题，它的团队透明度最高，并且学习曲线最低。但是由于Java的局限性，这样的一门构建语言就不会像现在的那样好、丰富而强大。&lt;s0&gt;[&lt;a1&gt;1&lt;/a1&gt;]&lt;/s0&gt; 像Python，Groovy或是Ruby这样的语言能够比它更好。我们之所以选择Groovy，是因为它为Java程序员提供了最大的透明度，它的基本语法，类型系统，包结构等都与Java相同。Groovy的底层是与Java相同的，只是在其之上做了许多工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You might be wondering why we have implemented a feature we obviously don't like that much. One reason is that it is offered by other tools and we want to have the check mark in a feature comparison :). And we like to offer our users a choice.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152434Z" creationid="huanghaohang" creationdate="20190623T152434Z">
        <seg>你可能想知道，为什么我们实现了一个我们显然不喜欢的功能。原因之一是其他工具也有这个功能，而我们希望在功能比较中有这一点:)。我们想为我们的用户提供一种选择。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You might need dependencies that are not uploaded to Maven Central yet.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T152227Z" creationid="huanghaohang" creationdate="20190605T152211Z">
        <seg>你可能需要还没有上传到 Maven 中央仓的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You need to declare a filter for each artifact you want to publish. This filter defines a boolean expression for which Gradle artifact it accepts. Each filter has a POM associated with it which you can configure. To learn more about this have a look at &lt;a0&gt;&lt;c1&gt;PomFilterContainer&lt;/c1&gt;&lt;/a0&gt; and its associated classes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T085151Z" creationid="huanghaohang" creationdate="20190608T085151Z">
        <seg>你需要为每个要发布的工件声明一个过滤器，这个过滤器定义了其接受 Gradle 工件的布尔表达式。每个过滤器都有一个与之关联的 POM，通过它你可以进行配置。要了解更多信息，请查看 &lt;a0&gt;&lt;c1&gt;PomFilterContainer&lt;/c1&gt;&lt;/a0&gt; 及其关联的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You often need to locate the tasks that you have defined in the build file, for example, to configure them or use them for dependencies. There are a number of ways of doing this. Firstly, each task is available as a property of the project, using the task name as the property name:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121712Z" creationid="huanghaohang" creationdate="20170919T121712Z">
        <seg>我们经常需要在构建文件中查找所定义的任务。例如，为了去配置它们，或是依赖它们。对这样的情况，有很多种方法可以解决。首先，每个任务都可以使用任务名称作为属性名称，当为项目的属性来使用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You pass nested elements to an Ant task inside a closure. Nested elements are defined in the same way as tasks, by calling a method with the same name as the element we want to define.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090745Z" creationid="huanghaohang" creationdate="20171216T022614Z">
        <seg>你可以在一个闭包里把嵌套的元素传给一个 Ant 任务。嵌套元素的定义方式与任务相同，通过调用与我们要定义的元素同名的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You pass nested text to an Ant task by passing it as a parameter of the task method call. In this example, we pass the message for the &lt;c0&gt;echo&lt;/c0&gt; task as nested text:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022601Z" creationid="huanghaohang" creationdate="20171216T022601Z">
        <seg>你可以把一个嵌套文本，通过作为任务方法调用的参数传给一个 Ant 任务。在此示例中，我们将把作为嵌套文本的消息传给 &lt;c0&gt;echo&lt;/c0&gt; 任务：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You run Gradle via the &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; command. To check if Gradle is properly installed just type &lt;s2&gt;&lt;s3&gt;gradle -v&lt;/s3&gt;&lt;/s2&gt;. The output shows Gradle version and also local environment configuration (groovy and JVM version, etc.). The displayed Gradle version should match the distribution you have downloaded.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T115559Z" creationid="95" creationdate="20170723T115238Z">
        <seg>您可以通过&lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt;命令来运行Gradle。输入&lt;s2&gt;&lt;s3&gt;gradle -v&lt;/s3&gt;&lt;/s2&gt;就可以检查Gradle是否被正确安装。该命令会输出Gradle的版本，以及本地环境的配置（groovy和JVM版本等等）。所显示的Gradle版本应该与您已经安装的发行包相匹配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You run a Gradle build using the &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; command. The &lt;s2&gt;&lt;s3&gt;gradle&lt;/s3&gt;&lt;/s2&gt; command looks for a file called &lt;c4&gt;build.gradle&lt;/c4&gt; in the current directory. &lt;s5&gt;[&lt;a6&gt;2&lt;/a6&gt;]&lt;/s5&gt; We call this &lt;c7&gt;build.gradle&lt;/c7&gt; file a &lt;e8&gt;build script&lt;/e8&gt;, although strictly speaking it is a build configuration script, as we will see later. The build script defines a project and its tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144635Z" creationid="95" creationdate="20170724T143923Z">
        <seg>您可以使用 &lt;s0&gt;&lt;s1&gt;gradle&lt;/s1&gt;&lt;/s0&gt; 命令来运行Gradle构建。 &lt;s2&gt;&lt;s3&gt;gradle&lt;/s3&gt;&lt;/s2&gt;命令会在当前目录下查找一个 &lt;c4&gt;build.gradle&lt;/c4&gt; 文件。 &lt;s5&gt;[&lt;a6&gt;2&lt;/a6&gt;]&lt;/s5&gt; 我们把这个 &lt;c7&gt;build.gradle&lt;/c7&gt; 文件称为是一个 &lt;e8&gt;构建脚本&lt;/e8&gt;，尽管严格上来讲，它只是一个构建的配置脚本，我们将会在后面看到。这个构建脚本定义了一个项目和它的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should note that the &lt;c0&gt;TestReport&lt;/c0&gt; type combines the results from multiple test tasks and needs to aggregate the results of individual test classes. This means that if a given test class is executed by multiple test tasks, then the test report will include executions of that class, but it can be hard to distinguish individual executions of that class and their output.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T055605Z" creationid="huanghaohang" creationdate="20180406T044011Z">
        <seg>你应该注意的是，&lt;c0&gt;TestReport&lt;/c0&gt; 类型结合了多个测试任务的结果，并需要汇总各个测试类的结果。这意味着如果给定的测试类由多个测试任务执行，那么测试报告将包括该类的执行结果，但很难区分这个类的单独执行和它们的输出。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You use a file tree in the same way you use a file collection. You can also visit the contents of the tree, and select a sub-tree using Ant-style patterns:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023622Z" creationid="huanghaohang" creationdate="20171002T023622Z">
        <seg>你可以像使用文件集合的方式一样来使用文件树。你也可以访问文件树的内容，并使用Ant风格的模式选择一个子树：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You want to deal properly with wrong metadata in a Maven Central POM file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T152254Z" creationid="huanghaohang" creationdate="20190605T152228Z">
        <seg>你希望正确地处理 Maven 中央仓 POM 文件中错误的元数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Your build script can receive notifications as the build progresses through its lifecycle. These notifications generally take 2 forms: You can either implement a particular listener interface, or you can provide a closure to execute when the notification is fired. The examples below use closures. For details on how to use the listener interfaces, refer to the API documentation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145454Z" creationid="huanghaohang" creationdate="20190613T145454Z">
        <seg>构建脚本可以在构建过程通过其生命周期时接收通知。这些通知通常采用两种形式：你可以实现一个特定的监听器接口，或提供一个用于在触发通知时执行的闭包。以下是使用闭包的例子。有关如何使用监听器接口的详细信息，请参阅 API 文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Your build scripts configure this dependency graph. Therefore they are strictly speaking &lt;s0&gt;&lt;e1&gt;build configuration scripts&lt;/e1&gt;&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T102629Z" creationid="huanghaohang" creationdate="20190611T102629Z">
        <seg>你的构建脚本配置了这个依赖图。因此严格来讲，它们都是&lt;s0&gt;&lt;e1&gt;构建配置脚本&lt;/e1&gt;&lt;/s0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Your logger can implement any of the listener interfaces listed below. When you register a logger, only the logging for the interfaces that it implements is replaced. Logging for the other interfaces is left untouched. You can find out more about the listener interfaces in &lt;a0&gt;Section 55.6, “Responding to the lifecycle in the build script”&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144453Z" creationid="huanghaohang" creationdate="20180107T144048Z">
        <seg>你的 logger 可以实现下面列出的任何监听器接口。当你注册一个 logger 时，只会替换其实现的接口的日志记录，其他接口的日志记录则保持不变。于侦听器的接口的详细信息，可以参阅《&lt;a0&gt;第 55.6 节，“在构建脚本中响应生命周期”&lt;/a0&gt;》。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Zip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133852Z" creationid="huanghaohang" creationdate="20190127T133852Z">
        <seg>Zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/antlr]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T014139Z" creationid="huanghaohang" creationdate="20190123T014139Z">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/antlr]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/groovy]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T234758Z" creationid="huanghaohang" creationdate="20180406T234758Z">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/groovy]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/java]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100903Z" creationid="haohang" creationdate="20180320T100903Z">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/java]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/resources]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101214Z" creationid="haohang" creationdate="20180320T101214Z">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/resources]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/scala]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020235Z" creationid="huanghaohang" creationdate="20180407T020235Z">
        <seg>[&lt;e0&gt;&lt;c1&gt;projectDir&lt;/c1&gt;&lt;/e0&gt;/src/&lt;e2&gt;&lt;c3&gt;name&lt;/c3&gt;&lt;/e2&gt;/scala]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093250Z" creationid="huanghaohang" creationdate="20180715T093250Z">
        <seg>[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[group: &lt;s5&gt;'org.springframework'&lt;/s5&gt;, name: &lt;s6&gt;'spring-core'&lt;/s6&gt;, version: &lt;s7&gt;'2.5'&lt;/s7&gt;],</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160755Z" creationid="huanghaohang" creationdate="20190527T160755Z">
        <seg>[group: &lt;s5&gt;'org.springframework'&lt;/s5&gt;, name: &lt;s6&gt;'spring-core'&lt;/s6&gt;, version: &lt;s7&gt;'2.5'&lt;/s7&gt;],</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>[group: &lt;s8&gt;'org.springframework'&lt;/s8&gt;, name: &lt;s9&gt;'spring-aop'&lt;/s9&gt;, version: &lt;s10&gt;'2.5'&lt;/s10&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160756Z" creationid="huanghaohang" creationdate="20190527T160756Z">
        <seg>[group: &lt;s8&gt;'org.springframework'&lt;/s8&gt;, name: &lt;s9&gt;'spring-aop'&lt;/s9&gt;, version: &lt;s10&gt;'2.5'&lt;/s10&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\--- compile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T022201Z" creationid="huanghaohang" creationdate="20170910T022201Z">
        <seg>\--- compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\--- org.hamcrest:hamcrest-core:1.3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T021705Z" creationid="huanghaohang" creationdate="20170910T021705Z">
        <seg>\--- org.hamcrest:hamcrest-core:1.3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>\--- org.hamcrest:hamcrest-core:1.3

------------------------------------------------------------
Project :webapp - The Web application implementation
------------------------------------------------------------

compile
+--- project :api
|    \--- org.codehaus.groovy:groovy-all:2.3.3
\--- commons-io:commons-io:1.2

testCompile
No dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T014138Z" creationid="huanghaohang" creationdate="20170910T014138Z">
        <seg>\--- org.hamcrest:hamcrest-core:1.3

------------------------------------------------------------
Project :webapp - The Web application implementation
------------------------------------------------------------

compile
+--- project :api
|    \--- org.codehaus.groovy:groovy-all:2.3.3
\--- commons-io:commons-io:1.2

testCompile
No dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a multiproject build, if the &lt;c0&gt;settings.gradle&lt;/c0&gt; file does define a multiproject hierarchy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143203Z" creationid="huanghaohang" creationdate="20190613T143203Z">
        <seg>如果 &lt;c0&gt;settings.gradle&lt;/c0&gt; 文件定义了多项目的层次结构，作为多项目构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a single project build, if the &lt;c0&gt;settings.gradle&lt;/c0&gt; file does not define a multiproject hierarchy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143143Z" creationid="huanghaohang" creationdate="20190613T143143Z">
        <seg>如果 &lt;c0&gt;settings.gradle&lt;/c0&gt; 文件没有定义多项目的层次结构，作为单项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>aProducer/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140811Z" creationid="huanghaohang" creationdate="20190616T140811Z">
        <seg>aProducer/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>aProducer/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140815Z" creationid="huanghaohang" creationdate="20190616T140815Z">
        <seg>aProducer/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>add project.repositories.fileRepo</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080210Z" creationid="huanghaohang" creationdate="20190606T080210Z">
        <seg>add project.repositories.fileRepo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>addFilter(&lt;s1&gt;'api'&lt;/s1&gt;) {artifact, file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084749Z" creationid="huanghaohang" creationdate="20190608T084749Z">
        <seg>addFilter(&lt;s1&gt;'api'&lt;/s1&gt;) {artifact, file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>addFilter(&lt;s3&gt;'service'&lt;/s3&gt;) {artifact, file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084751Z" creationid="huanghaohang" creationdate="20190608T084751Z">
        <seg>addFilter(&lt;s3&gt;'service'&lt;/s3&gt;) {artifact, file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>address</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093257Z" creationid="huanghaohang" creationdate="20180715T093257Z">
        <seg>address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>adds build &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt; tasks. Those tasks assemble the artifacts belonging to the specified configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T022934Z" creationid="huanghaohang" creationdate="20180218T022840Z">
        <seg>添加构建 &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt; 的任务，这些任务组装了属于指定配置的工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>adds upload &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt; tasks. Those tasks assemble and upload the artifacts belonging to the specified configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T022928Z" creationid="huanghaohang" creationdate="20180218T022928Z">
        <seg>添加上传 &lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt; 的任务，这些任务组装并上传属于指定配置的工件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>afterEvaluate { Project project -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145020Z" creationid="huanghaohang" creationdate="20190615T145020Z">
        <seg>afterEvaluate { Project project -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>afterEvaluate { project -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145904Z" creationid="huanghaohang" creationdate="20190613T145904Z">
        <seg>afterEvaluate { project -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>all { ArtifactRepository repo -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151219Z" creationid="huanghaohang" creationdate="20191206T151219Z">
        <seg>all { ArtifactRepository repo -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>all*.exclude group: &lt;s1&gt;'org.gradle.test.excludes'&lt;/s1&gt;, module: &lt;s2&gt;'reports'&lt;/s2&gt;
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105651Z" creationid="huanghaohang" creationdate="20190602T105651Z">
        <seg>all*.exclude group: &lt;s1&gt;'org.gradle.test.excludes'&lt;/s1&gt;, module: &lt;s2&gt;'reports'&lt;/s2&gt;
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allGroovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T234841Z" creationid="huanghaohang" creationdate="20180406T234841Z">
        <seg>allGroovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allJava</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101234Z" creationid="haohang" creationdate="20180320T101234Z">
        <seg>allJava</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allScala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020252Z" creationid="huanghaohang" creationdate="20180407T020252Z">
        <seg>allScala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allSource</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101503Z" creationid="haohang" creationdate="20180320T101503Z">
        <seg>allSource</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>alllife
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142800Z" creationid="huanghaohang" creationdate="20190602T142800Z">
        <seg>alllife
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>alllife &lt;s3&gt;"air.birds:albatros:1.0"&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142803Z" creationid="huanghaohang" creationdate="20190602T142803Z">
        <seg>alllife &lt;s3&gt;"air.birds:albatros:1.0"&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>alllife configurations.sealife</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142801Z" creationid="huanghaohang" creationdate="20190602T142801Z">
        <seg>alllife configurations.sealife</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allprojects {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145904Z" creationid="huanghaohang" creationdate="20190613T145904Z">
        <seg>allprojects {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allprojects { ext."signing.keyId" = id }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133048Z" creationid="huanghaohang" creationdate="20190608T133048Z">
        <seg>allprojects { ext."signing.keyId" = id }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allprojects { ext."signing.password" = password }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133049Z" creationid="huanghaohang" creationdate="20190608T133049Z">
        <seg>allprojects { ext."signing.password" = password }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>allprojects { ext."signing.secretKeyRingFile" = file }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133048Z" creationid="huanghaohang" creationdate="20190608T133048Z">
        <seg>allprojects { ext."signing.secretKeyRingFile" = file }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>an empty manifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010648Z" creationid="huanghaohang" creationdate="20180318T010648Z">
        <seg>一个空的清单</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144051Z" creationid="huanghaohang" creationdate="20180207T144051Z">
        <seg>announce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092009Z" creationid="huanghaohang" creationdate="20190124T092009Z">
        <seg>announce {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce.announce(&lt;s1&gt;"helloWorld completed!"&lt;/s1&gt;, &lt;s2&gt;"twitter"&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092059Z" creationid="huanghaohang" creationdate="20190124T092059Z">
        <seg>announce.announce(&lt;s1&gt;"helloWorld completed!"&lt;/s1&gt;, &lt;s2&gt;"twitter"&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce.announce(&lt;s3&gt;"helloWorld completed!"&lt;/s3&gt;, &lt;s4&gt;"local"&lt;/s4&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092100Z" creationid="huanghaohang" creationdate="20190124T092100Z">
        <seg>announce.announce(&lt;s3&gt;"helloWorld completed!"&lt;/s3&gt;, &lt;s4&gt;"local"&lt;/s4&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144049Z" creationid="huanghaohang" creationdate="20180207T144049Z">
        <seg>announce_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce_plugin.html#N14583</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070436Z" creationid="huanghaohang" creationdate="20190205T070436Z">
        <seg>announce_plugin.html#N14583</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>announce_plugin.html#N14606</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070437Z" creationid="huanghaohang" creationdate="20190205T070437Z">
        <seg>announce_plugin.html#N14606</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132300Z" creationid="huanghaohang" creationdate="20170913T132300Z">
        <seg>ant</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141258Z" creationid="huanghaohang" creationdate="20191202T141258Z">
        <seg>ant {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.buildDir = buildDir
ant.properties.buildDir = buildDir
ant.properties[&lt;s0&gt;'buildDir'&lt;/s0&gt;] = buildDir
ant.property(name: &lt;s1&gt;'buildDir'&lt;/s1&gt;, location: buildDir)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094351Z" creationid="huanghaohang" creationdate="20180105T094351Z">
        <seg>ant.buildDir = buildDir
ant.properties.buildDir = buildDir
ant.properties[&lt;s0&gt;'buildDir'&lt;/s0&gt;] = buildDir
ant.property(name: &lt;s1&gt;'buildDir'&lt;/s1&gt;, location: buildDir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.checkstyle(config: &lt;s3&gt;'checkstyle.xml'&lt;/s3&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083833Z" creationid="huanghaohang" creationdate="20180105T083833Z">
        <seg>ant.checkstyle(config: &lt;s3&gt;'checkstyle.xml'&lt;/s3&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.checksum(file: file, property: &lt;s1&gt;"cs_$file.name"&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023458Z" creationid="95" creationdate="20170729T023458Z">
        <seg>ant.checksum(file: file, property: &lt;s1&gt;"cs_$file.name"&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.echo(&lt;s0&gt;'hello from Ant'&lt;/s0&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022607Z" creationid="huanghaohang" creationdate="20171216T022607Z">
        <seg>ant.echo(&lt;s0&gt;'hello from Ant'&lt;/s0&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.echo(message: greeting)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171216T022450Z" creationid="huanghaohang" creationdate="20171216T022450Z">
        <seg>ant.echo(message: greeting)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153837Z" creationid="95" creationdate="20170728T153837Z">
        <seg>ant.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.html#N113E5</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015151Z" creationid="huanghaohang" creationdate="20180314T015151Z">
        <seg>ant.html#N113E5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.html#N11485</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015201Z" creationid="huanghaohang" creationdate="20180314T015201Z">
        <seg>ant.html#N11485</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.html#N114DF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015207Z" creationid="huanghaohang" creationdate="20180314T015207Z">
        <seg>ant.html#N114DF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.html#N11533</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180314T015214Z" creationid="huanghaohang" creationdate="20180314T015214Z">
        <seg>ant.html#N11533</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084607Z" creationid="huanghaohang" creationdate="20180105T084607Z">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;

hello &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084806Z" creationid="huanghaohang" creationdate="20180105T084806Z">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;

hello &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;

task intro &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084837Z" creationid="huanghaohang" creationdate="20180105T084837Z">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;

task intro &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;

task intro(dependsOn: hello) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084637Z" creationid="huanghaohang" creationdate="20180105T084637Z">
        <seg>ant.importBuild &lt;s0&gt;'build.xml'&lt;/s0&gt;

task intro(dependsOn: hello) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.loadfile(srcFile: file, property: file.name)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153801Z" creationid="95" creationdate="20170728T153801Z">
        <seg>ant.loadfile(srcFile: file, property: file.name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.path(id: &lt;s0&gt;'classpath'&lt;/s0&gt;, location: &lt;s1&gt;'libs'&lt;/s1&gt;)
ant.references.classpath = ant.path(location: &lt;s2&gt;'libs'&lt;/s2&gt;)
ant.references[&lt;s3&gt;'classpath'&lt;/s3&gt;] = ant.path(location: &lt;s4&gt;'libs'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094659Z" creationid="huanghaohang" creationdate="20180105T094659Z">
        <seg>ant.path(id: &lt;s0&gt;'classpath'&lt;/s0&gt;, location: &lt;s1&gt;'libs'&lt;/s1&gt;)
ant.references.classpath = ant.path(location: &lt;s2&gt;'libs'&lt;/s2&gt;)
ant.references[&lt;s3&gt;'classpath'&lt;/s3&gt;] = ant.path(location: &lt;s4&gt;'libs'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.pmd(shortFilenames: &lt;s2&gt;'true'&lt;/s2&gt;, failonruleviolation: &lt;s3&gt;'true'&lt;/s3&gt;, rulesetfiles: file(&lt;s4&gt;'pmd-rules.xml'&lt;/s4&gt;).toURI().toString()) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084332Z" creationid="huanghaohang" creationdate="20180105T084332Z">
        <seg>ant.pmd(shortFilenames: &lt;s2&gt;'true'&lt;/s2&gt;, failonruleviolation: &lt;s3&gt;'true'&lt;/s3&gt;, rulesetfiles: file(&lt;s4&gt;'pmd-rules.xml'&lt;/s4&gt;).toURI().toString()) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.taskdef(name: &lt;s0&gt;'pmd'&lt;/s0&gt;, classname: &lt;s1&gt;'net.sourceforge.pmd.ant.PMDTask'&lt;/s1&gt;, classpath: configurations.pmd.asPath)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084332Z" creationid="huanghaohang" creationdate="20180105T084332Z">
        <seg>ant.taskdef(name: &lt;s0&gt;'pmd'&lt;/s0&gt;, classname: &lt;s1&gt;'net.sourceforge.pmd.ant.PMDTask'&lt;/s1&gt;, classpath: configurations.pmd.asPath)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.taskdef(resource: &lt;s0&gt;'checkstyletask.properties'&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083828Z" creationid="huanghaohang" creationdate="20180105T083828Z">
        <seg>ant.taskdef(resource: &lt;s0&gt;'checkstyletask.properties'&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ant.zip(destfile: &lt;s0&gt;'archive.zip'&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090755Z" creationid="huanghaohang" creationdate="20171219T090755Z">
        <seg>ant.zip(destfile: &lt;s0&gt;'archive.zip'&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141225Z" creationid="huanghaohang" creationdate="20180205T141225Z">
        <seg>antlr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr &lt;s0&gt;'antlr:antlr:2.7.7'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013858Z" creationid="huanghaohang" creationdate="20190123T013858Z">
        <seg>antlr &lt;s0&gt;'antlr:antlr:2.7.7'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T014132Z" creationid="huanghaohang" creationdate="20190123T014132Z">
        <seg>antlr.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141224Z" creationid="huanghaohang" creationdate="20180205T141224Z">
        <seg>antlr_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html#N142F5</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070357Z" creationid="huanghaohang" creationdate="20190205T070354Z">
        <seg>antlr_plugin.html#N142F5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html#N14304</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070359Z" creationid="huanghaohang" creationdate="20190205T070359Z">
        <seg>antlr_plugin.html#N14304</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html#N14382</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070400Z" creationid="huanghaohang" creationdate="20190205T070400Z">
        <seg>antlr_plugin.html#N14382</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html#N143B5</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070402Z" creationid="huanghaohang" creationdate="20190205T070402Z">
        <seg>antlr_plugin.html#N143B5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html#N143C7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070403Z" creationid="huanghaohang" creationdate="20190205T070403Z">
        <seg>antlr_plugin.html#N143C7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>antlr_plugin.html#N143CC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070404Z" creationid="huanghaohang" creationdate="20190205T070404Z">
        <seg>antlr_plugin.html#N143CC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>api/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154455Z" creationid="95" creationdate="20170731T154455Z">
        <seg>api/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>api/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125322Z" creationid="95" creationdate="20170803T125322Z">
        <seg>api/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>api:compile - Compiles the source files
webapp:libs - Builds the JAR [api:libs]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012329Z" creationid="huanghaohang" creationdate="20170910T012329Z">
        <seg>api:compile - Compiles the source files
webapp:libs - Builds the JAR [api:libs]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apiImpl/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160326Z" creationid="huanghaohang" creationdate="20190617T160326Z">
        <seg>apiImpl/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>appDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145901Z" creationid="huanghaohang" creationdate="20180415T145901Z">
        <seg>appDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>appDirName &lt;s9&gt;'src/main/app'&lt;/s9&gt;  &lt;s10&gt;// use application metadata found in this folder&lt;/s10&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142955Z" creationid="huanghaohang" creationdate="20180416T142955Z">
        <seg>appDirName &lt;s9&gt;'src/main/app'&lt;/s9&gt;  &lt;s10&gt;// use application metadata found in this folder&lt;/s10&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>append</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093248Z" creationid="huanghaohang" creationdate="20180715T093248Z">
        <seg>append</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>append = false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093222Z" creationid="huanghaohang" creationdate="20180715T093222Z">
        <seg>append = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>appendix</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233148Z" creationid="huanghaohang" creationdate="20171206T233148Z">
        <seg>appendix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>appendix = &lt;s3&gt;'wrapper'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232559Z" creationid="huanghaohang" creationdate="20171206T232559Z">
        <seg>appendix = &lt;s3&gt;'wrapper'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T013853Z" creationid="huanghaohang" creationdate="20180206T013853Z">
        <seg>application</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093827Z" creationid="huanghaohang" creationdate="20180715T093827Z">
        <seg>application/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>applicationDefaultJvmArgs = [&lt;s0&gt;"-Dgreeting.language=en"&lt;/s0&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T134916Z" creationid="95" creationdate="20190131T134916Z">
        <seg>applicationDefaultJvmArgs = [&lt;s0&gt;"-Dgreeting.language=en"&lt;/s0&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>applicationName = &lt;s17&gt;"customear"&lt;/s17&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142959Z" creationid="huanghaohang" creationdate="20180416T142959Z">
        <seg>applicationName = &lt;s17&gt;"customear"&lt;/s17&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T013851Z" creationid="huanghaohang" creationdate="20180206T013851Z">
        <seg>application_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application_plugin.html#N147B2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070457Z" creationid="huanghaohang" creationdate="20190205T070457Z">
        <seg>application_plugin.html#N147B2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application_plugin.html#N147FF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070458Z" creationid="huanghaohang" creationdate="20190205T070458Z">
        <seg>application_plugin.html#N147FF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application_plugin.html#N14892</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070459Z" creationid="huanghaohang" creationdate="20190205T070459Z">
        <seg>application_plugin.html#N14892</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>application_plugin.html#application_distribution_resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070501Z" creationid="huanghaohang" creationdate="20190205T070501Z">
        <seg>application_plugin.html#application_distribution_resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply from: &lt;s0&gt;'other.gradle'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145336Z" creationid="huanghaohang" creationdate="20170918T145336Z">
        <seg>apply from: &lt;s0&gt;'other.gradle'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply from: &lt;s3&gt;'other.gradle'&lt;/s3&gt;, to: pos</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150052Z" creationid="huanghaohang" creationdate="20170918T150052Z">
        <seg>apply from: &lt;s3&gt;'other.gradle'&lt;/s3&gt;, to: pos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: 'compare-gradle-builds'</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140049Z" creationid="huanghaohang" creationdate="20210515T140049Z">
        <seg>apply plugin: 'compare-gradle-builds'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: 'compare-gradle-builds'

compareGradleBuilds {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140515Z" creationid="huanghaohang" creationdate="20210515T140515Z">
        <seg>apply plugin: 'compare-gradle-builds'

compareGradleBuilds {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: 'groovy'
dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T133916Z" creationid="huanghaohang" creationdate="20191201T133916Z">
        <seg>apply plugin: 'groovy'
dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"application"&lt;/s0&gt;
apply plugin: &lt;s1&gt;"jacoco"&lt;/s1&gt;

mainClassName = &lt;s2&gt;"org.gradle.MyMain"&lt;/s2&gt;

jacoco {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093756Z" creationid="huanghaohang" creationdate="20180715T093756Z">
        <seg>apply plugin: &lt;s0&gt;"application"&lt;/s0&gt;
apply plugin: &lt;s1&gt;"jacoco"&lt;/s1&gt;

mainClassName = &lt;s2&gt;"org.gradle.MyMain"&lt;/s2&gt;

jacoco {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"c"&lt;/s0&gt;
apply plugin: &lt;s1&gt;"cunit"&lt;/s1&gt;

model {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090221Z" creationid="huanghaohang" creationdate="20190611T090221Z">
        <seg>apply plugin: &lt;s0&gt;"c"&lt;/s0&gt;
apply plugin: &lt;s1&gt;"cunit"&lt;/s1&gt;

model {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"jacoco"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133846Z" creationid="huanghaohang" creationdate="20180712T133846Z">
        <seg>apply plugin: &lt;s0&gt;"jacoco"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"java"&lt;/s0&gt;

ext {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133529Z" creationid="huanghaohang" creationdate="20170913T133529Z">
        <seg>apply plugin: &lt;s0&gt;"java"&lt;/s0&gt;

ext {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"sonar"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100052Z" creationid="huanghaohang" creationdate="20180715T100052Z">
        <seg>apply plugin: &lt;s0&gt;"sonar"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"sonar"&lt;/s0&gt;

sonar {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152256Z" creationid="huanghaohang" creationdate="20180811T152256Z">
        <seg>apply plugin: &lt;s0&gt;"sonar"&lt;/s0&gt;

sonar {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;"sonar-runner"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T015434Z" creationid="huanghaohang" creationdate="20181202T015434Z">
        <seg>apply plugin: &lt;s0&gt;"sonar-runner"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'announce'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T091925Z" creationid="huanghaohang" creationdate="20190124T091925Z">
        <seg>apply plugin: &lt;s0&gt;'announce'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'antlr'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013447Z" creationid="huanghaohang" creationdate="20190123T013447Z">
        <seg>apply plugin: &lt;s0&gt;'antlr'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'assembler'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051851Z" creationid="huanghaohang" creationdate="20190609T051851Z">
        <seg>apply plugin: &lt;s0&gt;'assembler'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'build-announcements'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092634Z" creationid="huanghaohang" creationdate="20190124T092634Z">
        <seg>apply plugin: &lt;s0&gt;'build-announcements'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'build-announcements'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092802Z" creationid="huanghaohang" creationdate="20190124T092802Z">
        <seg>apply plugin: &lt;s0&gt;'build-announcements'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'build-dashboard'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T233137Z" creationid="95" creationdate="20190201T233137Z">
        <seg>apply plugin: &lt;s0&gt;'build-dashboard'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'c'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051333Z" creationid="huanghaohang" creationdate="20190609T051333Z">
        <seg>apply plugin: &lt;s0&gt;'c'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'checkstyle'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180424T134707Z" creationid="huanghaohang" creationdate="20180424T134707Z">
        <seg>apply plugin: &lt;s0&gt;'checkstyle'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'codenarc'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141758Z" creationid="huanghaohang" creationdate="20180516T141758Z">
        <seg>apply plugin: &lt;s0&gt;'codenarc'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'cpp'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T042715Z" creationid="huanghaohang" creationdate="20190609T042715Z">
        <seg>apply plugin: &lt;s0&gt;'cpp'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'distribution'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T093714Z" creationid="huanghaohang" creationdate="20190124T093714Z">
        <seg>apply plugin: &lt;s0&gt;'distribution'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'distribution'&lt;/s0&gt;

distributions {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061243Z" creationid="huanghaohang" creationdate="20190128T061243Z">
        <seg>apply plugin: &lt;s0&gt;'distribution'&lt;/s0&gt;

distributions {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'distribution'&lt;/s0&gt;

version = &lt;s1&gt;'1.2'&lt;/s1&gt;
distributions {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134032Z" creationid="huanghaohang" creationdate="20190127T134032Z">
        <seg>apply plugin: &lt;s0&gt;'distribution'&lt;/s0&gt;

version = &lt;s1&gt;'1.2'&lt;/s1&gt;
distributions {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'ear'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145017Z" creationid="huanghaohang" creationdate="20180415T145017Z">
        <seg>apply plugin: &lt;s0&gt;'ear'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'ear'&lt;/s0&gt;
apply plugin: &lt;s1&gt;'java'&lt;/s1&gt;

repositories { mavenCentral() }

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142950Z" creationid="huanghaohang" creationdate="20180416T142950Z">
        <seg>apply plugin: &lt;s0&gt;'ear'&lt;/s0&gt;
apply plugin: &lt;s1&gt;'java'&lt;/s1&gt;

repositories { mavenCentral() }

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'eclipse'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153832Z" creationid="95" creationdate="20170731T153832Z">
        <seg>apply plugin: &lt;s0&gt;'eclipse'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'eclipse'&lt;/s0&gt;
apply plugin: &lt;s1&gt;'groovy'&lt;/s1&gt;

repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002848Z" creationid="huanghaohang" creationdate="20170909T002848Z">
        <seg>apply plugin: &lt;s0&gt;'eclipse'&lt;/s0&gt;
apply plugin: &lt;s1&gt;'groovy'&lt;/s1&gt;

repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'eclipse-wtp'&lt;/s0&gt;

eclipse.wtp.facet.file.withXml { provider -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085531Z" creationid="huanghaohang" creationdate="20181210T085531Z">
        <seg>apply plugin: &lt;s0&gt;'eclipse-wtp'&lt;/s0&gt;

eclipse.wtp.facet.file.withXml { provider -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'findbugs'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142240Z" creationid="huanghaohang" creationdate="20180516T142240Z">
        <seg>apply plugin: &lt;s0&gt;'findbugs'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'groovy'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T001700Z" creationid="huanghaohang" creationdate="20170909T001700Z">
        <seg>apply plugin: &lt;s0&gt;'groovy'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'groovy'&lt;/s0&gt;

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122927Z" creationid="huanghaohang" creationdate="20190706T122927Z">
        <seg>apply plugin: &lt;s0&gt;'groovy'&lt;/s0&gt;

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'idea'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T031107Z" creationid="huanghaohang" creationdate="20181212T031107Z">
        <seg>apply plugin: &lt;s0&gt;'idea'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'ivy-publish'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155544Z" creationid="huanghaohang" creationdate="20210516T155544Z">
        <seg>apply plugin: &lt;s0&gt;'ivy-publish'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T012452Z" creationid="95" creationdate="20170730T012452Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

compileJava.destinationDir = file(&lt;s1&gt;"$buildDir/output/classes"&lt;/s1&gt;)

task show &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022555Z" creationid="huanghaohang" creationdate="20180131T022555Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

compileJava.destinationDir = file(&lt;s1&gt;"$buildDir/output/classes"&lt;/s1&gt;)

task show &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170908T013229Z" creationid="haohang" creationdate="20170908T013229Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

sourceSets.main.output.classesDir = file(&lt;s1&gt;"$buildDir/output/classes"&lt;/s1&gt;)

task show &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T024638Z" creationid="huanghaohang" creationdate="20180131T024638Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

sourceSets.main.output.classesDir = file(&lt;s1&gt;"$buildDir/output/classes"&lt;/s1&gt;)

task show &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

task show &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100201Z" creationid="huanghaohang" creationdate="20180130T100201Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

task show &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

task zip(type: Zip) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135306Z" creationid="huanghaohang" creationdate="20171126T135306Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

task zip(type: Zip) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

version = &lt;s1&gt;1.0&lt;/s1&gt;

task myZip(type: Zip) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140715Z" creationid="huanghaohang" creationdate="20171126T140715Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;

version = &lt;s1&gt;1.0&lt;/s1&gt;

task myZip(type: Zip) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;
apply plugin: &lt;s1&gt;'eclipse'&lt;/s1&gt;

sourceCompatibility = &lt;s2&gt;1.5&lt;/s2&gt;
version = &lt;s3&gt;'1.0'&lt;/s3&gt;
jar {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154051Z" creationid="95" creationdate="20170731T154051Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;
apply plugin: &lt;s1&gt;'eclipse'&lt;/s1&gt;

sourceCompatibility = &lt;s2&gt;1.5&lt;/s2&gt;
version = &lt;s3&gt;'1.0'&lt;/s3&gt;
jar {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;
archivesBaseName = &lt;s1&gt;'gradle'&lt;/s1&gt;
version = &lt;s2&gt;1.0&lt;/s2&gt;

task myZip(type: Zip) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232558Z" creationid="huanghaohang" creationdate="20171206T232558Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;
archivesBaseName = &lt;s1&gt;'gradle'&lt;/s1&gt;
version = &lt;s2&gt;1.0&lt;/s2&gt;

task myZip(type: Zip) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;
version = &lt;s1&gt;1.0&lt;/s1&gt;

task myZip(type: Zip) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232531Z" creationid="huanghaohang" creationdate="20171206T232531Z">
        <seg>apply plugin: &lt;s0&gt;'java'&lt;/s0&gt;
version = &lt;s1&gt;1.0&lt;/s1&gt;

task myZip(type: Zip) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'java-library-distribution'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T141616Z" creationid="95" creationdate="20190131T141616Z">
        <seg>apply plugin: &lt;s0&gt;'java-library-distribution'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'jdepend'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142628Z" creationid="huanghaohang" creationdate="20180516T142628Z">
        <seg>apply plugin: &lt;s0&gt;'jdepend'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'jetty'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T005600Z" creationid="huanghaohang" creationdate="20170909T005600Z">
        <seg>apply plugin: &lt;s0&gt;'jetty'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'maven'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091212Z" creationid="huanghaohang" creationdate="20190606T091212Z">
        <seg>apply plugin: &lt;s0&gt;'maven'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'maven'&lt;/s0&gt;

uploadArchives {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051003Z" creationid="huanghaohang" creationdate="20170908T051003Z">
        <seg>apply plugin: &lt;s0&gt;'maven'&lt;/s0&gt;

uploadArchives {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'objective-c'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052322Z" creationid="huanghaohang" creationdate="20190609T052322Z">
        <seg>apply plugin: &lt;s0&gt;'objective-c'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'objective-cpp'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T052545Z" creationid="huanghaohang" creationdate="20190609T052545Z">
        <seg>apply plugin: &lt;s0&gt;'objective-cpp'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'osgi'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025907Z" creationid="huanghaohang" creationdate="20181203T025907Z">
        <seg>apply plugin: &lt;s0&gt;'osgi'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'pmd'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143134Z" creationid="huanghaohang" creationdate="20180516T143134Z">
        <seg>apply plugin: &lt;s0&gt;'pmd'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'project-report'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T035956Z" creationid="huanghaohang" creationdate="20190123T035956Z">
        <seg>apply plugin: &lt;s0&gt;'project-report'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'scala'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010157Z" creationid="huanghaohang" creationdate="20180407T010157Z">
        <seg>apply plugin: &lt;s0&gt;'scala'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'signing'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130431Z" creationid="huanghaohang" creationdate="20190608T130431Z">
        <seg>apply plugin: &lt;s0&gt;'signing'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'war'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004620Z" creationid="huanghaohang" creationdate="20170909T004620Z">
        <seg>apply plugin: &lt;s0&gt;'war'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s0&gt;'windows-resources'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012936Z" creationid="huanghaohang" creationdate="20190610T012936Z">
        <seg>apply plugin: &lt;s0&gt;'windows-resources'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s1&gt;"cpp"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023018Z" creationid="huanghaohang" creationdate="20190610T023018Z">
        <seg>apply plugin: &lt;s1&gt;"cpp"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s1&gt;'eclipse-wtp'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124424Z" creationid="95" creationdate="20170803T124424Z">
        <seg>apply plugin: &lt;s1&gt;'eclipse-wtp'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s3&gt;'war'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150907Z" creationid="huanghaohang" creationdate="20190617T150907Z">
        <seg>apply plugin: &lt;s3&gt;'war'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: &lt;s6&gt;"cpp"&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023035Z" creationid="huanghaohang" creationdate="20190610T023035Z">
        <seg>apply plugin: &lt;s6&gt;"cpp"&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: DocumentationPlugin

books {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130954Z" creationid="huanghaohang" creationdate="20190728T130954Z">
        <seg>apply plugin: DocumentationPlugin

books {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: GreetingPlugin

&lt;s0&gt;class&lt;/s0&gt; GreetingPlugin &lt;s1&gt;implements&lt;/s1&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150921Z" creationid="huanghaohang" creationdate="20190719T150921Z">
        <seg>apply plugin: GreetingPlugin

&lt;s0&gt;class&lt;/s0&gt; GreetingPlugin &lt;s1&gt;implements&lt;/s1&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: GreetingPlugin

greeting {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151629Z" creationid="huanghaohang" creationdate="20190726T151629Z">
        <seg>apply plugin: GreetingPlugin

greeting {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: GreetingPlugin

greeting.message = &lt;s0&gt;'Hi from Gradle'&lt;/s0&gt;

&lt;s1&gt;class&lt;/s1&gt; GreetingPlugin &lt;s2&gt;implements&lt;/s2&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155820Z" creationid="huanghaohang" creationdate="20190719T155820Z">
        <seg>apply plugin: GreetingPlugin

greeting.message = &lt;s0&gt;'Hi from Gradle'&lt;/s0&gt;

&lt;s1&gt;class&lt;/s1&gt; GreetingPlugin &lt;s2&gt;implements&lt;/s2&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: JavaPlugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093314Z" creationid="huanghaohang" creationdate="20180130T093314Z">
        <seg>apply plugin: JavaPlugin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin: org.gradle.api.plugins.JavaPlugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093210Z" creationid="huanghaohang" creationdate="20180130T093210Z">
        <seg>apply plugin: org.gradle.api.plugins.JavaPlugin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin:&lt;s0&gt;'application'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233616Z" creationid="95" creationdate="20190130T233616Z">
        <seg>apply plugin:&lt;s0&gt;'application'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply plugin:EnterpriseRepositoryPlugin

&lt;s0&gt;class&lt;/s0&gt; EnterpriseRepositoryPlugin &lt;s1&gt;implements&lt;/s1&gt; Plugin&lt;Gradle&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151215Z" creationid="huanghaohang" creationdate="20191206T151215Z">
        <seg>apply plugin:EnterpriseRepositoryPlugin

&lt;s0&gt;class&lt;/s0&gt; EnterpriseRepositoryPlugin &lt;s1&gt;implements&lt;/s1&gt; Plugin&lt;Gradle&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport){</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093757Z" creationid="huanghaohang" creationdate="20180715T093757Z">
        <seg>applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport){</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>architecture &lt;s1&gt;"x86"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045621Z" creationid="huanghaohang" creationdate="20190610T045621Z">
        <seg>architecture &lt;s1&gt;"x86"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>architecture &lt;s3&gt;"x86_64"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045623Z" creationid="huanghaohang" creationdate="20190610T045623Z">
        <seg>architecture &lt;s3&gt;"x86_64"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>architecture &lt;s4&gt;"arm"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025009Z" creationid="huanghaohang" creationdate="20190611T025009Z">
        <seg>architecture &lt;s4&gt;"arm"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>architecture &lt;s4&gt;"ia-64"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045631Z" creationid="huanghaohang" creationdate="20190610T045631Z">
        <seg>architecture &lt;s4&gt;"ia-64"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>architecture &lt;s5&gt;"sparc"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025011Z" creationid="huanghaohang" creationdate="20190611T025011Z">
        <seg>architecture &lt;s5&gt;"sparc"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archiveName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232629Z" creationid="huanghaohang" creationdate="20171206T232629Z">
        <seg>archiveName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archivePath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232803Z" creationid="huanghaohang" creationdate="20171206T232803Z">
        <seg>archivePath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archiveTask.extension</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094954Z" creationid="huanghaohang" creationdate="20190607T094954Z">
        <seg>archiveTask.extension</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053852Z" creationid="haohang" creationdate="20180313T053852Z">
        <seg>archives</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archives dist
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125724Z" creationid="95" creationdate="20170803T125724Z">
        <seg>archives dist
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archives file: generate.destFile, name: &lt;s1&gt;'my-artifact'&lt;/s1&gt;, type: &lt;s2&gt;'text'&lt;/s2&gt;, builtBy: generate
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075758Z" creationid="huanghaohang" creationdate="20190606T075758Z">
        <seg>archives file: generate.destFile, name: &lt;s1&gt;'my-artifact'&lt;/s1&gt;, type: &lt;s2&gt;'text'&lt;/s2&gt;, builtBy: generate
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archives myJar
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075219Z" creationid="huanghaohang" creationdate="20190606T075219Z">
        <seg>archives myJar
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archives someFile
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075443Z" creationid="huanghaohang" creationdate="20190606T075443Z">
        <seg>archives someFile
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archives(myTask.destFile) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075537Z" creationid="huanghaohang" creationdate="20190606T075537Z">
        <seg>archives(myTask.destFile) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>archivesBaseName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T005946Z" creationid="huanghaohang" creationdate="20180318T005946Z">
        <seg>archivesBaseName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>args &lt;&lt; &lt;s0&gt;"-DFRENCH"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093523Z" creationid="huanghaohang" creationdate="20190610T093523Z">
        <seg>args &lt;&lt; &lt;s0&gt;"-DFRENCH"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>args &lt;&lt; &lt;s1&gt;"-m32"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025005Z" creationid="huanghaohang" creationdate="20190611T025005Z">
        <seg>args &lt;&lt; &lt;s1&gt;"-m32"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>args &lt;&lt; &lt;s2&gt;"-m32"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025006Z" creationid="huanghaohang" creationdate="20190611T025006Z">
        <seg>args &lt;&lt; &lt;s2&gt;"-m32"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>args.remove &lt;s3&gt;"CUSTOM"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093531Z" creationid="huanghaohang" creationdate="20190610T093531Z">
        <seg>args.remove &lt;s3&gt;"CUSTOM"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>args.remove &lt;s4&gt;"CUSTOM"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093533Z" creationid="huanghaohang" creationdate="20190610T093533Z">
        <seg>args.remove &lt;s4&gt;"CUSTOM"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>arm {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025008Z" creationid="huanghaohang" creationdate="20190611T025008Z">
        <seg>arm {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact &lt;s2&gt;"3rd-party-artifacts/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T024711Z" creationid="huanghaohang" creationdate="20190604T024711Z">
        <seg>artifact &lt;s2&gt;"3rd-party-artifacts/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact &lt;s2&gt;"[module]/[revision]/[type]/[artifact].[ext]"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T023843Z" creationid="huanghaohang" creationdate="20190604T023843Z">
        <seg>artifact &lt;s2&gt;"[module]/[revision]/[type]/[artifact].[ext]"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact &lt;s2&gt;"[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025122Z" creationid="huanghaohang" creationdate="20190604T025122Z">
        <seg>artifact &lt;s2&gt;"[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact &lt;s3&gt;"company-artifacts/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T024712Z" creationid="huanghaohang" creationdate="20190604T024712Z">
        <seg>artifact &lt;s3&gt;"company-artifacts/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact.name == &lt;s2&gt;'api'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084750Z" creationid="huanghaohang" creationdate="20190608T084750Z">
        <seg>artifact.name == &lt;s2&gt;'api'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact.name == &lt;s4&gt;'service'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084751Z" creationid="huanghaohang" creationdate="20190608T084751Z">
        <seg>artifact.name == &lt;s4&gt;'service'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifactId</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094948Z" creationid="huanghaohang" creationdate="20190607T094948Z">
        <seg>artifactId</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifactPattern &lt;s1&gt;"$projectDir/repo/[organisation]/[module]-[revision](-[classifier]).[ext]"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030438Z" creationid="huanghaohang" creationdate="20190604T030438Z">
        <seg>artifactPattern &lt;s1&gt;"$projectDir/repo/[organisation]/[module]-[revision](-[classifier]).[ext]"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifactUrls &lt;s3&gt;"http://repo.mycompany.com/jars"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033845Z" creationid="huanghaohang" creationdate="20190603T033845Z">
        <seg>artifactUrls &lt;s3&gt;"http://repo.mycompany.com/jars"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifactUrls &lt;s4&gt;"http://repo.mycompany.com/jars2"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033846Z" creationid="huanghaohang" creationdate="20190603T033846Z">
        <seg>artifactUrls &lt;s4&gt;"http://repo.mycompany.com/jars2"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080751Z" creationid="95" creationdate="20170723T080751Z">
        <seg>artifact_dependencies_tutorial.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#N1056B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233619Z" creationid="huanghaohang" creationdate="20171206T233619Z">
        <seg>artifact_dependencies_tutorial.html#N1056B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#N10589</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233629Z" creationid="huanghaohang" creationdate="20171206T233629Z">
        <seg>artifact_dependencies_tutorial.html#N10589</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#N105C9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233658Z" creationid="huanghaohang" creationdate="20171206T233658Z">
        <seg>artifact_dependencies_tutorial.html#N105C9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#N1060B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233708Z" creationid="huanghaohang" creationdate="20171206T233708Z">
        <seg>artifact_dependencies_tutorial.html#N1060B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#N10653</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233731Z" creationid="huanghaohang" creationdate="20171206T233731Z">
        <seg>artifact_dependencies_tutorial.html#N10653</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#N10691</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233740Z" creationid="huanghaohang" creationdate="20171206T233740Z">
        <seg>artifact_dependencies_tutorial.html#N10691</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_dependencies_tutorial.html#configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233650Z" creationid="huanghaohang" creationdate="20171206T233650Z">
        <seg>artifact_dependencies_tutorial.html#configurations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_management.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051025Z" creationid="huanghaohang" creationdate="20170908T051025Z">
        <seg>artifact_management.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_management.html#N153C3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091856Z" creationid="huanghaohang" creationdate="20190608T091856Z">
        <seg>artifact_management.html#N153C3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_management.html#N153EC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091905Z" creationid="huanghaohang" creationdate="20190608T091905Z">
        <seg>artifact_management.html#N153EC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_management.html#N1542A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091940Z" creationid="huanghaohang" creationdate="20190608T091940Z">
        <seg>artifact_management.html#N1542A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_management.html#artifacts_and_configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T091859Z" creationid="huanghaohang" creationdate="20190608T091859Z">
        <seg>artifact_management.html#artifacts_and_configurations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifact_management.html#project_libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T072225Z" creationid="huanghaohang" creationdate="20190606T072225Z">
        <seg>artifact_management.html#project_libraries</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>artifacts {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162743Z" creationid="huanghaohang" creationdate="20190617T162743Z">
        <seg>artifacts {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assemble</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014424Z" creationid="95" creationdate="20170730T014424Z">
        <seg>assemble</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assembler</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T142913Z" creationid="huanghaohang" creationdate="20180205T142913Z">
        <seg>assembler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assembler.args &lt;s1&gt;"/Zi"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012144Z" creationid="huanghaohang" creationdate="20190610T012144Z">
        <seg>assembler.args &lt;s1&gt;"/Zi"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assembler.args &lt;s3&gt;"-g"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012150Z" creationid="huanghaohang" creationdate="20190610T012150Z">
        <seg>assembler.args &lt;s3&gt;"-g"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assert delegate == project.dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153238Z" creationid="huanghaohang" creationdate="20170914T153238Z">
        <seg>assert delegate == project.dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assertTrue(project.tasks.hello &lt;s5&gt;instanceof&lt;/s5&gt; GreetingTask)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130853Z" creationid="huanghaohang" creationdate="20190728T130853Z">
        <seg>assertTrue(project.tasks.hello &lt;s5&gt;instanceof&lt;/s5&gt; GreetingTask)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>assertTrue(task &lt;s5&gt;instanceof&lt;/s5&gt; GreetingTask)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124013Z" creationid="huanghaohang" creationdate="20190706T124013Z">
        <seg>assertTrue(task &lt;s5&gt;instanceof&lt;/s5&gt; GreetingTask)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>attributes &lt;s2&gt;'Implementation-Title'&lt;/s2&gt;: &lt;s3&gt;'Gradle Quickstart'&lt;/s3&gt;, &lt;s4&gt;'Implementation-Version'&lt;/s4&gt;: version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132607Z" creationid="95" creationdate="20170730T132607Z">
        <seg>attributes &lt;s2&gt;'Implementation-Title'&lt;/s2&gt;: &lt;s3&gt;'Gradle Quickstart'&lt;/s3&gt;, &lt;s4&gt;'Implementation-Version'&lt;/s4&gt;: version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>attributes &lt;s4&gt;'Implementation-Title'&lt;/s4&gt;: &lt;s5&gt;'Gradle Quickstart'&lt;/s5&gt;, &lt;s6&gt;'Implementation-Version'&lt;/s6&gt;: version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154055Z" creationid="95" creationdate="20170731T154055Z">
        <seg>attributes &lt;s4&gt;'Implementation-Title'&lt;/s4&gt;: &lt;s5&gt;'Gradle Quickstart'&lt;/s5&gt;, &lt;s6&gt;'Implementation-Version'&lt;/s6&gt;: version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>attributes key1: &lt;s0&gt;'value1'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111941Z" creationid="huanghaohang" creationdate="20180406T111941Z">
        <seg>attributes key1: &lt;s0&gt;'value1'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>attributes(&lt;s0&gt;"Implementation-Title"&lt;/s0&gt;: &lt;s1&gt;"Gradle"&lt;/s1&gt;, &lt;s2&gt;"Implementation-Version"&lt;/s2&gt;: version)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111449Z" creationid="huanghaohang" creationdate="20180406T111449Z">
        <seg>attributes(&lt;s0&gt;"Implementation-Title"&lt;/s0&gt;: &lt;s1&gt;"Gradle"&lt;/s1&gt;, &lt;s2&gt;"Implementation-Version"&lt;/s2&gt;: version)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>attributes(&lt;s0&gt;"Implementation-Title"&lt;/s0&gt;: &lt;s1&gt;"Gradle"&lt;/s1&gt;, &lt;s2&gt;"Implementation-Version"&lt;/s2&gt;: version)
}
task fooJar(type: Jar) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111609Z" creationid="huanghaohang" creationdate="20180406T111609Z">
        <seg>attributes(&lt;s0&gt;"Implementation-Title"&lt;/s0&gt;: &lt;s1&gt;"Gradle"&lt;/s1&gt;, &lt;s2&gt;"Implementation-Version"&lt;/s2&gt;: version)
}
task fooJar(type: Jar) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>authentication</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093645Z" creationid="huanghaohang" creationdate="20190607T093645Z">
        <seg>authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>authentication(userName: &lt;s2&gt;"me"&lt;/s2&gt;, password: &lt;s3&gt;"myPassword"&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092648Z" creationid="huanghaohang" creationdate="20190607T092648Z">
        <seg>authentication(userName: &lt;s2&gt;"me"&lt;/s2&gt;, password: &lt;s3&gt;"myPassword"&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>auto-generated</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093254Z" creationid="huanghaohang" creationdate="20180715T093254Z">
        <seg>auto-generated</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>base</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090001Z" creationid="huanghaohang" creationdate="20180211T090001Z">
        <seg>base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>base.css</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072245Z" creationid="haohang" creationdate="20170720T072245Z">
        <seg>base.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>baseName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233116Z" creationid="huanghaohang" creationdate="20171206T233116Z">
        <seg>baseName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>baseName = &lt;s0&gt;"stuff"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135235Z" creationid="huanghaohang" creationdate="20190608T135235Z">
        <seg>baseName = &lt;s0&gt;"stuff"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>baseName = &lt;s0&gt;'my-name'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143519Z" creationid="95" creationdate="20190131T143519Z">
        <seg>baseName = &lt;s0&gt;'my-name'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>baseName = &lt;s1&gt;'someName'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061244Z" creationid="huanghaohang" creationdate="20190128T061244Z">
        <seg>baseName = &lt;s1&gt;'someName'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>baseName = &lt;s3&gt;'customName'&lt;/s3&gt;
}

println myZip.archiveName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232534Z" creationid="huanghaohang" creationdate="20171206T232534Z">
        <seg>baseName = &lt;s3&gt;'customName'&lt;/s3&gt;
}

println myZip.archiveName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>baseName = &lt;s5&gt;'api-spi'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162740Z" creationid="huanghaohang" creationdate="20190617T162740Z">
        <seg>baseName = &lt;s5&gt;'api-spi'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>beforeDeployment { MavenDeployment deployment -&gt; signing.signPom(deployment) }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T010836Z" creationid="huanghaohang" creationdate="20190609T010836Z">
        <seg>beforeDeployment { MavenDeployment deployment -&gt; signing.signPom(deployment) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>beforeMerged { classpath -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084114Z" creationid="huanghaohang" creationdate="20181210T084114Z">
        <seg>beforeMerged { classpath -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>beforeMerged { module -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012638Z" creationid="huanghaohang" creationdate="20190123T012638Z">
        <seg>beforeMerged { module -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>beforeMerged { project -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012757Z" creationid="huanghaohang" creationdate="20190123T012757Z">
        <seg>beforeMerged { project -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>beginIndex = &lt;s2&gt;1&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145822Z" creationid="huanghaohang" creationdate="20170918T145822Z">
        <seg>beginIndex = &lt;s2&gt;1&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>binaries.all {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053253Z" creationid="huanghaohang" creationdate="20190609T053253Z">
        <seg>binaries.all {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>binaries.withType(SharedLibraryBinary) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012519Z" creationid="huanghaohang" creationdate="20190610T012519Z">
        <seg>binaries.withType(SharedLibraryBinary) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>binaries.withType(StaticLibraryBinary) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090226Z" creationid="huanghaohang" creationdate="20190611T090226Z">
        <seg>binaries.withType(StaticLibraryBinary) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>binaries.withType(TestSuiteExecutableBinary) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T061716Z" creationid="huanghaohang" creationdate="20190611T061716Z">
        <seg>binaries.withType(TestSuiteExecutableBinary) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>bluewhale/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154425Z" creationid="huanghaohang" creationdate="20190614T154425Z">
        <seg>bluewhale/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>bluewhale/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143017Z" creationid="huanghaohang" creationdate="20190615T143017Z">
        <seg>bluewhale/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>books.all {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131001Z" creationid="huanghaohang" creationdate="20190728T131001Z">
        <seg>books.all {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>books.each { book -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130958Z" creationid="huanghaohang" creationdate="20190728T130958Z">
        <seg>books.each { book -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035013Z" creationid="haohang" creationdate="20180313T035013Z">
        <seg>build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build-announcements</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144201Z" creationid="huanghaohang" creationdate="20180207T144201Z">
        <seg>build-announcements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build-dashboard</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090155Z" creationid="huanghaohang" creationdate="20180211T090155Z">
        <seg>build-dashboard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build-init</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090212Z" creationid="huanghaohang" creationdate="20180211T090212Z">
        <seg>build-init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build-resource-only-dll.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013423Z" creationid="huanghaohang" creationdate="20190610T013423Z">
        <seg>build-resource-only-dll.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144943Z" creationid="95" creationdate="20170724T144943Z">
        <seg>build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build.xml</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084608Z" creationid="huanghaohang" creationdate="20180105T084608Z">
        <seg>build.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093828Z" creationid="huanghaohang" creationdate="20180715T093828Z">
        <seg>build/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build&lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035545Z" creationid="haohang" creationdate="20180313T035545Z">
        <seg>build&lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190202T153731Z" creationid="95" creationdate="20190202T153731Z">
        <seg>buildDashboard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090154Z" creationid="huanghaohang" creationdate="20180211T090154Z">
        <seg>buildDashboard_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard_plugin.html#N14AF3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070641Z" creationid="huanghaohang" creationdate="20190205T070641Z">
        <seg>buildDashboard_plugin.html#N14AF3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard_plugin.html#N14B1D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070643Z" creationid="huanghaohang" creationdate="20190205T070643Z">
        <seg>buildDashboard_plugin.html#N14B1D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard_plugin.html#N14B48</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070644Z" creationid="huanghaohang" creationdate="20190205T070644Z">
        <seg>buildDashboard_plugin.html#N14B48</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard_plugin.html#N14B4D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070645Z" creationid="huanghaohang" creationdate="20190205T070645Z">
        <seg>buildDashboard_plugin.html#N14B4D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDashboard_plugin.html#N14B52</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070647Z" creationid="huanghaohang" creationdate="20190205T070647Z">
        <seg>buildDashboard_plugin.html#N14B52</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDependents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035423Z" creationid="haohang" creationdate="20180313T035423Z">
        <seg>buildDependents</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132221Z" creationid="huanghaohang" creationdate="20170913T132221Z">
        <seg>buildDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildFile = &lt;s0&gt;'other.gradle'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135705Z" creationid="huanghaohang" creationdate="20191201T135705Z">
        <seg>buildFile = &lt;s0&gt;'other.gradle'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildNeeded</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035132Z" creationid="haohang" creationdate="20180313T035132Z">
        <seg>buildNeeded</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildSrc/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T134736Z" creationid="huanghaohang" creationdate="20191201T134736Z">
        <seg>buildSrc/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildTypes {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035434Z" creationid="huanghaohang" creationdate="20190610T035434Z">
        <seg>buildTypes {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_announcements_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144200Z" creationid="huanghaohang" creationdate="20180207T144200Z">
        <seg>build_announcements_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_announcements_plugin.html#N14622</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070442Z" creationid="huanghaohang" creationdate="20190205T070442Z">
        <seg>build_announcements_plugin.html#N14622</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_environment.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T133208Z" creationid="huanghaohang" creationdate="20180108T133208Z">
        <seg>build_environment.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_environment.html#sec:accessing_the_web_via_a_proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034142Z" creationid="huanghaohang" creationdate="20180517T034142Z">
        <seg>build_environment.html#sec:accessing_the_web_via_a_proxy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_environment.html#sec:gradle_configuration_properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180120T025018Z" creationid="huanghaohang" creationdate="20180120T025018Z">
        <seg>build_environment.html#sec:gradle_configuration_properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_init_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090211Z" creationid="huanghaohang" creationdate="20180211T090211Z">
        <seg>build_init_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_init_plugin.html#N14979</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070536Z" creationid="huanghaohang" creationdate="20190205T070536Z">
        <seg>build_init_plugin.html#N14979</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_init_plugin.html#N149BF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070538Z" creationid="huanghaohang" creationdate="20190205T070538Z">
        <seg>build_init_plugin.html#N149BF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_init_plugin.html#N149E2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070600Z" creationid="huanghaohang" creationdate="20190205T070600Z">
        <seg>build_init_plugin.html#N149E2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T024253Z" creationid="95" creationdate="20170729T024253Z">
        <seg>build_lifecycle.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html#build_lifecycle_events</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144044Z" creationid="huanghaohang" creationdate="20180107T144044Z">
        <seg>build_lifecycle.html#build_lifecycle_events</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html#sec:build_phases</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T151731Z" creationid="huanghaohang" creationdate="20190614T151731Z">
        <seg>build_lifecycle.html#sec:build_phases</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html#sec:configuration_and_execution_of_a_single_project_build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144833Z" creationid="huanghaohang" creationdate="20190708T144833Z">
        <seg>build_lifecycle.html#sec:configuration_and_execution_of_a_single_project_build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html#sec:initialization</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144831Z" creationid="huanghaohang" creationdate="20190708T144831Z">
        <seg>build_lifecycle.html#sec:initialization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html#sec:multi_project_builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144829Z" creationid="huanghaohang" creationdate="20190708T144829Z">
        <seg>build_lifecycle.html#sec:multi_project_builds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>build_lifecycle.html#sec:settings_file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144821Z" creationid="huanghaohang" creationdate="20190708T144821Z">
        <seg>build_lifecycle.html#sec:settings_file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>buildscript {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123739Z" creationid="huanghaohang" creationdate="20190706T123739Z">
        <seg>buildscript {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>builtBy &lt;s1&gt;'compile'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105522Z" creationid="huanghaohang" creationdate="20190602T105522Z">
        <seg>builtBy &lt;s1&gt;'compile'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>builtBy myTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075539Z" creationid="huanghaohang" creationdate="20190606T075539Z">
        <seg>builtBy myTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>c</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143003Z" creationid="huanghaohang" creationdate="20180205T143003Z">
        <seg>c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>c {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051619Z" creationid="huanghaohang" creationdate="20190609T051619Z">
        <seg>c {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cCompiler.args &lt;s2&gt;"/Zi"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012012Z" creationid="huanghaohang" creationdate="20190610T012012Z">
        <seg>cCompiler.args &lt;s2&gt;"/Zi"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cCompiler.define &lt;s3&gt;"DLL_EXPORT"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012013Z" creationid="huanghaohang" creationdate="20190610T012013Z">
        <seg>cCompiler.define &lt;s3&gt;"DLL_EXPORT"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cCompiler.define &lt;s3&gt;"PLUS_BROKEN"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T061720Z" creationid="huanghaohang" creationdate="20190611T061720Z">
        <seg>cCompiler.define &lt;s3&gt;"PLUS_BROKEN"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cCompiler.define &lt;s7&gt;"PLUS_BROKEN"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090231Z" creationid="huanghaohang" creationdate="20190611T090231Z">
        <seg>cCompiler.define &lt;s7&gt;"PLUS_BROKEN"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cCompiler.withArguments { args -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093527Z" creationid="huanghaohang" creationdate="20190610T093527Z">
        <seg>cCompiler.withArguments { args -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>check</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014613Z" creationid="95" creationdate="20170730T014613Z">
        <seg>check</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144400Z" creationid="huanghaohang" creationdate="20180207T144400Z">
        <seg>checkstyle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135641Z" creationid="huanghaohang" creationdate="20180516T135641Z">
        <seg>checkstyle&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyleMain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135602Z" creationid="huanghaohang" creationdate="20180516T135602Z">
        <seg>checkstyleMain</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyleTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T135624Z" creationid="huanghaohang" creationdate="20180516T135624Z">
        <seg>checkstyleTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144359Z" creationid="huanghaohang" creationdate="20180207T144359Z">
        <seg>checkstyle_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle_plugin.html#N13324</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142249Z" creationid="huanghaohang" creationdate="20181201T142249Z">
        <seg>checkstyle_plugin.html#N13324</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle_plugin.html#N13338</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142251Z" creationid="huanghaohang" creationdate="20181201T142251Z">
        <seg>checkstyle_plugin.html#N13338</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle_plugin.html#N133AB</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142252Z" creationid="huanghaohang" creationdate="20181201T142252Z">
        <seg>checkstyle_plugin.html#N133AB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle_plugin.html#N133C7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142254Z" creationid="huanghaohang" creationdate="20181201T142254Z">
        <seg>checkstyle_plugin.html#N133C7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>checkstyle_plugin.html#N133E3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142255Z" creationid="huanghaohang" creationdate="20181201T142255Z">
        <seg>checkstyle_plugin.html#N133E3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>child/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145009Z" creationid="huanghaohang" creationdate="20190817T145009Z">
        <seg>child/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>child1/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132532Z" creationid="huanghaohang" creationdate="20191201T132532Z">
        <seg>child1/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>clang(Clang)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084917Z" creationid="huanghaohang" creationdate="20190610T084917Z">
        <seg>clang(Clang)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>clang(Clang){</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093524Z" creationid="huanghaohang" creationdate="20190610T093524Z">
        <seg>clang(Clang){</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classDumpFile = file(&lt;s1&gt;"$buildDir/jacoco/classpathdumps"&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093223Z" creationid="huanghaohang" creationdate="20180715T093223Z">
        <seg>classDumpFile = file(&lt;s1&gt;"$buildDir/jacoco/classpathdumps"&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classDumpPath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093259Z" creationid="huanghaohang" creationdate="20180715T093259Z">
        <seg>classDumpPath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062405Z" creationid="haohang" creationdate="20180312T062405Z">
        <seg>classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classesDir.mkdirs()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132406Z" creationid="huanghaohang" creationdate="20170917T132406Z">
        <seg>classesDir.mkdirs()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classifier</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233212Z" creationid="huanghaohang" creationdate="20171206T233212Z">
        <seg>classifier</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classifier = &lt;s4&gt;'src'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232600Z" creationid="huanghaohang" creationdate="20171206T232600Z">
        <seg>classifier = &lt;s4&gt;'src'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classname: &lt;s4&gt;'org.apache.tools.ant.taskdefs.optional.net.FTP'&lt;/s4&gt;,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141300Z" creationid="huanghaohang" creationdate="20191202T141300Z">
        <seg>classname: &lt;s4&gt;'org.apache.tools.ant.taskdefs.optional.net.FTP'&lt;/s4&gt;,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100235Z" creationid="haohang" creationdate="20180326T100235Z">
        <seg>classpath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath = sourceSets.intTest.runtimeClasspath
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095454Z" creationid="haohang" creationdate="20180326T095454Z">
        <seg>classpath = sourceSets.intTest.runtimeClasspath
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath configurations.moreLibs &lt;s17&gt;// adds a configuration to the WEB-INF/lib dir.&lt;/s17&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143129Z" creationid="huanghaohang" creationdate="20180408T143129Z">
        <seg>classpath configurations.moreLibs &lt;s17&gt;// adds a configuration to the WEB-INF/lib dir.&lt;/s17&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath fileTree(&lt;s15&gt;'additionalLibs'&lt;/s15&gt;) &lt;s16&gt;// adds a file-set to the WEB-INF/lib dir.&lt;/s16&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143128Z" creationid="huanghaohang" creationdate="20180408T143128Z">
        <seg>classpath fileTree(&lt;s15&gt;'additionalLibs'&lt;/s15&gt;) &lt;s16&gt;// adds a file-set to the WEB-INF/lib dir.&lt;/s16&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath group: &lt;s0&gt;'commons-codec'&lt;/s0&gt;, name: &lt;s1&gt;'commons-codec'&lt;/s1&gt;, version: &lt;s2&gt;'1.2'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T140936Z" creationid="huanghaohang" creationdate="20191201T140936Z">
        <seg>classpath group: &lt;s0&gt;'commons-codec'&lt;/s0&gt;, name: &lt;s1&gt;'commons-codec'&lt;/s1&gt;, version: &lt;s2&gt;'1.2'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath group: &lt;s0&gt;'org.apache.commons'&lt;/s0&gt;, name: &lt;s1&gt;'commons-math'&lt;/s1&gt;, version: &lt;s2&gt;'2.0'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T150738Z" creationid="huanghaohang" creationdate="20191206T150738Z">
        <seg>classpath group: &lt;s0&gt;'org.apache.commons'&lt;/s0&gt;, name: &lt;s1&gt;'commons-math'&lt;/s1&gt;, version: &lt;s2&gt;'2.0'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath group: &lt;s1&gt;'org.apache.commons'&lt;/s1&gt;, name: &lt;s2&gt;'commons-math'&lt;/s2&gt;, version: &lt;s3&gt;'2.0'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151039Z" creationid="huanghaohang" creationdate="20191206T151039Z">
        <seg>classpath group: &lt;s1&gt;'org.apache.commons'&lt;/s1&gt;, name: &lt;s2&gt;'commons-math'&lt;/s2&gt;, version: &lt;s3&gt;'2.0'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath group: &lt;s1&gt;'org.gradle'&lt;/s1&gt;, name: &lt;s2&gt;'customPlugin'&lt;/s2&gt;, version: &lt;s3&gt;'1.0-SNAPSHOT'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123742Z" creationid="huanghaohang" creationdate="20190706T123742Z">
        <seg>classpath group: &lt;s1&gt;'org.gradle'&lt;/s1&gt;, name: &lt;s2&gt;'customPlugin'&lt;/s2&gt;, version: &lt;s3&gt;'1.0-SNAPSHOT'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath group: &lt;s2&gt;'commons-codec'&lt;/s2&gt;, name: &lt;s3&gt;'commons-codec'&lt;/s3&gt;, version: &lt;s4&gt;'1.2'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141052Z" creationid="huanghaohang" creationdate="20191202T141052Z">
        <seg>classpath group: &lt;s2&gt;'commons-codec'&lt;/s2&gt;, name: &lt;s3&gt;'commons-codec'&lt;/s3&gt;, version: &lt;s4&gt;'1.2'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083830Z" creationid="huanghaohang" creationdate="20180105T083830Z">
        <seg>classpath {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath.entries.findAll { entry -&gt; entry.kind == &lt;s0&gt;'lib'&lt;/s0&gt; }*.exported = false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085152Z" creationid="huanghaohang" creationdate="20181210T085152Z">
        <seg>classpath.entries.findAll { entry -&gt; entry.kind == &lt;s0&gt;'lib'&lt;/s0&gt; }*.exported = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath.entries.removeAll { entry -&gt; entry.kind == &lt;s0&gt;'lib'&lt;/s0&gt; || entry.kind == &lt;s1&gt;'var'&lt;/s1&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084115Z" creationid="huanghaohang" creationdate="20181210T084115Z">
        <seg>classpath.entries.removeAll { entry -&gt; entry.kind == &lt;s0&gt;'lib'&lt;/s0&gt; || entry.kind == &lt;s1&gt;'var'&lt;/s1&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>classpath: configurations.ftpAntTask.asPath)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141301Z" creationid="huanghaohang" creationdate="20191202T141301Z">
        <seg>classpath: configurations.ftpAntTask.asPath)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>clean</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T014334Z" creationid="95" creationdate="20170730T014334Z">
        <seg>clean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>clean&lt;e0&gt;&lt;c1&gt;TaskName&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063422Z" creationid="haohang" creationdate="20180312T063422Z">
        <seg>clean&lt;e0&gt;&lt;c1&gt;TaskName&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanEclipse</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025833Z" creationid="huanghaohang" creationdate="20181210T025833Z">
        <seg>cleanEclipse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanEclipseClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025904Z" creationid="huanghaohang" creationdate="20181210T025904Z">
        <seg>cleanEclipseClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanEclipseJdt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025910Z" creationid="huanghaohang" creationdate="20181210T025910Z">
        <seg>cleanEclipseJdt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanEclipseProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025850Z" creationid="huanghaohang" creationdate="20181210T025850Z">
        <seg>cleanEclipseProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanEclipseWtpComponent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025921Z" creationid="huanghaohang" creationdate="20181210T025921Z">
        <seg>cleanEclipseWtpComponent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanEclipseWtpFacet</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025929Z" creationid="huanghaohang" creationdate="20181210T025929Z">
        <seg>cleanEclipseWtpFacet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanIdea</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061031Z" creationid="huanghaohang" creationdate="20181212T061031Z">
        <seg>cleanIdea</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanIdeaModule</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061045Z" creationid="huanghaohang" creationdate="20181212T061045Z">
        <seg>cleanIdeaModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanIdeaProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061040Z" creationid="huanghaohang" creationdate="20181212T061040Z">
        <seg>cleanIdeaProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cleanIdeaWorkspace</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061048Z" creationid="huanghaohang" creationdate="20181212T061048Z">
        <seg>cleanIdeaWorkspace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>coberturaReportPath = file(&lt;s0&gt;"$buildDir/cobertura.xml"&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151333Z" creationid="huanghaohang" creationdate="20180811T151333Z">
        <seg>coberturaReportPath = file(&lt;s0&gt;"$buildDir/cobertura.xml"&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144444Z" creationid="huanghaohang" creationdate="20180207T144444Z">
        <seg>codenarc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141857Z" creationid="huanghaohang" creationdate="20180516T141857Z">
        <seg>codenarc&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarcMain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141827Z" creationid="huanghaohang" creationdate="20180516T141827Z">
        <seg>codenarcMain</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarcTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T141850Z" creationid="huanghaohang" creationdate="20180516T141850Z">
        <seg>codenarcTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144443Z" creationid="huanghaohang" creationdate="20180207T144443Z">
        <seg>codenarc_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc_plugin.html#N133F8</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144126Z" creationid="huanghaohang" creationdate="20181201T144126Z">
        <seg>codenarc_plugin.html#N133F8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc_plugin.html#N1340C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144128Z" creationid="huanghaohang" creationdate="20181201T144128Z">
        <seg>codenarc_plugin.html#N1340C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc_plugin.html#N1347A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144129Z" creationid="huanghaohang" creationdate="20181201T144129Z">
        <seg>codenarc_plugin.html#N1347A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc_plugin.html#N13496</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144131Z" creationid="huanghaohang" creationdate="20181201T144131Z">
        <seg>codenarc_plugin.html#N13496</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>codenarc_plugin.html#N134B2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T144132Z" creationid="huanghaohang" creationdate="20181201T144132Z">
        <seg>codenarc_plugin.html#N134B2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>collection = files { srcDir.listFiles() }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150351Z" creationid="huanghaohang" creationdate="20170927T150351Z">
        <seg>collection = files { srcDir.listFiles() }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>collection.collect { relativePath(it) }.sort().each { println it }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150353Z" creationid="huanghaohang" creationdate="20170927T150353Z">
        <seg>collection.collect { relativePath(it) }.sort().each { println it }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>collection.collect { relativePath(it) }.sort().each { println it }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150356Z" creationid="huanghaohang" creationdate="20170927T150356Z">
        <seg>collection.collect { relativePath(it) }.sort().each { println it }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compareGradleBuilds {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140204Z" creationid="huanghaohang" creationdate="20210515T140204Z">
        <seg>compareGradleBuilds {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>comparing_builds.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T141811Z" creationid="huanghaohang" creationdate="20191219T141811Z">
        <seg>comparing_builds.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T032551Z" creationid="huanghaohang" creationdate="20170908T032551Z">
        <seg>compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153611Z" creationid="huanghaohang" creationdate="20190527T153611Z">
        <seg>compile
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile &lt;s0&gt;"org.gradle.test.classifiers:service:1.0:jdk15@jar"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T045341Z" creationid="huanghaohang" creationdate="20190531T045341Z">
        <seg>compile &lt;s0&gt;"org.gradle.test.classifiers:service:1.0:jdk15@jar"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile &lt;s0&gt;'org.codehaus.groovy:groovy-all:2.3.3'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002755Z" creationid="huanghaohang" creationdate="20170909T002755Z">
        <seg>compile &lt;s0&gt;'org.codehaus.groovy:groovy-all:2.3.3'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile &lt;s0&gt;'org.hibernate:hibernate-core:3.6.7.Final'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043910Z" creationid="huanghaohang" creationdate="20170908T043910Z">
        <seg>compile &lt;s0&gt;'org.hibernate:hibernate-core:3.6.7.Final'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile &lt;s0&gt;'org.scala-lang:scala-library:2.11.1'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015444Z" creationid="huanghaohang" creationdate="20180407T015444Z">
        <seg>compile &lt;s0&gt;'org.scala-lang:scala-library:2.11.1'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile &lt;s2&gt;'org.codehaus.groovy:groovy-all:2.3.3'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002852Z" creationid="huanghaohang" creationdate="20170909T002852Z">
        <seg>compile &lt;s2&gt;'org.codehaus.groovy:groovy-all:2.3.3'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile &lt;s4&gt;"javax.servlet:servlet-api:2.5"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150908Z" creationid="huanghaohang" creationdate="20190617T150908Z">
        <seg>compile &lt;s4&gt;"javax.servlet:servlet-api:2.5"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile files(&lt;s0&gt;"$buildDir/classes"&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105522Z" creationid="huanghaohang" creationdate="20190602T105522Z">
        <seg>compile files(&lt;s0&gt;"$buildDir/classes"&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile gradleApi()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122936Z" creationid="huanghaohang" creationdate="20190706T122936Z">
        <seg>compile gradleApi()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile gradleApi()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105558Z" creationid="huanghaohang" creationdate="20190602T105558Z">
        <seg>compile gradleApi()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile group: &lt;s0&gt;'commons-collections'&lt;/s0&gt;, name: &lt;s1&gt;'commons-collections'&lt;/s1&gt;, version: &lt;s2&gt;'3.2'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124733Z" creationid="95" creationdate="20170730T124733Z">
        <seg>compile group: &lt;s0&gt;'commons-collections'&lt;/s0&gt;, name: &lt;s1&gt;'commons-collections'&lt;/s1&gt;, version: &lt;s2&gt;'3.2'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile group: &lt;s0&gt;'org.hibernate'&lt;/s0&gt;, name: &lt;s1&gt;'hibernate-core'&lt;/s1&gt;, version: &lt;s2&gt;'3.6.7.Final'&lt;/s2&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043324Z" creationid="huanghaohang" creationdate="20170908T043324Z">
        <seg>compile group: &lt;s0&gt;'org.hibernate'&lt;/s0&gt;, name: &lt;s1&gt;'hibernate-core'&lt;/s1&gt;, version: &lt;s2&gt;'3.6.7.Final'&lt;/s2&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile group: &lt;s1&gt;'org.hibernate'&lt;/s1&gt;, name: &lt;s2&gt;'hibernate-core'&lt;/s2&gt;, version: &lt;s3&gt;'3.6.7.Final'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170908T013231Z" creationid="haohang" creationdate="20170908T013231Z">
        <seg>compile group: &lt;s1&gt;'org.hibernate'&lt;/s1&gt;, name: &lt;s2&gt;'hibernate-core'&lt;/s2&gt;, version: &lt;s3&gt;'3.6.7.Final'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile group: &lt;s7&gt;'commons-collections'&lt;/s7&gt;, name: &lt;s8&gt;'commons-collections'&lt;/s8&gt;, version: &lt;s9&gt;'3.2'&lt;/s9&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154113Z" creationid="95" creationdate="20170731T154113Z">
        <seg>compile group: &lt;s7&gt;'commons-collections'&lt;/s7&gt;, name: &lt;s8&gt;'commons-collections'&lt;/s8&gt;, version: &lt;s9&gt;'3.2'&lt;/s9&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile localGroovy()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122901Z" creationid="huanghaohang" creationdate="20180406T122901Z">
        <seg>compile localGroovy()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile module(&lt;s1&gt;'org.codehaus.groovy:groovy:1.6.0'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123329Z" creationid="huanghaohang" creationdate="20180406T123329Z">
        <seg>compile module(&lt;s1&gt;'org.codehaus.groovy:groovy:1.6.0'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(&lt;s0&gt;':shared'&lt;/s0&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125332Z" creationid="95" creationdate="20170803T125332Z">
        <seg>compile project(&lt;s0&gt;':shared'&lt;/s0&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(&lt;s4&gt;':shared'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162739Z" creationid="huanghaohang" creationdate="20190617T162739Z">
        <seg>compile project(&lt;s4&gt;':shared'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(&lt;s5&gt;':shared'&lt;/s5&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160636Z" creationid="huanghaohang" creationdate="20190617T160636Z">
        <seg>compile project(&lt;s5&gt;':shared'&lt;/s5&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(&lt;s7&gt;':shared'&lt;/s7&gt;), project(&lt;s8&gt;':api'&lt;/s8&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160638Z" creationid="huanghaohang" creationdate="20190617T160638Z">
        <seg>compile project(&lt;s7&gt;':shared'&lt;/s7&gt;), project(&lt;s8&gt;':api'&lt;/s8&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(&lt;s8&gt;':shared'&lt;/s8&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162746Z" creationid="huanghaohang" creationdate="20190617T162746Z">
        <seg>compile project(&lt;s8&gt;':shared'&lt;/s8&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(path: &lt;s0&gt;':api'&lt;/s0&gt;, configuration: &lt;s1&gt;'spi'&lt;/s1&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141554Z" creationid="huanghaohang" creationdate="20190602T141554Z">
        <seg>compile project(path: &lt;s0&gt;':api'&lt;/s0&gt;, configuration: &lt;s1&gt;'spi'&lt;/s1&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile project(path: &lt;s9&gt;':api'&lt;/s9&gt;, configuration: &lt;s10&gt;'spi'&lt;/s10&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162746Z" creationid="huanghaohang" creationdate="20190617T162746Z">
        <seg>compile project(path: &lt;s9&gt;':api'&lt;/s9&gt;, configuration: &lt;s10&gt;'spi'&lt;/s10&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134314Z" creationid="huanghaohang" creationdate="20171002T134314Z">
        <seg>compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile(&lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153239Z" creationid="huanghaohang" creationdate="20170914T153239Z">
        <seg>compile(&lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile(&lt;s3&gt;"org.gradle.test.excludes:api:1.0"&lt;/s3&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105651Z" creationid="huanghaohang" creationdate="20190602T105651Z">
        <seg>compile(&lt;s3&gt;"org.gradle.test.excludes:api:1.0"&lt;/s3&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile.exclude module: &lt;s0&gt;'commons'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105650Z" creationid="huanghaohang" creationdate="20190602T105650Z">
        <seg>compile.exclude module: &lt;s0&gt;'commons'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120840Z" creationid="huanghaohang" creationdate="20180406T120840Z">
        <seg>compile&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073315Z" creationid="haohang" creationdate="20180312T073315Z">
        <seg>compile&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compile&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Scala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010534Z" creationid="huanghaohang" creationdate="20180407T010534Z">
        <seg>compile&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Scala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095242Z" creationid="haohang" creationdate="20180320T095242Z">
        <seg>compileClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileGroovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120745Z" creationid="huanghaohang" creationdate="20180406T120745Z">
        <seg>compileGroovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileJava</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T061353Z" creationid="haohang" creationdate="20180312T061353Z">
        <seg>CompileJava</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileScala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010512Z" creationid="huanghaohang" creationdate="20180407T010512Z">
        <seg>compileScala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileScala {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T021842Z" creationid="huanghaohang" creationdate="20180407T021842Z">
        <seg>compileScala {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileTestGroovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120807Z" creationid="huanghaohang" creationdate="20180406T120807Z">
        <seg>compileTestGroovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileTestJava</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062505Z" creationid="haohang" creationdate="20180312T062505Z">
        <seg>compileTestJava</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>compileTestScala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010526Z" creationid="huanghaohang" creationdate="20180407T010526Z">
        <seg>compileTestScala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>components {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041005Z" creationid="huanghaohang" creationdate="20190605T041005Z">
        <seg>components {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>conf2ScopeMappings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060556Z" creationid="huanghaohang" creationdate="20190607T060556Z">
        <seg>conf2ScopeMappings</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>config/checkstyle/checkstyle.xml</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140011Z" creationid="huanghaohang" creationdate="20180516T140011Z">
        <seg>config/checkstyle/checkstyle.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>config/codenarc/codenarc.xml</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142026Z" creationid="huanghaohang" creationdate="20180516T142026Z">
        <seg>config/codenarc/codenarc.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>config1 &lt;s0&gt;"sea.fish:tuna:latest.integration"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040718Z" creationid="huanghaohang" creationdate="20190605T040718Z">
        <seg>config1 &lt;s0&gt;"sea.fish:tuna:latest.integration"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>config2 &lt;s1&gt;"sea.fish:tuna:latest.release"&lt;/s1&gt;
}

task listFish &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040718Z" creationid="huanghaohang" creationdate="20190605T040718Z">
        <seg>config2 &lt;s1&gt;"sea.fish:tuna:latest.release"&lt;/s1&gt;
}

task listFish &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>config3 &lt;s0&gt;"air.birds:albatros:latest.silver"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041004Z" creationid="huanghaohang" creationdate="20190605T041004Z">
        <seg>config3 &lt;s0&gt;"air.birds:albatros:latest.silver"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configuration = configurations.deployerJars</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092646Z" creationid="huanghaohang" creationdate="20190607T092646Z">
        <seg>configuration = configurations.deployerJars</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084251Z" creationid="huanghaohang" creationdate="20180105T084251Z">
        <seg>configurations {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.all {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015340Z" creationid="huanghaohang" creationdate="20190605T015340Z">
        <seg>configurations.all {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.alllife.allDependencies.each { dep -&gt; println dep.name }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143025Z" creationid="huanghaohang" creationdate="20190602T143025Z">
        <seg>configurations.alllife.allDependencies.each { dep -&gt; println dep.name }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.alllife.allDependencies.findAll { dep -&gt; dep.name != &lt;s0&gt;'orca'&lt;/s0&gt; }.each { dep -&gt; println dep.name }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143027Z" creationid="huanghaohang" creationdate="20190602T143027Z">
        <seg>configurations.alllife.allDependencies.findAll { dep -&gt; dep.name != &lt;s0&gt;'orca'&lt;/s0&gt; }.each { dep -&gt; println dep.name }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.alllife.copy().allDependencies.each { dep -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152840Z" creationid="huanghaohang" creationdate="20190602T152840Z">
        <seg>configurations.alllife.copy().allDependencies.each { dep -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.alllife.copyRecursive { dep -&gt; dep.name != &lt;s0&gt;'orca'&lt;/s0&gt; }.allDependencies.each { dep -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152839Z" creationid="huanghaohang" creationdate="20190602T152839Z">
        <seg>configurations.alllife.copyRecursive { dep -&gt; dep.name != &lt;s0&gt;'orca'&lt;/s0&gt; }.allDependencies.each { dep -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.alllife.dependencies.each { dep -&gt; println dep.name }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143025Z" creationid="huanghaohang" creationdate="20190602T143025Z">
        <seg>configurations.alllife.dependencies.each { dep -&gt; println dep.name }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.compile.each { File file -&gt; println file.name }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051155Z" creationid="huanghaohang" creationdate="20190531T051155Z">
        <seg>configurations.compile.each { File file -&gt; println file.name }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.config1.each { println it.name }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040719Z" creationid="huanghaohang" creationdate="20190605T040719Z">
        <seg>configurations.config1.each { println it.name }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.config2.each { println it.name}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T040720Z" creationid="huanghaohang" creationdate="20190605T040720Z">
        <seg>configurations.config2.each { println it.name}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.config3.each { println it.name }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041011Z" creationid="huanghaohang" creationdate="20190605T041011Z">
        <seg>configurations.config3.each { println it.name }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.sealife.copyRecursive { dep -&gt; dep.name == &lt;s0&gt;'orca'&lt;/s0&gt; }.each { file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153125Z" creationid="huanghaohang" creationdate="20190602T153125Z">
        <seg>configurations.sealife.copyRecursive { dep -&gt; dep.name == &lt;s0&gt;'orca'&lt;/s0&gt; }.each { file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.sealife.files { dep -&gt; dep.name == &lt;s0&gt;'orca'&lt;/s0&gt; }.each { file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143714Z" creationid="huanghaohang" creationdate="20190602T143714Z">
        <seg>configurations.sealife.files { dep -&gt; dep.name == &lt;s0&gt;'orca'&lt;/s0&gt; }.each { file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.sealife.files { dep -&gt; dep.name == &lt;s1&gt;'orca'&lt;/s1&gt; }.each { file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153125Z" creationid="huanghaohang" creationdate="20190602T153125Z">
        <seg>configurations.sealife.files { dep -&gt; dep.name == &lt;s1&gt;'orca'&lt;/s1&gt; }.each { file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configurations.sealife.files.each { file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143253Z" creationid="huanghaohang" creationdate="20190602T143253Z">
        <seg>configurations.sealife.files.each { file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configure(scalaCompileOptions.forkOptions) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053847Z" creationid="huanghaohang" creationdate="20180407T053847Z">
        <seg>configure(scalaCompileOptions.forkOptions) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>configures reasonable default values for all archive tasks (e.g. tasks that inherit from &lt;a0&gt;&lt;c1&gt;AbstractArchiveTask&lt;/c1&gt;&lt;/a0&gt;). For example, the archive tasks are tasks of types: &lt;a2&gt;&lt;c3&gt;Jar&lt;/c3&gt;&lt;/a2&gt;, &lt;a4&gt;&lt;c5&gt;Tar&lt;/c5&gt;&lt;/a4&gt;, &lt;a6&gt;&lt;c7&gt;Zip&lt;/c7&gt;&lt;/a6&gt;. Specifically, &lt;c8&gt;destinationDir&lt;/c8&gt;, &lt;c9&gt;baseName&lt;/c9&gt; and &lt;c10&gt;version&lt;/c10&gt; properties of the archive tasks are preconfigured with defaults. This is extremely useful because it drives consistency across projects; the consistency regarding naming conventions of archives and their location after the build completed.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093158Z" creationid="huanghaohang" creationdate="20180218T092719Z">
        <seg>为所有归档任务（比如从 &lt;a0&gt;&lt;c1&gt;AbstractArchiveTask&lt;/c1&gt;&lt;/a0&gt; 中继承的任务）配置合理的默认值。例如，以下类型的归档任务：&lt;a2&gt;&lt;c3&gt;Jar&lt;/c3&gt;&lt;/a2&gt;，&lt;a4&gt;&lt;c5&gt;Tar&lt;/c5&gt;&lt;/a4&gt;，&lt;a6&gt;&lt;c7&gt;Zip&lt;/c7&gt;&lt;/a6&gt;。确切地说，是对这些归档任务的 &lt;c8&gt;destinationDir&lt;/c8&gt;，&lt;c9&gt;baseName&lt;/c9&gt; 和 &lt;c10&gt;version&lt;/c10&gt; 属性预先配置了默认值。这是非常有用的，因为它可以推动项目之间的一致性，以及关于构建完成后档案的命名规范及其位置的一致性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>console.printf "\nThanks.\n\n"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133052Z" creationid="huanghaohang" creationdate="20190608T133052Z">
        <seg>console.printf "\nThanks.\n\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133044Z" creationid="huanghaohang" creationdate="20190608T133044Z">
        <seg>console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>consumer/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140208Z" creationid="huanghaohang" creationdate="20190616T140208Z">
        <seg>consumer/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>consumer/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140254Z" creationid="huanghaohang" creationdate="20190616T140254Z">
        <seg>consumer/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>contents {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061245Z" creationid="huanghaohang" creationdate="20190128T061245Z">
        <seg>contents {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>contextPath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144544Z" creationid="huanghaohang" creationdate="20180416T144544Z">
        <seg>contextPath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>copy {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T094221Z" creationid="huanghaohang" creationdate="20171015T094221Z">
        <seg>copy {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cpp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143024Z" creationid="huanghaohang" creationdate="20180205T143024Z">
        <seg>cpp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cpp {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043357Z" creationid="huanghaohang" creationdate="20190609T043357Z">
        <seg>cpp {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.args &lt;s1&gt;"-g"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035732Z" creationid="huanghaohang" creationdate="20190610T035732Z">
        <seg>cppCompiler.args &lt;s1&gt;"-g"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.args &lt;s3&gt;'/Zi'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035733Z" creationid="huanghaohang" creationdate="20190610T035733Z">
        <seg>cppCompiler.args &lt;s3&gt;'/Zi'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.args &lt;s4&gt;"-O2"&lt;/s4&gt;, &lt;s5&gt;"-fno-access-control"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053257Z" creationid="huanghaohang" creationdate="20190609T053257Z">
        <seg>cppCompiler.args &lt;s4&gt;"-O2"&lt;/s4&gt;, &lt;s5&gt;"-fno-access-control"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.args &lt;s9&gt;"/Zi"&lt;/s9&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053259Z" creationid="huanghaohang" creationdate="20190609T053259Z">
        <seg>cppCompiler.args &lt;s9&gt;"/Zi"&lt;/s9&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.define &lt;s1&gt;"DLL_EXPORT"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012521Z" creationid="huanghaohang" creationdate="20190610T012521Z">
        <seg>cppCompiler.define &lt;s1&gt;"DLL_EXPORT"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.define &lt;s1&gt;"FRENCH"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052718Z" creationid="huanghaohang" creationdate="20190610T052718Z">
        <seg>cppCompiler.define &lt;s1&gt;"FRENCH"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.define &lt;s1&gt;"NDEBUG"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053255Z" creationid="huanghaohang" creationdate="20190609T053255Z">
        <seg>cppCompiler.define &lt;s1&gt;"NDEBUG"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.define &lt;s4&gt;"DLL_EXPORT"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023024Z" creationid="huanghaohang" creationdate="20190610T023024Z">
        <seg>cppCompiler.define &lt;s4&gt;"DLL_EXPORT"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.define &lt;s4&gt;'DEBUG'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035734Z" creationid="huanghaohang" creationdate="20190610T035734Z">
        <seg>cppCompiler.define &lt;s4&gt;'DEBUG'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cppCompiler.withArguments { args -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093523Z" creationid="huanghaohang" creationdate="20190610T093523Z">
        <seg>cppCompiler.withArguments { args -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>credentials {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050447Z" creationid="huanghaohang" creationdate="20170908T050447Z">
        <seg>credentials {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>csv.enabled false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093010Z" creationid="huanghaohang" creationdate="20180715T093010Z">
        <seg>csv.enabled false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cunit</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090434Z" creationid="huanghaohang" creationdate="20180211T090434Z">
        <seg>cunit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>cunit {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090225Z" creationid="huanghaohang" creationdate="20190611T090225Z">
        <seg>cunit {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom {}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134036Z" creationid="huanghaohang" creationdate="20190127T134036Z">
        <seg>custom {}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>customDistTar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T011907Z" creationid="huanghaohang" creationdate="20190128T011907Z">
        <seg>customDistTar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>customDistZip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T011859Z" creationid="huanghaohang" creationdate="20190128T011859Z">
        <seg>customDistZip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T095731Z" creationid="huanghaohang" creationdate="20180130T095731Z">
        <seg>custom_plugins.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html#N1670B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132313Z" creationid="huanghaohang" creationdate="20190728T132313Z">
        <seg>custom_plugins.html#N1670B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html#N16734</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132320Z" creationid="huanghaohang" creationdate="20190728T132320Z">
        <seg>custom_plugins.html#N16734</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html#N16758</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132334Z" creationid="huanghaohang" creationdate="20190728T132334Z">
        <seg>custom_plugins.html#N16758</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html#N167A4</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132345Z" creationid="huanghaohang" creationdate="20190728T132345Z">
        <seg>custom_plugins.html#N167A4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html#N167CE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132350Z" creationid="huanghaohang" creationdate="20190728T132350Z">
        <seg>custom_plugins.html#N167CE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_plugins.html#N16831</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T132352Z" creationid="huanghaohang" creationdate="20190728T132352Z">
        <seg>custom_plugins.html#N16831</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_tasks.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124956Z" creationid="huanghaohang" creationdate="20171015T124956Z">
        <seg>custom_tasks.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_tasks.html#N1651A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145301Z" creationid="huanghaohang" creationdate="20190708T145301Z">
        <seg>custom_tasks.html#N1651A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_tasks.html#N16546</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145317Z" creationid="huanghaohang" creationdate="20190708T145317Z">
        <seg>custom_tasks.html#N16546</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_tasks.html#N1658F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145325Z" creationid="huanghaohang" creationdate="20190708T145325Z">
        <seg>custom_tasks.html#N1658F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_tasks.html#incremental_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145331Z" creationid="huanghaohang" creationdate="20190708T145331Z">
        <seg>custom_tasks.html#incremental_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>custom_tasks.html#taskDefinition</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141150Z" creationid="huanghaohang" creationdate="20190707T141150Z">
        <seg>custom_tasks.html#taskDefinition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>database {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100114Z" creationid="huanghaohang" creationdate="20180715T100114Z">
        <seg>database {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>database.driverClassName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085304Z" creationid="huanghaohang" creationdate="20181012T085304Z">
        <seg>database.driverClassName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>database.password</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085305Z" creationid="huanghaohang" creationdate="20181012T085305Z">
        <seg>database.password</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>database.url</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085303Z" creationid="huanghaohang" creationdate="20181012T085303Z">
        <seg>database.url</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>database.username</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085305Z" creationid="huanghaohang" creationdate="20181012T085305Z">
        <seg>database.username</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>date/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150809Z" creationid="huanghaohang" creationdate="20190617T150809Z">
        <seg>date/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>debug</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035435Z" creationid="huanghaohang" creationdate="20190610T035435Z">
        <seg>debug</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def &lt;s5&gt;byte&lt;/s5&gt;[] encodedString = &lt;s6&gt;new&lt;/s6&gt; Base6&lt;s7&gt;4&lt;/s7&gt;().encode(&lt;s8&gt;'hello world\n'&lt;/s8&gt;.getBytes())</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141054Z" creationid="huanghaohang" creationdate="20191202T141054Z">
        <seg>def &lt;s5&gt;byte&lt;/s5&gt;[] encodedString = &lt;s6&gt;new&lt;/s6&gt; Base6&lt;s7&gt;4&lt;/s7&gt;().encode(&lt;s8&gt;'hello world\n'&lt;/s8&gt;.getBytes())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def File inputDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134813Z" creationid="huanghaohang" creationdate="20190706T134813Z">
        <seg>def File inputDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def File outputDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134814Z" creationid="huanghaohang" creationdate="20190706T134814Z">
        <seg>def File outputDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def String message = &lt;s9&gt;'Hello from GreetingPlugin'&lt;/s9&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155827Z" creationid="huanghaohang" creationdate="20190719T155827Z">
        <seg>def String message = &lt;s9&gt;'Hello from GreetingPlugin'&lt;/s9&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def books = project.container(Book)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131000Z" creationid="huanghaohang" creationdate="20190728T131000Z">
        <seg>def books = project.container(Book)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def classesDir = &lt;s0&gt;new&lt;/s0&gt; File(&lt;s1&gt;'build/classes'&lt;/s1&gt;)

task resources &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132405Z" creationid="huanghaohang" creationdate="20170917T132405Z">
        <seg>def classesDir = &lt;s0&gt;new&lt;/s0&gt; File(&lt;s1&gt;'build/classes'&lt;/s1&gt;)

task resources &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def dest = &lt;s0&gt;"dest"&lt;/s0&gt;

task copy(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132954Z" creationid="huanghaohang" creationdate="20170913T132954Z">
        <seg>def dest = &lt;s0&gt;"dest"&lt;/s0&gt;

task copy(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def destFile = &lt;s7&gt;new&lt;/s7&gt; File(destDir, &lt;s8&gt;"${name}.txt"&lt;/s8&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085715Z" creationid="huanghaohang" creationdate="20170922T085715Z">
        <seg>def destFile = &lt;s7&gt;new&lt;/s7&gt; File(destDir, &lt;s8&gt;"${name}.txt"&lt;/s8&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def destination</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151154Z" creationid="huanghaohang" creationdate="20190727T151154Z">
        <seg>def destination</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def docs = file(&lt;s0&gt;"$buildDir/docs"&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140539Z" creationid="95" creationdate="20190131T140539Z">
        <seg>def docs = file(&lt;s0&gt;"$buildDir/docs"&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def file = console.readLine("PGP Secret Key Ring File (absolute path): ")</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133046Z" creationid="huanghaohang" creationdate="20190608T133046Z">
        <seg>def file = console.readLine("PGP Secret Key Ring File (absolute path): ")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def file = getDestination()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151157Z" creationid="huanghaohang" creationdate="20190727T151157Z">
        <seg>def file = getDestination()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def files = file(&lt;s0&gt;'../antLoadfileResources'&lt;/s0&gt;).listFiles().sort()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153757Z" creationid="95" creationdate="20170728T153757Z">
        <seg>def files = file(&lt;s0&gt;'../antLoadfileResources'&lt;/s0&gt;).listFiles().sort()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def greet() {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142811Z" creationid="huanghaohang" creationdate="20190705T142811Z">
        <seg>def greet() {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def height = mountain.height[&lt;s6&gt;0&lt;/s6&gt;].text()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085714Z" creationid="huanghaohang" creationdate="20170922T085714Z">
        <seg>def height = mountain.height[&lt;s6&gt;0&lt;/s6&gt;].text()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def id = console.readLine("PGP Key Id: ")</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133046Z" creationid="huanghaohang" creationdate="20190608T133046Z">
        <seg>def id = console.readLine("PGP Key Id: ")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def inputProperty</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134816Z" creationid="huanghaohang" creationdate="20190706T134816Z">
        <seg>def inputProperty</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured {pom -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111042Z" creationid="huanghaohang" creationdate="20190607T111042Z">
        <seg>def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured {pom -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def message = rootProject.producerMessage

task consume &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153141Z" creationid="huanghaohang" creationdate="20190616T153141Z">
        <seg>def message = rootProject.producerMessage

task consume &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def mountains = &lt;s4&gt;new&lt;/s4&gt; XmlParser().parse(srcFile)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085712Z" creationid="huanghaohang" creationdate="20170922T085712Z">
        <seg>def mountains = &lt;s4&gt;new&lt;/s4&gt; XmlParser().parse(srcFile)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def name = mountain.name[&lt;s5&gt;0&lt;/s5&gt;].text()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085713Z" creationid="huanghaohang" creationdate="20170922T085713Z">
        <seg>def name = mountain.name[&lt;s5&gt;0&lt;/s5&gt;].text()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def password = console.readPassword("PGP Private Key Password: ")</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133047Z" creationid="huanghaohang" creationdate="20190608T133047Z">
        <seg>def password = console.readPassword("PGP Private Key Password: ")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def path = ant.path {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T091122Z" creationid="huanghaohang" creationdate="20171219T091122Z">
        <seg>def path = ant.path {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def pos = &lt;s0&gt;new&lt;/s0&gt; java.text.FieldPosition(&lt;s1&gt;10&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T150025Z" creationid="huanghaohang" creationdate="20170918T150025Z">
        <seg>def pos = &lt;s0&gt;new&lt;/s0&gt; java.text.FieldPosition(&lt;s1&gt;10&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def pos = configure(&lt;s0&gt;new&lt;/s0&gt; java.text.FieldPosition(&lt;s1&gt;10&lt;/s1&gt;)) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145820Z" creationid="huanghaohang" creationdate="20170918T145820Z">
        <seg>def pos = configure(&lt;s0&gt;new&lt;/s0&gt; java.text.FieldPosition(&lt;s1&gt;10&lt;/s1&gt;)) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def someFile = file(&lt;s0&gt;'build/somefile.txt'&lt;/s0&gt;)

artifacts {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075437Z" creationid="huanghaohang" creationdate="20190606T075437Z">
        <seg>def someFile = file(&lt;s0&gt;'build/somefile.txt'&lt;/s0&gt;)

artifacts {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def targetFile = &lt;s10&gt;new&lt;/s10&gt; File(outputDir, change.file.name)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134821Z" creationid="huanghaohang" creationdate="20190706T134821Z">
        <seg>def targetFile = &lt;s10&gt;new&lt;/s10&gt; File(outputDir, change.file.name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def targetFile = &lt;s12&gt;new&lt;/s12&gt; File(outputDir, change.file.name)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134823Z" creationid="huanghaohang" creationdate="20190706T134823Z">
        <seg>def targetFile = &lt;s12&gt;new&lt;/s12&gt; File(outputDir, change.file.name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def task = project.task(&lt;s4&gt;'greeting'&lt;/s4&gt;, type: GreetingTask)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124012Z" creationid="huanghaohang" creationdate="20190706T124012Z">
        <seg>def task = project.task(&lt;s4&gt;'greeting'&lt;/s4&gt;, type: GreetingTask)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>def version = findDefaultVersionInCatalog(details.requested.group, details.requested.name)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022639Z" creationid="huanghaohang" creationdate="20190605T022639Z">
        <seg>def version = findDefaultVersionInCatalog(details.requested.group, details.requested.name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>default</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053914Z" creationid="haohang" creationdate="20180313T053914Z">
        <seg>default</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>defaultTasks &lt;s0&gt;'clean'&lt;/s0&gt;, &lt;s1&gt;'run'&lt;/s1&gt;

task clean &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023908Z" creationid="95" creationdate="20170729T023908Z">
        <seg>defaultTasks &lt;s0&gt;'clean'&lt;/s0&gt;, &lt;s1&gt;'run'&lt;/s1&gt;

task clean &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>delegate.compile(&lt;s1&gt;'junit:junit:4.11'&lt;/s1&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170914T153240Z" creationid="huanghaohang" creationdate="20170914T153240Z">
        <seg>delegate.compile(&lt;s1&gt;'junit:junit:4.11'&lt;/s1&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencies &lt;s2&gt;"oro:oro:2.0.8:jar"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141257Z" creationid="huanghaohang" creationdate="20191202T141257Z">
        <seg>dependencies &lt;s2&gt;"oro:oro:2.0.8:jar"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencies &lt;s5&gt;"org.apache.ant:ant-launcher:1.9.3@jar"&lt;/s5&gt;, &lt;s6&gt;"org.apache.ant:ant-junit:1.9.3"&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051424Z" creationid="huanghaohang" creationdate="20190531T051424Z">
        <seg>dependencies &lt;s5&gt;"org.apache.ant:ant-launcher:1.9.3@jar"&lt;/s5&gt;, &lt;s6&gt;"org.apache.ant:ant-junit:1.9.3"&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124732Z" creationid="95" creationdate="20170730T124732Z">
        <seg>dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencies(&lt;s6&gt;'org.apache.ant:ant-junit:1.9.3@jar'&lt;/s6&gt;, &lt;s7&gt;'org.apache.ant:ant-launcher:1.9.3'&lt;/s7&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123338Z" creationid="huanghaohang" creationdate="20180406T123338Z">
        <seg>dependencies(&lt;s6&gt;'org.apache.ant:ant-junit:1.9.3@jar'&lt;/s6&gt;, &lt;s7&gt;'org.apache.ant:ant-launcher:1.9.3'&lt;/s7&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency &lt;s6&gt;":providedCompile-transitive:1.0@jar"&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143124Z" creationid="huanghaohang" creationdate="20180408T143124Z">
        <seg>dependency &lt;s6&gt;":providedCompile-transitive:1.0@jar"&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency(&lt;s1&gt;"commons-cli:commons-cli:1.0"&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051420Z" creationid="huanghaohang" creationdate="20190531T051420Z">
        <seg>dependency(&lt;s1&gt;"commons-cli:commons-cli:1.0"&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency(&lt;s2&gt;'asm:asm-all:2.2.3'&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123329Z" creationid="huanghaohang" creationdate="20180406T123329Z">
        <seg>dependency(&lt;s2&gt;'asm:asm-all:2.2.3'&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency(&lt;s3&gt;'antlr:antlr:2.7.7'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123340Z" creationid="huanghaohang" creationdate="20180406T123340Z">
        <seg>dependency(&lt;s3&gt;'antlr:antlr:2.7.7'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency(&lt;s4&gt;'commons-cli:commons-cli:1.2'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123342Z" creationid="huanghaohang" creationdate="20180406T123342Z">
        <seg>dependency(&lt;s4&gt;'commons-cli:commons-cli:1.2'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency-cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062255Z" creationid="haohang" creationdate="20180313T062255Z">
        <seg>dependency-cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencyCacheDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062320Z" creationid="haohang" creationdate="20180313T062320Z">
        <seg>dependencyCacheDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencyCacheDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062253Z" creationid="haohang" creationdate="20180313T062253Z">
        <seg>dependencyCacheDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependencyReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040010Z" creationid="huanghaohang" creationdate="20190123T040010Z">
        <seg>dependencyReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051123Z" creationid="huanghaohang" creationdate="20170908T051123Z">
        <seg>dependency_management.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#N15192</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141851Z" creationid="huanghaohang" creationdate="20190411T141851Z">
        <seg>dependency_management.html#N15192</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#para:dependencies_with_empty_attributes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040602Z" creationid="huanghaohang" creationdate="20190603T040602Z">
        <seg>dependency_management.html#para:dependencies_with_empty_attributes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#para:notation_collections</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T015650Z" creationid="huanghaohang" creationdate="20190606T015650Z">
        <seg>dependency_management.html#para:notation_collections</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190410T003939Z" creationid="huanghaohang" creationdate="20190410T003939Z">
        <seg>dependency_management.html#sec:Introduction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:blacklisting_version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T034336Z" creationid="huanghaohang" creationdate="20190604T034336Z">
        <seg>dependency_management.html#sec:blacklisting_version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:cache_command_line_options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T104123Z" creationid="huanghaohang" creationdate="20190521T104123Z">
        <seg>dependency_management.html#sec:cache_command_line_options</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:controlling_caching</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190521T104125Z" creationid="huanghaohang" creationdate="20190521T104125Z">
        <seg>dependency_management.html#sec:controlling_caching</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:dependency_cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024126Z" creationid="huanghaohang" creationdate="20190606T024126Z">
        <seg>dependency_management.html#sec:dependency_cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:dependency_configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T085952Z" creationid="huanghaohang" creationdate="20190606T085952Z">
        <seg>dependency_management.html#sec:dependency_configurations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:dependency_management_overview</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141753Z" creationid="huanghaohang" creationdate="20190411T141753Z">
        <seg>dependency_management.html#sec:dependency_management_overview</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:dependency_resolution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141832Z" creationid="huanghaohang" creationdate="20190411T141832Z">
        <seg>dependency_management.html#sec:dependency_resolution</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:flat_dir_resolver</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030002Z" creationid="huanghaohang" creationdate="20190603T030002Z">
        <seg>dependency_management.html#sec:flat_dir_resolver</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:how_to_declare_your_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T043915Z" creationid="huanghaohang" creationdate="20170908T043915Z">
        <seg>dependency_management.html#sec:how_to_declare_your_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:ivy_repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025947Z" creationid="huanghaohang" creationdate="20190603T025947Z">
        <seg>dependency_management.html#sec:ivy_repositories</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T045955Z" creationid="huanghaohang" creationdate="20170908T045955Z">
        <seg>dependency_management.html#sec:repositories</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:strategies_of_transitive_dependency_management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024131Z" creationid="huanghaohang" creationdate="20190606T024131Z">
        <seg>dependency_management.html#sec:strategies_of_transitive_dependency_management</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sec:working_with_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190411T141822Z" creationid="huanghaohang" creationdate="20190411T141822Z">
        <seg>dependency_management.html#sec:working_with_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:api_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160200Z" creationid="huanghaohang" creationdate="20190527T160200Z">
        <seg>dependency_management.html#sub:api_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:cache_artifact_reuse</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T071417Z" creationid="huanghaohang" creationdate="20190605T071417Z">
        <seg>dependency_management.html#sub:cache_artifact_reuse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:client_module_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153945Z" creationid="huanghaohang" creationdate="20190527T153945Z">
        <seg>dependency_management.html#sub:client_module_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T042746Z" creationid="huanghaohang" creationdate="20170908T042746Z">
        <seg>dependency_management.html#sub:configurations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:dependency_management_and_java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190316T124943Z" creationid="95" creationdate="20190316T124943Z">
        <seg>dependency_management.html#sub:dependency_management_and_java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:file_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153923Z" creationid="huanghaohang" creationdate="20190527T153923Z">
        <seg>dependency_management.html#sub:file_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:groovy_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160558Z" creationid="huanghaohang" creationdate="20190527T160558Z">
        <seg>dependency_management.html#sub:groovy_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:maven_central</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025804Z" creationid="huanghaohang" creationdate="20190603T025804Z">
        <seg>dependency_management.html#sub:maven_central</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:maven_jcenter</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025840Z" creationid="huanghaohang" creationdate="20190603T025840Z">
        <seg>dependency_management.html#sub:maven_jcenter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:maven_local</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025903Z" creationid="huanghaohang" creationdate="20190603T025903Z">
        <seg>dependency_management.html#sub:maven_local</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:maven_repo</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T025913Z" creationid="huanghaohang" creationdate="20190603T025913Z">
        <seg>dependency_management.html#sub:maven_repo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:module_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153746Z" creationid="huanghaohang" creationdate="20190527T153746Z">
        <seg>dependency_management.html#sub:module_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:more_about_ivy_resolvers</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080217Z" creationid="huanghaohang" creationdate="20190606T080217Z">
        <seg>dependency_management.html#sub:more_about_ivy_resolvers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:project_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153826Z" creationid="huanghaohang" creationdate="20190527T153826Z">
        <seg>dependency_management.html#sub:project_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependency_management.html#sub:version_conflicts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T114129Z" creationid="huanghaohang" creationdate="20190602T114129Z">
        <seg>dependency_management.html#sub:version_conflicts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependsOn binaries.withType(ExecutableBinary).matching {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084311Z" creationid="huanghaohang" creationdate="20190610T084311Z">
        <seg>dependsOn binaries.withType(ExecutableBinary).matching {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependsOn classes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162741Z" creationid="huanghaohang" creationdate="20190617T162741Z">
        <seg>dependsOn classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependsOn pingServer1, pingServer2
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043837Z" creationid="huanghaohang" creationdate="20170923T043837Z">
        <seg>dependsOn pingServer1, pingServer2
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dependsOn spiJar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125717Z" creationid="95" creationdate="20170803T125717Z">
        <seg>dependsOn spiJar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>deploy project(&lt;s3&gt;':war'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142953Z" creationid="huanghaohang" creationdate="20180416T142953Z">
        <seg>deploy project(&lt;s3&gt;':war'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>deployerJars
}

repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092639Z" creationid="huanghaohang" creationdate="20190607T092639Z">
        <seg>deployerJars
}

repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>deployerJars &lt;s0&gt;"org.apache.maven.wagon:wagon-ssh:2.2"&lt;/s0&gt;
}

uploadArchives {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092644Z" creationid="huanghaohang" creationdate="20190607T092644Z">
        <seg>deployerJars &lt;s0&gt;"org.apache.maven.wagon:wagon-ssh:2.2"&lt;/s0&gt;
}

uploadArchives {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>deploymentDescriptor</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145936Z" creationid="huanghaohang" creationdate="20180415T145936Z">
        <seg>deploymentDescriptor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>deploymentDescriptor {  &lt;s14&gt;// custom entries for application.xml:&lt;/s14&gt;
&lt;s15&gt;//      fileName = "application.xml"  // same as the default value&lt;/s15&gt;
&lt;s16&gt;//      version = "6"  // same as the default value&lt;/s16&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142958Z" creationid="huanghaohang" creationdate="20180416T142958Z">
        <seg>deploymentDescriptor {  &lt;s14&gt;// custom entries for application.xml:&lt;/s14&gt;
&lt;s15&gt;//      fileName = "application.xml"  // same as the default value&lt;/s15&gt;
&lt;s16&gt;//      version = "6"  // same as the default value&lt;/s16&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132149Z" creationid="huanghaohang" creationdate="20170913T132149Z">
        <seg>description</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description &lt;s0&gt;'Copies the resource directory to the target directory.'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082301Z" creationid="huanghaohang" creationdate="20170922T082301Z">
        <seg>description &lt;s0&gt;'Copies the resource directory to the target directory.'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description = &lt;s0&gt;'Builds the distribution'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012005Z" creationid="huanghaohang" creationdate="20170910T012005Z">
        <seg>description = &lt;s0&gt;'Builds the distribution'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description = &lt;s0&gt;'The shared API for the application'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T011419Z" creationid="huanghaohang" creationdate="20170910T011419Z">
        <seg>description = &lt;s0&gt;'The shared API for the application'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description = &lt;s0&gt;'compile classpath'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153656Z" creationid="huanghaohang" creationdate="20190527T153656Z">
        <seg>description = &lt;s0&gt;'compile classpath'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description = &lt;s1&gt;'compile classpath'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153700Z" creationid="huanghaohang" creationdate="20190527T153700Z">
        <seg>description = &lt;s1&gt;'compile classpath'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>description = &lt;s20&gt;"My customized EAR for the Gradle documentation"&lt;/s20&gt;  &lt;s21&gt;// defaults to project.description&lt;/s21&gt;
&lt;s22&gt;//      libraryDirectory = "APP-INF/lib"  // not needed, because setting libDirName above did this for us&lt;/s22&gt;
&lt;s23&gt;//      module("my.jar", "java")  // wouldn't deploy since my.jar isn't a deploy dependency&lt;/s23&gt;
&lt;s24&gt;//      webModule("my.war", "/")  // wouldn't deploy since my.war isn't a deploy dependency&lt;/s24&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143002Z" creationid="huanghaohang" creationdate="20180416T143002Z">
        <seg>description = &lt;s20&gt;"My customized EAR for the Gradle documentation"&lt;/s20&gt;  &lt;s21&gt;// defaults to project.description&lt;/s21&gt;
&lt;s22&gt;//      libraryDirectory = "APP-INF/lib"  // not needed, because setting libDirName above did this for us&lt;/s22&gt;
&lt;s23&gt;//      module("my.jar", "java")  // wouldn't deploy since my.jar isn't a deploy dependency&lt;/s23&gt;
&lt;s24&gt;//      webModule("my.war", "/")  // wouldn't deploy since my.war isn't a deploy dependency&lt;/s24&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destDir.mkdirs()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085711Z" creationid="huanghaohang" creationdate="20170922T085711Z">
        <seg>destDir.mkdirs()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destFile = file(&lt;s0&gt;'build/somefile.txt'&lt;/s0&gt;)
}

artifacts {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075536Z" creationid="huanghaohang" creationdate="20190606T075536Z">
        <seg>destFile = file(&lt;s0&gt;'build/somefile.txt'&lt;/s0&gt;)
}

artifacts {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destFile.text = &lt;s9&gt;"$name -&gt; ${height}\n"&lt;/s9&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085716Z" creationid="huanghaohang" creationdate="20170922T085716Z">
        <seg>destFile.text = &lt;s9&gt;"$name -&gt; ${height}\n"&lt;/s9&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destPath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093239Z" creationid="huanghaohang" creationdate="20180715T093239Z">
        <seg>destPath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destination = { project.greetingFile }
}

task sayGreeting(dependsOn: greet) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151159Z" creationid="huanghaohang" creationdate="20190727T151159Z">
        <seg>destination = { project.greetingFile }
}

task sayGreeting(dependsOn: greet) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destinationDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232818Z" creationid="huanghaohang" creationdate="20171206T232818Z">
        <seg>destinationDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destinationDir = file(&lt;s2&gt;"$buildDir/reports/allTests"&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T044004Z" creationid="huanghaohang" creationdate="20180406T044004Z">
        <seg>destinationDir = file(&lt;s2&gt;"$buildDir/reports/allTests"&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>destinationFile = file(&lt;s0&gt;"$buildDir/jacoco/jacocoTest.exec"&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093222Z" creationid="huanghaohang" creationdate="20180715T093222Z">
        <seg>destinationFile = file(&lt;s0&gt;"$buildDir/jacoco/jacocoTest.exec"&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.exclude()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111946Z" creationid="huanghaohang" creationdate="20180406T111946Z">
        <seg>details.exclude()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.statusScheme = [&lt;s3&gt;"bronze"&lt;/s3&gt;, &lt;s4&gt;"silver"&lt;/s4&gt;, &lt;s5&gt;"gold"&lt;/s5&gt;, &lt;s6&gt;"platinum"&lt;/s6&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041010Z" creationid="huanghaohang" creationdate="20190605T041010Z">
        <seg>details.statusScheme = [&lt;s3&gt;"bronze"&lt;/s3&gt;, &lt;s4&gt;"silver"&lt;/s4&gt;, &lt;s5&gt;"gold"&lt;/s5&gt;, &lt;s6&gt;"platinum"&lt;/s6&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.useTarget &lt;s7&gt;"org.slf4j:log4j-over-slf4j:1.7.5"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025006Z" creationid="huanghaohang" creationdate="20190605T025006Z">
        <seg>details.useTarget &lt;s7&gt;"org.slf4j:log4j-over-slf4j:1.7.5"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.useTarget group: details.requested.group, name: &lt;s3&gt;'groovy'&lt;/s3&gt;, version: details.requested.version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025004Z" creationid="huanghaohang" creationdate="20190605T025004Z">
        <seg>details.useTarget group: details.requested.group, name: &lt;s3&gt;'groovy'&lt;/s3&gt;, version: details.requested.version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.useVersion &lt;s2&gt;'1.4'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015345Z" creationid="huanghaohang" creationdate="20190605T015345Z">
        <seg>details.useVersion &lt;s2&gt;'1.4'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.useVersion &lt;s5&gt;'1.2.1'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T024506Z" creationid="huanghaohang" creationdate="20190605T024506Z">
        <seg>details.useVersion &lt;s5&gt;'1.2.1'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.useVersion version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022640Z" creationid="huanghaohang" creationdate="20190605T022640Z">
        <seg>details.useVersion version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>details.value = baseValue</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111944Z" creationid="huanghaohang" creationdate="20180406T111944Z">
        <seg>details.value = baseValue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>developerGuide {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130957Z" creationid="huanghaohang" creationdate="20190728T130957Z">
        <seg>developerGuide {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100635Z" creationid="haohang" creationdate="20180326T100635Z">
        <seg>dir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s0&gt;'lib'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040557Z" creationid="huanghaohang" creationdate="20190603T040557Z">
        <seg>dirs &lt;s0&gt;'lib'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s0&gt;'repos'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153709Z" creationid="95" creationdate="20170731T153709Z">
        <seg>dirs &lt;s0&gt;'repos'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s15&gt;'repos'&lt;/s15&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154119Z" creationid="95" creationdate="20170731T154119Z">
        <seg>dirs &lt;s15&gt;'repos'&lt;/s15&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s1&gt;"repo"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080209Z" creationid="huanghaohang" creationdate="20190606T080209Z">
        <seg>dirs &lt;s1&gt;"repo"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s1&gt;'lib'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025340Z" creationid="huanghaohang" creationdate="20190604T025340Z">
        <seg>dirs &lt;s1&gt;'lib'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s1&gt;'lib1'&lt;/s1&gt;, &lt;s2&gt;'lib2'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T040559Z" creationid="huanghaohang" creationdate="20190603T040559Z">
        <seg>dirs &lt;s1&gt;'lib1'&lt;/s1&gt;, &lt;s2&gt;'lib2'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dirs &lt;s2&gt;'lib'&lt;/s2&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025343Z" creationid="huanghaohang" creationdate="20190604T025343Z">
        <seg>dirs &lt;s2&gt;'lib'&lt;/s2&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>displayName = &lt;s18&gt;"Custom Ear"&lt;/s18&gt;  &lt;s19&gt;// defaults to project.name&lt;/s19&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143000Z" creationid="huanghaohang" creationdate="20180416T143000Z">
        <seg>displayName = &lt;s18&gt;"Custom Ear"&lt;/s18&gt;  &lt;s19&gt;// defaults to project.name&lt;/s19&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distTar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133904Z" creationid="huanghaohang" creationdate="20190127T133904Z">
        <seg>distTar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distZip</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133851Z" creationid="huanghaohang" creationdate="20190127T133851Z">
        <seg>distZip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143740Z" creationid="huanghaohang" creationdate="20180207T143740Z">
        <seg>distribution</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distribution &lt;s3&gt;'repo'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061321Z" creationid="huanghaohang" creationdate="20190607T061321Z">
        <seg>distribution &lt;s3&gt;'repo'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distribution_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143724Z" creationid="huanghaohang" creationdate="20180207T143724Z">
        <seg>distribution_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distribution_plugin.html#N14652</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070446Z" creationid="huanghaohang" creationdate="20190205T070446Z">
        <seg>distribution_plugin.html#N14652</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distribution_plugin.html#N1468F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070447Z" creationid="huanghaohang" creationdate="20190205T070447Z">
        <seg>distribution_plugin.html#N1468F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distribution_plugin.html#N14783</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070449Z" creationid="huanghaohang" creationdate="20190205T070449Z">
        <seg>distribution_plugin.html#N14783</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distributions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061539Z" creationid="haohang" creationdate="20180313T061539Z">
        <seg>distributions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distributions {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170728T012114Z" creationid="haohang" creationdate="20170728T012114Z">
        <seg>distributions {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dists {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012004Z" creationid="huanghaohang" creationdate="20170910T012004Z">
        <seg>dists {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distsDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062136Z" creationid="haohang" creationdate="20180313T062136Z">
        <seg>distsDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>distsDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061536Z" creationid="haohang" creationdate="20180313T061536Z">
        <seg>distsDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>doFirst {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025425Z" creationid="huanghaohang" creationdate="20180107T025425Z">
        <seg>doFirst {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144949Z" creationid="95" creationdate="20170724T144949Z">
        <seg>doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>doLast {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145019Z" creationid="huanghaohang" creationdate="20190615T145019Z">
        <seg>doLast {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>doLast{</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124927Z" creationid="huanghaohang" creationdate="20171015T124927Z">
        <seg>doLast{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>docs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062151Z" creationid="haohang" creationdate="20180313T062151Z">
        <seg>docs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>docs - Builds the documentation
api:libs - Builds the JAR</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012328Z" creationid="huanghaohang" creationdate="20170910T012328Z">
        <seg>docs - Builds the documentation
api:libs - Builds the JAR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>docs.css</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072245Z" creationid="haohang" creationdate="20170720T072245Z">
        <seg>docs.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>docs.mkdirs()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140541Z" creationid="95" creationdate="20190131T140541Z">
        <seg>docs.mkdirs()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>docsDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062239Z" creationid="haohang" creationdate="20180313T062239Z">
        <seg>docsDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>docsDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062150Z" creationid="haohang" creationdate="20180313T062150Z">
        <seg>docsDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>driverClassName = &lt;s2&gt;"com.mysql.jdbc.Driver"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100116Z" creationid="huanghaohang" creationdate="20180715T100116Z">
        <seg>driverClassName = &lt;s2&gt;"com.mysql.jdbc.Driver"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>driverClassName = &lt;s3&gt;"com.mysql.jdbc.Driver"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152258Z" creationid="huanghaohang" creationdate="20180811T152258Z">
        <seg>driverClassName = &lt;s3&gt;"com.mysql.jdbc.Driver"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>dumpOnExit</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093255Z" creationid="huanghaohang" creationdate="20180715T093255Z">
        <seg>dumpOnExit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eachComponent { ComponentMetadataDetails details -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041009Z" creationid="huanghaohang" creationdate="20190605T041009Z">
        <seg>eachComponent { ComponentMetadataDetails details -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eachEntry { details -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111943Z" creationid="huanghaohang" creationdate="20180406T111943Z">
        <seg>eachEntry { details -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T014457Z" creationid="huanghaohang" creationdate="20180206T014457Z">
        <seg>ear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T014450Z" creationid="huanghaohang" creationdate="20180206T014450Z">
        <seg>ear_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#N130F0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142214Z" creationid="huanghaohang" creationdate="20181201T142214Z">
        <seg>ear_plugin.html#N130F0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#N130FF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142216Z" creationid="huanghaohang" creationdate="20181201T142216Z">
        <seg>ear_plugin.html#N130FF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#N1313F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142218Z" creationid="huanghaohang" creationdate="20181201T142218Z">
        <seg>ear_plugin.html#N1313F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#N13159</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142219Z" creationid="huanghaohang" creationdate="20181201T142219Z">
        <seg>ear_plugin.html#N13159</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#N13170</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142220Z" creationid="huanghaohang" creationdate="20181201T142220Z">
        <seg>ear_plugin.html#N13170</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#sec:customizing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142224Z" creationid="huanghaohang" creationdate="20181201T142224Z">
        <seg>ear_plugin.html#sec:customizing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#sec:default_settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142222Z" creationid="huanghaohang" creationdate="20181201T142222Z">
        <seg>ear_plugin.html#sec:default_settings</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ear_plugin.html#sec:using_custom_app_xml</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142227Z" creationid="huanghaohang" creationdate="20181201T142227Z">
        <seg>ear_plugin.html#sec:using_custom_app_xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>earlib group: &lt;s5&gt;'log4j'&lt;/s5&gt;, name: &lt;s6&gt;'log4j'&lt;/s6&gt;, version: &lt;s7&gt;'1.2.15'&lt;/s7&gt;, ext: &lt;s8&gt;'jar'&lt;/s8&gt;
}

ear {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142955Z" creationid="huanghaohang" creationdate="20180416T142955Z">
        <seg>earlib group: &lt;s5&gt;'log4j'&lt;/s5&gt;, name: &lt;s6&gt;'log4j'&lt;/s6&gt;, version: &lt;s7&gt;'1.2.15'&lt;/s7&gt;, ext: &lt;s8&gt;'jar'&lt;/s8&gt;
}

ear {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144520Z" creationid="huanghaohang" creationdate="20180207T144520Z">
        <seg>eclipse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse-wtp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180210T135846Z" creationid="huanghaohang" creationdate="20180210T135846Z">
        <seg>eclipse-wtp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.classpath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061716Z" creationid="huanghaohang" creationdate="20181210T061716Z">
        <seg>eclipse.classpath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.classpath.file {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084113Z" creationid="huanghaohang" creationdate="20181210T084113Z">
        <seg>eclipse.classpath.file {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.jdt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061724Z" creationid="huanghaohang" creationdate="20181210T061724Z">
        <seg>eclipse.jdt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061710Z" creationid="huanghaohang" creationdate="20181210T061710Z">
        <seg>eclipse.project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.project.file.beforeMerged { project -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084530Z" creationid="huanghaohang" creationdate="20181210T084530Z">
        <seg>eclipse.project.file.beforeMerged { project -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.wtp.component</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061755Z" creationid="huanghaohang" creationdate="20181210T061755Z">
        <seg>eclipse.wtp.component</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse.wtp.facet</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T061815Z" creationid="huanghaohang" creationdate="20181210T061815Z">
        <seg>eclipse.wtp.facet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipseClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025951Z" creationid="huanghaohang" creationdate="20181210T025951Z">
        <seg>eclipseClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipseJdt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030002Z" creationid="huanghaohang" creationdate="20181210T030002Z">
        <seg>eclipseJdt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipseProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T025934Z" creationid="huanghaohang" creationdate="20181210T025934Z">
        <seg>eclipseProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipseWtpComponent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030015Z" creationid="huanghaohang" creationdate="20181210T030015Z">
        <seg>eclipseWtpComponent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipseWtpFacet</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T030037Z" creationid="huanghaohang" creationdate="20181210T030037Z">
        <seg>eclipseWtpFacet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153833Z" creationid="95" creationdate="20170731T153833Z">
        <seg>eclipse_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse_plugin.html#N13D46</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070326Z" creationid="huanghaohang" creationdate="20190205T070326Z">
        <seg>eclipse_plugin.html#N13D46</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse_plugin.html#N13D5D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070328Z" creationid="huanghaohang" creationdate="20190205T070328Z">
        <seg>eclipse_plugin.html#N13D5D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse_plugin.html#N13EC7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070329Z" creationid="huanghaohang" creationdate="20190205T070329Z">
        <seg>eclipse_plugin.html#N13EC7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse_plugin.html#N13F46</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070330Z" creationid="huanghaohang" creationdate="20190205T070330Z">
        <seg>eclipse_plugin.html#N13F46</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>eclipse_plugin.html#sec:complete-overwrite</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T083632Z" creationid="huanghaohang" creationdate="20181210T083632Z">
        <seg>eclipse_plugin.html#sec:complete-overwrite</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>emailNotification = &lt;s2&gt;"build@master.org"&lt;/s2&gt;
}

sourceSets.all { ext.purpose = null }

sourceSets {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133530Z" creationid="huanghaohang" creationdate="20170913T133530Z">
        <seg>emailNotification = &lt;s2&gt;"build@master.org"&lt;/s2&gt;
}

sourceSets.all { ext.purpose = null }

sourceSets {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>embedding.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180108T135123Z" creationid="huanghaohang" creationdate="20180108T135123Z">
        <seg>embedding.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>enabled</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093237Z" creationid="huanghaohang" creationdate="20180715T093237Z">
        <seg>enabled</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>endIndex = &lt;s3&gt;5&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145823Z" creationid="huanghaohang" creationdate="20170918T145823Z">
        <seg>endIndex = &lt;s3&gt;5&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>english</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052712Z" creationid="huanghaohang" creationdate="20190610T052712Z">
        <seg>english</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>evaluationDependsOn(&lt;s0&gt;':producer'&lt;/s0&gt;)

def message = rootProject.producerMessage

task consume &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153657Z" creationid="huanghaohang" creationdate="20190616T153657Z">
        <seg>evaluationDependsOn(&lt;s0&gt;':producer'&lt;/s0&gt;)

def message = rootProject.producerMessage

task consume &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>exclude &lt;s1&gt;'**/*staging*'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060921Z" creationid="huanghaohang" creationdate="20171126T060921Z">
        <seg>exclude &lt;s1&gt;'**/*staging*'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>exclude module: &lt;s4&gt;'shared'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105652Z" creationid="huanghaohang" creationdate="20190602T105652Z">
        <seg>exclude module: &lt;s4&gt;'shared'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>exclude { details -&gt; details.file.name.endsWith(&lt;s4&gt;'.html'&lt;/s4&gt;) &amp;&amp; details.file.text.contains(&lt;s5&gt;'staging'&lt;/s5&gt;) }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075124Z" creationid="huanghaohang" creationdate="20171015T075124Z">
        <seg>exclude { details -&gt; details.file.name.endsWith(&lt;s4&gt;'.html'&lt;/s4&gt;) &amp;&amp; details.file.text.contains(&lt;s5&gt;'staging'&lt;/s5&gt;) }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>exclude(name: &lt;s3&gt;'**.java'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090757Z" creationid="huanghaohang" creationdate="20171219T090757Z">
        <seg>exclude(name: &lt;s3&gt;'**.java'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>excludeCategories &lt;s1&gt;'org.gradle.junit.CategoryB'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T041840Z" creationid="huanghaohang" creationdate="20180406T041840Z">
        <seg>excludeCategories &lt;s1&gt;'org.gradle.junit.CategoryB'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>excludeClassLoaders</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093251Z" creationid="huanghaohang" creationdate="20180715T093251Z">
        <seg>excludeClassLoaders</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>excludeGroups &lt;s0&gt;'integrationTests'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042050Z" creationid="huanghaohang" creationdate="20180406T042050Z">
        <seg>excludeGroups &lt;s0&gt;'integrationTests'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>excludes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093250Z" creationid="huanghaohang" creationdate="20180715T093250Z">
        <seg>excludes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>executables {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030737Z" creationid="huanghaohang" creationdate="20190609T030737Z">
        <seg>executables {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>executionData run</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093758Z" creationid="huanghaohang" creationdate="20180715T093758Z">
        <seg>executionData run</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>expand(copyright: &lt;s5&gt;'2009'&lt;/s5&gt;, version: &lt;s6&gt;'2.3.1'&lt;/s6&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060343Z" creationid="huanghaohang" creationdate="20171126T060343Z">
        <seg>expand(copyright: &lt;s5&gt;'2009'&lt;/s5&gt;, version: &lt;s6&gt;'2.3.1'&lt;/s6&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>expand(project.properties)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060343Z" creationid="huanghaohang" creationdate="20171126T060343Z">
        <seg>expand(project.properties)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>exportedHeaders {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051621Z" creationid="huanghaohang" creationdate="20190609T051621Z">
        <seg>exportedHeaders {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.arctic = false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145018Z" creationid="huanghaohang" creationdate="20190615T145018Z">
        <seg>ext.arctic = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.arctic = true
hello &lt;&lt; { println &lt;s0&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s0&gt; }

task distanceToIceberg &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162430Z" creationid="huanghaohang" creationdate="20190615T162430Z">
        <seg>ext.arctic = true
hello &lt;&lt; { println &lt;s0&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s0&gt; }

task distanceToIceberg &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.arctic = true
hello &lt;&lt; { println &lt;s0&gt;"- The weight of my species in summer is twice as heavy as all human beings."&lt;/s0&gt; }

task distanceToIceberg &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162441Z" creationid="huanghaohang" creationdate="20190615T162441Z">
        <seg>ext.arctic = true
hello &lt;&lt; { println &lt;s0&gt;"- The weight of my species in summer is twice as heavy as all human beings."&lt;/s0&gt; }

task distanceToIceberg &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.arctic = true
hello.doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145016Z" creationid="huanghaohang" creationdate="20190615T145016Z">
        <seg>ext.arctic = true
hello.doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.arctic = true
hello.doLast { println &lt;s0&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s0&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145015Z" creationid="huanghaohang" creationdate="20190615T145015Z">
        <seg>ext.arctic = true
hello.doLast { println &lt;s0&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s0&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.destDir = &lt;s1&gt;new&lt;/s1&gt; File(buildDir, &lt;s2&gt;'generated'&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085709Z" creationid="huanghaohang" creationdate="20170922T085709Z">
        <seg>ext.destDir = &lt;s1&gt;new&lt;/s1&gt; File(buildDir, &lt;s2&gt;'generated'&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.myProperty = &lt;s0&gt;"myValue"&lt;/s0&gt;
}

task printTaskProperties &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141959Z" creationid="95" creationdate="20170727T141959Z">
        <seg>ext.myProperty = &lt;s0&gt;"myValue"&lt;/s0&gt;
}

task printTaskProperties &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.sharedManifest = manifest {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111609Z" creationid="huanghaohang" creationdate="20180406T111609Z">
        <seg>ext.sharedManifest = manifest {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.srcDir = { file(srcDirName) }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132525Z" creationid="huanghaohang" creationdate="20191201T132525Z">
        <seg>ext.srcDir = { file(srcDirName) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.srcDirName = &lt;s1&gt;'src/java'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132524Z" creationid="huanghaohang" creationdate="20191201T132524Z">
        <seg>ext.srcDirName = &lt;s1&gt;'src/java'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.srcDirName = &lt;s9&gt;"$srcDirName/legacy"&lt;/s9&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132531Z" creationid="huanghaohang" creationdate="20191201T132531Z">
        <seg>ext.srcDirName = &lt;s9&gt;"$srcDirName/legacy"&lt;/s9&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ext.srcFile = file(&lt;s0&gt;'mountains.xml'&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085708Z" creationid="huanghaohang" creationdate="20170922T085708Z">
        <seg>ext.srcFile = file(&lt;s0&gt;'mountains.xml'&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>extendsFrom compile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153659Z" creationid="huanghaohang" creationdate="20190527T153659Z">
        <seg>extendsFrom compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>extension</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233225Z" creationid="huanghaohang" creationdate="20171206T233225Z">
        <seg>extension</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>failing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090223Z" creationid="huanghaohang" creationdate="20190611T090223Z">
        <seg>failing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093307Z" creationid="huanghaohang" creationdate="20180715T093307Z">
        <seg>false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>feature_lifecycle.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130934Z" creationid="huanghaohang" creationdate="20170919T130934Z">
        <seg>feature_lifecycle.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>feature_lifecycle.html#sec:incubating_state</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043854Z" creationid="huanghaohang" creationdate="20170923T043854Z">
        <seg>feature_lifecycle.html#sec:incubating_state</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030321Z" creationid="huanghaohang" creationdate="20190603T030321Z">
        <seg>file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file(&lt;s0&gt;"$buildDir/outputs/1.txt"&lt;/s0&gt;).delete()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143008Z" creationid="huanghaohang" creationdate="20190707T143008Z">
        <seg>file(&lt;s0&gt;"$buildDir/outputs/1.txt"&lt;/s0&gt;).delete()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file(&lt;s0&gt;'inputs/1.txt'&lt;/s0&gt;).text = &lt;s1&gt;"Changed content for existing file 1."&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142251Z" creationid="huanghaohang" creationdate="20190707T142251Z">
        <seg>file(&lt;s0&gt;'inputs/1.txt'&lt;/s0&gt;).text = &lt;s1&gt;"Changed content for existing file 1."&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file(&lt;s0&gt;'inputs/3.txt'&lt;/s0&gt;).delete()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142527Z" creationid="huanghaohang" creationdate="20190707T142527Z">
        <seg>file(&lt;s0&gt;'inputs/3.txt'&lt;/s0&gt;).delete()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file(&lt;s12&gt;'src'&lt;/s12&gt;).listFiles().findAll {it.name.endsWith(&lt;s13&gt;'.zip'&lt;/s13&gt;)}.collect { zipTree(it) }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134057Z" creationid="huanghaohang" creationdate="20171002T134057Z">
        <seg>file(&lt;s12&gt;'src'&lt;/s12&gt;).listFiles().findAll {it.name.endsWith(&lt;s13&gt;'.zip'&lt;/s13&gt;)}.collect { zipTree(it) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file(&lt;s2&gt;'inputs/4.txt'&lt;/s2&gt;).text = &lt;s3&gt;"Content for new file 4."&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142252Z" creationid="huanghaohang" creationdate="20190707T142252Z">
        <seg>file(&lt;s2&gt;'inputs/4.txt'&lt;/s2&gt;).text = &lt;s3&gt;"Content for new file 4."&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file(dir).listFiles({file -&gt; file.isFile() } as FileFilter).sort()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023513Z" creationid="95" creationdate="20170729T023513Z">
        <seg>file(dir).listFiles({file -&gt; file.isFile() } as FileFilter).sort()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file.parentFile.mkdirs()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151157Z" creationid="huanghaohang" creationdate="20190727T151157Z">
        <seg>file.parentFile.mkdirs()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>file.write &lt;s3&gt;"Hello!"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151158Z" creationid="huanghaohang" creationdate="20190727T151158Z">
        <seg>file.write &lt;s3&gt;"Hello!"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileList(&lt;s0&gt;'../antLoadfileResources'&lt;/s0&gt;).each {File file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023457Z" creationid="95" creationdate="20170729T023457Z">
        <seg>fileList(&lt;s0&gt;'../antLoadfileResources'&lt;/s0&gt;).each {File file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileList(&lt;s4&gt;'../antLoadfileResources'&lt;/s4&gt;).each {File file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023509Z" creationid="95" creationdate="20170729T023509Z">
        <seg>fileList(&lt;s4&gt;'../antLoadfileResources'&lt;/s4&gt;).each {File file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileName.replace(&lt;s3&gt;'-staging-'&lt;/s3&gt;, &lt;s4&gt;''&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060239Z" creationid="huanghaohang" creationdate="20171126T060239Z">
        <seg>fileName.replace(&lt;s3&gt;'-staging-'&lt;/s3&gt;, &lt;s4&gt;''&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>files.each { File file -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153759Z" creationid="95" creationdate="20170728T153759Z">
        <seg>files.each { File file -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileset(dir: &lt;s0&gt;'libs'&lt;/s0&gt;, includes: &lt;s1&gt;'*.jar'&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T091123Z" creationid="huanghaohang" creationdate="20171219T091123Z">
        <seg>fileset(dir: &lt;s0&gt;'libs'&lt;/s0&gt;, includes: &lt;s1&gt;'*.jar'&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileset(dir: &lt;s1&gt;'libs'&lt;/s1&gt;, includes: &lt;s2&gt;'*.jar'&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083831Z" creationid="huanghaohang" creationdate="20180105T083831Z">
        <seg>fileset(dir: &lt;s1&gt;'libs'&lt;/s1&gt;, includes: &lt;s2&gt;'*.jar'&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileset(dir: &lt;s1&gt;'src'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090756Z" creationid="huanghaohang" creationdate="20171219T090756Z">
        <seg>fileset(dir: &lt;s1&gt;'src'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileset(dir: &lt;s4&gt;'src'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083840Z" creationid="huanghaohang" creationdate="20180105T083840Z">
        <seg>fileset(dir: &lt;s4&gt;'src'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileset(dir: &lt;s7&gt;'src'&lt;/s7&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084334Z" creationid="huanghaohang" creationdate="20180105T084334Z">
        <seg>fileset(dir: &lt;s7&gt;'src'&lt;/s7&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fileset(dir: &lt;s8&gt;"htdocs/manual"&lt;/s8&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141303Z" creationid="huanghaohang" creationdate="20191202T141303Z">
        <seg>fileset(dir: &lt;s8&gt;"htdocs/manual"&lt;/s8&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>filter {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131636Z" creationid="huanghaohang" creationdate="20180405T131636Z">
        <seg>filter {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>filter { String line -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060347Z" creationid="huanghaohang" creationdate="20171126T060347Z">
        <seg>filter { String line -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>filter(FixCrLfFilter)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060345Z" creationid="huanghaohang" creationdate="20171126T060345Z">
        <seg>filter(FixCrLfFilter)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>filter(ReplaceTokens, tokens: [copyright: &lt;s8&gt;'2009'&lt;/s8&gt;, version: &lt;s9&gt;'2.3.1'&lt;/s9&gt;])</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060345Z" creationid="huanghaohang" creationdate="20171126T060345Z">
        <seg>filter(ReplaceTokens, tokens: [copyright: &lt;s8&gt;'2009'&lt;/s8&gt;, version: &lt;s9&gt;'2.3.1'&lt;/s9&gt;])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T012447Z" creationid="huanghaohang" creationdate="20180211T012447Z">
        <seg>findbugs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142350Z" creationid="huanghaohang" creationdate="20180516T142350Z">
        <seg>findbugs&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugsMain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142301Z" creationid="huanghaohang" creationdate="20180516T142301Z">
        <seg>findbugsMain</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugsTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142334Z" creationid="huanghaohang" creationdate="20180516T142334Z">
        <seg>findbugsTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T012444Z" creationid="huanghaohang" creationdate="20180211T012444Z">
        <seg>findbugs_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs_plugin.html#N134C7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070012Z" creationid="huanghaohang" creationdate="20190205T070012Z">
        <seg>findbugs_plugin.html#N134C7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs_plugin.html#N134DB</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070015Z" creationid="huanghaohang" creationdate="20190205T070015Z">
        <seg>findbugs_plugin.html#N134DB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs_plugin.html#N13550</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070017Z" creationid="huanghaohang" creationdate="20190205T070017Z">
        <seg>findbugs_plugin.html#N13550</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>findbugs_plugin.html#N1356C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070019Z" creationid="huanghaohang" creationdate="20190205T070019Z">
        <seg>findbugs_plugin.html#N1356C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>flatDir {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153706Z" creationid="95" creationdate="20170731T153706Z">
        <seg>flatDir {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>flatDir { dirs &lt;s0&gt;"lib"&lt;/s0&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143059Z" creationid="huanghaohang" creationdate="20180408T143059Z">
        <seg>flatDir { dirs &lt;s0&gt;"lib"&lt;/s0&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>flatDir { dirs &lt;s0&gt;'lib'&lt;/s0&gt; }
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123328Z" creationid="huanghaohang" creationdate="20180406T123328Z">
        <seg>flatDir { dirs &lt;s0&gt;'lib'&lt;/s0&gt; }
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>flavors {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052710Z" creationid="huanghaohang" creationdate="20190610T052710Z">
        <seg>flavors {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>forceAnalysis</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085308Z" creationid="huanghaohang" creationdate="20181012T085308Z">
        <seg>forceAnalysis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>formatter(type: &lt;s5&gt;'text'&lt;/s5&gt;, toConsole: &lt;s6&gt;'true'&lt;/s6&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084333Z" creationid="huanghaohang" creationdate="20180105T084333Z">
        <seg>formatter(type: &lt;s5&gt;'text'&lt;/s5&gt;, toConsole: &lt;s6&gt;'true'&lt;/s6&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>french</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052715Z" creationid="huanghaohang" creationdate="20190610T052715Z">
        <seg>french</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;c0&gt;gradle.properties&lt;/c0&gt; located in &lt;c1&gt;gradle user home&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180124T144905Z" creationid="huanghaohang" creationdate="20180124T144905Z">
        <seg>位于 &lt;c1&gt;gradle 用户主目录&lt;/c1&gt; 的 &lt;c0&gt;gradle.properties&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;c0&gt;gradle.properties&lt;/c0&gt; located in project build dir.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180124T144838Z" creationid="huanghaohang" creationdate="20180124T144838Z">
        <seg>位于项目构建目录的 &lt;c0&gt;gradle.properties&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s0&gt;'resources'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124610Z" creationid="huanghaohang" creationdate="20170919T124610Z">
        <seg>from &lt;s0&gt;'resources'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s0&gt;'src/dist'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125718Z" creationid="95" creationdate="20170803T125718Z">
        <seg>from &lt;s0&gt;'src/dist'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s0&gt;'src/main/webapp'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T135608Z" creationid="huanghaohang" creationdate="20171002T135608Z">
        <seg>from &lt;s0&gt;'src/main/webapp'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s11&gt;'src/rootContent'&lt;/s11&gt; &lt;s12&gt;// adds a file-set to the root of the archive&lt;/s12&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143127Z" creationid="huanghaohang" creationdate="20180408T143127Z">
        <seg>from &lt;s11&gt;'src/rootContent'&lt;/s11&gt; &lt;s12&gt;// adds a file-set to the root of the archive&lt;/s12&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s1&gt;"source"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132955Z" creationid="huanghaohang" creationdate="20170913T132955Z">
        <seg>from &lt;s1&gt;"source"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s1&gt;"src/stuff"&lt;/s1&gt;
}

signing {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135236Z" creationid="huanghaohang" creationdate="20190608T135236Z">
        <seg>from &lt;s1&gt;"src/stuff"&lt;/s1&gt;
}

signing {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s1&gt;'resources'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082303Z" creationid="huanghaohang" creationdate="20170922T082303Z">
        <seg>from &lt;s1&gt;'resources'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s1&gt;'src/dist'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135306Z" creationid="huanghaohang" creationdate="20171126T135306Z">
        <seg>from &lt;s1&gt;'src/dist'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s1&gt;'src/main/webapp'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075016Z" creationid="huanghaohang" creationdate="20171015T075016Z">
        <seg>from &lt;s1&gt;'src/main/webapp'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s2&gt;'somedir'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232532Z" creationid="huanghaohang" creationdate="20171206T232532Z">
        <seg>from &lt;s2&gt;'somedir'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s2&gt;'somedir'&lt;/s2&gt;
}

println myZip.archiveName
println relativePath(myZip.destinationDir)
println relativePath(myZip.archivePath)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T140716Z" creationid="huanghaohang" creationdate="20171126T140716Z">
        <seg>from &lt;s2&gt;'somedir'&lt;/s2&gt;
}

println myZip.archiveName
println relativePath(myZip.destinationDir)
println relativePath(myZip.archivePath)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s2&gt;'src/main/webapp'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060340Z" creationid="huanghaohang" creationdate="20171126T060340Z">
        <seg>from &lt;s2&gt;'src/main/webapp'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s3&gt;'src/staging/index.html'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075018Z" creationid="huanghaohang" creationdate="20171015T075018Z">
        <seg>from &lt;s3&gt;'src/staging/index.html'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from &lt;s5&gt;'somedir'&lt;/s5&gt;
}

println myZip.archiveName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232602Z" creationid="huanghaohang" creationdate="20171206T232602Z">
        <seg>from &lt;s5&gt;'somedir'&lt;/s5&gt;
}

println myZip.archiveName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from archiveTask.archivePath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150912Z" creationid="huanghaohang" creationdate="20190617T150912Z">
        <seg>from archiveTask.archivePath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from configurations.runtime</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125721Z" creationid="95" creationdate="20170803T125721Z">
        <seg>from configurations.runtime</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from copyTask</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075022Z" creationid="huanghaohang" creationdate="20171015T075022Z">
        <seg>from copyTask</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from copyTaskWithPatterns.outputs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075026Z" creationid="huanghaohang" creationdate="20171015T075026Z">
        <seg>from copyTaskWithPatterns.outputs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from sharedManifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111611Z" creationid="huanghaohang" creationdate="20180406T111611Z">
        <seg>from sharedManifest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from sharedManifest, &lt;s1&gt;'src/config/basemanifest.txt'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111942Z" creationid="huanghaohang" creationdate="20180406T111942Z">
        <seg>from sharedManifest, &lt;s1&gt;'src/config/basemanifest.txt'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from sourceSets.intTest.output
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095353Z" creationid="haohang" creationdate="20180326T095353Z">
        <seg>from sourceSets.intTest.output
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from sourceSets.main.output</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162742Z" creationid="huanghaohang" creationdate="20190617T162742Z">
        <seg>from sourceSets.main.output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from spiJar.archivePath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125720Z" creationid="95" creationdate="20170803T125720Z">
        <seg>from spiJar.archivePath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from system properties, e.g. when &lt;c0&gt;-Dsome.property&lt;/c0&gt; is used in the command line.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180124T144939Z" creationid="huanghaohang" creationdate="20180124T144939Z">
        <seg>系统属性，例如当在命令行中使用 &lt;c0&gt;-Dsome.property&lt;/c0&gt; 时。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from zipTree(&lt;s7&gt;'src/main/assets.zip'&lt;/s7&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075028Z" creationid="huanghaohang" creationdate="20171015T075028Z">
        <seg>from zipTree(&lt;s7&gt;'src/main/assets.zip'&lt;/s7&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from { &lt;s1&gt;'src/dist'&lt;/s1&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T144003Z" creationid="95" creationdate="20190131T144003Z">
        <seg>from { &lt;s1&gt;'src/dist'&lt;/s1&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from { &lt;s2&gt;'src/readme'&lt;/s2&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T061246Z" creationid="huanghaohang" creationdate="20190128T061246Z">
        <seg>from { &lt;s2&gt;'src/readme'&lt;/s2&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from(&lt;s2&gt;'src/config/javabasemanifest.txt'&lt;/s2&gt;, &lt;s3&gt;'src/config/libbasemanifest.txt'&lt;/s3&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111942Z" creationid="huanghaohang" creationdate="20180406T111942Z">
        <seg>from(&lt;s2&gt;'src/config/javabasemanifest.txt'&lt;/s2&gt;, &lt;s3&gt;'src/config/libbasemanifest.txt'&lt;/s3&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from(&lt;s2&gt;'src/dist'&lt;/s2&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060921Z" creationid="huanghaohang" creationdate="20171126T060921Z">
        <seg>from(&lt;s2&gt;'src/dist'&lt;/s2&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from(file(&lt;s1&gt;'srcDir'&lt;/s1&gt;))</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120837Z" creationid="huanghaohang" creationdate="20170919T120837Z">
        <seg>from(file(&lt;s1&gt;'srcDir'&lt;/s1&gt;))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>from(file(&lt;s3&gt;'srcDir'&lt;/s3&gt;))</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121057Z" creationid="huanghaohang" creationdate="20170919T121057Z">
        <seg>from(file(&lt;s3&gt;'srcDir'&lt;/s3&gt;))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ftp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093626Z" creationid="huanghaohang" creationdate="20190607T093626Z">
        <seg>ftp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ftp(server: &lt;s5&gt;"ftp.apache.org"&lt;/s5&gt;, userid: &lt;s6&gt;"anonymous"&lt;/s6&gt;, password: &lt;s7&gt;"me@myorg.com"&lt;/s7&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141301Z" creationid="huanghaohang" creationdate="20191202T141301Z">
        <seg>ftp(server: &lt;s5&gt;"ftp.apache.org"&lt;/s5&gt;, userid: &lt;s6&gt;"anonymous"&lt;/s6&gt;, password: &lt;s7&gt;"me@myorg.com"&lt;/s7&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ftpAntTask
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141255Z" creationid="huanghaohang" creationdate="20191202T141255Z">
        <seg>ftpAntTask
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ftpAntTask(&lt;s0&gt;"org.apache.ant:ant-commons-net:1.9.3"&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141255Z" creationid="huanghaohang" creationdate="20191202T141255Z">
        <seg>ftpAntTask(&lt;s0&gt;"org.apache.ant:ant-commons-net:1.9.3"&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gcc(Gcc) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084914Z" creationid="huanghaohang" creationdate="20190610T084914Z">
        <seg>gcc(Gcc) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>generate&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;GrammarSource</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013610Z" creationid="huanghaohang" creationdate="20190123T013610Z">
        <seg>generate&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;GrammarSource</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>generateGrammarSource</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013507Z" creationid="huanghaohang" creationdate="20190123T013507Z">
        <seg>generateGrammarSource</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>generateTestGrammarSource</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013601Z" creationid="huanghaohang" creationdate="20190123T013601Z">
        <seg>generateTestGrammarSource</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle --gui</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143308Z" creationid="huanghaohang" creationdate="20170911T143308Z">
        <seg>gradle --gui</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle -DintegTest.single=*IntegrationTest integTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142923Z" creationid="huanghaohang" creationdate="20180405T142923Z">
        <seg>gradle -DintegTest.single=*IntegrationTest integTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle -DintegTest.single=c/d/ :proj1:integTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142929Z" creationid="huanghaohang" creationdate="20180405T142929Z">
        <seg>gradle -DintegTest.single=c/d/ :proj1:integTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle -Dtest.single=:proj1:test:Customer build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142926Z" creationid="huanghaohang" creationdate="20180405T142926Z">
        <seg>gradle -Dtest.single=:proj1:test:Customer build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle -Dtest.single=ThisUniquelyNamedTest test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142919Z" creationid="huanghaohang" creationdate="20180405T142919Z">
        <seg>gradle -Dtest.single=ThisUniquelyNamedTest test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle -Dtest.single=a/b/ test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T142919Z" creationid="huanghaohang" creationdate="20180405T142919Z">
        <seg>gradle -Dtest.single=a/b/ test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle someTestTask --tests *UiTest someOtherTestTask --tests *WebTest*ui</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131746Z" creationid="huanghaohang" creationdate="20180405T131746Z">
        <seg>gradle someTestTask --tests *UiTest someOtherTestTask --tests *WebTest*ui</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle sonarAnalyze --server.url=http://sonar.mycompany.com --database.password=myPassword --verbose</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085316Z" creationid="huanghaohang" creationdate="20181012T085316Z">
        <seg>gradle sonarAnalyze --server.url=http://sonar.mycompany.com --database.password=myPassword --verbose</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle sonarRunner -Dsonar.host.url=http://sonar.mycompany.com -Dsonar.jdbc.password=myPassword -Dsonar.verbose=true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T045349Z" creationid="huanghaohang" creationdate="20181202T045349Z">
        <seg>gradle sonarRunner -Dsonar.host.url=http://sonar.mycompany.com -Dsonar.jdbc.password=myPassword -Dsonar.verbose=true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle test --tests *IntegTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131743Z" creationid="huanghaohang" creationdate="20180405T131743Z">
        <seg>gradle test --tests *IntegTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle test --tests *IntegTest*ui*</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131744Z" creationid="huanghaohang" creationdate="20180405T131744Z">
        <seg>gradle test --tests *IntegTest*ui*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle test --tests *SomeSpecificTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131741Z" creationid="huanghaohang" creationdate="20180405T131741Z">
        <seg>gradle test --tests *SomeSpecificTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle test --tests *SomeTest.someSpecificFeature</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131740Z" creationid="huanghaohang" creationdate="20180405T131740Z">
        <seg>gradle test --tests *SomeTest.someSpecificFeature</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle test --tests all.in.specific.package*</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131742Z" creationid="huanghaohang" creationdate="20180405T131742Z">
        <seg>gradle test --tests all.in.specific.package*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle test --tests org.gradle.SomeTest.someSpecificFeature</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131739Z" creationid="huanghaohang" creationdate="20180405T131739Z">
        <seg>gradle test --tests org.gradle.SomeTest.someSpecificFeature</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle-wrapper.jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130154Z" creationid="huanghaohang" creationdate="20191219T130154Z">
        <seg>gradle-wrapper.jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle-wrapper.properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130208Z" creationid="huanghaohang" creationdate="20191219T130208Z">
        <seg>gradle-wrapper.properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle.afterProject {project, projectState -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150829Z" creationid="huanghaohang" creationdate="20190613T150829Z">
        <seg>gradle.afterProject {project, projectState -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle.allprojects{ project -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151217Z" creationid="huanghaohang" creationdate="20191206T151217Z">
        <seg>gradle.allprojects{ project -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle.properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135020Z" creationid="huanghaohang" creationdate="20170917T135020Z">
        <seg>gradle.properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle/wrapper/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130153Z" creationid="huanghaohang" creationdate="20191219T130153Z">
        <seg>gradle/wrapper/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradlePropertiesProp=gradlePropertiesValue
systemProjectProp=shouldBeOverWrittenBySystemProp
envProjectProp=shouldBeOverWrittenByEnvProp
systemProp.system=systemValue</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135022Z" creationid="huanghaohang" creationdate="20170917T135022Z">
        <seg>gradlePropertiesProp=gradlePropertiesValue
systemProjectProp=shouldBeOverWrittenBySystemProp
envProjectProp=shouldBeOverWrittenByEnvProp
systemProp.system=systemValue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradleVersion "1.1"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140207Z" creationid="huanghaohang" creationdate="20210515T140207Z">
        <seg>gradleVersion "1.1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradleVersion "1.2"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140218Z" creationid="huanghaohang" creationdate="20210515T140218Z">
        <seg>gradleVersion "1.2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradleVersion = &lt;s0&gt;'1.4'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130039Z" creationid="huanghaohang" creationdate="20191219T130039Z">
        <seg>gradleVersion = &lt;s0&gt;'1.4'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_command_line.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030916Z" creationid="95" creationdate="20170729T030916Z">
        <seg>gradle_command_line.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_daemon.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121208Z" creationid="95" creationdate="20170723T121208Z">
        <seg>gradle_daemon.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_daemon.html#daemon_usage_and_troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143345Z" creationid="huanghaohang" creationdate="20180516T143345Z">
        <seg>gradle_daemon.html#daemon_usage_and_troubleshooting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_daemon.html#enter_the_daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143327Z" creationid="huanghaohang" creationdate="20180516T143327Z">
        <seg>gradle_daemon.html#enter_the_daemon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_daemon.html#reusing_daemons</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143333Z" creationid="huanghaohang" creationdate="20180516T143333Z">
        <seg>gradle_daemon.html#reusing_daemons</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_daemon.html#sec:daemon_properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143351Z" creationid="huanghaohang" creationdate="20180516T143351Z">
        <seg>gradle_daemon.html#sec:daemon_properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradle_wrapper.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T155540Z" creationid="95" creationdate="20190201T155540Z">
        <seg>gradle_wrapper.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradlew</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130151Z" creationid="huanghaohang" creationdate="20191219T130151Z">
        <seg>gradlew</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>gradlew.bat</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130152Z" creationid="huanghaohang" creationdate="20191219T130152Z">
        <seg>gradlew.bat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>greeter = &lt;s1&gt;'Gradle'&lt;/s1&gt;
}

&lt;s2&gt;class&lt;/s2&gt; GreetingPlugin &lt;s3&gt;implements&lt;/s3&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151630Z" creationid="huanghaohang" creationdate="20190726T151630Z">
        <seg>greeter = &lt;s1&gt;'Gradle'&lt;/s1&gt;
}

&lt;s2&gt;class&lt;/s2&gt; GreetingPlugin &lt;s3&gt;implements&lt;/s3&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>greeting = &lt;s2&gt;'greetings from GreetingTask'&lt;/s2&gt;
}

&lt;s3&gt;class&lt;/s3&gt; GreetingTask &lt;s4&gt;extends&lt;/s4&gt; DefaultTask {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122511Z" creationid="huanghaohang" creationdate="20190706T122511Z">
        <seg>greeting = &lt;s2&gt;'greetings from GreetingTask'&lt;/s2&gt;
}

&lt;s3&gt;class&lt;/s3&gt; GreetingTask &lt;s4&gt;extends&lt;/s4&gt; DefaultTask {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>greeting = &lt;s4&gt;'howdy!'&lt;/s4&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123746Z" creationid="huanghaohang" creationdate="20190706T123746Z">
        <seg>greeting = &lt;s4&gt;'howdy!'&lt;/s4&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140842Z" creationid="huanghaohang" creationdate="20180205T140842Z">
        <seg>groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121938Z" creationid="huanghaohang" creationdate="20180406T121938Z">
        <seg>groovy {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy-base</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144444Z" creationid="huanghaohang" creationdate="20180207T144444Z">
        <seg>groovy-base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T133453Z" creationid="huanghaohang" creationdate="20180406T133453Z">
        <seg>groovy.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovyClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003658Z" creationid="huanghaohang" creationdate="20180407T003658Z">
        <seg>groovyClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T003353Z" creationid="huanghaohang" creationdate="20170909T003353Z">
        <seg>groovy_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N129D8</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133144Z" creationid="huanghaohang" creationdate="20180712T133144Z">
        <seg>groovy_plugin.html#N129D8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N129E7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133147Z" creationid="huanghaohang" creationdate="20180712T133147Z">
        <seg>groovy_plugin.html#N129E7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N12A7C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133149Z" creationid="huanghaohang" creationdate="20180712T133149Z">
        <seg>groovy_plugin.html#N12A7C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N12B1F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133151Z" creationid="huanghaohang" creationdate="20180712T133151Z">
        <seg>groovy_plugin.html#N12B1F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N12B63</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133153Z" creationid="huanghaohang" creationdate="20180712T133153Z">
        <seg>groovy_plugin.html#N12B63</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N12B9C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133205Z" creationid="huanghaohang" creationdate="20180712T133205Z">
        <seg>groovy_plugin.html#N12B9C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#N12BA1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133207Z" creationid="huanghaohang" creationdate="20180712T133207Z">
        <seg>groovy_plugin.html#N12BA1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#groovylayout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121128Z" creationid="huanghaohang" creationdate="20180406T121128Z">
        <seg>groovy_plugin.html#groovylayout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovy_plugin.html#sec:groovyCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T133214Z" creationid="huanghaohang" creationdate="20180712T133214Z">
        <seg>groovy_plugin.html#sec:groovyCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groovydoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T120907Z" creationid="huanghaohang" creationdate="20180406T120907Z">
        <seg>groovydoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>group</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132233Z" creationid="huanghaohang" creationdate="20170913T132233Z">
        <seg>group</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>group = &lt;s1&gt;'build'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012009Z" creationid="huanghaohang" creationdate="20170910T012009Z">
        <seg>group = &lt;s1&gt;'build'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>group = &lt;s1&gt;'org.gradle.sample'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150901Z" creationid="huanghaohang" creationdate="20190617T150901Z">
        <seg>group = &lt;s1&gt;'org.gradle.sample'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>groupId</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094947Z" creationid="huanghaohang" creationdate="20190607T094947Z">
        <seg>groupId</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>growl</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092215Z" creationid="huanghaohang" creationdate="20190124T092215Z">
        <seg>growl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hasTests = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145912Z" creationid="huanghaohang" creationdate="20190613T145912Z">
        <seg>hasTests = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>headers.srcDir &lt;s2&gt;"lib/cunit/2.1-2/include"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090225Z" creationid="huanghaohang" creationdate="20190611T090225Z">
        <seg>headers.srcDir &lt;s2&gt;"lib/cunit/2.1-2/include"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello &lt;&lt; {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142150Z" creationid="huanghaohang" creationdate="20190615T142150Z">
        <seg>hello &lt;&lt; {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello &lt;&lt; {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}
}
configure(subprojects.findAll {it.name != &lt;s2&gt;'tropicalFish'&lt;/s2&gt;}) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143725Z" creationid="huanghaohang" creationdate="20190615T143725Z">
        <seg>hello &lt;&lt; {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}
}
configure(subprojects.findAll {it.name != &lt;s2&gt;'tropicalFish'&lt;/s2&gt;}) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello &lt;&lt; {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}
}
project(&lt;s2&gt;':bluewhale'&lt;/s2&gt;).hello &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142643Z" creationid="huanghaohang" creationdate="20190615T142643Z">
        <seg>hello &lt;&lt; {println &lt;s1&gt;"- I depend on water"&lt;/s1&gt;}
}
project(&lt;s2&gt;':bluewhale'&lt;/s2&gt;).hello &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello &lt;&lt; {println &lt;s3&gt;'- I love to spend time in the arctic waters.'&lt;/s3&gt;}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143726Z" creationid="huanghaohang" creationdate="20190615T143726Z">
        <seg>hello &lt;&lt; {println &lt;s3&gt;'- I love to spend time in the arctic waters.'&lt;/s3&gt;}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051619Z" creationid="huanghaohang" creationdate="20190609T051619Z">
        <seg>hello {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello {}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030615Z" creationid="huanghaohang" creationdate="20190609T030615Z">
        <seg>hello {}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello.doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143031Z" creationid="huanghaohang" creationdate="20190615T143031Z">
        <seg>hello.doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello.doLast { println &lt;s0&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s0&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143023Z" creationid="huanghaohang" creationdate="20190615T143023Z">
        <seg>hello.doLast { println &lt;s0&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s0&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>hello/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150812Z" creationid="huanghaohang" creationdate="20190617T150812Z">
        <seg>hello/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>helloRes {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013424Z" creationid="huanghaohang" creationdate="20190610T013424Z">
        <seg>helloRes {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>html.destination &lt;s0&gt;"${buildDir}/jacocoHtml"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093011Z" creationid="huanghaohang" creationdate="20180715T093011Z">
        <seg>html.destination &lt;s0&gt;"${buildDir}/jacocoHtml"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>htmlDependencyReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040031Z" creationid="huanghaohang" creationdate="20190123T040031Z">
        <seg>htmlDependencyReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030327Z" creationid="huanghaohang" creationdate="20190603T030327Z">
        <seg>http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://ant.apache.org/ivy/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T154157Z" creationid="huanghaohang" creationdate="20210516T154157Z">
        <seg>http://ant.apache.org/ivy/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://ant.apache.org/ivy/history/latest-milestone/concept.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021226Z" creationid="huanghaohang" creationdate="20190606T021226Z">
        <seg>http://ant.apache.org/ivy/history/latest-milestone/concept.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://ant.apache.org/ivy/history/latest-milestone/settings/resolvers.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030450Z" creationid="huanghaohang" creationdate="20190604T030450Z">
        <seg>http://ant.apache.org/ivy/history/latest-milestone/settings/resolvers.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://bintray.com</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031050Z" creationid="huanghaohang" creationdate="20190603T031050Z">
        <seg>http://bintray.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-relationships.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T021212Z" creationid="huanghaohang" creationdate="20190606T021212Z">
        <seg>http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-relationships.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://checkstyle.sourceforge.net/index.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144401Z" creationid="huanghaohang" creationdate="20180207T144401Z">
        <seg>http://checkstyle.sourceforge.net/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://clang.llvm.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022231Z" creationid="huanghaohang" creationdate="20190609T022231Z">
        <seg>http://clang.llvm.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://clarkware.com/software/JDepend.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085814Z" creationid="huanghaohang" creationdate="20180211T085814Z">
        <seg>http://clarkware.com/software/JDepend.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://code.google.com/p/spock/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154853Z" creationid="95" creationdate="20190201T154853Z">
        <seg>http://code.google.com/p/spock/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://codenarc.sourceforge.net/index.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144446Z" creationid="huanghaohang" creationdate="20180207T144446Z">
        <seg>http://codenarc.sourceforge.net/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://cunit.sourceforge.net</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090435Z" creationid="huanghaohang" creationdate="20180211T090435Z">
        <seg>http://cunit.sourceforge.net</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://cygwin.com</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022538Z" creationid="huanghaohang" creationdate="20190609T022538Z">
        <seg>http://cygwin.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://docs.codehaus.org/display/SONAR/Analysis+Parameters</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135523Z" creationid="huanghaohang" creationdate="20180816T135523Z">
        <seg>http://docs.codehaus.org/display/SONAR/Analysis+Parameters</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://docs.codehaus.org/display/SONAR/Analyzing+with+Sonar+Runner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T095239Z" creationid="huanghaohang" creationdate="20180715T095239Z">
        <seg>http://docs.codehaus.org/display/SONAR/Analyzing+with+Sonar+Runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://download.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#referenceguide</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095502Z" creationid="haohang" creationdate="20180326T095502Z">
        <seg>http://download.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#referenceguide</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://download.oracle.com/javase/6/docs/technotes/guides/net/properties.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073550Z" creationid="huanghaohang" creationdate="20180130T073550Z">
        <seg>http://download.oracle.com/javase/6/docs/technotes/guides/net/properties.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://eclipse.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T144522Z" creationid="huanghaohang" creationdate="20180207T144522Z">
        <seg>http://eclipse.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://en.wikipedia.org/wiki/Continuous_integration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191207T133330Z" creationid="huanghaohang" creationdate="20191207T133330Z">
        <seg>http://en.wikipedia.org/wiki/Continuous_integration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://en.wikipedia.org/wiki/Directed_acyclic_graph</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T101734Z" creationid="huanghaohang" creationdate="20190611T101734Z">
        <seg>http://en.wikipedia.org/wiki/Directed_acyclic_graph</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T153620Z" creationid="huanghaohang" creationdate="20190623T153620Z">
        <seg>http://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://findbugs.sourceforge.net</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T060557Z" creationid="huanghaohang" creationdate="20180211T060557Z">
        <seg>http://findbugs.sourceforge.net</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://forums.gradle.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T121536Z" creationid="95" creationdate="20170723T121536Z">
        <seg>http://forums.gradle.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://gant.codehaus.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T005025Z" creationid="huanghaohang" creationdate="20180407T005025Z">
        <seg>http://gant.codehaus.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://gcc.gnu.org/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022229Z" creationid="huanghaohang" creationdate="20190609T022229Z">
        <seg>http://gcc.gnu.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://gradle.org/docs/current/dsl/org.gradle.api.tasks.scala.ScalaCompile.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110904Z" creationid="huanghaohang" creationdate="20180407T110904Z">
        <seg>http://gradle.org/docs/current/dsl/org.gradle.api.tasks.scala.ScalaCompile.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://groovy.codehaus.org/Closures</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141723Z" creationid="huanghaohang" creationdate="20170913T141723Z">
        <seg>http://groovy.codehaus.org/Closures</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://groovy.codehaus.org/Using+Ant+from+Groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083400Z" creationid="huanghaohang" creationdate="20180105T083400Z">
        <seg>http://groovy.codehaus.org/Using+Ant+from+Groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://groovy.codehaus.org/groovy-jdk/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T135850Z" creationid="huanghaohang" creationdate="20170913T135850Z">
        <seg>http://groovy.codehaus.org/groovy-jdk/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://growl.info/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085704Z" creationid="huanghaohang" creationdate="20190124T085704Z">
        <seg>http://growl.info/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://jcenter.bintray.com</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031457Z" creationid="huanghaohang" creationdate="20190603T031457Z">
        <seg>http://jcenter.bintray.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://junit.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154530Z" creationid="95" creationdate="20190201T154530Z">
        <seg>http://junit.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://lucene.apache.org/solr</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190623T152914Z" creationid="huanghaohang" creationdate="20190623T152914Z">
        <seg>http://lucene.apache.org/solr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://manpages.ubuntu.com/manpages/gutsy/man1/notify-send.1.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085658Z" creationid="huanghaohang" creationdate="20190124T085658Z">
        <seg>http://manpages.ubuntu.com/manpages/gutsy/man1/notify-send.1.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/Authentication.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093646Z" creationid="huanghaohang" creationdate="20190607T093646Z">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/Authentication.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/Proxy.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093702Z" creationid="huanghaohang" creationdate="20190607T093702Z">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/Proxy.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RemoteRepository.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093644Z" creationid="huanghaohang" creationdate="20190607T093644Z">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RemoteRepository.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RepositoryPolicy.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093655Z" creationid="huanghaohang" creationdate="20190607T093655Z">
        <seg>http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RepositoryPolicy.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://maven.apache.org/pom.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100724Z" creationid="huanghaohang" creationdate="20190607T100724Z">
        <seg>http://maven.apache.org/pom.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://mingw-w64.sourceforge.net</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024238Z" creationid="huanghaohang" creationdate="20190609T024238Z">
        <seg>http://mingw-w64.sourceforge.net</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://pmd.sourceforge.net</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085853Z" creationid="huanghaohang" creationdate="20180211T085853Z">
        <seg>http://pmd.sourceforge.net</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://repo1.maven.org/maven2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030926Z" creationid="huanghaohang" creationdate="20190603T030926Z">
        <seg>http://repo1.maven.org/maven2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://svn.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/util/ProxySetup.java?view=markup&amp;pathrev=556977</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073542Z" creationid="huanghaohang" creationdate="20180130T073542Z">
        <seg>http://svn.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/util/ProxySetup.java?view=markup&amp;pathrev=556977</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://testng.org/doc/documentation-main.html#parameters</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T055610Z" creationid="huanghaohang" creationdate="20180406T055610Z">
        <seg>http://testng.org/doc/documentation-main.html#parameters</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://testng.org/doc/documentation-main.html#test-groups</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113446Z" creationid="huanghaohang" creationdate="20180406T113446Z">
        <seg>http://testng.org/doc/documentation-main.html#test-groups</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://twitter.com</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085656Z" creationid="huanghaohang" creationdate="20190124T085656Z">
        <seg>http://twitter.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://wiki.gradle.org/display/GRADLE/Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092858Z" creationid="huanghaohang" creationdate="20180218T092858Z">
        <seg>http://wiki.gradle.org/display/GRADLE/Plugins</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.antlr.org/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T141227Z" creationid="huanghaohang" creationdate="20180205T141227Z">
        <seg>http://www.antlr.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.aqute.biz/Code/Bnd</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025819Z" creationid="huanghaohang" creationdate="20181203T025819Z">
        <seg>http://www.aqute.biz/Code/Bnd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.defmacro.org/ramblings/lisp.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072133Z" creationid="95" creationdate="20170723T072133Z">
        <seg>http://www.defmacro.org/ramblings/lisp.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.eclemma.org/jacoco/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090455Z" creationid="huanghaohang" creationdate="20180211T090455Z">
        <seg>http://www.eclemma.org/jacoco/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.gnupg.org/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130506Z" creationid="huanghaohang" creationdate="20190608T130506Z">
        <seg>http://www.gnupg.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.gnupg.org/documentation/howtos.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130515Z" creationid="huanghaohang" creationdate="20190608T130515Z">
        <seg>http://www.gnupg.org/documentation/howtos.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.gradle.org/contribute</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T142045Z" creationid="95" creationdate="20170721T142045Z">
        <seg>http://www.gradle.org/contribute</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.gradle.org/development</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114844Z" creationid="95" creationdate="20170723T114844Z">
        <seg>http://www.gradle.org/development</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.gradle.org/downloads</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T114310Z" creationid="95" creationdate="20170723T114310Z">
        <seg>http://www.gradle.org/downloads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.gradle.org/license</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T065552Z" creationid="95" creationdate="20170723T065552Z">
        <seg>http://www.gradle.org/license</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.jetbrains.com/idea/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T023901Z" creationid="huanghaohang" creationdate="20181212T023901Z">
        <seg>http://www.jetbrains.com/idea/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.jetbrains.com/idea/index.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085742Z" creationid="huanghaohang" creationdate="20180211T085742Z">
        <seg>http://www.jetbrains.com/idea/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.microsoft.com/visualstudio/en-us</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T022506Z" creationid="huanghaohang" creationdate="20190609T022506Z">
        <seg>http://www.microsoft.com/visualstudio/en-us</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.mingw.org/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T024223Z" creationid="huanghaohang" creationdate="20190609T024223Z">
        <seg>http://www.mingw.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.pgpi.org/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130252Z" creationid="huanghaohang" creationdate="20190608T130252Z">
        <seg>http://www.pgpi.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.scala-lang.org/docu/files/tools/fsc.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020439Z" creationid="huanghaohang" creationdate="20180407T020439Z">
        <seg>http://www.scala-lang.org/docu/files/tools/fsc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.scalatest.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T154722Z" creationid="95" creationdate="20190201T154722Z">
        <seg>http://www.scalatest.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.sonarsource.com/products/plugins/languages/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072231Z" creationid="huanghaohang" creationdate="20180812T072231Z">
        <seg>http://www.sonarsource.com/products/plugins/languages/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>http://www.sonarsource.org</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090027Z" creationid="huanghaohang" creationdate="20180211T090027Z">
        <seg>http://www.sonarsource.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>httpPort</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144622Z" creationid="huanghaohang" creationdate="20180416T144622Z">
        <seg>httpPort</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030332Z" creationid="huanghaohang" creationdate="20190603T030332Z">
        <seg>https</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https://docs.sonatype.org/display/Repository/Central+Sync+Requirements</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T130301Z" creationid="huanghaohang" creationdate="20190608T130301Z">
        <seg>https://docs.sonatype.org/display/Repository/Central+Sync+Requirements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https://github.com/harrah/xsbt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110412Z" creationid="huanghaohang" creationdate="20180407T110412Z">
        <seg>https://github.com/harrah/xsbt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https://github.com/jbaruch/maven2gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190201T142248Z" creationid="95" creationdate="20190201T142248Z">
        <seg>https://github.com/jbaruch/maven2gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https://github.com/junit-team/junit/wiki/Categories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113429Z" creationid="huanghaohang" creationdate="20180406T113429Z">
        <seg>https://github.com/junit-team/junit/wiki/Categories</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https://github.com/typesafehub/zinc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110409Z" creationid="huanghaohang" creationdate="20180407T110409Z">
        <seg>https://github.com/typesafehub/zinc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>https://sites.google.com/site/snarlapp/home</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T085701Z" creationid="huanghaohang" creationdate="20190124T085701Z">
        <seg>https://sites.google.com/site/snarlapp/home</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ide_support.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T045711Z" creationid="huanghaohang" creationdate="20170923T045711Z">
        <seg>ide_support.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085741Z" creationid="huanghaohang" creationdate="20180211T085741Z">
        <seg>idea</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea.module</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061225Z" creationid="huanghaohang" creationdate="20181212T061225Z">
        <seg>idea.module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea.module.iml {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012638Z" creationid="huanghaohang" creationdate="20190123T012638Z">
        <seg>idea.module.iml {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea.project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061223Z" creationid="huanghaohang" creationdate="20181212T061223Z">
        <seg>idea.project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea.project.ipr {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012757Z" creationid="huanghaohang" creationdate="20190123T012757Z">
        <seg>idea.project.ipr {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea.workspace</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061231Z" creationid="huanghaohang" creationdate="20181212T061231Z">
        <seg>idea.workspace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ideaModule</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061118Z" creationid="huanghaohang" creationdate="20181212T061118Z">
        <seg>ideaModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ideaProject</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061051Z" creationid="huanghaohang" creationdate="20181212T061051Z">
        <seg>ideaProject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ideaWorkspace</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181212T061126Z" creationid="huanghaohang" creationdate="20181212T061126Z">
        <seg>ideaWorkspace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085740Z" creationid="huanghaohang" creationdate="20180211T085740Z">
        <seg>idea_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea_plugin.html#N1409D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070340Z" creationid="huanghaohang" creationdate="20190205T070340Z">
        <seg>idea_plugin.html#N1409D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea_plugin.html#N140B4</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070341Z" creationid="huanghaohang" creationdate="20190205T070341Z">
        <seg>idea_plugin.html#N140B4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea_plugin.html#N14198</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070343Z" creationid="huanghaohang" creationdate="20190205T070343Z">
        <seg>idea_plugin.html#N14198</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea_plugin.html#N141EF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070344Z" creationid="huanghaohang" creationdate="20190205T070344Z">
        <seg>idea_plugin.html#N141EF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>idea_plugin.html#N142DE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070346Z" creationid="huanghaohang" creationdate="20190205T070346Z">
        <seg>idea_plugin.html#N142DE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>if (taskGraph.allTasks.any { it instanceof Sign }) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133040Z" creationid="huanghaohang" creationdate="20190608T133040Z">
        <seg>if (taskGraph.allTasks.any { it instanceof Sign }) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ignoreFailures = true
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T141342Z" creationid="huanghaohang" creationdate="20210515T141342Z">
        <seg>ignoreFailures = true
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/commandLineTutorialTasks.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031101Z" creationid="huanghaohang" creationdate="20170909T031101Z">
        <seg>img/commandLineTutorialTasks.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/groovyPluginTasks.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121120Z" creationid="huanghaohang" creationdate="20180406T121120Z">
        <seg>img/groovyPluginTasks.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/guiSetup.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T145856Z" creationid="huanghaohang" creationdate="20170911T145856Z">
        <seg>img/guiSetup.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/guiTaskTree.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143530Z" creationid="huanghaohang" creationdate="20170911T143530Z">
        <seg>img/guiTaskTree.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/jacocoHtmlReport.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093012Z" creationid="huanghaohang" creationdate="20180715T093012Z">
        <seg>img/jacocoHtmlReport.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/javaPluginConfigurations.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054211Z" creationid="haohang" creationdate="20180313T054211Z">
        <seg>img/javaPluginConfigurations.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/javaPluginTasks.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T040058Z" creationid="haohang" creationdate="20180313T040058Z">
        <seg>img/javaPluginTasks.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/jettyPluginTasks.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144339Z" creationid="huanghaohang" creationdate="20180416T144339Z">
        <seg>img/jettyPluginTasks.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/profile.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031314Z" creationid="huanghaohang" creationdate="20170910T031314Z">
        <seg>img/profile.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/scalaPluginTasks.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010749Z" creationid="huanghaohang" creationdate="20180407T010749Z">
        <seg>img/scalaPluginTasks.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>img/warPluginTasks.png</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140302Z" creationid="huanghaohang" creationdate="20180408T140302Z">
        <seg>img/warPluginTasks.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>implementation-class=org.gradle.GreetingPlugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153526Z" creationid="huanghaohang" creationdate="20190727T153526Z">
        <seg>implementation-class=org.gradle.GreetingPlugin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T133039Z" creationid="huanghaohang" creationdate="20190608T133039Z">
        <seg>import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inceptionYear &lt;s0&gt;'2008'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061318Z" creationid="huanghaohang" creationdate="20190607T061318Z">
        <seg>inceptionYear &lt;s0&gt;'2008'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;"shared"&lt;/s0&gt;, &lt;s1&gt;"api"&lt;/s1&gt;, &lt;s2&gt;"services:webservice"&lt;/s2&gt;, &lt;s3&gt;"services:shared"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123539Z" creationid="95" creationdate="20170803T123539Z">
        <seg>include &lt;s0&gt;"shared"&lt;/s0&gt;, &lt;s1&gt;"api"&lt;/s1&gt;, &lt;s2&gt;"services:webservice"&lt;/s2&gt;, &lt;s3&gt;"services:shared"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'api'&lt;/s0&gt;, &lt;s1&gt;'shared'&lt;/s1&gt;, &lt;s2&gt;'services:personService'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160620Z" creationid="huanghaohang" creationdate="20190617T160620Z">
        <seg>include &lt;s0&gt;'api'&lt;/s0&gt;, &lt;s1&gt;'shared'&lt;/s1&gt;, &lt;s2&gt;'services:personService'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'bluewhale'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154536Z" creationid="huanghaohang" creationdate="20190614T154536Z">
        <seg>include &lt;s0&gt;'bluewhale'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'bluewhale'&lt;/s0&gt;, &lt;s1&gt;'krill'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155552Z" creationid="huanghaohang" creationdate="20190614T155552Z">
        <seg>include &lt;s0&gt;'bluewhale'&lt;/s0&gt;, &lt;s1&gt;'krill'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'bluewhale'&lt;/s0&gt;, &lt;s1&gt;'krill'&lt;/s1&gt;, &lt;s2&gt;'tropicalFish'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143724Z" creationid="huanghaohang" creationdate="20190615T143724Z">
        <seg>include &lt;s0&gt;'bluewhale'&lt;/s0&gt;, &lt;s1&gt;'krill'&lt;/s1&gt;, &lt;s2&gt;'tropicalFish'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'consumer'&lt;/s0&gt;, &lt;s1&gt;'aProducer'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140812Z" creationid="huanghaohang" creationdate="20190616T140812Z">
        <seg>include &lt;s0&gt;'consumer'&lt;/s0&gt;, &lt;s1&gt;'aProducer'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'consumer'&lt;/s0&gt;, &lt;s1&gt;'producer'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140253Z" creationid="huanghaohang" creationdate="20190616T140253Z">
        <seg>include &lt;s0&gt;'consumer'&lt;/s0&gt;, &lt;s1&gt;'producer'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'date'&lt;/s0&gt;, &lt;s1&gt;'hello'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150858Z" creationid="huanghaohang" creationdate="20190617T150858Z">
        <seg>include &lt;s0&gt;'date'&lt;/s0&gt;, &lt;s1&gt;'hello'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s0&gt;'project1'&lt;/s0&gt;, &lt;s1&gt;'project2:child'&lt;/s1&gt;, &lt;s2&gt;'project3:child1'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T151519Z" creationid="huanghaohang" creationdate="20190612T151519Z">
        <seg>include &lt;s0&gt;'project1'&lt;/s0&gt;, &lt;s1&gt;'project2:child'&lt;/s1&gt;, &lt;s2&gt;'project3:child1'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s10&gt;'**/*.java'&lt;/s10&gt;
}

&lt;s11&gt;// Create a tree using a map&lt;/s11&gt;
tree = fileTree(dir: &lt;s12&gt;'src'&lt;/s12&gt;, include: &lt;s13&gt;'**/*.java'&lt;/s13&gt;)
tree = fileTree(dir: &lt;s14&gt;'src'&lt;/s14&gt;, includes: [&lt;s15&gt;'**/*.java'&lt;/s15&gt;, &lt;s16&gt;'**/*.xml'&lt;/s16&gt;])
tree = fileTree(dir: &lt;s17&gt;'src'&lt;/s17&gt;, include: &lt;s18&gt;'**/*.java'&lt;/s18&gt;, exclude: &lt;s19&gt;'**/*test*/**'&lt;/s19&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023417Z" creationid="huanghaohang" creationdate="20171002T023417Z">
        <seg>include &lt;s10&gt;'**/*.java'&lt;/s10&gt;
}

&lt;s11&gt;// Create a tree using a map&lt;/s11&gt;
tree = fileTree(dir: &lt;s12&gt;'src'&lt;/s12&gt;, include: &lt;s13&gt;'**/*.java'&lt;/s13&gt;)
tree = fileTree(dir: &lt;s14&gt;'src'&lt;/s14&gt;, includes: [&lt;s15&gt;'**/*.java'&lt;/s15&gt;, &lt;s16&gt;'**/*.xml'&lt;/s16&gt;])
tree = fileTree(dir: &lt;s17&gt;'src'&lt;/s17&gt;, include: &lt;s18&gt;'**/*.java'&lt;/s18&gt;, exclude: &lt;s19&gt;'**/*test*/**'&lt;/s19&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s1&gt;"**/*.c"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051620Z" creationid="huanghaohang" creationdate="20190609T051620Z">
        <seg>include &lt;s1&gt;"**/*.c"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s1&gt;"**/*.cpp"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043406Z" creationid="huanghaohang" creationdate="20190609T043406Z">
        <seg>include &lt;s1&gt;"**/*.cpp"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s2&gt;'**/*.html'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075120Z" creationid="huanghaohang" creationdate="20171015T075120Z">
        <seg>include &lt;s2&gt;'**/*.html'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s2&gt;'org/gradle/api/**'&lt;/s2&gt;
}

&lt;s3&gt;// Add trees together&lt;/s3&gt;
FileTree sum = tree + fileTree(dir: &lt;s4&gt;'src/test'&lt;/s4&gt;)

&lt;s5&gt;// Visit the elements of the tree&lt;/s5&gt;
tree.visit {element -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023627Z" creationid="huanghaohang" creationdate="20171002T023627Z">
        <seg>include &lt;s2&gt;'org/gradle/api/**'&lt;/s2&gt;
}

&lt;s3&gt;// Add trees together&lt;/s3&gt;
FileTree sum = tree + fileTree(dir: &lt;s4&gt;'src/test'&lt;/s4&gt;)

&lt;s5&gt;// Visit the elements of the tree&lt;/s5&gt;
tree.visit {element -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s3&gt;'**/*.html'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060922Z" creationid="huanghaohang" creationdate="20171126T060922Z">
        <seg>include &lt;s3&gt;'**/*.html'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include &lt;s3&gt;'**/*.jsp'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075121Z" creationid="huanghaohang" creationdate="20171015T075121Z">
        <seg>include &lt;s3&gt;'**/*.jsp'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include(&lt;s2&gt;'**/*.txt'&lt;/s2&gt;, &lt;s3&gt;'**/*.xml'&lt;/s3&gt;, &lt;s4&gt;'**/*.properties'&lt;/s4&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124612Z" creationid="huanghaohang" creationdate="20170919T124612Z">
        <seg>include(&lt;s2&gt;'**/*.txt'&lt;/s2&gt;, &lt;s3&gt;'**/*.xml'&lt;/s3&gt;, &lt;s4&gt;'**/*.properties'&lt;/s4&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include(&lt;s3&gt;'**/*.txt'&lt;/s3&gt;, &lt;s4&gt;'**/*.xml'&lt;/s4&gt;, &lt;s5&gt;'**/*.properties'&lt;/s5&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082309Z" creationid="huanghaohang" creationdate="20170922T082309Z">
        <seg>include(&lt;s3&gt;'**/*.txt'&lt;/s3&gt;, &lt;s4&gt;'**/*.xml'&lt;/s4&gt;, &lt;s5&gt;'**/*.properties'&lt;/s5&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include(&lt;s6&gt;'org/gradle/sample/api/**'&lt;/s6&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162742Z" creationid="huanghaohang" creationdate="20190617T162742Z">
        <seg>include(&lt;s6&gt;'org/gradle/sample/api/**'&lt;/s6&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>include(name: &lt;s2&gt;'**.xml'&lt;/s2&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090756Z" creationid="huanghaohang" creationdate="20171219T090756Z">
        <seg>include(name: &lt;s2&gt;'**.xml'&lt;/s2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includeCategories &lt;s0&gt;'org.gradle.junit.CategoryA'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T041839Z" creationid="huanghaohang" creationdate="20180406T041839Z">
        <seg>includeCategories &lt;s0&gt;'org.gradle.junit.CategoryA'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includeFlat &lt;s0&gt;'project3'&lt;/s0&gt;, &lt;s1&gt;'project4'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152541Z" creationid="huanghaohang" creationdate="20190612T152541Z">
        <seg>includeFlat &lt;s0&gt;'project3'&lt;/s0&gt;, &lt;s1&gt;'project4'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includeGroups &lt;s1&gt;'unitTests'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042051Z" creationid="huanghaohang" creationdate="20180406T042051Z">
        <seg>includeGroups &lt;s1&gt;'unitTests'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includeTestsMatching &lt;s1&gt;"*UiCheck"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131638Z" creationid="huanghaohang" creationdate="20180405T131638Z">
        <seg>includeTestsMatching &lt;s1&gt;"*UiCheck"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includeTestsMatching &lt;s3&gt;"org.gradle.internal.*"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131640Z" creationid="huanghaohang" creationdate="20180405T131640Z">
        <seg>includeTestsMatching &lt;s3&gt;"org.gradle.internal.*"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includeTestsMatching &lt;s5&gt;"*IntegTest"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180405T131641Z" creationid="huanghaohang" creationdate="20180405T131641Z">
        <seg>includeTestsMatching &lt;s5&gt;"*IntegTest"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>includes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093249Z" creationid="huanghaohang" creationdate="20180715T093249Z">
        <seg>includes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>incrementalTask/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141903Z" creationid="huanghaohang" creationdate="20190707T141903Z">
        <seg>incrementalTask/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>index.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093832Z" creationid="huanghaohang" creationdate="20180715T093832Z">
        <seg>index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>init</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T213728Z" creationid="95" creationdate="20190131T213728Z">
        <seg>init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>init.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144025Z" creationid="huanghaohang" creationdate="20180107T144025Z">
        <seg>init.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>init_scripts.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190730T152644Z" creationid="huanghaohang" creationdate="20190730T152644Z">
        <seg>init_scripts.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>init_scripts.html#sec:custom_classpath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151408Z" creationid="huanghaohang" creationdate="20191206T151408Z">
        <seg>init_scripts.html#sec:custom_classpath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>initializeInOrder = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143000Z" creationid="huanghaohang" creationdate="20180416T143000Z">
        <seg>initializeInOrder = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>initscript {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T150736Z" creationid="huanghaohang" creationdate="20191206T150736Z">
        <seg>initscript {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputDir = file(&lt;s0&gt;'inputs'&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141859Z" creationid="huanghaohang" creationdate="20190707T141859Z">
        <seg>inputDir = file(&lt;s0&gt;'inputs'&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputProperty = project.properties[&lt;s2&gt;'taskInputProperty'&lt;/s2&gt;] ?: &lt;s3&gt;"original"&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141902Z" creationid="huanghaohang" creationdate="20190707T141902Z">
        <seg>inputProperty = project.properties[&lt;s2&gt;'taskInputProperty'&lt;/s2&gt;] ?: &lt;s3&gt;"original"&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputs.file copyTask &lt;s0&gt;// up-to-date check for inputs, plus add copyTask as dependency&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124925Z" creationid="huanghaohang" creationdate="20171015T124925Z">
        <seg>inputs.file copyTask &lt;s0&gt;// up-to-date check for inputs, plus add copyTask as dependency&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputs.file srcFile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003854Z" creationid="huanghaohang" creationdate="20170923T003854Z">
        <seg>inputs.file srcFile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputs.outOfDate { change -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134819Z" creationid="huanghaohang" creationdate="20190706T134819Z">
        <seg>inputs.outOfDate { change -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputs.removed { change -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134822Z" creationid="huanghaohang" creationdate="20190706T134822Z">
        <seg>inputs.removed { change -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>inputs/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141905Z" creationid="huanghaohang" creationdate="20190707T141905Z">
        <seg>inputs/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>install</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091233Z" creationid="huanghaohang" creationdate="20190606T091233Z">
        <seg>install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>install {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111340Z" creationid="huanghaohang" creationdate="20190607T111340Z">
        <seg>install {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>install&lt;e0&gt;&lt;c1&gt;${distribution.name.capitalize()}&lt;/c1&gt;&lt;/e0&gt;Dist</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T134019Z" creationid="huanghaohang" creationdate="20190127T134019Z">
        <seg>install&lt;e0&gt;&lt;c1&gt;${distribution.name.capitalize()}&lt;/c1&gt;&lt;/e0&gt;Dist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installApp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135116Z" creationid="95" creationdate="20190131T135116Z">
        <seg>installApp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installCustomDist</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190128T011909Z" creationid="huanghaohang" creationdate="20190128T011909Z">
        <seg>installCustomDist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installDist</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190127T133906Z" creationid="huanghaohang" creationdate="20190127T133906Z">
        <seg>installDist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072426Z" creationid="95" creationdate="20170723T072426Z">
        <seg>installation.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html#N10116</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013320Z" creationid="huanghaohang" creationdate="20170919T013320Z">
        <seg>installation.html#N10116</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html#N10123</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013330Z" creationid="huanghaohang" creationdate="20170919T013330Z">
        <seg>installation.html#N10123</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html#N1012C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013337Z" creationid="huanghaohang" creationdate="20170919T013337Z">
        <seg>installation.html#N1012C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html#N10148</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013343Z" creationid="huanghaohang" creationdate="20170919T013343Z">
        <seg>installation.html#N10148</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html#N10155</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013349Z" creationid="huanghaohang" creationdate="20170919T013349Z">
        <seg>installation.html#N10155</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>installation.html#N10160</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013359Z" creationid="huanghaohang" creationdate="20170919T013359Z">
        <seg>installation.html#N10160</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>instruction &lt;s11&gt;'Bundle-Vendor'&lt;/s11&gt;, &lt;s12&gt;'MyCompany'&lt;/s12&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033608Z" creationid="huanghaohang" creationdate="20181203T033608Z">
        <seg>instruction &lt;s11&gt;'Bundle-Vendor'&lt;/s11&gt;, &lt;s12&gt;'MyCompany'&lt;/s12&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>instruction &lt;s2&gt;'Private-Package'&lt;/s2&gt;,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033556Z" creationid="huanghaohang" creationdate="20181203T033556Z">
        <seg>instruction &lt;s2&gt;'Private-Package'&lt;/s2&gt;,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>instruction &lt;s5&gt;'Bundle-Vendor'&lt;/s5&gt;, &lt;s6&gt;'MyCompany'&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033558Z" creationid="huanghaohang" creationdate="20181203T033558Z">
        <seg>instruction &lt;s5&gt;'Bundle-Vendor'&lt;/s5&gt;, &lt;s6&gt;'MyCompany'&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>instruction &lt;s7&gt;'Bundle-Description'&lt;/s7&gt;, &lt;s8&gt;'Platform2: Metrics 2 Measures Framework'&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033559Z" creationid="huanghaohang" creationdate="20181203T033559Z">
        <seg>instruction &lt;s7&gt;'Bundle-Description'&lt;/s7&gt;, &lt;s8&gt;'Platform2: Metrics 2 Measures Framework'&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>instruction &lt;s9&gt;'Bundle-DocURL'&lt;/s9&gt;, &lt;s10&gt;'http://www.mycompany.com'&lt;/s10&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033559Z" creationid="huanghaohang" creationdate="20181203T033559Z">
        <seg>instruction &lt;s9&gt;'Bundle-DocURL'&lt;/s9&gt;, &lt;s10&gt;'http://www.mycompany.com'&lt;/s10&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>intTest
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094628Z" creationid="haohang" creationdate="20180326T094628Z">
        <seg>intTest
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>intTest
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094841Z" creationid="haohang" creationdate="20180326T094841Z">
        <seg>intTest
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>intTestCompile &lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094842Z" creationid="haohang" creationdate="20180326T094842Z">
        <seg>intTestCompile &lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>intTestRuntime &lt;s1&gt;'org.ow2.asm:asm-all:4.0'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094843Z" creationid="haohang" creationdate="20180326T094843Z">
        <seg>intTestRuntime &lt;s1&gt;'org.ow2.asm:asm-all:4.0'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s0&gt;"$buildDir/libs"&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125151Z" creationid="huanghaohang" creationdate="20171126T125151Z">
        <seg>into &lt;s0&gt;"$buildDir/libs"&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s0&gt;'build/explodedWar'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060920Z" creationid="huanghaohang" creationdate="20171126T060920Z">
        <seg>into &lt;s0&gt;'build/explodedWar'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s1&gt;'build/explodedWar'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075118Z" creationid="huanghaohang" creationdate="20171015T075118Z">
        <seg>into &lt;s1&gt;'build/explodedWar'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s1&gt;'build/explodedWar'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T135609Z" creationid="huanghaohang" creationdate="20171002T135609Z">
        <seg>into &lt;s1&gt;'build/explodedWar'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s1&gt;'target'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124611Z" creationid="huanghaohang" creationdate="20170919T124611Z">
        <seg>into &lt;s1&gt;'target'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s2&gt;'target'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T082304Z" creationid="huanghaohang" creationdate="20170922T082304Z">
        <seg>into &lt;s2&gt;'target'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s3&gt;'build/explodedWar'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060341Z" creationid="huanghaohang" creationdate="20171126T060341Z">
        <seg>into &lt;s3&gt;'build/explodedWar'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s4&gt;"docs"&lt;/s4&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140544Z" creationid="95" creationdate="20190131T140544Z">
        <seg>into &lt;s4&gt;"docs"&lt;/s4&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into &lt;s4&gt;'some-dir'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124930Z" creationid="huanghaohang" creationdate="20171015T124930Z">
        <seg>into &lt;s4&gt;'some-dir'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into dest
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132956Z" creationid="huanghaohang" creationdate="20170913T132956Z">
        <seg>into dest
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into explodedDist</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150914Z" creationid="huanghaohang" creationdate="20190617T150914Z">
        <seg>into explodedDist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into { getDestDir() }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075033Z" creationid="huanghaohang" creationdate="20171015T075033Z">
        <seg>into { getDestDir() }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into(&lt;s1&gt;'libs'&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125719Z" creationid="95" creationdate="20170803T125719Z">
        <seg>into(&lt;s1&gt;'libs'&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into(&lt;s2&gt;'libs'&lt;/s2&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T135316Z" creationid="huanghaohang" creationdate="20171126T135316Z">
        <seg>into(&lt;s2&gt;'libs'&lt;/s2&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into(&lt;s4&gt;'libs'&lt;/s4&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060923Z" creationid="huanghaohang" creationdate="20171126T060923Z">
        <seg>into(&lt;s4&gt;'libs'&lt;/s4&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>into(buildDir)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120842Z" creationid="huanghaohang" creationdate="20170919T120842Z">
        <seg>into(buildDir)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>introduction.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072249Z" creationid="haohang" creationdate="20170720T072249Z">
        <seg>introduction.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>introduction.html#N10048</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072433Z" creationid="haohang" creationdate="20170720T072433Z">
        <seg>introduction.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>it.buildable</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084312Z" creationid="huanghaohang" creationdate="20190610T084312Z">
        <seg>it.buildable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>itanium {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045624Z" creationid="huanghaohang" creationdate="20190610T045624Z">
        <seg>itanium {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ivy &lt;s4&gt;"ivy-files/[organisation]/[module]/[revision]/ivy.xml"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T024722Z" creationid="huanghaohang" creationdate="20190604T024722Z">
        <seg>ivy &lt;s4&gt;"ivy-files/[organisation]/[module]/[revision]/ivy.xml"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ivy {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044949Z" creationid="huanghaohang" creationdate="20170908T044949Z">
        <seg>ivy {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ivy-publish</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143845Z" creationid="huanghaohang" creationdate="20180207T143845Z">
        <seg>ivy-publish</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ivyPattern &lt;s0&gt;"$projectDir/repo/[organisation]/[module]-ivy-[revision].xml"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T030437Z" creationid="huanghaohang" creationdate="20190604T030437Z">
        <seg>ivyPattern &lt;s0&gt;"$projectDir/repo/[organisation]/[module]-ivy-[revision].xml"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090454Z" creationid="huanghaohang" creationdate="20180211T090454Z">
        <seg>jacoco</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135242Z" creationid="huanghaohang" creationdate="20180712T135242Z">
        <seg>jacoco {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093829Z" creationid="huanghaohang" creationdate="20180715T093829Z">
        <seg>jacoco/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacocoAgent</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094021Z" creationid="huanghaohang" creationdate="20180715T094021Z">
        <seg>jacocoAgent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacocoAnt</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T094000Z" creationid="huanghaohang" creationdate="20180715T094000Z">
        <seg>jacocoAnt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacocoTestReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093927Z" creationid="huanghaohang" creationdate="20180715T093927Z">
        <seg>jacocoTestReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacocoTestReport {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093008Z" creationid="huanghaohang" creationdate="20180715T093008Z">
        <seg>jacocoTestReport {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090451Z" creationid="huanghaohang" creationdate="20180211T090451Z">
        <seg>jacoco_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html#N136F6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070041Z" creationid="huanghaohang" creationdate="20190205T070041Z">
        <seg>jacoco_plugin.html#N136F6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html#N13712</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070045Z" creationid="huanghaohang" creationdate="20190205T070043Z">
        <seg>jacoco_plugin.html#N13712</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html#N13740</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070051Z" creationid="huanghaohang" creationdate="20190205T070051Z">
        <seg>jacoco_plugin.html#N13740</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html#N13763</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070059Z" creationid="huanghaohang" creationdate="20190205T070059Z">
        <seg>jacoco_plugin.html#N13763</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html#N13836</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070109Z" creationid="huanghaohang" creationdate="20190205T070109Z">
        <seg>jacoco_plugin.html#N13836</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jacoco_plugin.html#N13863</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070110Z" creationid="huanghaohang" creationdate="20190205T070110Z">
        <seg>jacoco_plugin.html#N13863</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062909Z" creationid="haohang" creationdate="20180312T062909Z">
        <seg>jar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jar {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124429Z" creationid="95" creationdate="20170803T124429Z">
        <seg>jar {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jar.manifest.writeTo(&lt;s0&gt;"$buildDir/mymanifest.mf"&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T113344Z" creationid="huanghaohang" creationdate="20180406T113344Z">
        <seg>jar.manifest.writeTo(&lt;s0&gt;"$buildDir/mymanifest.mf"&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140617Z" creationid="huanghaohang" creationdate="20180205T140617Z">
        <seg>java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053344Z" creationid="haohang" creationdate="20180313T053344Z">
        <seg>java {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java-base</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140630Z" creationid="huanghaohang" creationdate="20180205T140630Z">
        <seg>java-base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java-base, java, jacoco</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090026Z" creationid="huanghaohang" creationdate="20180211T090026Z">
        <seg>java-base，java，jacoco</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java-library-distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143756Z" creationid="huanghaohang" creationdate="20180207T143756Z">
        <seg>java-library-distribution</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100351Z" creationid="haohang" creationdate="20180320T100351Z">
        <seg>java.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160324Z" creationid="huanghaohang" creationdate="20190617T160324Z">
        <seg>java/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>javaLibraryDistribution_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143755Z" creationid="huanghaohang" creationdate="20180207T143755Z">
        <seg>javaLibraryDistribution_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>javaLibraryDistribution_plugin.html#N148E8</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070523Z" creationid="huanghaohang" creationdate="20190205T070523Z">
        <seg>javaLibraryDistribution_plugin.html#N148E8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>javaLibraryDistribution_plugin.html#N1490E</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070524Z" creationid="huanghaohang" creationdate="20190205T070524Z">
        <seg>javaLibraryDistribution_plugin.html#N1490E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>javaLibraryDistribution_plugin.html#java_library_distribution_resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070526Z" creationid="huanghaohang" creationdate="20190205T070526Z">
        <seg>javaLibraryDistribution_plugin.html#java_library_distribution_resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T130000Z" creationid="95" creationdate="20170803T130000Z">
        <seg>java_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#N11E7D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130004Z" creationid="huanghaohang" creationdate="20180517T130004Z">
        <seg>java_plugin.html#N11E7D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#N11E8C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130010Z" creationid="huanghaohang" creationdate="20180517T130010Z">
        <seg>java_plugin.html#N11E8C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#N11EA4</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130014Z" creationid="huanghaohang" creationdate="20180517T130014Z">
        <seg>java_plugin.html#N11EA4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#N12116</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130018Z" creationid="huanghaohang" creationdate="20180517T130018Z">
        <seg>java_plugin.html#N12116</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#N1223B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130029Z" creationid="huanghaohang" creationdate="20180517T130029Z">
        <seg>java_plugin.html#N1223B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#N12959</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130101Z" creationid="huanghaohang" creationdate="20180517T130101Z">
        <seg>java_plugin.html#N12959</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#java_source_set_configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094629Z" creationid="haohang" creationdate="20180326T094629Z">
        <seg>java_plugin.html#java_source_set_configurations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#java_source_set_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T094843Z" creationid="haohang" creationdate="20180326T094843Z">
        <seg>java_plugin.html#java_source_set_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#javalayout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T133926Z" creationid="huanghaohang" creationdate="20191201T133926Z">
        <seg>java_plugin.html#javalayout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:clean</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130042Z" creationid="huanghaohang" creationdate="20180517T130042Z">
        <seg>java_plugin.html#sec:clean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:compile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T003404Z" creationid="huanghaohang" creationdate="20180407T003404Z">
        <seg>java_plugin.html#sec:compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:java_plugin_and_dependency_management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130024Z" creationid="huanghaohang" creationdate="20180517T130024Z">
        <seg>java_plugin.html#sec:java_plugin_and_dependency_management</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:java_test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130058Z" creationid="huanghaohang" creationdate="20180517T130058Z">
        <seg>java_plugin.html#sec:java_test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:javadoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130039Z" creationid="huanghaohang" creationdate="20180517T130039Z">
        <seg>java_plugin.html#sec:javadoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130050Z" creationid="huanghaohang" creationdate="20180517T130050Z">
        <seg>java_plugin.html#sec:resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:source_sets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150855Z" creationid="huanghaohang" creationdate="20170927T150855Z">
        <seg>java_plugin.html#sec:source_sets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sec:upload</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T130103Z" creationid="huanghaohang" creationdate="20180517T130103Z">
        <seg>java_plugin.html#sec:upload</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#sub:manifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T025412Z" creationid="huanghaohang" creationdate="20181203T025412Z">
        <seg>java_plugin.html#sub:manifest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>java_plugin.html#tab:configurations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T032333Z" creationid="huanghaohang" creationdate="20170908T032333Z">
        <seg>java_plugin.html#tab:configurations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>javadoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062924Z" creationid="haohang" creationdate="20180312T062924Z">
        <seg>javadoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jcenter()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031545Z" creationid="huanghaohang" creationdate="20190603T031545Z">
        <seg>jcenter()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085813Z" creationid="huanghaohang" creationdate="20180211T085813Z">
        <seg>jdepend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142703Z" creationid="huanghaohang" creationdate="20180516T142703Z">
        <seg>jdepend&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdependMain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142644Z" creationid="huanghaohang" creationdate="20180516T142644Z">
        <seg>jdependMain</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdependTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T142651Z" creationid="huanghaohang" creationdate="20180516T142651Z">
        <seg>jdependTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085812Z" creationid="huanghaohang" creationdate="20180211T085812Z">
        <seg>jdepend_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend_plugin.html#N13581</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070023Z" creationid="huanghaohang" creationdate="20190205T070023Z">
        <seg>jdepend_plugin.html#N13581</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend_plugin.html#N13595</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070025Z" creationid="huanghaohang" creationdate="20190205T070025Z">
        <seg>jdepend_plugin.html#N13595</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend_plugin.html#N1360A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070026Z" creationid="huanghaohang" creationdate="20190205T070026Z">
        <seg>jdepend_plugin.html#N1360A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jdepend_plugin.html#N13626</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070028Z" creationid="huanghaohang" creationdate="20190205T070028Z">
        <seg>jdepend_plugin.html#N13626</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T014509Z" creationid="huanghaohang" creationdate="20180206T014509Z">
        <seg>jetty</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jettyRun</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144014Z" creationid="huanghaohang" creationdate="20180416T144014Z">
        <seg>jettyRun</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jettyRunWar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144256Z" creationid="huanghaohang" creationdate="20180416T144256Z">
        <seg>jettyRunWar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jettyStop</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144311Z" creationid="huanghaohang" creationdate="20180416T144311Z">
        <seg>jettyStop</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T010149Z" creationid="huanghaohang" creationdate="20170909T010149Z">
        <seg>jetty_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty_plugin.html#N1322A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142237Z" creationid="huanghaohang" creationdate="20181201T142237Z">
        <seg>jetty_plugin.html#N1322A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty_plugin.html#N13239</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142239Z" creationid="huanghaohang" creationdate="20181201T142239Z">
        <seg>jetty_plugin.html#N13239</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty_plugin.html#N13298</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142241Z" creationid="huanghaohang" creationdate="20181201T142241Z">
        <seg>jetty_plugin.html#N13298</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty_plugin.html#N1329D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142242Z" creationid="huanghaohang" creationdate="20181201T142242Z">
        <seg>jetty_plugin.html#N1329D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jetty_plugin.html#N132A2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142244Z" creationid="huanghaohang" creationdate="20181201T142244Z">
        <seg>jetty_plugin.html#N132A2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jmx</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093259Z" creationid="huanghaohang" creationdate="20180715T093259Z">
        <seg>jmx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>jvmArgs = [&lt;s1&gt;'-XX:MaxPermSize=512m'&lt;/s1&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053848Z" creationid="huanghaohang" creationdate="20180407T053848Z">
        <seg>jvmArgs = [&lt;s1&gt;'-XX:MaxPermSize=512m'&lt;/s1&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>krill/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155538Z" creationid="huanghaohang" creationdate="20190614T155538Z">
        <seg>krill/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>krill/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143030Z" creationid="huanghaohang" creationdate="20190615T143030Z">
        <seg>krill/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>language = &lt;s0&gt;"grvy"&lt;/s0&gt; &lt;s1&gt;// set language to Groovy&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072341Z" creationid="huanghaohang" creationdate="20180812T072341Z">
        <seg>language = &lt;s0&gt;"grvy"&lt;/s0&gt; &lt;s1&gt;// set language to Groovy&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>language = &lt;s1&gt;"groovy"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153300Z" creationid="huanghaohang" creationdate="20180811T153300Z">
        <seg>language = &lt;s1&gt;"groovy"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>language = System.getProperty(&lt;s0&gt;"sonar.language"&lt;/s0&gt;, &lt;s1&gt;"java"&lt;/s1&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085356Z" creationid="huanghaohang" creationdate="20181012T085356Z">
        <seg>language = System.getProperty(&lt;s0&gt;"sonar.language"&lt;/s0&gt;, &lt;s1&gt;"java"&lt;/s1&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>layout &lt;s1&gt;"maven"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T041507Z" creationid="huanghaohang" creationdate="20190603T041507Z">
        <seg>layout &lt;s1&gt;"maven"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>layout &lt;s1&gt;"pattern"&lt;/s1&gt;, {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T023842Z" creationid="huanghaohang" creationdate="20190604T023842Z">
        <seg>layout &lt;s1&gt;"pattern"&lt;/s1&gt;, {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>lib</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145916Z" creationid="huanghaohang" creationdate="20180415T145916Z">
        <seg>lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>lib libraries.hello</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022800Z" creationid="huanghaohang" creationdate="20190610T022800Z">
        <seg>lib libraries.hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>lib libraries.hello.&lt;s1&gt;static&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T022911Z" creationid="huanghaohang" creationdate="20190610T022911Z">
        <seg>lib libraries.hello.&lt;s1&gt;static&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>lib library: &lt;s0&gt;"cunit"&lt;/s0&gt;, linkage: &lt;s1&gt;"static"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T061717Z" creationid="huanghaohang" creationdate="20190611T061717Z">
        <seg>lib library: &lt;s0&gt;"cunit"&lt;/s0&gt;, linkage: &lt;s1&gt;"static"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>lib library: &lt;s4&gt;"cunit"&lt;/s4&gt;, linkage: &lt;s5&gt;"static"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090229Z" creationid="huanghaohang" creationdate="20190611T090229Z">
        <seg>lib library: &lt;s4&gt;"cunit"&lt;/s4&gt;, linkage: &lt;s5&gt;"static"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>lib project: &lt;s7&gt;':lib'&lt;/s7&gt;, library: &lt;s8&gt;'main'&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023036Z" creationid="huanghaohang" creationdate="20190610T023036Z">
        <seg>lib project: &lt;s7&gt;':lib'&lt;/s7&gt;, library: &lt;s8&gt;'main'&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145913Z" creationid="huanghaohang" creationdate="20180415T145913Z">
        <seg>libDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libDirName &lt;s11&gt;'APP-INF/lib'&lt;/s11&gt;  &lt;s12&gt;// put dependency libraries into APP-INF/lib inside the generated EAR;&lt;/s12&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T142956Z" creationid="huanghaohang" creationdate="20180416T142956Z">
        <seg>libDirName &lt;s11&gt;'APP-INF/lib'&lt;/s11&gt;  &lt;s12&gt;// put dependency libraries into APP-INF/lib inside the generated EAR;&lt;/s12&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libraries {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030612Z" creationid="huanghaohang" creationdate="20190609T030612Z">
        <seg>libraries {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061433Z" creationid="haohang" creationdate="20180313T061433Z">
        <seg>libs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libs(PrebuiltLibraries) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090224Z" creationid="huanghaohang" creationdate="20190611T090224Z">
        <seg>libs(PrebuiltLibraries) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libsDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061530Z" creationid="haohang" creationdate="20180313T061530Z">
        <seg>libsDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>libsDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061432Z" creationid="haohang" creationdate="20180313T061432Z">
        <seg>libsDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>license {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061319Z" creationid="huanghaohang" creationdate="20190607T061319Z">
        <seg>license {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>licenses {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061319Z" creationid="huanghaohang" creationdate="20190607T061319Z">
        <seg>licenses {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>linker.args &lt;s10&gt;"/DEBUG"&lt;/s10&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053259Z" creationid="huanghaohang" creationdate="20190609T053259Z">
        <seg>linker.args &lt;s10&gt;"/DEBUG"&lt;/s10&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>linker.args &lt;s1&gt;"/noentry"&lt;/s1&gt;, &lt;s2&gt;"/machine:x86"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013911Z" creationid="huanghaohang" creationdate="20190610T013911Z">
        <seg>linker.args &lt;s1&gt;"/noentry"&lt;/s1&gt;, &lt;s2&gt;"/machine:x86"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>linker.args &lt;s5&gt;'/DEBUG'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035736Z" creationid="huanghaohang" creationdate="20190610T035736Z">
        <seg>linker.args &lt;s5&gt;'/DEBUG'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>linker.args &lt;s6&gt;"-Xlinker"&lt;/s6&gt;, &lt;s7&gt;"-S"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T053257Z" creationid="huanghaohang" creationdate="20190609T053257Z">
        <seg>linker.args &lt;s6&gt;"-Xlinker"&lt;/s6&gt;, &lt;s7&gt;"-S"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>linker.withArguments { args -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093529Z" creationid="huanghaohang" creationdate="20190610T093529Z">
        <seg>linker.withArguments { args -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>local</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092246Z" creationid="huanghaohang" creationdate="20190124T092246Z">
        <seg>local</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>localRepository {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025339Z" creationid="huanghaohang" creationdate="20190604T025339Z">
        <seg>localRepository {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logger.quiet(&lt;s0&gt;'An info log message which is always logged.'&lt;/s0&gt;)
logger.error(&lt;s1&gt;'An error log message.'&lt;/s1&gt;)
logger.warn(&lt;s2&gt;'A warning log message.'&lt;/s2&gt;)
logger.lifecycle(&lt;s3&gt;'A lifecycle info log message.'&lt;/s3&gt;)
logger.info(&lt;s4&gt;'An info log message.'&lt;/s4&gt;)
logger.debug(&lt;s5&gt;'A debug log message.'&lt;/s5&gt;)
logger.trace(&lt;s6&gt;'A trace log message.'&lt;/s6&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T012509Z" creationid="huanghaohang" creationdate="20180107T012509Z">
        <seg>logger.quiet(&lt;s0&gt;'An info log message which is always logged.'&lt;/s0&gt;)
logger.error(&lt;s1&gt;'An error log message.'&lt;/s1&gt;)
logger.warn(&lt;s2&gt;'A warning log message.'&lt;/s2&gt;)
logger.lifecycle(&lt;s3&gt;'A lifecycle info log message.'&lt;/s3&gt;)
logger.info(&lt;s4&gt;'An info log message.'&lt;/s4&gt;)
logger.debug(&lt;s5&gt;'A debug log message.'&lt;/s5&gt;)
logger.trace(&lt;s6&gt;'A trace log message.'&lt;/s6&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.captureStandardOutput LogLevel.INFO</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025424Z" creationid="huanghaohang" creationdate="20180107T025424Z">
        <seg>logging.captureStandardOutput LogLevel.INFO</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.captureStandardOutput LogLevel.INFO
println &lt;s0&gt;'A message which is logged at INFO level'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025329Z" creationid="huanghaohang" creationdate="20180107T025329Z">
        <seg>logging.captureStandardOutput LogLevel.INFO
println &lt;s0&gt;'A message which is logged at INFO level'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T145142Z" creationid="95" creationdate="20170724T145142Z">
        <seg>logging.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#logLevelCommandLineOptions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221600Z" creationid="huanghaohang" creationdate="20180105T221600Z">
        <seg>logging.html#logLevelCommandLineOptions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#logLevels</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T095046Z" creationid="huanghaohang" creationdate="20180105T095046Z">
        <seg>logging.html#logLevels</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#sec:changing_what_gradle_logs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140451Z" creationid="huanghaohang" creationdate="20180516T140451Z">
        <seg>logging.html#sec:changing_what_gradle_logs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#sec:choosing_a_log_level</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140420Z" creationid="huanghaohang" creationdate="20180516T140420Z">
        <seg>logging.html#sec:choosing_a_log_level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#sec:external_tools</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140438Z" creationid="huanghaohang" creationdate="20180516T140438Z">
        <seg>logging.html#sec:external_tools</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#sec:sending_your_own_log_messages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T140429Z" creationid="huanghaohang" creationdate="20180516T140429Z">
        <seg>logging.html#sec:sending_your_own_log_messages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>logging.html#stacktraces</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221609Z" creationid="huanghaohang" creationdate="20180105T221609Z">
        <seg>logging.html#stacktraces</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>m2compatible = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025125Z" creationid="huanghaohang" creationdate="20190604T025125Z">
        <seg>m2compatible = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>main {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133544Z" creationid="huanghaohang" creationdate="20170913T133544Z">
        <seg>main {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>main {}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023019Z" creationid="huanghaohang" creationdate="20190610T023019Z">
        <seg>main {}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>main {}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T030739Z" creationid="huanghaohang" creationdate="20190609T030739Z">
        <seg>main {}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>main/java/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160330Z" creationid="huanghaohang" creationdate="20190617T160330Z">
        <seg>main/java/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mainClassName = &lt;s0&gt;"org.gradle.sample.Main"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190130T233805Z" creationid="95" creationdate="20190130T233805Z">
        <seg>mainClassName = &lt;s0&gt;"org.gradle.sample.Main"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>main{</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T143517Z" creationid="95" creationdate="20190131T143517Z">
        <seg>main{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manifest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010640Z" creationid="huanghaohang" creationdate="20180318T010640Z">
        <seg>manifest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manifest = osgiManifest {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033601Z" creationid="huanghaohang" creationdate="20181203T033601Z">
        <seg>manifest = osgiManifest {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manifest = project.manifest {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111610Z" creationid="huanghaohang" creationdate="20180406T111610Z">
        <seg>manifest = project.manifest {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manifest {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132604Z" creationid="95" creationdate="20170730T132604Z">
        <seg>manifest {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manifest { &lt;s0&gt;// the manifest of the default jar is of type OsgiManifest&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033555Z" creationid="huanghaohang" creationdate="20181203T033555Z">
        <seg>manifest { &lt;s0&gt;// the manifest of the default jar is of type OsgiManifest&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manifest.attributes provider: &lt;s4&gt;'gradle'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124430Z" creationid="95" creationdate="20170803T124430Z">
        <seg>manifest.attributes provider: &lt;s4&gt;'gradle'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>manufactured viewport for HTML img</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T031313Z" creationid="huanghaohang" creationdate="20170910T031313Z">
        <seg>为HTML img制作的viewport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143406Z" creationid="huanghaohang" creationdate="20180207T143406Z">
        <seg>maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044839Z" creationid="huanghaohang" creationdate="20170908T044839Z">
        <seg>maven {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven-publish</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143917Z" creationid="huanghaohang" creationdate="20180207T143917Z">
        <seg>maven-publish</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenCentral()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124426Z" creationid="95" creationdate="20170803T124426Z">
        <seg>mavenCentral()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenCentral()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124333Z" creationid="95" creationdate="20170730T124333Z">
        <seg>mavenCentral()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenCentral()
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154112Z" creationid="95" creationdate="20170731T154112Z">
        <seg>mavenCentral()
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenCentral()
}

task showRepos &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143630Z" creationid="huanghaohang" creationdate="20191206T143630Z">
        <seg>mavenCentral()
}

task showRepos &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenDeployer {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051008Z" creationid="huanghaohang" creationdate="20170908T051008Z">
        <seg>mavenDeployer {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenLocal()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143641Z" creationid="huanghaohang" creationdate="20191206T143641Z">
        <seg>mavenLocal()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mavenLocal()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T031705Z" creationid="huanghaohang" creationdate="20190603T031705Z">
        <seg>mavenLocal()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143259Z" creationid="huanghaohang" creationdate="20180207T143259Z">
        <seg>maven_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#N1547F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092002Z" creationid="huanghaohang" creationdate="20190608T092002Z">
        <seg>maven_plugin.html#N1547F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#N1548E</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092004Z" creationid="huanghaohang" creationdate="20190608T092004Z">
        <seg>maven_plugin.html#N1548E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#N154BE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092005Z" creationid="huanghaohang" creationdate="20190608T092005Z">
        <seg>maven_plugin.html#N154BE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#N154C3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092006Z" creationid="huanghaohang" creationdate="20190608T092006Z">
        <seg>maven_plugin.html#N154C3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#N15530</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T092008Z" creationid="huanghaohang" creationdate="20190608T092008Z">
        <seg>maven_plugin.html#N15530</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#deployerConfig</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092652Z" creationid="huanghaohang" creationdate="20190607T092652Z">
        <seg>maven_plugin.html#deployerConfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#sub:dependency_mapping</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060616Z" creationid="huanghaohang" creationdate="20190607T060616Z">
        <seg>maven_plugin.html#sub:dependency_mapping</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#sub:installing_to_the_local_repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T091515Z" creationid="huanghaohang" creationdate="20190606T091515Z">
        <seg>maven_plugin.html#sub:installing_to_the_local_repository</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#sub:multiple_artifacts_per_project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111057Z" creationid="huanghaohang" creationdate="20190607T111057Z">
        <seg>maven_plugin.html#sub:multiple_artifacts_per_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#uploading_to_maven_repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T085307Z" creationid="huanghaohang" creationdate="20190606T085307Z">
        <seg>maven_plugin.html#uploading_to_maven_repositories</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>maven_plugin.html#wagonLibs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T074939Z" creationid="huanghaohang" creationdate="20190607T074939Z">
        <seg>maven_plugin.html#wagonLibs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>memoryMaximumSize = &lt;s0&gt;'1g'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053848Z" creationid="huanghaohang" creationdate="20180407T053848Z">
        <seg>memoryMaximumSize = &lt;s0&gt;'1g'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>message = &lt;s0&gt;'Hi'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151629Z" creationid="huanghaohang" creationdate="20190726T151629Z">
        <seg>message = &lt;s0&gt;'Hi'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>messages/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140208Z" creationid="huanghaohang" creationdate="20190616T140208Z">
        <seg>messages/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>model {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035434Z" creationid="huanghaohang" creationdate="20190610T035434Z">
        <seg>model {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>module(&lt;s1&gt;"commons-net:commons-net:1.4.1"&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141256Z" creationid="huanghaohang" creationdate="20191202T141256Z">
        <seg>module(&lt;s1&gt;"commons-net:commons-net:1.4.1"&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>module(&lt;s5&gt;'org.apache.ant:ant:1.9.3'&lt;/s5&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T123342Z" creationid="huanghaohang" creationdate="20180406T123342Z">
        <seg>module(&lt;s5&gt;'org.apache.ant:ant:1.9.3'&lt;/s5&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>module(group: &lt;s2&gt;'org.apache.ant'&lt;/s2&gt;, name: &lt;s3&gt;'ant'&lt;/s3&gt;, version: &lt;s4&gt;'1.9.3'&lt;/s4&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051422Z" creationid="huanghaohang" creationdate="20190531T051422Z">
        <seg>module(group: &lt;s2&gt;'org.apache.ant'&lt;/s2&gt;, name: &lt;s3&gt;'ant'&lt;/s3&gt;, version: &lt;s4&gt;'1.9.3'&lt;/s4&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>module.dependencies*.exported = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012905Z" creationid="huanghaohang" creationdate="20190123T012905Z">
        <seg>module.dependencies*.exported = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>module.dependencies.clear()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012639Z" creationid="huanghaohang" creationdate="20190123T012639Z">
        <seg>module.dependencies.clear()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>moreLibs
}

repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143056Z" creationid="huanghaohang" creationdate="20180408T143056Z">
        <seg>moreLibs
}

repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>moreLibs &lt;s10&gt;":otherLib:1.0"&lt;/s10&gt;
}

war {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143126Z" creationid="huanghaohang" creationdate="20180408T143126Z">
        <seg>moreLibs &lt;s10&gt;":otherLib:1.0"&lt;/s10&gt;
}

war {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T030624Z" creationid="95" creationdate="20170729T030624Z">
        <seg>more_about_tasks.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10CBF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021641Z" creationid="huanghaohang" creationdate="20180201T021641Z">
        <seg>more_about_tasks.html#N10CBF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10CF6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021648Z" creationid="huanghaohang" creationdate="20180201T021648Z">
        <seg>more_about_tasks.html#N10CF6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10E91</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021714Z" creationid="huanghaohang" creationdate="20180201T021714Z">
        <seg>more_about_tasks.html#N10E91</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10EA3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021724Z" creationid="huanghaohang" creationdate="20180201T021724Z">
        <seg>more_about_tasks.html#N10EA3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10EC0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021730Z" creationid="huanghaohang" creationdate="20180201T021730Z">
        <seg>more_about_tasks.html#N10EC0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10F94</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021747Z" creationid="huanghaohang" creationdate="20180201T021747Z">
        <seg>more_about_tasks.html#N10F94</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#N10FC0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021753Z" creationid="huanghaohang" creationdate="20180201T021753Z">
        <seg>more_about_tasks.html#N10FC0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#sec:adding_dependencies_to_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160405Z" creationid="95" creationdate="20170726T160405Z">
        <seg>more_about_tasks.html#sec:adding_dependencies_to_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#sec:configuring_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021654Z" creationid="huanghaohang" creationdate="20180201T021654Z">
        <seg>more_about_tasks.html#sec:configuring_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#sec:ordering_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021708Z" creationid="huanghaohang" creationdate="20180201T021708Z">
        <seg>more_about_tasks.html#sec:ordering_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#sec:task_inputs_outputs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140548Z" creationid="95" creationdate="20190131T140548Z">
        <seg>more_about_tasks.html#sec:task_inputs_outputs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#sec:the_idea_behind_gradle_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180201T021800Z" creationid="huanghaohang" creationdate="20180201T021800Z">
        <seg>more_about_tasks.html#sec:the_idea_behind_gradle_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>more_about_tasks.html#sec:up_to_date_checks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075133Z" creationid="huanghaohang" creationdate="20171015T075133Z">
        <seg>more_about_tasks.html#sec:up_to_date_checks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mountains.mountain.each { mountain -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085713Z" creationid="huanghaohang" creationdate="20170922T085713Z">
        <seg>mountains.mountain.each { mountain -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123549Z" creationid="95" creationdate="20170803T123549Z">
        <seg>multi_project_builds.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#N164EA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145136Z" creationid="huanghaohang" creationdate="20190708T145136Z">
        <seg>multi_project_builds.html#N164EA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#disable_dependency_projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125334Z" creationid="95" creationdate="20170803T125334Z">
        <seg>multi_project_builds.html#disable_dependency_projects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#javadependencies_2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190622T134905Z" creationid="huanghaohang" creationdate="20190622T134905Z">
        <seg>multi_project_builds.html#javadependencies_2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:configuration_on_demand</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T013334Z" creationid="huanghaohang" creationdate="20180126T013334Z">
        <seg>multi_project_builds.html#sec:configuration_on_demand</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:cross_project_configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190621T150703Z" creationid="huanghaohang" creationdate="20190621T150703Z">
        <seg>multi_project_builds.html#sec:cross_project_configuration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:decoupled_projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T152722Z" creationid="huanghaohang" creationdate="20190614T152722Z">
        <seg>multi_project_builds.html#sec:decoupled_projects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:dependencies_which_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145136Z" creationid="huanghaohang" creationdate="20190615T145136Z">
        <seg>multi_project_builds.html#sec:dependencies_which_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:execution_rules_for_multi_project_builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144909Z" creationid="huanghaohang" creationdate="20190708T144909Z">
        <seg>multi_project_builds.html#sec:execution_rules_for_multi_project_builds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:multiproject_build_and_test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145116Z" creationid="huanghaohang" creationdate="20190708T145116Z">
        <seg>multi_project_builds.html#sec:multiproject_build_and_test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:parallel_execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145107Z" creationid="huanghaohang" creationdate="20190708T145107Z">
        <seg>multi_project_builds.html#sec:parallel_execution</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:project_and_task_paths</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T110615Z" creationid="huanghaohang" creationdate="20190616T110615Z">
        <seg>multi_project_builds.html#sec:project_and_task_paths</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:project_jar_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145102Z" creationid="huanghaohang" creationdate="20190708T145102Z">
        <seg>multi_project_builds.html#sec:project_jar_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:property_and_method_inheritance</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T145122Z" creationid="huanghaohang" creationdate="20190708T145122Z">
        <seg>multi_project_builds.html#sec:property_and_method_inheritance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:running_partial_build_from_the_root</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T143320Z" creationid="huanghaohang" creationdate="20190613T143320Z">
        <seg>multi_project_builds.html#sec:running_partial_build_from_the_root</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multi_project_builds.html#sec:subproject_configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190708T144855Z" creationid="huanghaohang" creationdate="20190708T144855Z">
        <seg>multi_project_builds.html#sec:subproject_configuration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>multiproject/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154455Z" creationid="95" creationdate="20170731T154455Z">
        <seg>multiproject/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>n/a</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060605Z" creationid="huanghaohang" creationdate="20190607T060605Z">
        <seg>n/a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132126Z" creationid="huanghaohang" creationdate="20170913T132126Z">
        <seg>name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name &lt;s0&gt;"fileRepo"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080208Z" creationid="huanghaohang" creationdate="20190606T080208Z">
        <seg>name &lt;s0&gt;"fileRepo"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name &lt;s0&gt;'localRepository'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025336Z" creationid="huanghaohang" creationdate="20190604T025336Z">
        <seg>name &lt;s0&gt;'localRepository'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name &lt;s12&gt;"STANDARD_ENTERPRISE_REPO"&lt;/s12&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151223Z" creationid="huanghaohang" creationdate="20191206T151223Z">
        <seg>name &lt;s12&gt;"STANDARD_ENTERPRISE_REPO"&lt;/s12&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name &lt;s1&gt;'The Apache Software License, Version 2.0'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061320Z" creationid="huanghaohang" creationdate="20190607T061320Z">
        <seg>name &lt;s1&gt;'The Apache Software License, Version 2.0'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name &lt;s1&gt;'my-artifact'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075537Z" creationid="huanghaohang" creationdate="20190606T075537Z">
        <seg>name &lt;s1&gt;'my-artifact'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>name = &lt;s1&gt;'overwrittenSpecialOsgiName'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033556Z" creationid="huanghaohang" creationdate="20181203T033556Z">
        <seg>name = &lt;s1&gt;'overwrittenSpecialOsgiName'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>native language plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090655Z" creationid="huanghaohang" creationdate="20180211T090655Z">
        <seg>本机语言插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T142859Z" creationid="huanghaohang" creationdate="20180205T142859Z">
        <seg>nativeBinaries.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#N15845</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091045Z" creationid="huanghaohang" creationdate="20190611T091045Z">
        <seg>nativeBinaries.html#N15845</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#N158D4</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091057Z" creationid="huanghaohang" creationdate="20190611T091057Z">
        <seg>nativeBinaries.html#N158D4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#N1592D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091102Z" creationid="huanghaohang" creationdate="20190611T091102Z">
        <seg>nativeBinaries.html#N1592D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#N15AB9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091109Z" creationid="huanghaohang" creationdate="20190611T091109Z">
        <seg>nativeBinaries.html#N15AB9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#N15B53</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091123Z" creationid="huanghaohang" creationdate="20190611T091123Z">
        <seg>nativeBinaries.html#N15B53</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native-binaries:tool-chain-support</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091052Z" creationid="huanghaohang" creationdate="20190611T091052Z">
        <seg>nativeBinaries.html#native-binaries:tool-chain-support</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:build_type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023528Z" creationid="huanghaohang" creationdate="20190610T023528Z">
        <seg>nativeBinaries.html#native_binaries:build_type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:cunit</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091154Z" creationid="huanghaohang" creationdate="20190611T091154Z">
        <seg>nativeBinaries.html#native_binaries:cunit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:flavor</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023533Z" creationid="huanghaohang" creationdate="20190610T023533Z">
        <seg>nativeBinaries.html#native_binaries:flavor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:languages</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091104Z" creationid="huanghaohang" creationdate="20190611T091104Z">
        <seg>nativeBinaries.html#native_binaries:languages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:platform</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023529Z" creationid="huanghaohang" creationdate="20190610T023529Z">
        <seg>nativeBinaries.html#native_binaries:platform</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:tool_chain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T021955Z" creationid="huanghaohang" creationdate="20190609T021955Z">
        <seg>nativeBinaries.html#native_binaries:tool_chain</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:variants</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091128Z" creationid="huanghaohang" creationdate="20190611T091128Z">
        <seg>nativeBinaries.html#native_binaries:variants</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:visual_studio</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091144Z" creationid="huanghaohang" creationdate="20190611T091144Z">
        <seg>nativeBinaries.html#native_binaries:visual_studio</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nativeBinaries.html#native_binaries:windows-resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T091115Z" creationid="huanghaohang" creationdate="20190611T091115Z">
        <seg>nativeBinaries.html#native_binaries:windows-resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>no logging options</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T221911Z" creationid="huanghaohang" creationdate="20180105T221911Z">
        <seg>没有日志选项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>none</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030326Z" creationid="huanghaohang" creationdate="20190603T030326Z">
        <seg>无</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>notify-send</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092217Z" creationid="huanghaohang" creationdate="20190124T092217Z">
        <seg>notify-send</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>null</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233151Z" creationid="huanghaohang" creationdate="20171206T233151Z">
        <seg>null</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>objective-c</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143036Z" creationid="huanghaohang" creationdate="20180205T143036Z">
        <seg>objective-c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>objective-cpp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143055Z" creationid="huanghaohang" creationdate="20180205T143055Z">
        <seg>objective-cpp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>operators {}
}
binaries.withType(TestSuiteExecutableBinary) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090228Z" creationid="huanghaohang" creationdate="20190611T090228Z">
        <seg>operators {}
}
binaries.withType(TestSuiteExecutableBinary) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>or</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155848Z" creationid="95" creationdate="20170726T155848Z">
        <seg>或者</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>orca-1.0 -&gt; seal-1.0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142833Z" creationid="huanghaohang" creationdate="20190602T142833Z">
        <seg>orca-1.0 -&gt; seal-1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.artifact.ant.Authentication</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093648Z" creationid="huanghaohang" creationdate="20190607T093648Z">
        <seg>org.apache.maven.artifact.ant.Authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.artifact.ant.Proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093703Z" creationid="huanghaohang" creationdate="20190607T093703Z">
        <seg>org.apache.maven.artifact.ant.Proxy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.artifact.ant.RemoteRepository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093644Z" creationid="huanghaohang" creationdate="20190607T093644Z">
        <seg>org.apache.maven.artifact.ant.RemoteRepository</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.artifact.ant.RepositoryPolicy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093656Z" creationid="huanghaohang" creationdate="20190607T093656Z">
        <seg>org.apache.maven.artifact.ant.RepositoryPolicy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.wagon:wagon-ftp:2.2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093627Z" creationid="huanghaohang" creationdate="20190607T093627Z">
        <seg>org.apache.maven.wagon:wagon-ftp:2.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.wagon:wagon-http:2.2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093619Z" creationid="huanghaohang" creationdate="20190607T093619Z">
        <seg>org.apache.maven.wagon:wagon-http:2.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.wagon:wagon-ssh-external:2.2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093625Z" creationid="huanghaohang" creationdate="20190607T093625Z">
        <seg>org.apache.maven.wagon:wagon-ssh-external:2.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.wagon:wagon-ssh:2.2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093624Z" creationid="huanghaohang" creationdate="20190607T093624Z">
        <seg>org.apache.maven.wagon:wagon-ssh:2.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.apache.maven.wagon:wagon-webdav:1.0-beta-2</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093630Z" creationid="huanghaohang" creationdate="20190607T093630Z">
        <seg>org.apache.maven.wagon:wagon-webdav:1.0-beta-2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.gradle.configureondemand</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T013325Z" creationid="huanghaohang" creationdate="20180126T013325Z">
        <seg>org.gradle.configureondemand</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.gradle.daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T012231Z" creationid="huanghaohang" creationdate="20180126T012231Z">
        <seg>org.gradle.daemon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.gradle.java.home</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T012616Z" creationid="huanghaohang" creationdate="20180126T012616Z">
        <seg>org.gradle.java.home</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.gradle.jvmargs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T013102Z" creationid="huanghaohang" creationdate="20180126T013102Z">
        <seg>org.gradle.jvmargs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.gradle.parallel</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180126T020535Z" creationid="huanghaohang" creationdate="20180126T020535Z">
        <seg>org.gradle.parallel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org.gradle.plugins.ear.descriptor.DeploymentDescriptor</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145939Z" creationid="huanghaohang" creationdate="20180415T145939Z">
        <seg>org.gradle.plugins.ear.descriptor.DeploymentDescriptor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org/gradle/sample/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150811Z" creationid="huanghaohang" creationdate="20190617T150811Z">
        <seg>org/gradle/sample/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org/gradle/sample/services/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160331Z" creationid="huanghaohang" creationdate="20190617T160331Z">
        <seg>org/gradle/sample/services/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>org/gradle/sample/shared/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160335Z" creationid="huanghaohang" creationdate="20190617T160335Z">
        <seg>org/gradle/sample/shared/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>organizing_build_logic.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023517Z" creationid="95" creationdate="20170729T023517Z">
        <seg>organizing_build_logic.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>organizing_build_logic.html#sec:build_sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T143924Z" creationid="huanghaohang" creationdate="20190817T143924Z">
        <seg>organizing_build_logic.html#sec:build_sources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>organizing_build_logic.html#sec:external_build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T144341Z" creationid="huanghaohang" creationdate="20190817T144341Z">
        <seg>organizing_build_logic.html#sec:external_build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>organizing_build_logic.html#sec:external_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T093450Z" creationid="huanghaohang" creationdate="20180130T093450Z">
        <seg>organizing_build_logic.html#sec:external_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>organizing_build_logic.html#sec:inherited_properties_and_methods</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T142859Z" creationid="huanghaohang" creationdate="20190817T142859Z">
        <seg>organizing_build_logic.html#sec:inherited_properties_and_methods</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>organizing_build_logic.html#sec:injected_configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T143835Z" creationid="huanghaohang" creationdate="20190817T143835Z">
        <seg>organizing_build_logic.html#sec:injected_configuration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143429Z" creationid="huanghaohang" creationdate="20180207T143429Z">
        <seg>osgi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgiManifest()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030203Z" creationid="huanghaohang" creationdate="20181203T030203Z">
        <seg>osgiManifest()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgiManifest(Closure cl)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T030228Z" creationid="huanghaohang" creationdate="20181203T030228Z">
        <seg>osgiManifest(Closure cl)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143427Z" creationid="huanghaohang" creationdate="20180207T143427Z">
        <seg>osgi_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html#N13C38</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070258Z" creationid="huanghaohang" creationdate="20190205T070258Z">
        <seg>osgi_plugin.html#N13C38</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html#N13C47</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070300Z" creationid="huanghaohang" creationdate="20190205T070300Z">
        <seg>osgi_plugin.html#N13C47</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html#N13C4C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070309Z" creationid="huanghaohang" creationdate="20190205T070309Z">
        <seg>osgi_plugin.html#N13C4C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html#N13C51</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070311Z" creationid="huanghaohang" creationdate="20190205T070311Z">
        <seg>osgi_plugin.html#N13C51</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html#N13C56</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070314Z" creationid="huanghaohang" creationdate="20190205T070314Z">
        <seg>osgi_plugin.html#N13C56</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>osgi_plugin.html#N13C99</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070321Z" creationid="huanghaohang" creationdate="20190205T070321Z">
        <seg>osgi_plugin.html#N13C99</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>other.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145337Z" creationid="huanghaohang" creationdate="20170918T145337Z">
        <seg>other.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>otherConf group: &lt;s1&gt;'org.gradle.test.classifiers'&lt;/s1&gt;, name: &lt;s2&gt;'service'&lt;/s2&gt;, version: &lt;s3&gt;'1.0'&lt;/s3&gt;, classifier: &lt;s4&gt;'jdk14'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T045342Z" creationid="huanghaohang" creationdate="20190531T045342Z">
        <seg>otherConf group: &lt;s1&gt;'org.gradle.test.classifiers'&lt;/s1&gt;, name: &lt;s2&gt;'service'&lt;/s2&gt;, version: &lt;s3&gt;'1.0'&lt;/s3&gt;, classifier: &lt;s4&gt;'jdk14'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>output</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095101Z" creationid="haohang" creationdate="20180320T095101Z">
        <seg>output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>output.classesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095129Z" creationid="haohang" creationdate="20180320T095129Z">
        <seg>output.classesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>output.resourcesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095212Z" creationid="haohang" creationdate="20180320T095212Z">
        <seg>output.resourcesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>outputDir = file(&lt;s1&gt;"$buildDir/outputs"&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141859Z" creationid="huanghaohang" creationdate="20190707T141859Z">
        <seg>outputDir = file(&lt;s1&gt;"$buildDir/outputs"&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>outputs.dir &lt;s1&gt;'some-dir'&lt;/s1&gt; &lt;s2&gt;// up-to-date check for outputs&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124926Z" creationid="huanghaohang" creationdate="20171015T124926Z">
        <seg>outputs.dir &lt;s1&gt;'some-dir'&lt;/s1&gt; &lt;s2&gt;// up-to-date check for outputs&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>outputs.dir destDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T003856Z" creationid="huanghaohang" creationdate="20170923T003856Z">
        <seg>outputs.dir destDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>outputs.dir docs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140540Z" creationid="95" creationdate="20190131T140540Z">
        <seg>outputs.dir docs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>overview.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072441Z" creationid="haohang" creationdate="20170720T072441Z">
        <seg>overview.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>overview.html#sec:special_feature_of_gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072444Z" creationid="haohang" creationdate="20170720T072444Z">
        <seg>overview.html#sec:special_feature_of_gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>overview.html#sec:why_groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072449Z" creationid="haohang" creationdate="20170720T072449Z">
        <seg>overview.html#sec:why_groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>packaging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094950Z" creationid="huanghaohang" creationdate="20190607T094950Z">
        <seg>packaging</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>passing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090222Z" creationid="huanghaohang" creationdate="20190611T090222Z">
        <seg>passing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password &lt;s1&gt;"pw"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050453Z" creationid="huanghaohang" creationdate="20170908T050453Z">
        <seg>password &lt;s1&gt;"pw"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password &lt;s1&gt;'password'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034100Z" creationid="huanghaohang" creationdate="20190603T034100Z">
        <seg>password &lt;s1&gt;'password'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password &lt;s2&gt;'password'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030851Z" creationid="huanghaohang" creationdate="20190603T030851Z">
        <seg>password &lt;s2&gt;'password'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password &lt;s3&gt;"pw"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080212Z" creationid="huanghaohang" creationdate="20190606T080212Z">
        <seg>password &lt;s3&gt;"pw"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password &lt;s5&gt;'password'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030946Z" creationid="huanghaohang" creationdate="20190603T030942Z">
        <seg>password &lt;s5&gt;'password'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password = &lt;s1&gt;'myPassword'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092010Z" creationid="huanghaohang" creationdate="20190124T092010Z">
        <seg>password = &lt;s1&gt;'myPassword'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password = &lt;s4&gt;"very clever"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100118Z" creationid="huanghaohang" creationdate="20180715T100118Z">
        <seg>password = &lt;s4&gt;"very clever"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>password = &lt;s5&gt;"very clever"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152300Z" creationid="huanghaohang" creationdate="20180811T152300Z">
        <seg>password = &lt;s5&gt;"very clever"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132137Z" creationid="huanghaohang" creationdate="20170913T132137Z">
        <seg>path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>path.list().each {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T091124Z" creationid="huanghaohang" creationdate="20171219T091124Z">
        <seg>path.list().each {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>platforms {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045617Z" creationid="huanghaohang" creationdate="20190610T045617Z">
        <seg>platforms {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>plugin {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133547Z" creationid="huanghaohang" creationdate="20170913T133547Z">
        <seg>plugin {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>plugins.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180123T123627Z" creationid="huanghaohang" creationdate="20180123T123627Z">
        <seg>plugins.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>plugins.html#N11857</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034749Z" creationid="huanghaohang" creationdate="20180517T034749Z">
        <seg>plugins.html#N11857</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>plugins.html#N118FA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034800Z" creationid="huanghaohang" creationdate="20180517T034800Z">
        <seg>plugins.html#N118FA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>plugins.html#sec:using_plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034329Z" creationid="huanghaohang" creationdate="20180517T034329Z">
        <seg>plugins.html#sec:using_plugins</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>plugins.html#sub:more_about_convention_objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054459Z" creationid="haohang" creationdate="20180313T054459Z">
        <seg>plugins.html#sub:more_about_convention_objects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085852Z" creationid="huanghaohang" creationdate="20180211T085852Z">
        <seg>pmd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd
}

dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084252Z" creationid="huanghaohang" creationdate="20180105T084252Z">
        <seg>pmd
}

dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd group: &lt;s0&gt;'pmd'&lt;/s0&gt;, name: &lt;s1&gt;'pmd'&lt;/s1&gt;, version: &lt;s2&gt;'4.2.5'&lt;/s2&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084253Z" creationid="huanghaohang" creationdate="20180105T084253Z">
        <seg>pmd group: &lt;s0&gt;'pmd'&lt;/s0&gt;, name: &lt;s1&gt;'pmd'&lt;/s1&gt;, version: &lt;s2&gt;'4.2.5'&lt;/s2&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143202Z" creationid="huanghaohang" creationdate="20180516T143202Z">
        <seg>pmd&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmdMain</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143144Z" creationid="huanghaohang" creationdate="20180516T143144Z">
        <seg>pmdMain</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmdTest</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143153Z" creationid="huanghaohang" creationdate="20180516T143153Z">
        <seg>pmdTest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180516T143049Z" creationid="95" creationdate="20170721T135423Z">
        <seg>pmd_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd_plugin.html#N1363B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070031Z" creationid="huanghaohang" creationdate="20190205T070031Z">
        <seg>pmd_plugin.html#N1363B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd_plugin.html#N1364F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070033Z" creationid="huanghaohang" creationdate="20190205T070033Z">
        <seg>pmd_plugin.html#N1364F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd_plugin.html#N136BD</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070035Z" creationid="huanghaohang" creationdate="20190205T070035Z">
        <seg>pmd_plugin.html#N136BD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pmd_plugin.html#N136D9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070036Z" creationid="huanghaohang" creationdate="20190205T070036Z">
        <seg>pmd_plugin.html#N136D9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061317Z" creationid="huanghaohang" creationdate="20190607T061317Z">
        <seg>pom {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom(&lt;s5&gt;'api'&lt;/s5&gt;).version = &lt;s6&gt;'mySpecialMavenVersion'&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T084752Z" creationid="huanghaohang" creationdate="20190608T084752Z">
        <seg>pom(&lt;s5&gt;'api'&lt;/s5&gt;).version = &lt;s6&gt;'mySpecialMavenVersion'&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom.artifactId = &lt;s1&gt;'myName'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111342Z" creationid="huanghaohang" creationdate="20190607T111342Z">
        <seg>pom.artifactId = &lt;s1&gt;'myName'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom.artifactId = &lt;s2&gt;'myMavenName'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100716Z" creationid="huanghaohang" creationdate="20190607T100716Z">
        <seg>pom.artifactId = &lt;s2&gt;'myMavenName'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom.dependencies.find {dep -&gt; dep.groupId == &lt;s0&gt;'group3'&lt;/s0&gt; &amp;&amp; dep.artifactId == &lt;s1&gt;'runtime'&lt;/s1&gt; }.optional = true
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111056Z" creationid="huanghaohang" creationdate="20190607T111056Z">
        <seg>pom.dependencies.find {dep -&gt; dep.groupId == &lt;s0&gt;'group3'&lt;/s0&gt; &amp;&amp; dep.artifactId == &lt;s1&gt;'runtime'&lt;/s1&gt; }.optional = true
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom.project {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100906Z" creationid="huanghaohang" creationdate="20190607T100906Z">
        <seg>pom.project {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom.version = &lt;s0&gt;'1.0Maven'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111342Z" creationid="huanghaohang" creationdate="20190607T111342Z">
        <seg>pom.version = &lt;s0&gt;'1.0Maven'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pom.version = &lt;s1&gt;'1.0Maven'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100715Z" creationid="huanghaohang" creationdate="20190607T100715Z">
        <seg>pom.version = &lt;s1&gt;'1.0Maven'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pomDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060510Z" creationid="huanghaohang" creationdate="20190607T060510Z">
        <seg>pomDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>pomDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060433Z" creationid="huanghaohang" creationdate="20190607T060433Z">
        <seg>pomDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>poms</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T060438Z" creationid="huanghaohang" creationdate="20190607T060438Z">
        <seg>poms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>port</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093258Z" creationid="huanghaohang" creationdate="20180715T093258Z">
        <seg>port</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"- The weight of my species in summer is twice as heavy as all human beings."&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143042Z" creationid="huanghaohang" creationdate="20190615T143042Z">
        <seg>println &lt;s0&gt;"- The weight of my species in summer is twice as heavy as all human beings."&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"All repos:"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143638Z" creationid="huanghaohang" creationdate="20191206T143638Z">
        <seg>println &lt;s0&gt;"All repos:"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"Hello, world!"&lt;/s0&gt;
}  

helloWorld.doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092058Z" creationid="huanghaohang" creationdate="20190124T092058Z">
        <seg>println &lt;s0&gt;"Hello, world!"&lt;/s0&gt;
}  

helloWorld.doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"Producing message:"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140258Z" creationid="huanghaohang" creationdate="20190616T140258Z">
        <seg>println &lt;s0&gt;"Producing message:"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"We build the zip with version=$version"&lt;/s0&gt;
}

task release(dependsOn: &lt;s1&gt;'distribution'&lt;/s1&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025304Z" creationid="95" creationdate="20170729T025304Z">
        <seg>println &lt;s0&gt;"We build the zip with version=$version"&lt;/s0&gt;
}

task release(dependsOn: &lt;s1&gt;'distribution'&lt;/s1&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"configuring $project"&lt;/s0&gt;
task hello &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145339Z" creationid="huanghaohang" creationdate="20170918T145339Z">
        <seg>println &lt;s0&gt;"configuring $project"&lt;/s0&gt;
task hello &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"hello from the other build."&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135707Z" creationid="huanghaohang" creationdate="20191201T135707Z">
        <seg>println &lt;s0&gt;"hello from the other build."&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"hello"&lt;/s0&gt;
}

task(copy, type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120835Z" creationid="huanghaohang" creationdate="20170919T120835Z">
        <seg>println &lt;s0&gt;"hello"&lt;/s0&gt;
}

task(copy, type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"in a closure"&lt;/s0&gt;
}
repositories() { println &lt;s1&gt;"in a closure"&lt;/s1&gt; }
repositories({ println &lt;s2&gt;"in a closure"&lt;/s2&gt; })</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141919Z" creationid="huanghaohang" creationdate="20170913T141919Z">
        <seg>println &lt;s0&gt;"in a closure"&lt;/s0&gt;
}
repositories() { println &lt;s1&gt;"in a closure"&lt;/s1&gt; }
repositories({ println &lt;s2&gt;"in a closure"&lt;/s2&gt; })</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"repository: ${it.name} ('${it.url}')"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151230Z" creationid="huanghaohang" creationdate="20191206T151230Z">
        <seg>println &lt;s0&gt;"repository: ${it.name} ('${it.url}')"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;"using build file '$buildFile.name' in '$buildFile.parentFile.name'."&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114014Z" creationid="huanghaohang" creationdate="20170909T114014Z">
        <seg>println &lt;s0&gt;"using build file '$buildFile.name' in '$buildFile.parentFile.name'."&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'A message which is logged at QUIET level'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T012024Z" creationid="huanghaohang" creationdate="20180107T012024Z">
        <seg>println &lt;s0&gt;'A message which is logged at QUIET level'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'A task message which is logged at INFO level'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025426Z" creationid="huanghaohang" creationdate="20180107T025426Z">
        <seg>println &lt;s0&gt;'A task message which is logged at INFO level'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'Hello Earth'&lt;/s0&gt;
}
hello.doFirst {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133109Z" creationid="95" creationdate="20170727T133109Z">
        <seg>println &lt;s0&gt;'Hello Earth'&lt;/s0&gt;
}
hello.doFirst {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144950Z" creationid="95" creationdate="20170724T144950Z">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155317Z" creationid="95" creationdate="20170726T155317Z">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;
}
hello.doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141337Z" creationid="95" creationdate="20170727T141337Z">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;
}
hello.doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;
}
task intro(dependsOn: hello) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160117Z" creationid="95" creationdate="20170726T160117Z">
        <seg>println &lt;s0&gt;'Hello world!'&lt;/s0&gt;
}
task intro(dependsOn: hello) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'This is executed during the configuration phase.'&lt;/s0&gt;

task configured {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145514Z" creationid="huanghaohang" creationdate="20190612T145514Z">
        <seg>println &lt;s0&gt;'This is executed during the configuration phase.'&lt;/s0&gt;

task configured {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'This is executed during the initialization phase.'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145513Z" creationid="huanghaohang" creationdate="20190612T145513Z">
        <seg>println &lt;s0&gt;'This is executed during the initialization phase.'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'This should not be printed if the task is disabled.'&lt;/s0&gt;
}
disableMe.enabled = false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085326Z" creationid="huanghaohang" creationdate="20170922T085326Z">
        <seg>println &lt;s0&gt;'This should not be printed if the task is disabled.'&lt;/s0&gt;
}
disableMe.enabled = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'We are doing the compile.'&lt;/s0&gt;
}

compile.doFirst {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084833Z" creationid="huanghaohang" creationdate="20170922T084833Z">
        <seg>println &lt;s0&gt;'We are doing the compile.'&lt;/s0&gt;
}

compile.doFirst {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'compiling source'&lt;/s0&gt;
}

task compileTest(dependsOn: compile) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031126Z" creationid="huanghaohang" creationdate="20170909T031126Z">
        <seg>println &lt;s0&gt;'compiling source'&lt;/s0&gt;
}

task compileTest(dependsOn: compile) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'hello world'&lt;/s0&gt;
}

hello.onlyIf { !project.hasProperty(&lt;s1&gt;'skipHello'&lt;/s1&gt;) }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084155Z" creationid="huanghaohang" creationdate="20170922T084155Z">
        <seg>println &lt;s0&gt;'hello world'&lt;/s0&gt;
}

hello.onlyIf { !project.hasProperty(&lt;s1&gt;'skipHello'&lt;/s1&gt;) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044133Z" creationid="huanghaohang" creationdate="20170923T044133Z">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;
}

task taskY &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130249Z" creationid="huanghaohang" creationdate="20170919T130249Z">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;
}

task taskY &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;
}

taskX.dependsOn {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130916Z" creationid="huanghaohang" creationdate="20170919T130916Z">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;
}

taskX.dependsOn {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;
}
task taskY &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T032048Z" creationid="huanghaohang" creationdate="20170922T032048Z">
        <seg>println &lt;s0&gt;'taskX'&lt;/s0&gt;
}
task taskY &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s11&gt;"removed: ${change.file.name}"&lt;/s11&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134823Z" creationid="huanghaohang" creationdate="20190706T134823Z">
        <seg>println &lt;s11&gt;"removed: ${change.file.name}"&lt;/s11&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s11&gt;'build completed'&lt;/s11&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144032Z" creationid="huanghaohang" creationdate="20180107T144032Z">
        <seg>println &lt;s11&gt;'build completed'&lt;/s11&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"$book.name -&gt; $book.sourceFile"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130959Z" creationid="huanghaohang" creationdate="20190728T130959Z">
        <seg>println &lt;s1&gt;"$book.name -&gt; $book.sourceFile"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"Adding test task to $project"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145907Z" creationid="huanghaohang" creationdate="20190613T145907Z">
        <seg>println &lt;s1&gt;"Adding test task to $project"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"Evaluation of $project FAILED"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150830Z" creationid="huanghaohang" creationdate="20190613T150830Z">
        <seg>println &lt;s1&gt;"Evaluation of $project FAILED"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"Greetings from the $hello.name task."&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141341Z" creationid="95" creationdate="20170727T141341Z">
        <seg>println &lt;s1&gt;"Greetings from the $hello.name task."&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"I'm Gradle"&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160119Z" creationid="95" creationdate="20170726T160119Z">
        <seg>println &lt;s1&gt;"I'm Gradle"&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"I'm task number $counter"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132726Z" creationid="95" creationdate="20170727T132726Z">
        <seg>println &lt;s1&gt;"I'm task number $counter"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"Original: "&lt;/s1&gt; + someString</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155826Z" creationid="95" creationdate="20170726T155826Z">
        <seg>println &lt;s1&gt;"Original: "&lt;/s1&gt; + someString</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"hello"&lt;/s1&gt;
}

task(&lt;s2&gt;'copy'&lt;/s2&gt;, type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121055Z" creationid="huanghaohang" creationdate="20170919T121055Z">
        <seg>println &lt;s1&gt;"hello"&lt;/s1&gt;
}

task(&lt;s2&gt;'copy'&lt;/s2&gt;, type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;"hello"&lt;/s1&gt;
}

tasks.create(name: &lt;s2&gt;'copy'&lt;/s2&gt;, type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121137Z" creationid="huanghaohang" creationdate="20170919T121137Z">
        <seg>println &lt;s1&gt;"hello"&lt;/s1&gt;
}

tasks.create(name: &lt;s2&gt;'copy'&lt;/s2&gt;, type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'20 nautical miles'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162431Z" creationid="huanghaohang" creationdate="20190615T162431Z">
        <seg>println &lt;s1&gt;'20 nautical miles'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'5 nautical miles'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T162441Z" creationid="huanghaohang" creationdate="20190615T162441Z">
        <seg>println &lt;s1&gt;'5 nautical miles'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'Hello Venus'&lt;/s1&gt;
}
hello.doLast {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133111Z" creationid="95" creationdate="20170727T133111Z">
        <seg>println &lt;s1&gt;'Hello Venus'&lt;/s1&gt;
}
hello.doLast {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'Hello, from Gradle'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T084638Z" creationid="huanghaohang" creationdate="20180105T084638Z">
        <seg>println &lt;s1&gt;'Hello, from Gradle'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'This is also executed during the configuration phase.'&lt;/s1&gt;
}

task test &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145514Z" creationid="huanghaohang" creationdate="20190612T145514Z">
        <seg>println &lt;s1&gt;'This is also executed during the configuration phase.'&lt;/s1&gt;
}

task test &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'compiling unit tests'&lt;/s1&gt;
}

task test(dependsOn: [compile, compileTest]) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031134Z" creationid="huanghaohang" creationdate="20170909T031134Z">
        <seg>println &lt;s1&gt;'compiling unit tests'&lt;/s1&gt;
}

task test(dependsOn: [compile, compileTest]) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'hello from other script'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145341Z" creationid="huanghaohang" creationdate="20170918T145341Z">
        <seg>println &lt;s1&gt;'hello from other script'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'srcDirName: '&lt;/s1&gt; + srcDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145012Z" creationid="huanghaohang" creationdate="20190817T145012Z">
        <seg>println &lt;s1&gt;'srcDirName: '&lt;/s1&gt; + srcDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'taskX'&lt;/s1&gt;
}
task taskY &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160344Z" creationid="95" creationdate="20170726T160344Z">
        <seg>println &lt;s1&gt;'taskX'&lt;/s1&gt;
}
task taskY &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}

taskX.dependsOn taskY</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130250Z" creationid="huanghaohang" creationdate="20170919T130250Z">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}

taskX.dependsOn taskY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}

taskX.finalizedBy taskY</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044045Z" creationid="huanghaohang" creationdate="20170923T044045Z">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}

taskX.finalizedBy taskY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}
task taskZ &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081551Z" creationid="huanghaohang" creationdate="20170922T081551Z">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}
task taskZ &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}
taskY.mustRunAfter taskX</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T032049Z" creationid="huanghaohang" creationdate="20170922T032049Z">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}
taskY.mustRunAfter taskX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}
taskY.shouldRunAfter taskX</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T035718Z" creationid="huanghaohang" creationdate="20170922T035718Z">
        <seg>println &lt;s1&gt;'taskY'&lt;/s1&gt;
}
taskY.shouldRunAfter taskX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;" *** $file.name ***"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153803Z" creationid="95" creationdate="20170728T153803Z">
        <seg>println &lt;s2&gt;" *** $file.name ***"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;"$file.name Checksum: ${ant.properties["&lt;/s2&gt;cs_$file.name&lt;s3&gt;"]}"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023459Z" creationid="95" creationdate="20170729T023459Z">
        <seg>println &lt;s2&gt;"$file.name Checksum: ${ant.properties["&lt;/s2&gt;cs_$file.name&lt;s3&gt;"]}"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;"Contents of $srcDir.name"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150352Z" creationid="huanghaohang" creationdate="20170927T150352Z">
        <seg>println &lt;s2&gt;"Contents of $srcDir.name"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;"Upper case: "&lt;/s2&gt; + someString.toUpperCase()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155827Z" creationid="95" creationdate="20170726T155827Z">
        <seg>println &lt;s2&gt;"Upper case: "&lt;/s2&gt; + someString.toUpperCase()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'Default Cleaning!'&lt;/s2&gt;
}

task run &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023909Z" creationid="95" creationdate="20170729T023909Z">
        <seg>println &lt;s2&gt;'Default Cleaning!'&lt;/s2&gt;
}

task run &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'Hello Mars'&lt;/s2&gt;
}
hello &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133111Z" creationid="95" creationdate="20170727T133111Z">
        <seg>println &lt;s2&gt;'Hello Mars'&lt;/s2&gt;
}
hello &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'This is executed during the execution phase.'&lt;/s2&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T145515Z" creationid="huanghaohang" creationdate="20190612T145515Z">
        <seg>println &lt;s2&gt;'This is executed during the execution phase.'&lt;/s2&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'We release now'&lt;/s2&gt;
}

gradle.taskGraph.whenReady {taskGraph -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025305Z" creationid="95" creationdate="20170729T025305Z">
        <seg>println &lt;s2&gt;'We release now'&lt;/s2&gt;
}

gradle.taskGraph.whenReady {taskGraph -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'compiling classes'&lt;/s2&gt;
}

task list(dependsOn: configurations.compile) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105524Z" creationid="huanghaohang" creationdate="20190602T105524Z">
        <seg>println &lt;s2&gt;'compiling classes'&lt;/s2&gt;
}

task list(dependsOn: configurations.compile) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'lib1'&lt;/s2&gt;
}

task lib2 &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130917Z" creationid="huanghaohang" creationdate="20170919T130917Z">
        <seg>println &lt;s2&gt;'lib1'&lt;/s2&gt;
}

task lib2 &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'running unit tests'&lt;/s2&gt;
}

task dist(dependsOn: [compile, test]) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031144Z" creationid="huanghaohang" creationdate="20170909T031144Z">
        <seg>println &lt;s2&gt;'running unit tests'&lt;/s2&gt;
}

task dist(dependsOn: [compile, test]) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'taskX'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130153Z" creationid="huanghaohang" creationdate="20170919T130153Z">
        <seg>println &lt;s2&gt;'taskX'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'taskY'&lt;/s2&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160347Z" creationid="95" creationdate="20170726T160347Z">
        <seg>println &lt;s2&gt;'taskY'&lt;/s2&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s2&gt;'taskZ'&lt;/s2&gt;
}
taskX.dependsOn taskY
taskY.dependsOn taskZ
taskZ.shouldRunAfter taskX</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T081553Z" creationid="huanghaohang" creationdate="20170922T081553Z">
        <seg>println &lt;s2&gt;'taskZ'&lt;/s2&gt;
}
taskX.dependsOn taskY
taskY.dependsOn taskZ
taskZ.shouldRunAfter taskX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"${ant.properties[file.name]}"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153804Z" creationid="95" creationdate="20170728T153804Z">
        <seg>println &lt;s3&gt;"${ant.properties[file.name]}"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142645Z" creationid="huanghaohang" creationdate="20190615T142645Z">
        <seg>println &lt;s3&gt;"- I'm the largest animal that has ever lived on this planet."&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"Evaluation of $project succeeded"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T150831Z" creationid="huanghaohang" creationdate="20190613T150831Z">
        <seg>println &lt;s3&gt;"Evaluation of $project succeeded"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"Pinging: "&lt;/s3&gt; + (taskName - &lt;s4&gt;'ping'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011928Z" creationid="huanghaohang" creationdate="20170923T011928Z">
        <seg>println &lt;s3&gt;"Pinging: "&lt;/s3&gt; + (taskName - &lt;s4&gt;'ping'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"Running tests for $project"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145910Z" creationid="huanghaohang" creationdate="20190613T145910Z">
        <seg>println &lt;s3&gt;"Running tests for $project"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"Transforming source file."&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085710Z" creationid="huanghaohang" creationdate="20170922T085710Z">
        <seg>println &lt;s3&gt;"Transforming source file."&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"classpath = ${configurations.compile.collect {File file -&gt; file.name}}"&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105526Z" creationid="huanghaohang" creationdate="20190602T105526Z">
        <seg>println &lt;s3&gt;"classpath = ${configurations.compile.collect {File file -&gt; file.name}}"&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;"executing $task ..."&lt;/s3&gt;
}

gradle.taskGraph.afterTask { Task task, TaskState state -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152623Z" creationid="huanghaohang" creationdate="20190613T152623Z">
        <seg>println &lt;s3&gt;"executing $task ..."&lt;/s3&gt;
}

gradle.taskGraph.afterTask { Task task, TaskState state -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'- I love to spend time in the arctic waters.'&lt;/s3&gt; }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145022Z" creationid="huanghaohang" creationdate="20190615T145022Z">
        <seg>println &lt;s3&gt;'- I love to spend time in the arctic waters.'&lt;/s3&gt; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'Default Running!'&lt;/s3&gt;
}

task other &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023910Z" creationid="95" creationdate="20170729T023910Z">
        <seg>println &lt;s3&gt;'Default Running!'&lt;/s3&gt;
}

task other &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'Hello Jupiter'&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133114Z" creationid="95" creationdate="20170727T133114Z">
        <seg>println &lt;s3&gt;'Hello Jupiter'&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'building the distribution'&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031146Z" creationid="huanghaohang" creationdate="20170909T031146Z">
        <seg>println &lt;s3&gt;'building the distribution'&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'hello from GreetingTask'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142812Z" creationid="huanghaohang" creationdate="20190705T142812Z">
        <seg>println &lt;s3&gt;'hello from GreetingTask'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'lib2'&lt;/s3&gt;
}

task notALib &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130918Z" creationid="huanghaohang" creationdate="20170919T130918Z">
        <seg>println &lt;s3&gt;'lib2'&lt;/s3&gt;
}

task notALib &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'srcDir: '&lt;/s3&gt; + rootProject.relativePath(srcDir)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145015Z" creationid="huanghaohang" creationdate="20190817T145015Z">
        <seg>println &lt;s3&gt;'srcDir: '&lt;/s3&gt; + rootProject.relativePath(srcDir)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s3&gt;'taskY'&lt;/s3&gt;
}

taskX.finalizedBy taskY</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T044135Z" creationid="huanghaohang" creationdate="20170923T044135Z">
        <seg>println &lt;s3&gt;'taskY'&lt;/s3&gt;
}

taskX.finalizedBy taskY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s4&gt;"Contents of $srcDir.name"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150354Z" creationid="huanghaohang" creationdate="20170927T150354Z">
        <seg>println &lt;s4&gt;"Contents of $srcDir.name"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s4&gt;"Hello from the GreetingPlugin"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150924Z" creationid="huanghaohang" creationdate="20190719T150924Z">
        <seg>println &lt;s4&gt;"Hello from the GreetingPlugin"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s4&gt;"I'm not a default task!"&lt;/s4&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023912Z" creationid="95" creationdate="20170729T023912Z">
        <seg>println &lt;s4&gt;"I'm not a default task!"&lt;/s4&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s4&gt;'notALib'&lt;/s4&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130919Z" creationid="huanghaohang" creationdate="20170919T130919Z">
        <seg>println &lt;s4&gt;'notALib'&lt;/s4&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s4&gt;'project: '&lt;/s4&gt; + project.path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132526Z" creationid="huanghaohang" creationdate="20191201T132526Z">
        <seg>println &lt;s4&gt;'project: '&lt;/s4&gt; + project.path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s4&gt;'taskY'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130158Z" creationid="huanghaohang" creationdate="20170919T130158Z">
        <seg>println &lt;s4&gt;'taskY'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s5&gt;"FAILED"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152624Z" creationid="huanghaohang" creationdate="20190613T152624Z">
        <seg>println &lt;s5&gt;"FAILED"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s5&gt;"I'm fond of $file.name"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023512Z" creationid="95" creationdate="20170729T023512Z">
        <seg>println &lt;s5&gt;"I'm fond of $file.name"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s5&gt;'The class directory exists. I can operate'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T132409Z" creationid="huanghaohang" creationdate="20170917T132409Z">
        <seg>println &lt;s5&gt;'The class directory exists. I can operate'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s5&gt;'srcDirName: '&lt;/s5&gt; + srcDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132527Z" creationid="huanghaohang" creationdate="20191201T132527Z">
        <seg>println &lt;s5&gt;'srcDirName: '&lt;/s5&gt; + srcDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s6&gt;"$element.relativePath =&gt; $element.file"&lt;/s6&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023628Z" creationid="huanghaohang" creationdate="20171002T023628Z">
        <seg>println &lt;s6&gt;"$element.relativePath =&gt; $element.file"&lt;/s6&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s6&gt;"[$task.name]"&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144028Z" creationid="huanghaohang" creationdate="20180107T144028Z">
        <seg>println &lt;s6&gt;"[$task.name]"&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s6&gt;'I am not affected'&lt;/s6&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T084839Z" creationid="huanghaohang" creationdate="20170922T084839Z">
        <seg>println &lt;s6&gt;'I am not affected'&lt;/s6&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s6&gt;'srcDir: '&lt;/s6&gt; + rootProject.relativePath(srcDir)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132528Z" creationid="huanghaohang" creationdate="20191201T132528Z">
        <seg>println &lt;s6&gt;'srcDir: '&lt;/s6&gt; + rootProject.relativePath(srcDir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s7&gt;"${project.greeting.message} from ${project.greeting.greeter}"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151633Z" creationid="huanghaohang" creationdate="20190726T151633Z">
        <seg>println &lt;s7&gt;"${project.greeting.message} from ${project.greeting.greeter}"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s7&gt;"done"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152626Z" creationid="huanghaohang" creationdate="20190613T152626Z">
        <seg>println &lt;s7&gt;"done"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s9&gt;"out of date: ${change.file.name}"&lt;/s9&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134820Z" creationid="huanghaohang" creationdate="20190706T134820Z">
        <seg>println &lt;s9&gt;"out of date: ${change.file.name}"&lt;/s9&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println &lt;s9&gt;new&lt;/s9&gt; String(encodedString)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141055Z" creationid="huanghaohang" creationdate="20191202T141055Z">
        <seg>println &lt;s9&gt;new&lt;/s9&gt; String(encodedString)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println System.properties[&lt;s0&gt;'system'&lt;/s0&gt;]
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135031Z" creationid="huanghaohang" creationdate="20170917T135031Z">
        <seg>println System.properties[&lt;s0&gt;'system'&lt;/s0&gt;]
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println ant.antProp
println ant.properties.antProp
println ant.properties[&lt;s0&gt;'antProp'&lt;/s0&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094622Z" creationid="huanghaohang" creationdate="20180105T094622Z">
        <seg>println ant.antProp
println ant.properties.antProp
println ant.properties[&lt;s0&gt;'antProp'&lt;/s0&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println ant.references.antPath
println ant.references[&lt;s0&gt;'antPath'&lt;/s0&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T094739Z" creationid="huanghaohang" creationdate="20180105T094739Z">
        <seg>println ant.references.antPath
println ant.references[&lt;s0&gt;'antPath'&lt;/s0&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println commandLineProjectProp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135024Z" creationid="huanghaohang" creationdate="20170917T135024Z">
        <seg>println commandLineProjectProp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println conf2ScopeMappings.mappings
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T090900Z" creationid="huanghaohang" creationdate="20190608T090900Z">
        <seg>println conf2ScopeMappings.mappings
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println configurations.compile.name
println configurations[&lt;s0&gt;'compile'&lt;/s0&gt;].name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153620Z" creationid="huanghaohang" creationdate="20190527T153620Z">
        <seg>println configurations.compile.name
println configurations[&lt;s0&gt;'compile'&lt;/s0&gt;].name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println dep.name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152840Z" creationid="huanghaohang" creationdate="20190602T152840Z">
        <seg>println dep.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println emailNotification</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133555Z" creationid="huanghaohang" creationdate="20170913T133555Z">
        <seg>println emailNotification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println envProjectProp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135028Z" creationid="huanghaohang" creationdate="20170917T135028Z">
        <seg>println envProjectProp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println file
}

&lt;s1&gt;// Filter a tree&lt;/s1&gt;
FileTree filtered = tree.matching {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T023626Z" creationid="huanghaohang" creationdate="20171002T023626Z">
        <seg>println file
}

&lt;s1&gt;// Filter a tree&lt;/s1&gt;
FileTree filtered = tree.matching {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println file(greetingFile).text
}

ext.greetingFile = &lt;s4&gt;"$buildDir/hello.txt"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151201Z" creationid="huanghaohang" creationdate="20190727T151201Z">
        <seg>println file(greetingFile).text
}

ext.greetingFile = &lt;s4&gt;"$buildDir/hello.txt"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println file.name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143253Z" creationid="huanghaohang" creationdate="20190602T143253Z">
        <seg>println file.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println file.name
}

&lt;s1&gt;// Convert the collection to various types&lt;/s1&gt;
Set set = collection.files
Set set2 = collection as Set
List list = collection as List
String path = collection.asPath
File file = collection.singleFile
File file2 = collection as File

&lt;s2&gt;// Add and subtract collections&lt;/s2&gt;
def union = collection + files(&lt;s3&gt;'src/file3.txt'&lt;/s3&gt;)
def different = collection - files(&lt;s4&gt;'src/file3.txt'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T132331Z" creationid="huanghaohang" creationdate="20170923T132331Z">
        <seg>println file.name
}

&lt;s1&gt;// Convert the collection to various types&lt;/s1&gt;
Set set = collection.files
Set set2 = collection as Set
List list = collection as List
String path = collection.asPath
File file = collection.singleFile
File file2 = collection as File

&lt;s2&gt;// Add and subtract collections&lt;/s2&gt;
def union = collection + files(&lt;s3&gt;'src/file3.txt'&lt;/s3&gt;)
def different = collection - files(&lt;s4&gt;'src/file3.txt'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println gradlePropertiesProp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135025Z" creationid="huanghaohang" creationdate="20170917T135025Z">
        <seg>println gradlePropertiesProp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println greeting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T122514Z" creationid="huanghaohang" creationdate="20190706T122514Z">
        <seg>println greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println inputs.incremental ? &lt;s7&gt;"CHANGED inputs considered out of date"&lt;/s7&gt; : &lt;s8&gt;"ALL inputs considered out of date"&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134818Z" creationid="huanghaohang" creationdate="20190706T134818Z">
        <seg>println inputs.incremental ? &lt;s7&gt;"CHANGED inputs considered out of date"&lt;/s7&gt; : &lt;s8&gt;"ALL inputs considered out of date"&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println it</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T091125Z" creationid="huanghaohang" creationdate="20171219T091125Z">
        <seg>println it</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println main.output.classesDir
}
sourceSets {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094734Z" creationid="haohang" creationdate="20180320T094734Z">
        <seg>println main.output.classesDir
}
sourceSets {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println myTask.myProperty
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T142000Z" creationid="95" creationdate="20170727T142000Z">
        <seg>println myTask.myProperty
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println name
println project.name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170912T130250Z" creationid="huanghaohang" creationdate="20170912T130250Z">
        <seg>println name
println project.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println name
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094738Z" creationid="haohang" creationdate="20180320T094738Z">
        <seg>println name
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println output.classesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094736Z" creationid="haohang" creationdate="20180320T094736Z">
        <seg>println output.classesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println pos.beginIndex</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145824Z" creationid="huanghaohang" creationdate="20170918T145824Z">
        <seg>println pos.beginIndex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println pos.endIndex
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145826Z" creationid="huanghaohang" creationdate="20170918T145826Z">
        <seg>println pos.endIndex
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println project.greeting.message</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155825Z" creationid="huanghaohang" creationdate="20190719T155825Z">
        <seg>println project.greeting.message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println relativePath(compileJava.destinationDir)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100202Z" creationid="huanghaohang" creationdate="20180130T100202Z">
        <seg>println relativePath(compileJava.destinationDir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println relativePath(compileJava.destinationDir)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T022557Z" creationid="huanghaohang" creationdate="20180131T022557Z">
        <seg>println relativePath(compileJava.destinationDir)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println relativePath(processResources.destinationDir)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T100203Z" creationid="huanghaohang" creationdate="20180130T100203Z">
        <seg>println relativePath(processResources.destinationDir)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println repositories.collect { it.name }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T143639Z" creationid="huanghaohang" creationdate="20191206T143639Z">
        <seg>println repositories.collect { it.name }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println repositories.localRepository.name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025256Z" creationid="huanghaohang" creationdate="20190604T025256Z">
        <seg>println repositories.localRepository.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println repositories[&lt;s0&gt;'localRepository'&lt;/s0&gt;].name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025257Z" creationid="huanghaohang" creationdate="20190604T025257Z">
        <seg>println repositories[&lt;s0&gt;'localRepository'&lt;/s0&gt;].name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println rootProject.name
println project(&lt;s0&gt;':projectA'&lt;/s0&gt;).name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T152959Z" creationid="huanghaohang" creationdate="20190612T152959Z">
        <seg>println rootProject.name
println project(&lt;s0&gt;':projectA'&lt;/s0&gt;).name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println springVersion</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133553Z" creationid="huanghaohang" creationdate="20170913T133553Z">
        <seg>println springVersion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println systemProjectProp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135027Z" creationid="huanghaohang" creationdate="20170917T135027Z">
        <seg>println systemProjectProp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144030Z" creationid="huanghaohang" creationdate="20180107T144030Z">
        <seg>println()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println(&lt;s0&gt;"Consuming message: "&lt;/s0&gt; + message)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153143Z" creationid="huanghaohang" creationdate="20190616T153143Z">
        <seg>println(&lt;s0&gt;"Consuming message: "&lt;/s0&gt; + message)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println(&lt;s0&gt;"Consuming message: ${rootProject.producerMessage}"&lt;/s0&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140256Z" creationid="huanghaohang" creationdate="20190616T140256Z">
        <seg>println(&lt;s0&gt;"Consuming message: ${rootProject.producerMessage}"&lt;/s0&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println(&lt;s0&gt;'I am the new one.'&lt;/s0&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083320Z" creationid="huanghaohang" creationdate="20170922T083320Z">
        <seg>println(&lt;s0&gt;'I am the new one.'&lt;/s0&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println(&lt;s1&gt;"Consuming message: "&lt;/s1&gt; + message)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153658Z" creationid="huanghaohang" creationdate="20190616T153658Z">
        <seg>println(&lt;s1&gt;"Consuming message: "&lt;/s1&gt; + message)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>println(&lt;s1&gt;"Consuming message: ${rootProject.producerMessage}"&lt;/s1&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141819Z" creationid="huanghaohang" creationdate="20190616T141819Z">
        <seg>println(&lt;s1&gt;"Consuming message: ${rootProject.producerMessage}"&lt;/s1&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>process&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T073412Z" creationid="haohang" creationdate="20180312T073412Z">
        <seg>process&lt;e0&gt;&lt;c1&gt;SourceSet&lt;/c1&gt;&lt;/e0&gt;Resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>processResources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062333Z" creationid="haohang" creationdate="20180312T062333Z">
        <seg>processResources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>processTestResources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062813Z" creationid="haohang" creationdate="20180312T062813Z">
        <seg>processTestResources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>producer/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140211Z" creationid="huanghaohang" creationdate="20190616T140211Z">
        <seg>producer/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>producer/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140257Z" creationid="huanghaohang" creationdate="20190616T140257Z">
        <seg>producer/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132112Z" creationid="huanghaohang" creationdate="20170913T132112Z">
        <seg>project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T151332Z" creationid="huanghaohang" creationdate="20180811T151332Z">
        <seg>project {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project(&lt;s0&gt;":lib"&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023017Z" creationid="huanghaohang" creationdate="20190610T023017Z">
        <seg>project(&lt;s0&gt;":lib"&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project(&lt;s0&gt;":project1"&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153058Z" creationid="huanghaohang" creationdate="20180811T153058Z">
        <seg>project(&lt;s0&gt;":project1"&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project(&lt;s0&gt;":project2"&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153259Z" creationid="huanghaohang" creationdate="20180811T153259Z">
        <seg>project(&lt;s0&gt;":project2"&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project(&lt;s0&gt;":project2"&lt;/s0&gt;).sonar.project.language = &lt;s1&gt;"groovy"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153322Z" creationid="huanghaohang" creationdate="20180811T153322Z">
        <seg>project(&lt;s0&gt;":project2"&lt;/s0&gt;).sonar.project.language = &lt;s1&gt;"groovy"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project(&lt;s0&gt;':projectA'&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122000Z" creationid="huanghaohang" creationdate="20170919T122000Z">
        <seg>project(&lt;s0&gt;':projectA'&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project(&lt;s0&gt;'projectA'&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130122Z" creationid="huanghaohang" creationdate="20170919T130122Z">
        <seg>project(&lt;s0&gt;'projectA'&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project-report</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085913Z" creationid="huanghaohang" creationdate="20180211T085913Z">
        <seg>project-report</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.apply plugin: &lt;s4&gt;'greeting'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130851Z" creationid="huanghaohang" creationdate="20190728T130851Z">
        <seg>project.apply plugin: &lt;s4&gt;'greeting'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.description</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023745Z" creationid="huanghaohang" creationdate="20181202T023745Z">
        <seg>project.description</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.extensions.books = books</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131002Z" creationid="huanghaohang" creationdate="20190728T131002Z">
        <seg>project.extensions.books = books</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.extensions.create(&lt;s5&gt;"greeting"&lt;/s5&gt;, GreetingPluginExtension)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155823Z" creationid="huanghaohang" creationdate="20190719T155823Z">
        <seg>project.extensions.create(&lt;s5&gt;"greeting"&lt;/s5&gt;, GreetingPluginExtension)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.file(destination)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151156Z" creationid="huanghaohang" creationdate="20190727T151156Z">
        <seg>project.file(destination)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.group</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094947Z" creationid="huanghaohang" creationdate="20190607T094947Z">
        <seg>project.group</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.logger.lifecycle &lt;s10&gt;"Repository ${repo.url} removed. Only $ENTERPRISE_REPOSITORY_URL is allowed"&lt;/s10&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151221Z" creationid="huanghaohang" creationdate="20191206T151221Z">
        <seg>project.logger.lifecycle &lt;s10&gt;"Repository ${repo.url} removed. Only $ENTERPRISE_REPOSITORY_URL is allowed"&lt;/s10&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.modulePaths.clear()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012758Z" creationid="huanghaohang" creationdate="20190123T012758Z">
        <seg>project.modulePaths.clear()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233117Z" creationid="huanghaohang" creationdate="20171206T233117Z">
        <seg>project.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.natures.clear()
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T084531Z" creationid="huanghaohang" creationdate="20181210T084531Z">
        <seg>project.natures.clear()
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.projectDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023747Z" creationid="huanghaohang" creationdate="20181202T023747Z">
        <seg>project.projectDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151218Z" creationid="huanghaohang" creationdate="20191206T151218Z">
        <seg>project.repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.sourceCompatibility</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023812Z" creationid="huanghaohang" creationdate="20181202T023812Z">
        <seg>project.sourceCompatibility</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.targetCompatibility</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023814Z" creationid="huanghaohang" creationdate="20181202T023814Z">
        <seg>project.targetCompatibility</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.task(&lt;s2&gt;'test'&lt;/s2&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145909Z" creationid="huanghaohang" creationdate="20190613T145909Z">
        <seg>project.task(&lt;s2&gt;'test'&lt;/s2&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.task(&lt;s3&gt;'hello'&lt;/s3&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T150923Z" creationid="huanghaohang" creationdate="20190719T150923Z">
        <seg>project.task(&lt;s3&gt;'hello'&lt;/s3&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.task(&lt;s6&gt;'hello'&lt;/s6&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190726T151631Z" creationid="huanghaohang" creationdate="20190726T151631Z">
        <seg>project.task(&lt;s6&gt;'hello'&lt;/s6&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.task(&lt;s7&gt;'hello'&lt;/s7&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155824Z" creationid="huanghaohang" creationdate="20190719T155824Z">
        <seg>project.task(&lt;s7&gt;'hello'&lt;/s7&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.tasks.withType(Jar).each {archiveTask -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150911Z" creationid="huanghaohang" creationdate="20190617T150911Z">
        <seg>project.tasks.withType(Jar).each {archiveTask -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project.version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233200Z" creationid="huanghaohang" creationdate="20171206T233200Z">
        <seg>project.version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectA.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T145911Z" creationid="huanghaohang" creationdate="20190613T145911Z">
        <seg>projectA.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132159Z" creationid="huanghaohang" creationdate="20170913T132159Z">
        <seg>projectDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectDir "/projects/project-a"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140206Z" creationid="huanghaohang" creationdate="20210515T140206Z">
        <seg>projectDir "/projects/project-a"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectDir "/projects/project-b"</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140210Z" creationid="huanghaohang" creationdate="20210515T140210Z">
        <seg>projectDir "/projects/project-b"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180318T010018Z" creationid="huanghaohang" creationdate="20180318T010018Z">
        <seg>projectName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040337Z" creationid="huanghaohang" creationdate="20190123T040337Z">
        <seg>projectReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectReportDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040951Z" creationid="huanghaohang" creationdate="20190123T040951Z">
        <seg>projectReportDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projectReportDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040856Z" creationid="huanghaohang" creationdate="20190123T040856Z">
        <seg>projectReportDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project_reports_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T010752Z" creationid="huanghaohang" creationdate="20170910T010752Z">
        <seg>project_reports_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project_reports_plugin.html#N14432</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070409Z" creationid="huanghaohang" creationdate="20190205T070409Z">
        <seg>project_reports_plugin.html#N14432</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project_reports_plugin.html#N1443A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070420Z" creationid="huanghaohang" creationdate="20190205T070420Z">
        <seg>project_reports_plugin.html#N1443A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project_reports_plugin.html#N144C1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070422Z" creationid="huanghaohang" creationdate="20190205T070422Z">
        <seg>project_reports_plugin.html#N144C1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project_reports_plugin.html#N144C6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070424Z" creationid="huanghaohang" creationdate="20190205T070424Z">
        <seg>project_reports_plugin.html#N144C6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>project_reports_plugin.html#N144CB</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070426Z" creationid="huanghaohang" creationdate="20190205T070426Z">
        <seg>project_reports_plugin.html#N144CB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040459Z" creationid="huanghaohang" creationdate="20190123T040459Z">
        <seg>projects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>properties[&lt;s0&gt;"sonar.sources"&lt;/s0&gt;] += sourceSets.custom.allSource.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043322Z" creationid="huanghaohang" creationdate="20181202T043322Z">
        <seg>properties[&lt;s0&gt;"sonar.sources"&lt;/s0&gt;] += sourceSets.custom.allSource.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>properties[&lt;s1&gt;"sonar.tests"&lt;/s1&gt;] += sourceSets.integTest.allSource.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043323Z" creationid="huanghaohang" creationdate="20181202T043323Z">
        <seg>properties[&lt;s1&gt;"sonar.tests"&lt;/s1&gt;] += sourceSets.integTest.allSource.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s0&gt;"sonar.host.url"&lt;/s0&gt;, &lt;s1&gt;"http://my.server.com"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022146Z" creationid="huanghaohang" creationdate="20181202T022146Z">
        <seg>property &lt;s0&gt;"sonar.host.url"&lt;/s0&gt;, &lt;s1&gt;"http://my.server.com"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s0&gt;"sonar.language"&lt;/s0&gt;, &lt;s1&gt;"grvy"&lt;/s1&gt; &lt;s2&gt;// set language to Groovy&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T043428Z" creationid="huanghaohang" creationdate="20181202T043428Z">
        <seg>property &lt;s0&gt;"sonar.language"&lt;/s0&gt;, &lt;s1&gt;"grvy"&lt;/s1&gt; &lt;s2&gt;// set language to Groovy&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s0&gt;"sonar.sourceEncoding"&lt;/s0&gt;, &lt;s1&gt;"UTF-8"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042851Z" creationid="huanghaohang" creationdate="20181202T042851Z">
        <seg>property &lt;s0&gt;"sonar.sourceEncoding"&lt;/s0&gt;, &lt;s1&gt;"UTF-8"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s1&gt;"sonar.language"&lt;/s1&gt;, &lt;s2&gt;"grvy"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042910Z" creationid="huanghaohang" creationdate="20181202T042910Z">
        <seg>property &lt;s1&gt;"sonar.language"&lt;/s1&gt;, &lt;s2&gt;"grvy"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s2&gt;"sonar.jdbc.url"&lt;/s2&gt;, &lt;s3&gt;"jdbc:mysql://my.server.com/sonar"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022146Z" creationid="huanghaohang" creationdate="20181202T022146Z">
        <seg>property &lt;s2&gt;"sonar.jdbc.url"&lt;/s2&gt;, &lt;s3&gt;"jdbc:mysql://my.server.com/sonar"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s4&gt;"sonar.jdbc.driverClassName"&lt;/s4&gt;, &lt;s5&gt;"com.mysql.jdbc.Driver"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022147Z" creationid="huanghaohang" creationdate="20181202T022147Z">
        <seg>property &lt;s4&gt;"sonar.jdbc.driverClassName"&lt;/s4&gt;, &lt;s5&gt;"com.mysql.jdbc.Driver"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s6&gt;"sonar.jdbc.username"&lt;/s6&gt;, &lt;s7&gt;"Fred Flintstone"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022147Z" creationid="huanghaohang" creationdate="20181202T022147Z">
        <seg>property &lt;s6&gt;"sonar.jdbc.username"&lt;/s6&gt;, &lt;s7&gt;"Fred Flintstone"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>property &lt;s8&gt;"sonar.jdbc.password"&lt;/s8&gt;, &lt;s9&gt;"very clever"&lt;/s9&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022148Z" creationid="huanghaohang" creationdate="20181202T022148Z">
        <seg>property &lt;s8&gt;"sonar.jdbc.password"&lt;/s8&gt;, &lt;s9&gt;"very clever"&lt;/s9&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>propertyReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040321Z" creationid="huanghaohang" creationdate="20190123T040321Z">
        <seg>propertyReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>props[&lt;s0&gt;"some.global.property"&lt;/s0&gt;] = &lt;s1&gt;"some value"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135437Z" creationid="huanghaohang" creationdate="20180816T135437Z">
        <seg>props[&lt;s0&gt;"some.global.property"&lt;/s0&gt;] = &lt;s1&gt;"some value"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>props[&lt;s0&gt;"some.project.property"&lt;/s0&gt;] = &lt;s1&gt;"some value"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135520Z" creationid="huanghaohang" creationdate="20180816T135520Z">
        <seg>props[&lt;s0&gt;"some.project.property"&lt;/s0&gt;] = &lt;s1&gt;"some value"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>props[&lt;s3&gt;"other.global.property"&lt;/s3&gt;] = [&lt;s4&gt;"foo"&lt;/s4&gt;, &lt;s5&gt;"bar"&lt;/s5&gt;, &lt;s6&gt;"baz"&lt;/s6&gt;]
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135439Z" creationid="huanghaohang" creationdate="20180816T135439Z">
        <seg>props[&lt;s3&gt;"other.global.property"&lt;/s3&gt;] = [&lt;s4&gt;"foo"&lt;/s4&gt;, &lt;s5&gt;"bar"&lt;/s5&gt;, &lt;s6&gt;"baz"&lt;/s6&gt;]
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>props[&lt;s3&gt;"other.project.property"&lt;/s3&gt;] = [&lt;s4&gt;"foo"&lt;/s4&gt;, &lt;s5&gt;"bar"&lt;/s5&gt;, &lt;s6&gt;"baz"&lt;/s6&gt;]
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135521Z" creationid="huanghaohang" creationdate="20180816T135521Z">
        <seg>props[&lt;s3&gt;"other.project.property"&lt;/s3&gt;] = [&lt;s4&gt;"foo"&lt;/s4&gt;, &lt;s5&gt;"bar"&lt;/s5&gt;, &lt;s6&gt;"baz"&lt;/s6&gt;]
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>providedCompile &lt;s4&gt;"javax.servlet:servlet-api:2.5"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143122Z" creationid="huanghaohang" creationdate="20180408T143122Z">
        <seg>providedCompile &lt;s4&gt;"javax.servlet:servlet-api:2.5"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>providedCompile module(&lt;s5&gt;":providedCompile:1.0"&lt;/s5&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143123Z" creationid="huanghaohang" creationdate="20180408T143123Z">
        <seg>providedCompile module(&lt;s5&gt;":providedCompile:1.0"&lt;/s5&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>providedRuntime &lt;s8&gt;":providedRuntime:1.0@jar"&lt;/s8&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143125Z" creationid="huanghaohang" creationdate="20180408T143125Z">
        <seg>providedRuntime &lt;s8&gt;":providedRuntime:1.0@jar"&lt;/s8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>provider.asNode().appendNode(&lt;s28&gt;"data-source"&lt;/s28&gt;, &lt;s29&gt;"my/data/source"&lt;/s29&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143008Z" creationid="huanghaohang" creationdate="20180416T143008Z">
        <seg>provider.asNode().appendNode(&lt;s28&gt;"data-source"&lt;/s28&gt;, &lt;s29&gt;"my/data/source"&lt;/s29&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>provider.asNode().fixed.find { it.&lt;s1&gt;@facet&lt;/s1&gt; == &lt;s2&gt;'jst.java'&lt;/s2&gt; }.&lt;s3&gt;@facet&lt;/s3&gt; = &lt;s4&gt;'jst2.java'&lt;/s4&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085537Z" creationid="huanghaohang" creationdate="20181210T085537Z">
        <seg>provider.asNode().fixed.find { it.&lt;s1&gt;@facet&lt;/s1&gt; == &lt;s2&gt;'jst.java'&lt;/s2&gt; }.&lt;s3&gt;@facet&lt;/s3&gt; = &lt;s4&gt;'jst2.java'&lt;/s4&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>provider.node.component.find { it.&lt;s0&gt;@name&lt;/s0&gt; == &lt;s1&gt;'VcsDirectoryMappings'&lt;/s1&gt; }.mapping.&lt;s2&gt;@vcs&lt;/s2&gt; = &lt;s3&gt;'Git'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012916Z" creationid="huanghaohang" creationdate="20190123T012916Z">
        <seg>provider.node.component.find { it.&lt;s0&gt;@name&lt;/s0&gt; == &lt;s1&gt;'VcsDirectoryMappings'&lt;/s1&gt; }.mapping.&lt;s2&gt;@vcs&lt;/s2&gt; = &lt;s3&gt;'Git'&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>proxy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093659Z" creationid="huanghaohang" creationdate="20190607T093659Z">
        <seg>proxy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>publishing_ivy.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143843Z" creationid="huanghaohang" creationdate="20180207T143843Z">
        <seg>publishing_ivy.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>publishing_ivy.html#publishing_ivy:publications</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155613Z" creationid="huanghaohang" creationdate="20210516T155613Z">
        <seg>publishing_ivy.html#publishing_ivy:publications</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>publishing_ivy.html#publishing_ivy:repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210516T155714Z" creationid="huanghaohang" creationdate="20210516T155714Z">
        <seg>publishing_ivy.html#publishing_ivy:repositories</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>publishing_maven.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180207T143916Z" creationid="huanghaohang" creationdate="20180207T143916Z">
        <seg>publishing_maven.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>purpose = &lt;s3&gt;"production"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133546Z" creationid="huanghaohang" creationdate="20170913T133546Z">
        <seg>purpose = &lt;s3&gt;"production"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>purpose = &lt;s4&gt;"test"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133547Z" creationid="huanghaohang" creationdate="20170913T133547Z">
        <seg>purpose = &lt;s4&gt;"test"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>purpose = &lt;s5&gt;"production"&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133548Z" creationid="huanghaohang" creationdate="20170913T133548Z">
        <seg>purpose = &lt;s5&gt;"production"&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>quickStart {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130954Z" creationid="huanghaohang" creationdate="20190728T130954Z">
        <seg>quickStart {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rc {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013425Z" creationid="huanghaohang" creationdate="20190610T013425Z">
        <seg>rc {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rcCompiler.args &lt;s0&gt;"/v"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013910Z" creationid="huanghaohang" creationdate="20190610T013910Z">
        <seg>rcCompiler.args &lt;s0&gt;"/v"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>release</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T035439Z" creationid="huanghaohang" creationdate="20190610T035439Z">
        <seg>release</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>releases</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093650Z" creationid="huanghaohang" creationdate="20190607T093650Z">
        <seg>releases</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>remove repo</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151221Z" creationid="huanghaohang" creationdate="20191206T151221Z">
        <seg>remove repo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rename &lt;s6&gt;'(.+)-staging-(.+)'&lt;/s6&gt;, &lt;s7&gt;'$1$2'&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060242Z" creationid="huanghaohang" creationdate="20171126T060242Z">
        <seg>rename &lt;s6&gt;'(.+)-staging-(.+)'&lt;/s6&gt;, &lt;s7&gt;'$1$2'&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rename { String fileName -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060238Z" creationid="huanghaohang" creationdate="20171126T060238Z">
        <seg>rename { String fileName -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rename(/(.+)-staging-(.+)/, &lt;s8&gt;'$1$2'&lt;/s8&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060250Z" creationid="huanghaohang" creationdate="20171126T060250Z">
        <seg>rename(/(.+)-staging-(.+)/, &lt;s8&gt;'$1$2'&lt;/s8&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reportOn subprojects*.test
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T044008Z" creationid="huanghaohang" creationdate="20180406T044008Z">
        <seg>reportOn subprojects*.test
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reporting-base</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085914Z" creationid="huanghaohang" creationdate="20180211T085914Z">
        <seg>reporting-base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reports</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054652Z" creationid="haohang" creationdate="20180313T054652Z">
        <seg>reports</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reports {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093009Z" creationid="huanghaohang" creationdate="20180715T093009Z">
        <seg>reports {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reports.html.enabled = false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T044002Z" creationid="huanghaohang" creationdate="20180406T044002Z">
        <seg>reports.html.enabled = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reports/jacoco/applicationCodeCoverageReport/html/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093831Z" creationid="huanghaohang" creationdate="20180715T093831Z">
        <seg>reports/jacoco/applicationCodeCoverageReport/html/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reportsDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061218Z" creationid="haohang" creationdate="20180313T061218Z">
        <seg>reportsDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reportsDir = file(&lt;s1&gt;"$buildDir/customJacocoReportDir"&lt;/s1&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135244Z" creationid="huanghaohang" creationdate="20180712T135244Z">
        <seg>reportsDir = file(&lt;s1&gt;"$buildDir/customJacocoReportDir"&lt;/s1&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>reportsDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T054649Z" creationid="haohang" creationdate="20180313T054649Z">
        <seg>reportsDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124331Z" creationid="95" creationdate="20170730T124331Z">
        <seg>repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repositories.each{</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151228Z" creationid="huanghaohang" creationdate="20191206T151228Z">
        <seg>repositories.each{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repositories.mavenDeployer {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092645Z" creationid="huanghaohang" creationdate="20190607T092645Z">
        <seg>repositories.mavenDeployer {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repositories.mavenInstaller {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T111341Z" creationid="huanghaohang" creationdate="20190607T111341Z">
        <seg>repositories.mavenInstaller {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repositories{</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151224Z" creationid="huanghaohang" creationdate="20191206T151224Z">
        <seg>repositories{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093641Z" creationid="huanghaohang" creationdate="20190607T093641Z">
        <seg>repository</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repository(url: &lt;s0&gt;"file://localhost/tmp/myRepo/"&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T100714Z" creationid="huanghaohang" creationdate="20190607T100714Z">
        <seg>repository(url: &lt;s0&gt;"file://localhost/tmp/myRepo/"&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repository(url: &lt;s1&gt;"file://localhost/tmp/myRepo/"&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T051022Z" creationid="huanghaohang" creationdate="20170908T051022Z">
        <seg>repository(url: &lt;s1&gt;"file://localhost/tmp/myRepo/"&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>repository(url: &lt;s1&gt;"scp://repos.mycompany.com/releases"&lt;/s1&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T092646Z" creationid="huanghaohang" creationdate="20190607T092646Z">
        <seg>repository(url: &lt;s1&gt;"scp://repos.mycompany.com/releases"&lt;/s1&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>required { isReleaseVersion &amp;&amp; gradle.taskGraph.hasTask(&lt;s2&gt;"uploadArchives"&lt;/s2&gt;) }</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T161313Z" creationid="huanghaohang" creationdate="20190608T161313Z">
        <seg>required { isReleaseVersion &amp;&amp; gradle.taskGraph.hasTask(&lt;s2&gt;"uploadArchives"&lt;/s2&gt;) }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resolutionStrategy.cacheChangingModulesFor &lt;s0&gt;4&lt;/s0&gt;, &lt;s1&gt;'hours'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151331Z" creationid="huanghaohang" creationdate="20190605T151331Z">
        <seg>resolutionStrategy.cacheChangingModulesFor &lt;s0&gt;4&lt;/s0&gt;, &lt;s1&gt;'hours'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resolutionStrategy.cacheDynamicVersionsFor &lt;s0&gt;10&lt;/s0&gt;, &lt;s1&gt;'minutes'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T151204Z" creationid="huanghaohang" creationdate="20190605T151204Z">
        <seg>resolutionStrategy.cacheDynamicVersionsFor &lt;s0&gt;10&lt;/s0&gt;, &lt;s1&gt;'minutes'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resolutionStrategy.eachDependency { DependencyResolveDetails details -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T015340Z" creationid="huanghaohang" creationdate="20190605T015340Z">
        <seg>resolutionStrategy.eachDependency { DependencyResolveDetails details -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resolve.dynamicMode = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025837Z" creationid="huanghaohang" creationdate="20190605T025837Z">
        <seg>resolve.dynamicMode = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resolve.dynamicMode = true
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025842Z" creationid="huanghaohang" creationdate="20190605T025842Z">
        <seg>resolve.dynamicMode = true
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T100914Z" creationid="haohang" creationdate="20180320T100914Z">
        <seg>resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resources + java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101505Z" creationid="haohang" creationdate="20180320T101505Z">
        <seg>resources + java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resources {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053346Z" creationid="haohang" creationdate="20180313T053346Z">
        <seg>resources {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>resources.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T101209Z" creationid="haohang" creationdate="20180320T101209Z">
        <seg>resources.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>result.failure.printStackTrace()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144035Z" creationid="huanghaohang" creationdate="20180107T144035Z">
        <seg>result.failure.printStackTrace()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>return 0;
}

int suite_clean(void) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032630Z" creationid="huanghaohang" creationdate="20190611T032630Z">
        <seg>return 0;
}

int suite_clean(void) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>return 0;
}

void gradle_cunit_register() {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032630Z" creationid="huanghaohang" creationdate="20190611T032630Z">
        <seg>return 0;
}

void gradle_cunit_register() {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>root</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093636Z" creationid="huanghaohang" creationdate="20190607T093636Z">
        <seg>root</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rootProject {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092742Z" creationid="huanghaohang" creationdate="20190124T092742Z">
        <seg>rootProject {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rootProject.dependencies {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135444Z" creationid="huanghaohang" creationdate="20191201T135444Z">
        <seg>rootProject.dependencies {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rootProject.name = &lt;s0&gt;'main'&lt;/s0&gt;
project(&lt;s1&gt;':projectA'&lt;/s1&gt;).projectDir = &lt;s2&gt;new&lt;/s2&gt; File(settingsDir, &lt;s3&gt;'../my-project-a'&lt;/s3&gt;)
project(&lt;s4&gt;':projectA'&lt;/s4&gt;).buildFileName = &lt;s5&gt;'projectA.gradle'&lt;/s5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190612T153214Z" creationid="huanghaohang" creationdate="20190612T153214Z">
        <seg>rootProject.name = &lt;s0&gt;'main'&lt;/s0&gt;
project(&lt;s1&gt;':projectA'&lt;/s1&gt;).projectDir = &lt;s2&gt;new&lt;/s2&gt; File(settingsDir, &lt;s3&gt;'../my-project-a'&lt;/s3&gt;)
project(&lt;s4&gt;':projectA'&lt;/s4&gt;).buildFileName = &lt;s5&gt;'projectA.gradle'&lt;/s5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rootProject.producerMessage = &lt;s0&gt;'Watch the order of evaluation.'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T153144Z" creationid="huanghaohang" creationdate="20190616T153144Z">
        <seg>rootProject.producerMessage = &lt;s0&gt;'Watch the order of evaluation.'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>rootProject.producerMessage = &lt;s1&gt;'Watch the order of execution.'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140259Z" creationid="huanghaohang" creationdate="20190616T140259Z">
        <seg>rootProject.producerMessage = &lt;s1&gt;'Watch the order of execution.'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>run</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135020Z" creationid="95" creationdate="20190131T135020Z">
        <seg>run</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>run.exec</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093830Z" creationid="huanghaohang" creationdate="20180715T093830Z">
        <seg>run.exec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T032917Z" creationid="huanghaohang" creationdate="20170908T032917Z">
        <seg>runtime</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime &lt;s0&gt;":junit:4.10"&lt;/s0&gt;, &lt;s1&gt;":testng"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140742Z" creationid="huanghaohang" creationdate="20190602T140742Z">
        <seg>runtime &lt;s0&gt;":junit:4.10"&lt;/s0&gt;, &lt;s1&gt;":testng"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime &lt;s0&gt;"org.groovy:groovy:2.2.0@jar"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044311Z" creationid="huanghaohang" creationdate="20190531T044311Z">
        <seg>runtime &lt;s0&gt;"org.groovy:groovy:2.2.0@jar"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime &lt;s3&gt;'org.springframework:spring-core:2.5'&lt;/s3&gt;, &lt;s4&gt;'org.springframework:spring-aop:2.5'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160754Z" creationid="huanghaohang" creationdate="20190527T160754Z">
        <seg>runtime &lt;s3&gt;'org.springframework:spring-core:2.5'&lt;/s3&gt;, &lt;s4&gt;'org.springframework:spring-aop:2.5'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime &lt;s7&gt;":runtime:1.0"&lt;/s7&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143124Z" creationid="huanghaohang" creationdate="20180408T143124Z">
        <seg>runtime &lt;s7&gt;":runtime:1.0"&lt;/s7&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime fileTree(dir: &lt;s2&gt;'libs'&lt;/s2&gt;, include: &lt;s3&gt;'*.jar'&lt;/s3&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105449Z" creationid="huanghaohang" creationdate="20190602T105449Z">
        <seg>runtime fileTree(dir: &lt;s2&gt;'libs'&lt;/s2&gt;, include: &lt;s3&gt;'*.jar'&lt;/s3&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime files(&lt;s0&gt;'libs/a.jar'&lt;/s0&gt;, &lt;s1&gt;'libs/b.jar'&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105448Z" creationid="huanghaohang" creationdate="20190602T105448Z">
        <seg>runtime files(&lt;s0&gt;'libs/a.jar'&lt;/s0&gt;, &lt;s1&gt;'libs/b.jar'&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime groovy, hibernate
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140942Z" creationid="huanghaohang" creationdate="20190602T140942Z">
        <seg>runtime groovy, hibernate
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime group: &lt;s0&gt;'org.somegroup'&lt;/s0&gt;, name: &lt;s1&gt;'somedependency'&lt;/s1&gt;, version: &lt;s2&gt;'1.0'&lt;/s2&gt;, configuration: &lt;s3&gt;'someConfiguration'&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141435Z" creationid="huanghaohang" creationdate="20190602T141435Z">
        <seg>runtime group: &lt;s0&gt;'org.somegroup'&lt;/s0&gt;, name: &lt;s1&gt;'somedependency'&lt;/s1&gt;, version: &lt;s2&gt;'1.0'&lt;/s2&gt;, configuration: &lt;s3&gt;'someConfiguration'&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime group: &lt;s0&gt;'org.springframework'&lt;/s0&gt;, name: &lt;s1&gt;'spring-core'&lt;/s1&gt;, version: &lt;s2&gt;'2.5'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160753Z" creationid="huanghaohang" creationdate="20190527T160753Z">
        <seg>runtime group: &lt;s0&gt;'org.springframework'&lt;/s0&gt;, name: &lt;s1&gt;'spring-core'&lt;/s1&gt;, version: &lt;s2&gt;'2.5'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime group: &lt;s12&gt;'org.hibernate'&lt;/s12&gt;, name: &lt;s13&gt;'hibernate'&lt;/s13&gt;, version: &lt;s14&gt;'3.0.5'&lt;/s14&gt;, transitive: true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160800Z" creationid="huanghaohang" creationdate="20190527T160800Z">
        <seg>runtime group: &lt;s12&gt;'org.hibernate'&lt;/s12&gt;, name: &lt;s13&gt;'hibernate'&lt;/s13&gt;, version: &lt;s14&gt;'3.0.5'&lt;/s14&gt;, transitive: true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime group: &lt;s1&gt;'org.groovy'&lt;/s1&gt;, name: &lt;s2&gt;'groovy'&lt;/s2&gt;, version: &lt;s3&gt;'2.2.0'&lt;/s3&gt;, ext: &lt;s4&gt;'jar'&lt;/s4&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T044312Z" creationid="huanghaohang" creationdate="20190531T044312Z">
        <seg>runtime group: &lt;s1&gt;'org.groovy'&lt;/s1&gt;, name: &lt;s2&gt;'groovy'&lt;/s2&gt;, version: &lt;s3&gt;'2.2.0'&lt;/s3&gt;, ext: &lt;s4&gt;'jar'&lt;/s4&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime module(&lt;s0&gt;"org.codehaus.groovy:groovy:2.3.3"&lt;/s0&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051418Z" creationid="huanghaohang" creationdate="20190531T051418Z">
        <seg>runtime module(&lt;s0&gt;"org.codehaus.groovy:groovy:2.3.3"&lt;/s0&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime name: &lt;s2&gt;'testng'&lt;/s2&gt; 
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T140742Z" creationid="huanghaohang" creationdate="20190602T140742Z">
        <seg>runtime name: &lt;s2&gt;'testng'&lt;/s2&gt; 
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime project(path)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135447Z" creationid="huanghaohang" creationdate="20191201T135447Z">
        <seg>runtime project(path)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153658Z" creationid="huanghaohang" creationdate="20190527T153658Z">
        <seg>runtime {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime(</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160755Z" creationid="huanghaohang" creationdate="20190527T160755Z">
        <seg>runtime(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime(&lt;s11&gt;'org.hibernate:hibernate:3.0.5'&lt;/s11&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160800Z" creationid="huanghaohang" creationdate="20190527T160800Z">
        <seg>runtime(&lt;s11&gt;'org.hibernate:hibernate:3.0.5'&lt;/s11&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime(group: &lt;s15&gt;'org.hibernate'&lt;/s15&gt;, name: &lt;s16&gt;'hibernate'&lt;/s16&gt;, version: &lt;s17&gt;'3.0.5'&lt;/s17&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T160801Z" creationid="huanghaohang" creationdate="20190527T160801Z">
        <seg>runtime(group: &lt;s15&gt;'org.hibernate'&lt;/s15&gt;, name: &lt;s16&gt;'hibernate'&lt;/s16&gt;, version: &lt;s17&gt;'3.0.5'&lt;/s17&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtime, testCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053833Z" creationid="haohang" creationdate="20180313T053833Z">
        <seg>runtime, testCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>runtimeClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T095335Z" creationid="haohang" creationdate="20180320T095335Z">
        <seg>runtimeClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140936Z" creationid="huanghaohang" creationdate="20180205T140936Z">
        <seg>scala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011247Z" creationid="huanghaohang" creationdate="20180407T011247Z">
        <seg>scala {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala-base</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T092814Z" creationid="huanghaohang" creationdate="20180218T092814Z">
        <seg>scala-base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T020232Z" creationid="huanghaohang" creationdate="20180407T020232Z">
        <seg>scala.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scalaCompileOptions.daemonServer = &lt;s1&gt;"localhost:4243"&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T021845Z" creationid="huanghaohang" creationdate="20180407T021845Z">
        <seg>scalaCompileOptions.daemonServer = &lt;s1&gt;"localhost:4243"&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scalaCompileOptions.useAnt = false
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T110900Z" creationid="huanghaohang" creationdate="20180407T110900Z">
        <seg>scalaCompileOptions.useAnt = false
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scalaCompileOptions.useCompileDaemon = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T021842Z" creationid="huanghaohang" creationdate="20180407T021842Z">
        <seg>scalaCompileOptions.useCompileDaemon = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T140934Z" creationid="huanghaohang" creationdate="20180205T140934Z">
        <seg>scala_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12CC1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140204Z" creationid="huanghaohang" creationdate="20181201T140204Z">
        <seg>scala_plugin.html#N12CC1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12CD0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140209Z" creationid="huanghaohang" creationdate="20181201T140209Z">
        <seg>scala_plugin.html#N12CD0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12D77</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140211Z" creationid="huanghaohang" creationdate="20181201T140211Z">
        <seg>scala_plugin.html#N12D77</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12E10</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140213Z" creationid="huanghaohang" creationdate="20181201T140213Z">
        <seg>scala_plugin.html#N12E10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12E78</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140229Z" creationid="huanghaohang" creationdate="20181201T140229Z">
        <seg>scala_plugin.html#N12E78</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12E7D</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140232Z" creationid="huanghaohang" creationdate="20181201T140232Z">
        <seg>scala_plugin.html#N12E7D</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12F1A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140234Z" creationid="huanghaohang" creationdate="20181201T140234Z">
        <seg>scala_plugin.html#N12F1A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12F37</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140312Z" creationid="huanghaohang" creationdate="20181201T140312Z">
        <seg>scala_plugin.html#N12F37</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12F5B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140319Z" creationid="huanghaohang" creationdate="20181201T140319Z">
        <seg>scala_plugin.html#N12F5B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12FAF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140329Z" creationid="huanghaohang" creationdate="20181201T140329Z">
        <seg>scala_plugin.html#N12FAF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#N12FB4</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T140337Z" creationid="huanghaohang" creationdate="20181201T140337Z">
        <seg>scala_plugin.html#N12FB4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scala_plugin.html#sec:configure_scala_classpath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T141804Z" creationid="huanghaohang" creationdate="20180407T141804Z">
        <seg>scala_plugin.html#sec:configure_scala_classpath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>scaladoc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T010618Z" creationid="huanghaohang" creationdate="20180407T010618Z">
        <seg>scaladoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sealife</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142759Z" creationid="huanghaohang" creationdate="20190602T142759Z">
        <seg>sealife</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sealife &lt;s0&gt;"sea.mammals:orca:1.0"&lt;/s0&gt;, &lt;s1&gt;"sea.fish:shark:1.0"&lt;/s1&gt;, &lt;s2&gt;"sea.fish:tuna:1.0"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142800Z" creationid="huanghaohang" creationdate="20190602T142800Z">
        <seg>sealife &lt;s0&gt;"sea.mammals:orca:1.0"&lt;/s0&gt;, &lt;s1&gt;"sea.fish:shark:1.0"&lt;/s1&gt;, &lt;s2&gt;"sea.fish:tuna:1.0"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>securityRole &lt;s25&gt;"admin"&lt;/s25&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143003Z" creationid="huanghaohang" creationdate="20180416T143003Z">
        <seg>securityRole &lt;s25&gt;"admin"&lt;/s25&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>securityRole &lt;s26&gt;"superadmin"&lt;/s26&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143005Z" creationid="huanghaohang" creationdate="20180416T143005Z">
        <seg>securityRole &lt;s26&gt;"superadmin"&lt;/s26&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>server {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100113Z" creationid="huanghaohang" creationdate="20180715T100113Z">
        <seg>server {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>server.url</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085302Z" creationid="huanghaohang" creationdate="20181012T085302Z">
        <seg>server.url</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>services/personService/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160328Z" creationid="huanghaohang" creationdate="20190617T160328Z">
        <seg>services/personService/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>services/webservice/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154456Z" creationid="95" creationdate="20170731T154456Z">
        <seg>services/webservice/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sessionId</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093253Z" creationid="huanghaohang" creationdate="20180715T093253Z">
        <seg>sessionId</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>settings.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T123538Z" creationid="95" creationdate="20170803T123538Z">
        <seg>settings.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sftp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030359Z" creationid="huanghaohang" creationdate="20190603T030359Z">
        <seg>sftp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>shared/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154458Z" creationid="95" creationdate="20170731T154458Z">
        <seg>shared/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>shark-1.0 -&gt; seal-2.0, tuna-1.0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142832Z" creationid="huanghaohang" creationdate="20190602T142832Z">
        <seg>shark-1.0 -&gt; seal-2.0, tuna-1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>showSql</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085306Z" creationid="huanghaohang" creationdate="20181012T085306Z">
        <seg>showSql</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>showSqlResults</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085307Z" creationid="huanghaohang" creationdate="20181012T085307Z">
        <seg>showSqlResults</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sign configurations.archives
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134509Z" creationid="huanghaohang" creationdate="20190608T134509Z">
        <seg>sign configurations.archives
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sign stuffZip
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135241Z" creationid="huanghaohang" creationdate="20190608T135241Z">
        <seg>sign stuffZip
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090000Z" creationid="huanghaohang" creationdate="20180211T090000Z">
        <seg>signing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T134505Z" creationid="huanghaohang" creationdate="20190608T134505Z">
        <seg>signing {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing.keyId=24875D73
signing.password=secret
signing.secretKeyRingFile=/Users/me/.gnupg/secring.gpg</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T132535Z" creationid="huanghaohang" creationdate="20190608T132535Z">
        <seg>signing.keyId=24875D73
signing.password=secret
signing.secretKeyRingFile=/Users/me/.gnupg/secring.gpg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T085959Z" creationid="huanghaohang" creationdate="20180211T085959Z">
        <seg>signing_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing_plugin.html#N1573F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T095311Z" creationid="huanghaohang" creationdate="20190608T095311Z">
        <seg>signing_plugin.html#N1573F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing_plugin.html#N1574E</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T095317Z" creationid="huanghaohang" creationdate="20190608T095317Z">
        <seg>signing_plugin.html#N1574E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing_plugin.html#N15780</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011003Z" creationid="huanghaohang" creationdate="20190609T011003Z">
        <seg>signing_plugin.html#N15780</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing_plugin.html#N15809</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011011Z" creationid="huanghaohang" creationdate="20190609T011011Z">
        <seg>signing_plugin.html#N15809</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>signing_plugin.html#N15817</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T011018Z" creationid="huanghaohang" creationdate="20190609T011018Z">
        <seg>signing_plugin.html#N15817</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>simple/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130149Z" creationid="huanghaohang" creationdate="20191219T130149Z">
        <seg>simple/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>skip = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T153058Z" creationid="huanghaohang" creationdate="20180811T153058Z">
        <seg>skip = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>skipProject = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T042944Z" creationid="huanghaohang" creationdate="20181202T042944Z">
        <seg>skipProject = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>snapshotRepository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093704Z" creationid="huanghaohang" creationdate="20190607T093704Z">
        <seg>snapshotRepository</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>snapshots</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093658Z" creationid="huanghaohang" creationdate="20190607T093658Z">
        <seg>snapshots</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>snarl</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092212Z" creationid="huanghaohang" creationdate="20190124T092212Z">
        <seg>snarl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090020Z" creationid="huanghaohang" creationdate="20180211T090020Z">
        <seg>sonar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100112Z" creationid="huanghaohang" creationdate="20180715T100112Z">
        <seg>sonar {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar-runner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090509Z" creationid="huanghaohang" creationdate="20180211T090509Z">
        <seg>sonar-runner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.binaries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023856Z" creationid="huanghaohang" creationdate="20181202T023856Z">
        <seg>sonar.binaries</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.dynamicAnalysis</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023749Z" creationid="huanghaohang" creationdate="20181202T023749Z">
        <seg>sonar.dynamicAnalysis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.java.source</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023812Z" creationid="huanghaohang" creationdate="20181202T023812Z">
        <seg>sonar.java.source</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.java.target</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023813Z" creationid="huanghaohang" creationdate="20181202T023813Z">
        <seg>sonar.java.target</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.junit.reportsPath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023931Z" creationid="huanghaohang" creationdate="20181202T023931Z">
        <seg>sonar.junit.reportsPath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023906Z" creationid="huanghaohang" creationdate="20181202T023906Z">
        <seg>sonar.libraries</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.project {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072224Z" creationid="huanghaohang" creationdate="20180812T072224Z">
        <seg>sonar.project {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.project.withProjectProperties { props -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135519Z" creationid="huanghaohang" creationdate="20180816T135519Z">
        <seg>sonar.project.withProjectProperties { props -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.projectBaseDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023746Z" creationid="huanghaohang" creationdate="20181202T023746Z">
        <seg>sonar.projectBaseDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.projectDescription</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023742Z" creationid="huanghaohang" creationdate="20181202T023742Z">
        <seg>sonar.projectDescription</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.projectKey</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023538Z" creationid="huanghaohang" creationdate="20181202T023538Z">
        <seg>sonar.projectKey</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.projectName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023741Z" creationid="huanghaohang" creationdate="20181202T023741Z">
        <seg>sonar.projectName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.projectVersion</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023745Z" creationid="huanghaohang" creationdate="20181202T023745Z">
        <seg>sonar.projectVersion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.sources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023833Z" creationid="huanghaohang" creationdate="20181202T023833Z">
        <seg>sonar.sources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.surefire.reportsPath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023920Z" creationid="huanghaohang" creationdate="20181202T023920Z">
        <seg>sonar.surefire.reportsPath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023850Z" creationid="huanghaohang" creationdate="20181202T023850Z">
        <seg>sonar.tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.withGlobalProperties { props -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180816T135436Z" creationid="huanghaohang" creationdate="20180816T135436Z">
        <seg>sonar.withGlobalProperties { props -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar.working.directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023747Z" creationid="huanghaohang" creationdate="20181202T023747Z">
        <seg>sonar.working.directory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonarAnalyze</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085518Z" creationid="huanghaohang" creationdate="20181012T085518Z">
        <seg>sonarAnalyze</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonarProperties {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022145Z" creationid="huanghaohang" creationdate="20181202T022145Z">
        <seg>sonarProperties {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonarRunner</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T051958Z" creationid="huanghaohang" creationdate="20181202T051958Z">
        <seg>sonarRunner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonarRunner {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T022144Z" creationid="huanghaohang" creationdate="20181202T022144Z">
        <seg>sonarRunner {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090019Z" creationid="huanghaohang" creationdate="20180211T090019Z">
        <seg>sonar_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#N138AF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070115Z" creationid="huanghaohang" creationdate="20190205T070115Z">
        <seg>sonar_plugin.html#N138AF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#N138FD</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070116Z" creationid="huanghaohang" creationdate="20190205T070116Z">
        <seg>sonar_plugin.html#N138FD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#N13956</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070126Z" creationid="huanghaohang" creationdate="20190205T070126Z">
        <seg>sonar_plugin.html#N13956</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#N1396B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070133Z" creationid="huanghaohang" creationdate="20190205T070133Z">
        <seg>sonar_plugin.html#N1396B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#N13983</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070140Z" creationid="huanghaohang" creationdate="20190205T070140Z">
        <seg>sonar_plugin.html#N13983</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#N139F8</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070155Z" creationid="huanghaohang" creationdate="20190205T070155Z">
        <seg>sonar_plugin.html#N139F8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_plugin.html#sec:sonar_command_line_parameters</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100128Z" creationid="huanghaohang" creationdate="20180715T100128Z">
        <seg>sonar_plugin.html#sec:sonar_command_line_parameters</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090028Z" creationid="huanghaohang" creationdate="20180211T090028Z">
        <seg>sonar_runner_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13A4B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T024106Z" creationid="huanghaohang" creationdate="20190606T024106Z">
        <seg>sonar_runner_plugin.html#N13A4B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13A58</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070213Z" creationid="huanghaohang" creationdate="20190205T070213Z">
        <seg>sonar_runner_plugin.html#N13A58</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13A7A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070215Z" creationid="huanghaohang" creationdate="20190205T070215Z">
        <seg>sonar_runner_plugin.html#N13A7A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13B49</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070221Z" creationid="huanghaohang" creationdate="20190205T070221Z">
        <seg>sonar_runner_plugin.html#N13B49</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13B8A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070223Z" creationid="huanghaohang" creationdate="20190205T070223Z">
        <seg>sonar_runner_plugin.html#N13B8A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13B9F</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070225Z" creationid="huanghaohang" creationdate="20190205T070225Z">
        <seg>sonar_runner_plugin.html#N13B9F</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13BB7</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070227Z" creationid="huanghaohang" creationdate="20190205T070227Z">
        <seg>sonar_runner_plugin.html#N13BB7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13BE6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070249Z" creationid="huanghaohang" creationdate="20190205T070249Z">
        <seg>sonar_runner_plugin.html#N13BE6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#N13BEE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070253Z" creationid="huanghaohang" creationdate="20190205T070253Z">
        <seg>sonar_runner_plugin.html#N13BEE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sonar_runner_plugin.html#sec:sonar_command_line_parameters</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070243Z" creationid="huanghaohang" creationdate="20190205T070243Z">
        <seg>sonar_runner_plugin.html#sec:sonar_command_line_parameters</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100241Z" creationid="haohang" creationdate="20180326T100241Z">
        <seg>source</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source &lt;s1&gt;'src/main/java'&lt;/s1&gt;, &lt;s2&gt;'src/main/groovy'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134316Z" creationid="huanghaohang" creationdate="20171002T134316Z">
        <seg>source &lt;s1&gt;'src/main/java'&lt;/s1&gt;, &lt;s2&gt;'src/main/groovy'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source = &lt;s3&gt;'src/main/java'&lt;/s3&gt;
}

&lt;s4&gt;// Use a collection to specify multiple source directories&lt;/s4&gt;
compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134050Z" creationid="huanghaohang" creationdate="20171002T134050Z">
        <seg>source = &lt;s3&gt;'src/main/java'&lt;/s3&gt;
}

&lt;s4&gt;// Use a collection to specify multiple source directories&lt;/s4&gt;
compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source = [&lt;s5&gt;'src/main/java'&lt;/s5&gt;, &lt;s6&gt;'../shared/java'&lt;/s6&gt;]
}

&lt;s7&gt;// Use a FileCollection (or FileTree in this case) to specify the source files&lt;/s7&gt;
compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134051Z" creationid="huanghaohang" creationdate="20171002T134051Z">
        <seg>source = [&lt;s5&gt;'src/main/java'&lt;/s5&gt;, &lt;s6&gt;'../shared/java'&lt;/s6&gt;]
}

&lt;s7&gt;// Use a FileCollection (or FileTree in this case) to specify the source files&lt;/s7&gt;
compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source = file(&lt;s1&gt;'src/main/java'&lt;/s1&gt;)
}

&lt;s2&gt;// Use a String path to specify the source directory&lt;/s2&gt;
compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134049Z" creationid="huanghaohang" creationdate="20171002T134049Z">
        <seg>source = file(&lt;s1&gt;'src/main/java'&lt;/s1&gt;)
}

&lt;s2&gt;// Use a String path to specify the source directory&lt;/s2&gt;
compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source = fileTree(dir: &lt;s8&gt;'src/main/java'&lt;/s8&gt;).matching { include &lt;s9&gt;'org/gradle/api/**'&lt;/s9&gt; }
}

&lt;s10&gt;// Using a closure to specify the source files.&lt;/s10&gt;
compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134052Z" creationid="huanghaohang" creationdate="20171002T134052Z">
        <seg>source = fileTree(dir: &lt;s8&gt;'src/main/java'&lt;/s8&gt;).matching { include &lt;s9&gt;'org/gradle/api/**'&lt;/s9&gt; }
}

&lt;s10&gt;// Using a closure to specify the source files.&lt;/s10&gt;
compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source = {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134052Z" creationid="huanghaohang" creationdate="20171002T134052Z">
        <seg>source = {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source file(&lt;s4&gt;'../shared/java'&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134317Z" creationid="huanghaohang" creationdate="20171002T134317Z">
        <seg>source file(&lt;s4&gt;'../shared/java'&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source sourceSets.intTest.allJava
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095404Z" creationid="haohang" creationdate="20180326T095404Z">
        <seg>source sourceSets.intTest.allJava
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source sources.lib</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052719Z" creationid="huanghaohang" creationdate="20190610T052719Z">
        <seg>source sources.lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043358Z" creationid="huanghaohang" creationdate="20190609T043358Z">
        <seg>source {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>source { file(&lt;s6&gt;'src/test/'&lt;/s6&gt;).listFiles() }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T134319Z" creationid="huanghaohang" creationdate="20171002T134319Z">
        <seg>source { file(&lt;s6&gt;'src/test/'&lt;/s6&gt;).listFiles() }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceBuild {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140205Z" creationid="huanghaohang" creationdate="20210515T140205Z">
        <seg>sourceBuild {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceCompatibility</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094218Z" creationid="haohang" creationdate="20180314T094218Z">
        <seg>sourceCompatibility</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceCompatibility = &lt;s0&gt;1.5&lt;/s0&gt;
version = &lt;s1&gt;'1.0'&lt;/s1&gt;
jar {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T132603Z" creationid="95" creationdate="20170730T132603Z">
        <seg>sourceCompatibility = &lt;s0&gt;1.5&lt;/s0&gt;
version = &lt;s1&gt;'1.0'&lt;/s1&gt;
jar {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceDirs += sourceSets.custom.allSource.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072225Z" creationid="huanghaohang" creationdate="20180812T072225Z">
        <seg>sourceDirs += sourceSets.custom.allSource.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceEncoding = &lt;s0&gt;"UTF-8"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152829Z" creationid="huanghaohang" creationdate="20180811T152829Z">
        <seg>sourceEncoding = &lt;s0&gt;"UTF-8"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceFile = file(&lt;s0&gt;'src/docs/quick-start'&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130955Z" creationid="huanghaohang" creationdate="20190728T130955Z">
        <seg>sourceFile = file(&lt;s0&gt;'src/docs/quick-start'&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceFile = project.file(&lt;s5&gt;"src/docs/$name"&lt;/s5&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131001Z" creationid="huanghaohang" creationdate="20190728T131001Z">
        <seg>sourceFile = project.file(&lt;s5&gt;"src/docs/$name"&lt;/s5&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T062344Z" creationid="haohang" creationdate="20180313T062344Z">
        <seg>sourceSets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets sourceSets.main
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093800Z" creationid="huanghaohang" creationdate="20180715T093800Z">
        <seg>sourceSets sourceSets.main
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053343Z" creationid="haohang" creationdate="20180313T053343Z">
        <seg>sourceSets {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.main.allJava</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100437Z" creationid="haohang" creationdate="20180326T100437Z">
        <seg>sourceSets.main.allJava</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.main.allSource.srcDirs (filtered to only include existing directories)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023848Z" creationid="huanghaohang" creationdate="20181202T023848Z">
        <seg>sourceSets.main.allSource.srcDirs（过滤为只包含存在的目录）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.main.output + sourceSets.main.compileClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100239Z" creationid="haohang" creationdate="20180326T100239Z">
        <seg>sourceSets.main.output + sourceSets.main.compileClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.main.runtimeClasspath (filtered to only include directories)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023904Z" creationid="huanghaohang" creationdate="20181202T023904Z">
        <seg>sourceSets.main.runtimeClasspath （过滤为只包含存在的目录）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.main.runtimeClasspath (filtering to only include files; &lt;c0&gt;rt.jar&lt;/c0&gt; added if necessary)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023919Z" creationid="huanghaohang" creationdate="20181202T023919Z">
        <seg>sourceSets.main.runtimeClasspath （过滤为仅包括文件 ；如果有必要会加上 &lt;c0&gt;rt.jar&lt;/c0&gt;）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.matching { it.purpose == &lt;s6&gt;"production"&lt;/s6&gt; }.each { println it.name }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133556Z" creationid="huanghaohang" creationdate="20170913T133556Z">
        <seg>sourceSets.matching { it.purpose == &lt;s6&gt;"production"&lt;/s6&gt; }.each { println it.name }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.test.allSource.srcDirs (filtered to only include existing directories)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023854Z" creationid="huanghaohang" creationdate="20181202T023854Z">
        <seg>sourceSets.test.allSource.srcDirs（过滤为只包含存在的目录）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.test.java.srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104636Z" creationid="huanghaohang" creationdate="20180406T104636Z">
        <seg>sourceSets.test.java.srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.test.output.classesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104633Z" creationid="huanghaohang" creationdate="20180406T104633Z">
        <seg>sourceSets.test.output.classesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sourceSets.test.runtimeClasspath</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104634Z" creationid="huanghaohang" creationdate="20180406T104634Z">
        <seg>sourceSets.test.runtimeClasspath</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sources {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043356Z" creationid="huanghaohang" creationdate="20190609T043356Z">
        <seg>sources {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>sparc {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025010Z" creationid="huanghaohang" creationdate="20190611T025010Z">
        <seg>sparc {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>spi</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162738Z" creationid="huanghaohang" creationdate="20190617T162738Z">
        <seg>spi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>spi spiJar</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162744Z" creationid="huanghaohang" creationdate="20190617T162744Z">
        <seg>spi spiJar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>springVersion = &lt;s1&gt;"3.1.0.RELEASE"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133530Z" creationid="huanghaohang" creationdate="20170913T133530Z">
        <seg>springVersion = &lt;s1&gt;"3.1.0.RELEASE"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160329Z" creationid="huanghaohang" creationdate="20190617T160329Z">
        <seg>src/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/antlr</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013747Z" creationid="huanghaohang" creationdate="20190123T013747Z">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/antlr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121740Z" creationid="huanghaohang" creationdate="20180406T121740Z">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053011Z" creationid="haohang" creationdate="20180313T053011Z">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053023Z" creationid="haohang" creationdate="20180313T053023Z">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/scala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011152Z" creationid="huanghaohang" creationdate="20180407T011152Z">
        <seg>src/&lt;e0&gt;&lt;c1&gt;sourceSet&lt;/c1&gt;&lt;/e0&gt;/scala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/antlr</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013732Z" creationid="huanghaohang" creationdate="20190123T013732Z">
        <seg>src/main/antlr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/application</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180415T145321Z" creationid="huanghaohang" creationdate="20180415T145321Z">
        <seg>src/main/application</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121649Z" creationid="huanghaohang" creationdate="20180406T121649Z">
        <seg>src/main/groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/groovy/org/gradle/GreetingTask.groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123352Z" creationid="huanghaohang" creationdate="20190706T123352Z">
        <seg>src/main/groovy/org/gradle/GreetingTask.groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052938Z" creationid="haohang" creationdate="20180313T052938Z">
        <seg>src/main/java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/java/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150810Z" creationid="huanghaohang" creationdate="20190617T150810Z">
        <seg>src/main/java/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052951Z" creationid="haohang" creationdate="20180313T052951Z">
        <seg>src/main/resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/resources/META-INF/gradle-plugins/greeting.properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T153525Z" creationid="huanghaohang" creationdate="20190727T153525Z">
        <seg>src/main/resources/META-INF/gradle-plugins/greeting.properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/scala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011132Z" creationid="huanghaohang" creationdate="20180407T011132Z">
        <seg>src/main/scala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/main/webapp</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T140405Z" creationid="huanghaohang" creationdate="20180408T140405Z">
        <seg>src/main/webapp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/antlr</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T013744Z" creationid="huanghaohang" creationdate="20190123T013744Z">
        <seg>src/test/antlr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121721Z" creationid="huanghaohang" creationdate="20180406T121721Z">
        <seg>src/test/groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/groovy/org/gradle/GreetingPluginTest.groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130841Z" creationid="huanghaohang" creationdate="20190728T130841Z">
        <seg>src/test/groovy/org/gradle/GreetingPluginTest.groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/groovy/org/gradle/GreetingTaskTest.groovy</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T124008Z" creationid="huanghaohang" creationdate="20190706T124008Z">
        <seg>src/test/groovy/org/gradle/GreetingTaskTest.groovy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/java</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T052957Z" creationid="haohang" creationdate="20180313T052957Z">
        <seg>src/test/java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053007Z" creationid="haohang" creationdate="20180313T053007Z">
        <seg>src/test/resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>src/test/scala</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011146Z" creationid="huanghaohang" creationdate="20180407T011146Z">
        <seg>src/test/scala</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDir &lt;s0&gt;"src/source"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T043359Z" creationid="huanghaohang" creationdate="20190609T043359Z">
        <seg>srcDir &lt;s0&gt;"src/source"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDir &lt;s0&gt;'src/java'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053346Z" creationid="haohang" creationdate="20180313T053346Z">
        <seg>srcDir &lt;s0&gt;'src/java'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDir &lt;s1&gt;'src/resources'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T053348Z" creationid="haohang" creationdate="20180313T053348Z">
        <seg>srcDir &lt;s1&gt;'src/resources'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDir &lt;s2&gt;"src/include"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190609T051624Z" creationid="huanghaohang" creationdate="20190609T051624Z">
        <seg>srcDir &lt;s2&gt;"src/include"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDir = file(&lt;s1&gt;'src'&lt;/s1&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150352Z" creationid="huanghaohang" creationdate="20170927T150352Z">
        <seg>srcDir = file(&lt;s1&gt;'src'&lt;/s1&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDir = file(&lt;s3&gt;'src2'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150354Z" creationid="huanghaohang" creationdate="20170927T150354Z">
        <seg>srcDir = file(&lt;s3&gt;'src2'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T101221Z" creationid="haohang" creationdate="20180326T101221Z">
        <seg>srcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs &lt;s0&gt;"src/hello/rc"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013426Z" creationid="huanghaohang" creationdate="20190610T013426Z">
        <seg>srcDirs &lt;s0&gt;"src/hello/rc"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs &lt;s1&gt;"src/hello/headers"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T013428Z" creationid="huanghaohang" creationdate="20190610T013428Z">
        <seg>srcDirs &lt;s1&gt;"src/hello/headers"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs = [&lt;s0&gt;'src/groovy'&lt;/s0&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121941Z" creationid="huanghaohang" creationdate="20180406T121941Z">
        <seg>srcDirs = [&lt;s0&gt;'src/groovy'&lt;/s0&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs = [&lt;s0&gt;'src/scala'&lt;/s0&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011248Z" creationid="huanghaohang" creationdate="20180407T011248Z">
        <seg>srcDirs = [&lt;s0&gt;'src/scala'&lt;/s0&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs = [&lt;s1&gt;'test/groovy'&lt;/s1&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T121944Z" creationid="huanghaohang" creationdate="20180406T121944Z">
        <seg>srcDirs = [&lt;s1&gt;'test/groovy'&lt;/s1&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>srcDirs = [&lt;s1&gt;'test/scala'&lt;/s1&gt;]</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T011250Z" creationid="huanghaohang" creationdate="20180407T011250Z">
        <seg>srcDirs = [&lt;s1&gt;'test/scala'&lt;/s1&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ssh</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093623Z" creationid="huanghaohang" creationdate="20190607T093623Z">
        <seg>ssh</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>ssh-external</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093625Z" creationid="huanghaohang" creationdate="20190607T093625Z">
        <seg>ssh-external</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T081441Z" creationid="huanghaohang" creationdate="20180130T081441Z">
        <seg>standard_plugins.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11909</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034945Z" creationid="huanghaohang" creationdate="20180517T034945Z">
        <seg>standard_plugins.html#N11909</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N1199A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034950Z" creationid="huanghaohang" creationdate="20180517T034950Z">
        <seg>standard_plugins.html#N1199A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11A41</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T034955Z" creationid="huanghaohang" creationdate="20180517T034955Z">
        <seg>standard_plugins.html#N11A41</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11B05</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035000Z" creationid="huanghaohang" creationdate="20180517T035000Z">
        <seg>standard_plugins.html#N11B05</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11B88</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035007Z" creationid="huanghaohang" creationdate="20180517T035007Z">
        <seg>standard_plugins.html#N11B88</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11D24</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035012Z" creationid="huanghaohang" creationdate="20180517T035012Z">
        <seg>standard_plugins.html#N11D24</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11DF9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035019Z" creationid="huanghaohang" creationdate="20180517T035019Z">
        <seg>standard_plugins.html#N11DF9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>standard_plugins.html#N11E6C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180517T035024Z" creationid="huanghaohang" creationdate="20180517T035024Z">
        <seg>standard_plugins.html#N11E6C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>startScripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T135032Z" creationid="95" creationdate="20190131T135032Z">
        <seg>startScripts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>staticLibArchiver.withArguments { args -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T093532Z" creationid="huanghaohang" creationdate="20190610T093532Z">
        <seg>staticLibArchiver.withArguments { args -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>staticLibraryFile = file(&lt;s3&gt;"lib/cunit/2.1-2/lib/"&lt;/s3&gt; + findCUnitLibForPlatform(targetPlatform))</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T090227Z" creationid="huanghaohang" creationdate="20190611T090227Z">
        <seg>staticLibraryFile = file(&lt;s3&gt;"lib/cunit/2.1-2/lib/"&lt;/s3&gt; + findCUnitLibForPlatform(targetPlatform))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>stopKey</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144716Z" creationid="huanghaohang" creationdate="20180416T144716Z">
        <seg>stopKey</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>stopPort</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T144651Z" creationid="huanghaohang" creationdate="20180416T144651Z">
        <seg>stopPort</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>subdir/myproject.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T114013Z" creationid="huanghaohang" creationdate="20170909T114013Z">
        <seg>subdir/myproject.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>subprojects {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124423Z" creationid="95" creationdate="20170803T124423Z">
        <seg>subprojects {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>subprojects.each {project -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150910Z" creationid="huanghaohang" creationdate="20190617T150910Z">
        <seg>subprojects.each {project -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>suite_operators.c</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T032628Z" creationid="huanghaohang" creationdate="20190611T032628Z">
        <seg>suite_operators.c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>systemProp.http.proxyHost=www.somehost.org
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=userid
systemProp.http.proxyPassword=password
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073510Z" creationid="huanghaohang" creationdate="20180130T073510Z">
        <seg>systemProp.http.proxyHost=www.somehost.org
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=userid
systemProp.http.proxyPassword=password
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>systemProp.https.proxyHost=www.somehost.org
systemProp.https.proxyPort=8080
systemProp.https.proxyUser=userid
systemProp.https.proxyPassword=password
systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180130T073541Z" creationid="huanghaohang" creationdate="20180130T073541Z">
        <seg>systemProp.https.proxyHost=www.somehost.org
systemProp.https.proxyPort=8080
systemProp.https.proxyUser=userid
systemProp.https.proxyPassword=password
systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>systemProperties &lt;s0&gt;'property'&lt;/s0&gt;: &lt;s1&gt;'value'&lt;/s1&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T150120Z" creationid="95" creationdate="20170731T150120Z">
        <seg>systemProperties &lt;s0&gt;'property'&lt;/s0&gt;: &lt;s1&gt;'value'&lt;/s1&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>systemProperties &lt;s13&gt;'property'&lt;/s13&gt;: &lt;s14&gt;'value'&lt;/s14&gt;
}

uploadArchives {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154116Z" creationid="95" creationdate="20170731T154116Z">
        <seg>systemProperties &lt;s13&gt;'property'&lt;/s13&gt;: &lt;s14&gt;'value'&lt;/s14&gt;
}

uploadArchives {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>target(&lt;s0&gt;"arm"&lt;/s0&gt;){</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025004Z" creationid="huanghaohang" creationdate="20190611T025004Z">
        <seg>target(&lt;s0&gt;"arm"&lt;/s0&gt;){</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>target(&lt;s3&gt;"sparc"&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190611T025007Z" creationid="huanghaohang" creationdate="20190611T025007Z">
        <seg>target(&lt;s3&gt;"sparc"&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>targetBuild {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140210Z" creationid="huanghaohang" creationdate="20210515T140210Z">
        <seg>targetBuild {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>targetBuild.gradleVersion = "«gradle version»"
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210515T140532Z" creationid="huanghaohang" creationdate="20210515T140532Z">
        <seg>targetBuild.gradleVersion = "«gradle version»"
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>targetCompatibility</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180314T094343Z" creationid="haohang" creationdate="20180314T094343Z">
        <seg>targetCompatibility</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>targetFile.delete()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134827Z" creationid="huanghaohang" creationdate="20190706T134827Z">
        <seg>targetFile.delete()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>targetFile.text = change.file.text.reverse()</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T134821Z" creationid="huanghaohang" creationdate="20190706T134821Z">
        <seg>targetFile.text = change.file.text.reverse()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>targetPlatforms &lt;s0&gt;"x86"&lt;/s0&gt;, &lt;s1&gt;"x64"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T053329Z" creationid="huanghaohang" creationdate="20190610T053329Z">
        <seg>targetPlatforms &lt;s0&gt;"x86"&lt;/s0&gt;, &lt;s1&gt;"x64"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task &lt;s0&gt;"task$counter"&lt;/s0&gt; &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132725Z" creationid="95" creationdate="20170727T132725Z">
        <seg>task &lt;s0&gt;"task$counter"&lt;/s0&gt; &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task action &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T140255Z" creationid="huanghaohang" creationdate="20190616T140255Z">
        <seg>task action &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task action(dependsOn: &lt;s0&gt;":producer:action"&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T141816Z" creationid="huanghaohang" creationdate="20190616T141816Z">
        <seg>task action(dependsOn: &lt;s0&gt;":producer:action"&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task allFiles &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143252Z" creationid="huanghaohang" creationdate="20190602T143252Z">
        <seg>task allFiles &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task anotherCopyTask(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075014Z" creationid="huanghaohang" creationdate="20171015T075014Z">
        <seg>task anotherCopyTask(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task barJar(type: Jar) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T111941Z" creationid="huanghaohang" creationdate="20180406T111941Z">
        <seg>task barJar(type: Jar) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task build(type: GradleBuild) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135704Z" creationid="huanghaohang" creationdate="20191201T135704Z">
        <seg>task build(type: GradleBuild) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task buildAllExecutables {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084310Z" creationid="huanghaohang" creationdate="20190610T084310Z">
        <seg>task buildAllExecutables {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task check &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180105T083827Z" creationid="huanghaohang" creationdate="20180105T083827Z">
        <seg>task check &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task checksum &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023456Z" creationid="95" creationdate="20170729T023456Z">
        <seg>task checksum &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task compile &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T031121Z" creationid="huanghaohang" creationdate="20170909T031121Z">
        <seg>task compile &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task configure &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T145818Z" creationid="huanghaohang" creationdate="20170918T145818Z">
        <seg>task configure &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task consume &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T145254Z" creationid="huanghaohang" creationdate="20190617T145254Z">
        <seg>task consume &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task consume(dependsOn: &lt;s0&gt;':producer:produce'&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152756Z" creationid="huanghaohang" creationdate="20190616T152756Z">
        <seg>task consume(dependsOn: &lt;s0&gt;':producer:produce'&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copy &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T152838Z" creationid="huanghaohang" creationdate="20190602T152838Z">
        <seg>task copy &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copy(type: Copy)

task copy(overwrite: true) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T083319Z" creationid="huanghaohang" creationdate="20170922T083319Z">
        <seg>task copy(type: Copy)

task copy(overwrite: true) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copy(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124931Z" creationid="huanghaohang" creationdate="20170919T124931Z">
        <seg>task copy(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copyMethod &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T094220Z" creationid="huanghaohang" creationdate="20171015T094220Z">
        <seg>task copyMethod &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copyMethodWithExplicitDependencies{</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T124924Z" creationid="huanghaohang" creationdate="20171015T124924Z">
        <seg>task copyMethodWithExplicitDependencies{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copyTask(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T135607Z" creationid="huanghaohang" creationdate="20171002T135607Z">
        <seg>task copyTask(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copyTaskWithPatterns(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171015T075116Z" creationid="huanghaohang" creationdate="20171015T075116Z">
        <seg>task copyTaskWithPatterns(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task copyVsFiles &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T153124Z" creationid="huanghaohang" creationdate="20190602T153124Z">
        <seg>task copyVsFiles &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task count &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155856Z" creationid="95" creationdate="20170726T155856Z">
        <seg>task count &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task createDocs {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140538Z" creationid="95" creationdate="20190131T140538Z">
        <seg>task createDocs {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task dependencies &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143024Z" creationid="huanghaohang" creationdate="20190602T143024Z">
        <seg>task dependencies &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task disableMe &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085325Z" creationid="huanghaohang" creationdate="20170922T085325Z">
        <seg>task disableMe &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task dist(type: Zip) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125717Z" creationid="95" creationdate="20170803T125717Z">
        <seg>task dist(type: Zip) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task distribution &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025303Z" creationid="95" creationdate="20170729T025303Z">
        <seg>task distribution &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task files &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T143713Z" creationid="huanghaohang" creationdate="20190602T143713Z">
        <seg>task files &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task generate(type:  MyTaskType) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075755Z" creationid="huanghaohang" creationdate="20190606T075755Z">
        <seg>task generate(type:  MyTaskType) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello

println hello.name
println project.hello.name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121723Z" creationid="huanghaohang" creationdate="20170919T121723Z">
        <seg>task hello

println hello.name
println project.hello.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello

println tasks.hello.name
println tasks[&lt;s0&gt;'hello'&lt;/s0&gt;].name</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121737Z" creationid="huanghaohang" creationdate="20170919T121737Z">
        <seg>task hello

println tasks.hello.name
println tasks[&lt;s0&gt;'hello'&lt;/s0&gt;].name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello
}

task hello

println tasks.getByPath(&lt;s1&gt;'hello'&lt;/s1&gt;).path
println tasks.getByPath(&lt;s2&gt;':hello'&lt;/s2&gt;).path
println tasks.getByPath(&lt;s3&gt;'projectA:hello'&lt;/s3&gt;).path
println tasks.getByPath(&lt;s4&gt;':projectA:hello'&lt;/s4&gt;).path</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122001Z" creationid="huanghaohang" creationdate="20170919T122001Z">
        <seg>task hello
}

task hello

println tasks.getByPath(&lt;s1&gt;'hello'&lt;/s1&gt;).path
println tasks.getByPath(&lt;s2&gt;':hello'&lt;/s2&gt;).path
println tasks.getByPath(&lt;s3&gt;'projectA:hello'&lt;/s3&gt;).path
println tasks.getByPath(&lt;s4&gt;':projectA:hello'&lt;/s4&gt;).path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello &lt;&lt; cl
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154822Z" creationid="huanghaohang" creationdate="20190614T154822Z">
        <seg>task hello &lt;&lt; cl
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155315Z" creationid="95" creationdate="20170726T155315Z">
        <seg>task hello &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello &lt;&lt; { task -&gt; println &lt;s0&gt;"I'm $task.project.name"&lt;/s0&gt; }
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T155644Z" creationid="huanghaohang" creationdate="20190614T155644Z">
        <seg>task hello &lt;&lt; { task -&gt; println &lt;s0&gt;"I'm $task.project.name"&lt;/s0&gt; }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello &lt;&lt; {task -&gt; println &lt;s0&gt;"I'm $task.project.name"&lt;/s0&gt; }
}
subprojects {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T142148Z" creationid="huanghaohang" creationdate="20190615T142148Z">
        <seg>task hello &lt;&lt; {task -&gt; println &lt;s0&gt;"I'm $task.project.name"&lt;/s0&gt; }
}
subprojects {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144945Z" creationid="95" creationdate="20170724T144945Z">
        <seg>task hello {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task hello(type: GreetingTask)

&lt;s0&gt;class&lt;/s0&gt; GreetingTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190705T142809Z" creationid="huanghaohang" creationdate="20190705T142809Z">
        <seg>task hello(type: GreetingTask)

&lt;s0&gt;class&lt;/s0&gt; GreetingTask &lt;s1&gt;extends&lt;/s1&gt; DefaultTask {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task helloWorld &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092057Z" creationid="huanghaohang" creationdate="20190124T092057Z">
        <seg>task helloWorld &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task incrementalReverse(type: IncrementalReverseTask) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T141858Z" creationid="huanghaohang" creationdate="20190707T141858Z">
        <seg>task incrementalReverse(type: IncrementalReverseTask) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task intTest(type: Test) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095453Z" creationid="haohang" creationdate="20180326T095453Z">
        <seg>task intTest(type: Test) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task intTestJar(type: Jar) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095352Z" creationid="haohang" creationdate="20180326T095352Z">
        <seg>task intTestJar(type: Jar) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task intTestJavadoc(type: Javadoc) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095403Z" creationid="haohang" creationdate="20180326T095403Z">
        <seg>task intTestJavadoc(type: Javadoc) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task libs(type: Sync) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T125146Z" creationid="huanghaohang" creationdate="20171126T125146Z">
        <seg>task libs(type: Sync) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task list &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T150348Z" creationid="huanghaohang" creationdate="20170927T150348Z">
        <seg>task list &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task listJars &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051150Z" creationid="huanghaohang" creationdate="20190531T051150Z">
        <seg>task listJars &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task loadfile &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153755Z" creationid="95" creationdate="20170728T153755Z">
        <seg>task loadfile &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task logInfo {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T025423Z" creationid="huanghaohang" creationdate="20180107T025423Z">
        <seg>task logInfo {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task mappings &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T090855Z" creationid="huanghaohang" creationdate="20190608T090855Z">
        <seg>task mappings &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task myCopy(type: Copy)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T122242Z" creationid="huanghaohang" creationdate="20170919T122242Z">
        <seg>task myCopy(type: Copy)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task myCopy(type: Copy)

myCopy {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124609Z" creationid="huanghaohang" creationdate="20170919T124609Z">
        <seg>task myCopy(type: Copy)

myCopy {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task myJar(type: Jar)

artifacts {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075218Z" creationid="huanghaohang" creationdate="20190606T075218Z">
        <seg>task myJar(type: Jar)

artifacts {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task myTask {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T141958Z" creationid="95" creationdate="20170727T141958Z">
        <seg>task myTask {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task myTask(type:  MyTaskType) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075535Z" creationid="huanghaohang" creationdate="20190606T075535Z">
        <seg>task myTask(type:  MyTaskType) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task nestedSpecs(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060919Z" creationid="huanghaohang" creationdate="20171126T060919Z">
        <seg>task nestedSpecs(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task ok

task broken(dependsOn: ok) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T152619Z" creationid="huanghaohang" creationdate="20190613T152619Z">
        <seg>task ok

task broken(dependsOn: ok) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task printProps &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170917T135023Z" creationid="huanghaohang" creationdate="20170917T135023Z">
        <seg>task printProps &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task produce &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190616T152757Z" creationid="huanghaohang" creationdate="20190616T152757Z">
        <seg>task produce &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task removeInput() &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142526Z" creationid="huanghaohang" creationdate="20190707T142526Z">
        <seg>task removeInput() &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task removeOutput() &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T143007Z" creationid="huanghaohang" creationdate="20190707T143007Z">
        <seg>task removeOutput() &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task rename(type: Copy) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171126T060236Z" creationid="huanghaohang" creationdate="20171126T060236Z">
        <seg>task rename(type: Copy) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task show &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190817T145009Z" creationid="huanghaohang" creationdate="20190817T145009Z">
        <seg>task show &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task showRepositories &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151227Z" creationid="huanghaohang" creationdate="20191206T151227Z">
        <seg>task showRepositories &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task spiJar(type: Jar) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162739Z" creationid="huanghaohang" creationdate="20190617T162739Z">
        <seg>task spiJar(type: Jar) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task stuffZip (type: Zip) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T135234Z" creationid="huanghaohang" creationdate="20190608T135234Z">
        <seg>task stuffZip (type: Zip) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task taskX &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130248Z" creationid="huanghaohang" creationdate="20170919T130248Z">
        <seg>task taskX &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task taskX(dependsOn: &lt;s0&gt;'taskY'&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T160338Z" creationid="95" creationdate="20170726T160338Z">
        <seg>task taskX(dependsOn: &lt;s0&gt;'taskY'&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task taskX(dependsOn: &lt;s1&gt;':projectB:taskY'&lt;/s1&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130123Z" creationid="huanghaohang" creationdate="20170919T130123Z">
        <seg>task taskX(dependsOn: &lt;s1&gt;':projectB:taskY'&lt;/s1&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task taskY &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130156Z" creationid="huanghaohang" creationdate="20170919T130156Z">
        <seg>task taskY &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task transform {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170922T085707Z" creationid="huanghaohang" creationdate="20170922T085707Z">
        <seg>task transform {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task updateInputs() &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190707T142250Z" creationid="huanghaohang" creationdate="20190707T142250Z">
        <seg>task updateInputs() &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task upper &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170726T155757Z" creationid="95" creationdate="20170726T155757Z">
        <seg>task upper &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task wrapper(type: Wrapper) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191219T130038Z" creationid="huanghaohang" creationdate="20191219T130038Z">
        <seg>task wrapper(type: Wrapper) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task writeNewPom &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061317Z" creationid="huanghaohang" creationdate="20190607T061317Z">
        <seg>task writeNewPom &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task zip &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171219T090754Z" creationid="huanghaohang" creationdate="20171219T090754Z">
        <seg>task zip &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task(&lt;s0&gt;'hello'&lt;/s0&gt;) &lt;&lt;
{</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121054Z" creationid="huanghaohang" creationdate="20170919T121054Z">
        <seg>task(&lt;s0&gt;'hello'&lt;/s0&gt;) &lt;&lt;
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task(hello) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T120833Z" creationid="huanghaohang" creationdate="20170919T120833Z">
        <seg>task(hello) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task(taskName) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011926Z" creationid="huanghaohang" creationdate="20170923T011926Z">
        <seg>task(taskName) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>task.ext.srcDir = &lt;s0&gt;'src/main/java'&lt;/s0&gt;
}

task a

println &lt;s1&gt;"source dir is $a.srcDir"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151300Z" creationid="huanghaohang" creationdate="20190613T151300Z">
        <seg>task.ext.srcDir = &lt;s0&gt;'src/main/java'&lt;/s0&gt;
}

task a

println &lt;s1&gt;"source dir is $a.srcDir"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>taskReport</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T040332Z" creationid="huanghaohang" creationdate="20190123T040332Z">
        <seg>taskReport</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>taskdef(name: &lt;s3&gt;'ftp'&lt;/s3&gt;,</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141259Z" creationid="huanghaohang" creationdate="20191202T141259Z">
        <seg>taskdef(name: &lt;s3&gt;'ftp'&lt;/s3&gt;,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tasks = [&lt;s1&gt;'hello'&lt;/s1&gt;]
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T135707Z" creationid="huanghaohang" creationdate="20191201T135707Z">
        <seg>tasks = [&lt;s1&gt;'hello'&lt;/s1&gt;]
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tasks.addRule(&lt;s0&gt;"Pattern: ping&lt;ID&gt;"&lt;/s0&gt;) { String taskName -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T011924Z" creationid="huanghaohang" creationdate="20170923T011924Z">
        <seg>tasks.addRule(&lt;s0&gt;"Pattern: ping&lt;ID&gt;"&lt;/s0&gt;) { String taskName -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tasks.create(name: &lt;s0&gt;'hello'&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T121136Z" creationid="huanghaohang" creationdate="20170919T121136Z">
        <seg>tasks.create(name: &lt;s0&gt;'hello'&lt;/s0&gt;) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tasks.findAll { task -&gt; task.name.startsWith(&lt;s1&gt;'lib'&lt;/s1&gt;) }
}

task lib1 &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130916Z" creationid="huanghaohang" creationdate="20170919T130916Z">
        <seg>tasks.findAll { task -&gt; task.name.startsWith(&lt;s1&gt;'lib'&lt;/s1&gt;) }
}

task lib1 &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tasks.whenTaskAdded { task -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190613T151257Z" creationid="huanghaohang" creationdate="20190613T151257Z">
        <seg>tasks.whenTaskAdded { task -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tasks.withType(ScalaCompile) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T053847Z" creationid="huanghaohang" creationdate="20180407T053847Z">
        <seg>tasks.withType(ScalaCompile) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>test</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063056Z" creationid="haohang" creationdate="20180312T063056Z">
        <seg>test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>test {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T150115Z" creationid="95" creationdate="20170731T150115Z">
        <seg>test {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>test-results</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061249Z" creationid="haohang" creationdate="20180313T061249Z">
        <seg>test-results</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>test.systemProperty &lt;s0&gt;'some.prop'&lt;/s0&gt;, &lt;s1&gt;'value'&lt;/s1&gt;
test.systemProperty(&lt;s2&gt;'some.prop'&lt;/s2&gt;, &lt;s3&gt;'value'&lt;/s3&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T141438Z" creationid="huanghaohang" creationdate="20170913T141438Z">
        <seg>test.systemProperty &lt;s0&gt;'some.prop'&lt;/s0&gt;, &lt;s1&gt;'value'&lt;/s1&gt;
test.systemProperty(&lt;s2&gt;'some.prop'&lt;/s2&gt;, &lt;s3&gt;'value'&lt;/s3&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>test.testResultsDir (if the directory exists)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181202T023926Z" creationid="huanghaohang" creationdate="20181202T023926Z">
        <seg>test.testResultsDir （如果该目录存在）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>test/java/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160332Z" creationid="huanghaohang" creationdate="20190617T160332Z">
        <seg>test/java/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testClasses</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T062825Z" creationid="haohang" creationdate="20180312T062825Z">
        <seg>testClasses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testClassesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104633Z" creationid="huanghaohang" creationdate="20180406T104633Z">
        <seg>testClassesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testClassesDir = sourceSets.intTest.output.classesDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T095454Z" creationid="haohang" creationdate="20180326T095454Z">
        <seg>testClassesDir = sourceSets.intTest.output.classesDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T035005Z" creationid="huanghaohang" creationdate="20170908T035005Z">
        <seg>testCompile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s0&gt;"org.codehaus.groovy:groovy:2.3.3"&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T122643Z" creationid="huanghaohang" creationdate="20180406T122643Z">
        <seg>testCompile &lt;s0&gt;"org.codehaus.groovy:groovy:2.3.3"&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s0&gt;"org.scala-lang:scala-library:2.11.1"&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180407T015522Z" creationid="huanghaohang" creationdate="20180407T015522Z">
        <seg>testCompile &lt;s0&gt;"org.scala-lang:scala-library:2.11.1"&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T134737Z" creationid="huanghaohang" creationdate="20191201T134737Z">
        <seg>testCompile &lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s11&gt;"junit:junit:4.11"&lt;/s11&gt;, project(&lt;s12&gt;':api'&lt;/s12&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162748Z" creationid="huanghaohang" creationdate="20190617T162748Z">
        <seg>testCompile &lt;s11&gt;"junit:junit:4.11"&lt;/s11&gt;, project(&lt;s12&gt;':api'&lt;/s12&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s2&gt;'junit:junit:4.11'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124427Z" creationid="95" creationdate="20170803T124427Z">
        <seg>testCompile &lt;s0&gt;'junit:junit:4.11'&lt;/s0&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s3&gt;"junit:junit:4.11"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160621Z" creationid="huanghaohang" creationdate="20190617T160621Z">
        <seg>testCompile &lt;s3&gt;"junit:junit:4.11"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s3&gt;'junit:junit:4.11'&lt;/s3&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T002855Z" creationid="huanghaohang" creationdate="20170909T002855Z">
        <seg>testCompile &lt;s3&gt;'junit:junit:4.11'&lt;/s3&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile &lt;s9&gt;"junit:junit:4.11"&lt;/s9&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143125Z" creationid="huanghaohang" creationdate="20180408T143125Z">
        <seg>testCompile &lt;s9&gt;"junit:junit:4.11"&lt;/s9&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile group: &lt;s10&gt;'junit'&lt;/s10&gt;, name: &lt;s11&gt;'junit'&lt;/s11&gt;, version: &lt;s12&gt;'4.+'&lt;/s12&gt;
}

test {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154115Z" creationid="95" creationdate="20170731T154115Z">
        <seg>testCompile group: &lt;s10&gt;'junit'&lt;/s10&gt;, name: &lt;s11&gt;'junit'&lt;/s11&gt;, version: &lt;s12&gt;'4.+'&lt;/s12&gt;
}

test {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile group: &lt;s3&gt;'junit'&lt;/s3&gt;, name: &lt;s4&gt;'junit'&lt;/s4&gt;, version: &lt;s5&gt;'4.+'&lt;/s5&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170730T124734Z" creationid="95" creationdate="20170730T124734Z">
        <seg>testCompile group: &lt;s3&gt;'junit'&lt;/s3&gt;, name: &lt;s4&gt;'junit'&lt;/s4&gt;, version: &lt;s5&gt;'4.+'&lt;/s5&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testCompile group: &lt;s4&gt;'junit'&lt;/s4&gt;, name: &lt;s5&gt;'junit'&lt;/s5&gt;, version: &lt;s6&gt;'4.+'&lt;/s6&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170908T013235Z" creationid="haohang" creationdate="20170908T013235Z">
        <seg>testCompile group: &lt;s4&gt;'junit'&lt;/s4&gt;, name: &lt;s5&gt;'junit'&lt;/s5&gt;, version: &lt;s6&gt;'4.+'&lt;/s6&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testDirs += sourceSets.integTest.allSource.srcDirs
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180812T072226Z" creationid="huanghaohang" creationdate="20180812T072226Z">
        <seg>testDirs += sourceSets.integTest.allSource.srcDirs
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testReportDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061425Z" creationid="haohang" creationdate="20180313T061425Z">
        <seg>testReportDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testReportDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061408Z" creationid="haohang" creationdate="20180313T061408Z">
        <seg>testReportDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testResultsDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061351Z" creationid="haohang" creationdate="20180313T061351Z">
        <seg>testResultsDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testResultsDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061248Z" creationid="haohang" creationdate="20180313T061248Z">
        <seg>testResultsDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testRuntime</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T035202Z" creationid="huanghaohang" creationdate="20170908T035202Z">
        <seg>testRuntime</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>testSrcDirs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T104634Z" creationid="huanghaohang" creationdate="20180406T104634Z">
        <seg>testSrcDirs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tests</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T061411Z" creationid="haohang" creationdate="20180313T061409Z">
        <seg>tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>title</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180326T100439Z" creationid="haohang" creationdate="20180326T100439Z">
        <seg>title</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>toolChains {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084909Z" creationid="huanghaohang" creationdate="20190610T084909Z">
        <seg>toolChains {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>toolVersion = &lt;s0&gt;"0.6.2.201302030002"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180712T135243Z" creationid="huanghaohang" creationdate="20180712T135243Z">
        <seg>toolVersion = &lt;s0&gt;"0.6.2.201302030002"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>transitive = false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190531T051421Z" creationid="huanghaohang" creationdate="20190531T051421Z">
        <seg>transitive = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>transitive = true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153657Z" creationid="huanghaohang" creationdate="20190527T153657Z">
        <seg>transitive = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tropicalFish/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T143645Z" creationid="huanghaohang" creationdate="20190615T143645Z">
        <seg>tropicalFish/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tropicalFish/build.gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190615T145017Z" creationid="huanghaohang" creationdate="20190615T145017Z">
        <seg>tropicalFish/build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>troubleshooting.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T081148Z" creationid="95" creationdate="20170723T081148Z">
        <seg>troubleshooting.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>troubleshooting.html#N10187</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013419Z" creationid="huanghaohang" creationdate="20170919T013419Z">
        <seg>troubleshooting.html#N10187</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>troubleshooting.html#N10194</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T013433Z" creationid="huanghaohang" creationdate="20170919T013433Z">
        <seg>troubleshooting.html#N10194</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>true</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093238Z" creationid="huanghaohang" creationdate="20180715T093238Z">
        <seg>true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tuna-1.0 -&gt; herring-1.0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T142833Z" creationid="huanghaohang" creationdate="20190602T142833Z">
        <seg>tuna-1.0 -&gt; herring-1.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T004254Z" creationid="huanghaohang" creationdate="20170909T004254Z">
        <seg>tutorial_gradle_command_line.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#N1077C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233849Z" creationid="huanghaohang" creationdate="20171206T233849Z">
        <seg>tutorial_gradle_command_line.html#N1077C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#N107F3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233920Z" creationid="huanghaohang" creationdate="20171206T233920Z">
        <seg>tutorial_gradle_command_line.html#N107F3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#N10953</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233954Z" creationid="huanghaohang" creationdate="20171206T233954Z">
        <seg>tutorial_gradle_command_line.html#N10953</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#para:commandline_dependency_report</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T141621Z" creationid="huanghaohang" creationdate="20190602T141621Z">
        <seg>tutorial_gradle_command_line.html#para:commandline_dependency_report</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#sec:continue_build_on_failure</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233909Z" creationid="huanghaohang" creationdate="20171206T233909Z">
        <seg>tutorial_gradle_command_line.html#sec:continue_build_on_failure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#sec:dry_run</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233946Z" creationid="huanghaohang" creationdate="20171206T233946Z">
        <seg>tutorial_gradle_command_line.html#sec:dry_run</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#sec:excluding_tasks_from_the_command_line</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233857Z" creationid="huanghaohang" creationdate="20171206T233857Z">
        <seg>tutorial_gradle_command_line.html#sec:excluding_tasks_from_the_command_line</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#sec:obtaining_information_about_your_build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233937Z" creationid="huanghaohang" creationdate="20171206T233937Z">
        <seg>tutorial_gradle_command_line.html#sec:obtaining_information_about_your_build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_command_line.html#sec:selecting_build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233928Z" creationid="huanghaohang" creationdate="20171206T233928Z">
        <seg>tutorial_gradle_command_line.html#sec:selecting_build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_gui.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T030122Z" creationid="huanghaohang" creationdate="20170909T030122Z">
        <seg>tutorial_gradle_gui.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_gui.html#N10981</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234010Z" creationid="huanghaohang" creationdate="20171206T234010Z">
        <seg>tutorial_gradle_gui.html#N10981</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_gui.html#N10997</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234020Z" creationid="huanghaohang" creationdate="20171206T234020Z">
        <seg>tutorial_gradle_gui.html#N10997</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_gui.html#N1099E</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234026Z" creationid="huanghaohang" creationdate="20171206T234026Z">
        <seg>tutorial_gradle_gui.html#N1099E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_gradle_gui.html#N109A3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T234031Z" creationid="huanghaohang" creationdate="20171206T234031Z">
        <seg>tutorial_gradle_gui.html#N109A3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_groovy_projects.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080836Z" creationid="95" creationdate="20170723T080836Z">
        <seg>tutorial_groovy_projects.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_groovy_projects.html#N106C1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233747Z" creationid="huanghaohang" creationdate="20171206T233747Z">
        <seg>tutorial_groovy_projects.html#N106C1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_groovy_projects.html#N1070A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233800Z" creationid="huanghaohang" creationdate="20171206T233800Z">
        <seg>tutorial_groovy_projects.html#N1070A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_java_projects.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072818Z" creationid="95" creationdate="20170723T072818Z">
        <seg>tutorial_java_projects.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_java_projects.html#N103C9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124855Z" creationid="huanghaohang" creationdate="20171014T124855Z">
        <seg>tutorial_java_projects.html#N103C9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_java_projects.html#N103DA</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124903Z" creationid="huanghaohang" creationdate="20171014T124903Z">
        <seg>tutorial_java_projects.html#N103DA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_java_projects.html#N10552</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124920Z" creationid="huanghaohang" creationdate="20171014T124920Z">
        <seg>tutorial_java_projects.html#N10552</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_java_projects.html#sec:examples</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171014T124913Z" creationid="huanghaohang" creationdate="20171014T124913Z">
        <seg>tutorial_java_projects.html#sec:examples</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T150611Z" creationid="huanghaohang" creationdate="20170911T150611Z">
        <seg>tutorial_this_and_that.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html#N10C8A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034101Z" creationid="huanghaohang" creationdate="20180131T034101Z">
        <seg>tutorial_this_and_that.html#N10C8A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html#sec:caching</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034111Z" creationid="huanghaohang" creationdate="20180131T034111Z">
        <seg>tutorial_this_and_that.html#sec:caching</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html#sec:configuring_arbitrary_objects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034054Z" creationid="huanghaohang" creationdate="20180131T034054Z">
        <seg>tutorial_this_and_that.html#sec:configuring_arbitrary_objects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html#sec:configuring_using_external_script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034031Z" creationid="huanghaohang" creationdate="20180131T034031Z">
        <seg>tutorial_this_and_that.html#sec:configuring_using_external_script</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html#sec:directory_creation</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034012Z" creationid="huanghaohang" creationdate="20180131T034012Z">
        <seg>tutorial_this_and_that.html#sec:directory_creation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_this_and_that.html#sec:gradle_properties_and_system_properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T034018Z" creationid="huanghaohang" creationdate="20180131T034018Z">
        <seg>tutorial_this_and_that.html#sec:gradle_properties_and_system_properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T072622Z" creationid="95" creationdate="20170723T072622Z">
        <seg>tutorial_using_tasks.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N101A5</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031737Z" creationid="huanghaohang" creationdate="20170927T031737Z">
        <seg>tutorial_using_tasks.html#N101A5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N101BC</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031749Z" creationid="huanghaohang" creationdate="20170927T031749Z">
        <seg>tutorial_using_tasks.html#N101BC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N10222</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031757Z" creationid="huanghaohang" creationdate="20170927T031757Z">
        <seg>tutorial_using_tasks.html#N10222</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N10239</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031804Z" creationid="huanghaohang" creationdate="20170927T031804Z">
        <seg>tutorial_using_tasks.html#N10239</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N1029B</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031822Z" creationid="huanghaohang" creationdate="20170927T031822Z">
        <seg>tutorial_using_tasks.html#N1029B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N102B0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031827Z" creationid="huanghaohang" creationdate="20170927T031827Z">
        <seg>tutorial_using_tasks.html#N102B0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N10326</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031851Z" creationid="huanghaohang" creationdate="20170927T031851Z">
        <seg>tutorial_using_tasks.html#N10326</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N10346</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031857Z" creationid="huanghaohang" creationdate="20170927T031857Z">
        <seg>tutorial_using_tasks.html#N10346</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#N103B3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T032003Z" creationid="huanghaohang" creationdate="20170927T032003Z">
        <seg>tutorial_using_tasks.html#N103B3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#configure-by-dag</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031923Z" creationid="huanghaohang" creationdate="20170927T031923Z">
        <seg>tutorial_using_tasks.html#configure-by-dag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#sec:default_tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031918Z" creationid="huanghaohang" creationdate="20170927T031918Z">
        <seg>tutorial_using_tasks.html#sec:default_tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#sec:extra_task_properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170927T031842Z" creationid="huanghaohang" creationdate="20170927T031842Z">
        <seg>tutorial_using_tasks.html#sec:extra_task_properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#sec:shortcut_notations</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T132111Z" creationid="95" creationdate="20170727T132111Z">
        <seg>tutorial_using_tasks.html#sec:shortcut_notations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorial_using_tasks.html#sec:task_dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T124951Z" creationid="huanghaohang" creationdate="20170919T124951Z">
        <seg>tutorial_using_tasks.html#sec:task_dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorials.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170721T141647Z" creationid="95" creationdate="20170721T141647Z">
        <seg>tutorials.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>tutorials.html#N100CE</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170801T014537Z" creationid="haohang" creationdate="20170801T014537Z">
        <seg>tutorials.html#N100CE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>twitter</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092157Z" creationid="huanghaohang" creationdate="20190124T092157Z">
        <seg>twitter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>type &lt;s2&gt;'text'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T075538Z" creationid="huanghaohang" creationdate="20190606T075538Z">
        <seg>type &lt;s2&gt;'text'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>unspecified</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132252Z" creationid="huanghaohang" creationdate="20170913T132252Z">
        <seg>未指定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>upload&lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180313T035735Z" creationid="haohang" creationdate="20180313T035735Z">
        <seg>upload&lt;e0&gt;&lt;c1&gt;ConfigurationName&lt;/c1&gt;&lt;/e0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>uploadArchives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180312T063137Z" creationid="haohang" creationdate="20180312T063137Z">
        <seg>uploadArchives</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>uploadArchives {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T153705Z" creationid="95" creationdate="20170731T153705Z">
        <seg>uploadArchives {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>uploadTask.repositories.mavenDeployer.pom.artifactId (if set) or archiveTask.baseName.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T094949Z" creationid="huanghaohang" creationdate="20190607T094949Z">
        <seg>uploadTask.repositories.mavenDeployer.pom.artifactId (if set) or archiveTask.baseName.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s0&gt;"http://repo.mycompany.com/maven2"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044841Z" creationid="huanghaohang" creationdate="20170908T044841Z">
        <seg>url &lt;s0&gt;"http://repo.mycompany.com/maven2"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s0&gt;"http://repo.mycompany.com/repo"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T044954Z" creationid="huanghaohang" creationdate="20170908T044954Z">
        <seg>url &lt;s0&gt;"http://repo.mycompany.com/repo"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s0&gt;"sftp://repo.mycompany.com:22/maven2"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030850Z" creationid="huanghaohang" creationdate="20190603T030850Z">
        <seg>url &lt;s0&gt;"sftp://repo.mycompany.com:22/maven2"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s0&gt;'http://repo.mycompany.com'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025226Z" creationid="huanghaohang" creationdate="20190604T025226Z">
        <seg>url &lt;s0&gt;'http://repo.mycompany.com'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s1&gt;"../local-repo"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T045148Z" creationid="huanghaohang" creationdate="20170908T045148Z">
        <seg>url &lt;s1&gt;"../local-repo"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s1&gt;"http://repo.mycompany.com/repo"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030656Z" creationid="huanghaohang" creationdate="20190603T030656Z">
        <seg>url &lt;s1&gt;"http://repo.mycompany.com/repo"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s1&gt;"http://repo2.mycompany.com/maven2"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T033844Z" creationid="huanghaohang" creationdate="20190603T033844Z">
        <seg>url &lt;s1&gt;"http://repo2.mycompany.com/maven2"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s2&gt;"http://repo.mycompany.com"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050456Z" creationid="huanghaohang" creationdate="20170908T050456Z">
        <seg>url &lt;s2&gt;"http://repo.mycompany.com"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s2&gt;"http://repo.mycompany.com/maven2"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034102Z" creationid="huanghaohang" creationdate="20190603T034102Z">
        <seg>url &lt;s2&gt;"http://repo.mycompany.com/maven2"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s2&gt;'http://www.apache.org/licenses/LICENSE-2.0.txt'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061320Z" creationid="huanghaohang" creationdate="20190607T061320Z">
        <seg>url &lt;s2&gt;'http://www.apache.org/licenses/LICENSE-2.0.txt'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s3&gt;"sftp://repo.mycompany.com:22/repo"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030852Z" creationid="huanghaohang" creationdate="20190603T030852Z">
        <seg>url &lt;s3&gt;"sftp://repo.mycompany.com:22/repo"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url &lt;s4&gt;"http://repo.mycompany.com"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080213Z" creationid="huanghaohang" creationdate="20190606T080213Z">
        <seg>url &lt;s4&gt;"http://repo.mycompany.com"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url = &lt;s0&gt;"http://my.server.com"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100114Z" creationid="huanghaohang" creationdate="20180715T100114Z">
        <seg>url = &lt;s0&gt;"http://my.server.com"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url = &lt;s1&gt;"http://my.server.com"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152257Z" creationid="huanghaohang" creationdate="20180811T152257Z">
        <seg>url = &lt;s1&gt;"http://my.server.com"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url = &lt;s1&gt;"jdbc:mysql://my.server.com/sonar"&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100115Z" creationid="huanghaohang" creationdate="20180715T100115Z">
        <seg>url = &lt;s1&gt;"jdbc:mysql://my.server.com/sonar"&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url = &lt;s2&gt;"jdbc:mysql://my.server.com/sonar"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152257Z" creationid="huanghaohang" creationdate="20180811T152257Z">
        <seg>url = &lt;s2&gt;"jdbc:mysql://my.server.com/sonar"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url ENTERPRISE_REPOSITORY_URL</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151223Z" creationid="huanghaohang" creationdate="20191206T151223Z">
        <seg>url ENTERPRISE_REPOSITORY_URL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>url uri(&lt;s0&gt;'../repo'&lt;/s0&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123740Z" creationid="huanghaohang" creationdate="20190706T123740Z">
        <seg>url uri(&lt;s0&gt;'../repo'&lt;/s0&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>useJUnit {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T041838Z" creationid="huanghaohang" creationdate="20180406T041838Z">
        <seg>useJUnit {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>useLogger(&lt;s0&gt;new&lt;/s0&gt; CustomEventLogger())

&lt;s1&gt;class&lt;/s1&gt; CustomEventLogger &lt;s2&gt;extends&lt;/s2&gt; BuildAdapter &lt;s3&gt;implements&lt;/s3&gt; TaskExecutionListener {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180107T144026Z" creationid="huanghaohang" creationdate="20180107T144026Z">
        <seg>useLogger(&lt;s0&gt;new&lt;/s0&gt; CustomEventLogger())

&lt;s1&gt;class&lt;/s1&gt; CustomEventLogger &lt;s2&gt;extends&lt;/s2&gt; BuildAdapter &lt;s3&gt;implements&lt;/s3&gt; TaskExecutionListener {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>useTestNG {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T042049Z" creationid="huanghaohang" creationdate="20180406T042049Z">
        <seg>useTestNG {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>userGuide {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130956Z" creationid="huanghaohang" creationdate="20190728T130956Z">
        <seg>userGuide {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>userguide.css</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072246Z" creationid="haohang" creationdate="20170720T072246Z">
        <seg>userguide.css</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>userguide.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20170720T072248Z" creationid="haohang" creationdate="20170720T072248Z">
        <seg>userguide.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username &lt;s0&gt;"username"&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170908T050451Z" creationid="huanghaohang" creationdate="20170908T050451Z">
        <seg>username &lt;s0&gt;"username"&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username &lt;s0&gt;'user'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T034100Z" creationid="huanghaohang" creationdate="20190603T034100Z">
        <seg>username &lt;s0&gt;'user'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username &lt;s1&gt;'user'&lt;/s1&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030850Z" creationid="huanghaohang" creationdate="20190603T030850Z">
        <seg>username &lt;s1&gt;'user'&lt;/s1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username &lt;s2&gt;"username"&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080211Z" creationid="huanghaohang" creationdate="20190606T080211Z">
        <seg>username &lt;s2&gt;"username"&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username &lt;s4&gt;'user'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030852Z" creationid="huanghaohang" creationdate="20190603T030852Z">
        <seg>username &lt;s4&gt;'user'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username = &lt;s0&gt;'myId'&lt;/s0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092010Z" creationid="huanghaohang" creationdate="20190124T092010Z">
        <seg>username = &lt;s0&gt;'myId'&lt;/s0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username = &lt;s3&gt;"Fred Flintstone"&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T100116Z" creationid="huanghaohang" creationdate="20180715T100116Z">
        <seg>username = &lt;s3&gt;"Fred Flintstone"&lt;/s3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username = &lt;s4&gt;"Fred Flintstone"&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180811T152259Z" creationid="huanghaohang" creationdate="20180811T152259Z">
        <seg>username = &lt;s4&gt;"Fred Flintstone"&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username, password</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190124T092208Z" creationid="huanghaohang" creationdate="20190124T092208Z">
        <seg>username, password</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>username/password</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190603T030330Z" creationid="huanghaohang" creationdate="20190603T030330Z">
        <seg>用户名/密码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>verbose</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181012T085307Z" creationid="huanghaohang" creationdate="20181012T085307Z">
        <seg>verbose</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T132255Z" creationid="huanghaohang" creationdate="20170913T132255Z">
        <seg>version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s0&gt;'1.0-SNAPSHOT'&lt;/s0&gt;
ext.isReleaseVersion = !version.endsWith(&lt;s1&gt;"SNAPSHOT"&lt;/s1&gt;)

signing {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190608T161310Z" creationid="huanghaohang" creationdate="20190608T161310Z">
        <seg>version = &lt;s0&gt;'1.0-SNAPSHOT'&lt;/s0&gt;
ext.isReleaseVersion = !version.endsWith(&lt;s1&gt;"SNAPSHOT"&lt;/s1&gt;)

signing {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s2&gt;'1.0'&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160620Z" creationid="huanghaohang" creationdate="20190617T160620Z">
        <seg>version = &lt;s2&gt;'1.0'&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s2&gt;'1.0'&lt;/s2&gt;
}

project(&lt;s3&gt;':api'&lt;/s3&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162737Z" creationid="huanghaohang" creationdate="20190617T162737Z">
        <seg>version = &lt;s2&gt;'1.0'&lt;/s2&gt;
}

project(&lt;s3&gt;':api'&lt;/s3&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s2&gt;'1.0'&lt;/s2&gt;
}

subprojects {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150906Z" creationid="huanghaohang" creationdate="20190617T150906Z">
        <seg>version = &lt;s2&gt;'1.0'&lt;/s2&gt;
}

subprojects {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s3&gt;'1.0'&lt;/s3&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T124428Z" creationid="95" creationdate="20170803T124428Z">
        <seg>version = &lt;s4&gt;'1.0'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s4&gt;'1.0'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025308Z" creationid="95" creationdate="20170729T025308Z">
        <seg>version = &lt;s4&gt;'1.0'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>version = &lt;s6&gt;'1.0-SNAPSHOT'&lt;/s6&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025311Z" creationid="95" creationdate="20170729T025311Z">
        <seg>version = &lt;s6&gt;'1.0-SNAPSHOT'&lt;/s6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>visual-studio</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090639Z" creationid="huanghaohang" creationdate="20180211T090639Z">
        <seg>visual-studio</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>visualCpp(VisualCpp) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T084911Z" creationid="huanghaohang" creationdate="20190610T084911Z">
        <seg>visualCpp(VisualCpp) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180206T014518Z" creationid="huanghaohang" creationdate="20180206T014518Z">
        <seg>war</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170909T010147Z" creationid="huanghaohang" creationdate="20170909T010147Z">
        <seg>war_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#N12FC1</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142150Z" creationid="huanghaohang" creationdate="20181201T142150Z">
        <seg>war_plugin.html#N12FC1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#N12FD0</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142152Z" creationid="huanghaohang" creationdate="20181201T142152Z">
        <seg>war_plugin.html#N12FD0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#N13016</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142155Z" creationid="huanghaohang" creationdate="20181201T142155Z">
        <seg>war_plugin.html#N13016</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#N13030</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142159Z" creationid="huanghaohang" creationdate="20181201T142159Z">
        <seg>war_plugin.html#N13030</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#N1305C</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142201Z" creationid="huanghaohang" creationdate="20181201T142201Z">
        <seg>war_plugin.html#N1305C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#sec:customizing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142204Z" creationid="huanghaohang" creationdate="20181201T142204Z">
        <seg>war_plugin.html#sec:customizing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>war_plugin.html#sec:default_settings</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181201T142203Z" creationid="huanghaohang" creationdate="20181201T142203Z">
        <seg>war_plugin.html#sec:default_settings</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>water/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190614T154422Z" creationid="huanghaohang" creationdate="20190614T154422Z">
        <seg>water/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webAppDir</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142243Z" creationid="huanghaohang" creationdate="20180408T142243Z">
        <seg>webAppDir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webAppDirName</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T142213Z" creationid="huanghaohang" creationdate="20180408T142213Z">
        <seg>webAppDirName</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webDist/</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150809Z" creationid="huanghaohang" creationdate="20190617T150809Z">
        <seg>webDist/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webInf { from &lt;s13&gt;'src/additionalWebInf'&lt;/s13&gt; } &lt;s14&gt;// adds a file-set to the WEB-INF dir.&lt;/s14&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143127Z" creationid="huanghaohang" creationdate="20180408T143127Z">
        <seg>webInf { from &lt;s13&gt;'src/additionalWebInf'&lt;/s13&gt; } &lt;s14&gt;// adds a file-set to the WEB-INF dir.&lt;/s14&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webXml = file(&lt;s18&gt;'src/someWeb.xml'&lt;/s18&gt;) &lt;s19&gt;// copies a file to WEB-INF/web.xml&lt;/s19&gt;
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180408T143130Z" creationid="huanghaohang" creationdate="20180408T143130Z">
        <seg>webXml = file(&lt;s18&gt;'src/someWeb.xml'&lt;/s18&gt;) &lt;s19&gt;// copies a file to WEB-INF/web.xml&lt;/s19&gt;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>web_project_tutorial.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170723T080955Z" creationid="95" creationdate="20170723T080955Z">
        <seg>web_project_tutorial.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>web_project_tutorial.html#N10725</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233815Z" creationid="huanghaohang" creationdate="20171206T233815Z">
        <seg>web_project_tutorial.html#N10725</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>web_project_tutorial.html#N1074A</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233828Z" creationid="huanghaohang" creationdate="20171206T233828Z">
        <seg>web_project_tutorial.html#N1074A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>web_project_tutorial.html#N10763</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T233842Z" creationid="huanghaohang" creationdate="20171206T233842Z">
        <seg>web_project_tutorial.html#N10763</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webapp:compile - Compiles the source files

Build Setup tasks
-----------------
init - Initializes a new Gradle build. [incubating]
wrapper - Generates Gradle wrapper files. [incubating]

Help tasks
----------
dependencies - Displays all dependencies declared in root project 'projectReports'.
api:dependencies - Displays all dependencies declared in project ':api'.
webapp:dependencies - Displays all dependencies declared in project ':webapp'.
dependencyInsight - Displays the insight into a specific dependency in root project 'projectReports'.
api:dependencyInsight - Displays the insight into a specific dependency in project ':api'.
webapp:dependencyInsight - Displays the insight into a specific dependency in project ':webapp'.
help - Displays a help message
api:help - Displays a help message
webapp:help - Displays a help message
projects - Displays the sub-projects of root project 'projectReports'.
api:projects - Displays the sub-projects of project ':api'.
webapp:projects - Displays the sub-projects of project ':webapp'.
properties - Displays the properties of root project 'projectReports'.
api:properties - Displays the properties of project ':api'.
webapp:properties - Displays the properties of project ':webapp'.
tasks - Displays the tasks runnable from root project 'projectReports' (some of the displayed tasks may belong to subprojects).
api:tasks - Displays the tasks runnable from project ':api'.
webapp:tasks - Displays the tasks runnable from project ':webapp'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170910T012331Z" creationid="huanghaohang" creationdate="20170910T012331Z">
        <seg>webapp:compile - Compiles the source files

Build Setup tasks
-----------------
init - Initializes a new Gradle build. [incubating]
wrapper - Generates Gradle wrapper files. [incubating]

Help tasks
----------
dependencies - Displays all dependencies declared in root project 'projectReports'.
api:dependencies - Displays all dependencies declared in project ':api'.
webapp:dependencies - Displays all dependencies declared in project ':webapp'.
dependencyInsight - Displays the insight into a specific dependency in root project 'projectReports'.
api:dependencyInsight - Displays the insight into a specific dependency in project ':api'.
webapp:dependencyInsight - Displays the insight into a specific dependency in project ':webapp'.
help - Displays a help message
api:help - Displays a help message
webapp:help - Displays a help message
projects - Displays the sub-projects of root project 'projectReports'.
api:projects - Displays the sub-projects of project ':api'.
webapp:projects - Displays the sub-projects of project ':webapp'.
properties - Displays the properties of root project 'projectReports'.
api:properties - Displays the properties of project ':api'.
webapp:properties - Displays the properties of project ':webapp'.
tasks - Displays the tasks runnable from root project 'projectReports' (some of the displayed tasks may belong to subprojects).
api:tasks - Displays the tasks runnable from project ':api'.
webapp:tasks - Displays the tasks runnable from project ':webapp'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>webdav</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T093628Z" creationid="huanghaohang" creationdate="20190607T093628Z">
        <seg>webdav</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>whenMerged { classpath -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181210T085151Z" creationid="huanghaohang" creationdate="20181210T085151Z">
        <seg>whenMerged { classpath -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>whenMerged { module -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012904Z" creationid="huanghaohang" creationdate="20190123T012904Z">
        <seg>whenMerged { module -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>windows-resources</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180205T143109Z" creationid="huanghaohang" creationdate="20180205T143109Z">
        <seg>windows-resources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>withXml { provider -&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190123T012915Z" creationid="huanghaohang" creationdate="20190123T012915Z">
        <seg>withXml { provider -&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>withXml { provider -&gt; &lt;s27&gt;// add a custom node to the XML&lt;/s27&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180416T143006Z" creationid="huanghaohang" creationdate="20180416T143006Z">
        <seg>withXml { provider -&gt; &lt;s27&gt;// add a custom node to the XML&lt;/s27&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170918T151556Z" creationid="huanghaohang" creationdate="20170918T151556Z">
        <seg>working_with_files.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#archiveTasksNamingProperties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171206T232311Z" creationid="huanghaohang" creationdate="20171206T232311Z">
        <seg>working_with_files.html#archiveTasksNamingProperties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:archive_contents</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093026Z" creationid="huanghaohang" creationdate="20180218T093026Z">
        <seg>working_with_files.html#sec:archive_contents</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:archives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093109Z" creationid="huanghaohang" creationdate="20180218T093109Z">
        <seg>working_with_files.html#sec:archives</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:copying_files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093051Z" creationid="huanghaohang" creationdate="20180218T093051Z">
        <seg>working_with_files.html#sec:copying_files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:file_collections</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20171002T133631Z" creationid="huanghaohang" creationdate="20171002T133631Z">
        <seg>working_with_files.html#sec:file_collections</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:file_trees</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093020Z" creationid="huanghaohang" creationdate="20180218T093020Z">
        <seg>working_with_files.html#sec:file_trees</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:locating_files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T130840Z" creationid="huanghaohang" creationdate="20170923T130840Z">
        <seg>working_with_files.html#sec:locating_files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:specifying_multiple_files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093040Z" creationid="huanghaohang" creationdate="20180218T093040Z">
        <seg>working_with_files.html#sec:specifying_multiple_files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>working_with_files.html#sec:sync_task</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180218T093057Z" creationid="huanghaohang" creationdate="20180218T093057Z">
        <seg>working_with_files.html#sec:sync_task</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>wrapper</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090214Z" creationid="huanghaohang" creationdate="20180211T090214Z">
        <seg>wrapper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>wrapper_plugin.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180211T090700Z" creationid="huanghaohang" creationdate="20180211T090700Z">
        <seg>wrapper_plugin.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>wrapper_plugin.html#N14AAB</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070621Z" creationid="huanghaohang" creationdate="20190205T070621Z">
        <seg>wrapper_plugin.html#N14AAB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>wrapper_plugin.html#N14AB9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190205T070623Z" creationid="huanghaohang" creationdate="20190205T070623Z">
        <seg>wrapper_plugin.html#N14AB9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170911T143145Z" creationid="huanghaohang" creationdate="20170911T143145Z">
        <seg>writing_build_scripts.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html#N109CD</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032747Z" creationid="huanghaohang" creationdate="20180131T032747Z">
        <seg>writing_build_scripts.html#N109CD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html#N10AD9</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032804Z" creationid="huanghaohang" creationdate="20180131T032804Z">
        <seg>writing_build_scripts.html#N10AD9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html#N10AE6</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032832Z" creationid="huanghaohang" creationdate="20180131T032832Z">
        <seg>writing_build_scripts.html#N10AE6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html#N10B36</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032841Z" creationid="huanghaohang" creationdate="20180131T032841Z">
        <seg>writing_build_scripts.html#N10B36</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html#sec:extra_properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T142011Z" creationid="95" creationdate="20170727T142011Z">
        <seg>writing_build_scripts.html#sec:extra_properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>writing_build_scripts.html#sec:project_api</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180131T032756Z" creationid="huanghaohang" creationdate="20180131T032756Z">
        <seg>writing_build_scripts.html#sec:project_api</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>x6&lt;s2&gt;4&lt;/s2&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045622Z" creationid="huanghaohang" creationdate="20190610T045622Z">
        <seg>x6&lt;s2&gt;4&lt;/s2&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>x86, x86_64</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085908Z" creationid="huanghaohang" creationdate="20190610T085908Z">
        <seg>x86, x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>x86, x86_64, ia-64</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T085923Z" creationid="huanghaohang" creationdate="20190610T085923Z">
        <seg>x86, x86_64, ia-64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>x8&lt;s0&gt;6&lt;/s0&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T045618Z" creationid="huanghaohang" creationdate="20190610T045618Z">
        <seg>x8&lt;s0&gt;6&lt;/s0&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>xml.enabled false</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180715T093010Z" creationid="huanghaohang" creationdate="20180715T093010Z">
        <seg>xml.enabled false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170728T153819Z" creationid="95" creationdate="20170728T153819Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170724T144952Z" creationid="95" creationdate="20170724T144952Z">
        <seg>}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

&lt;s2&gt;// Can use a rule instead to enable (or disable) dynamic resolve mode for all repositories&lt;/s2&gt;
repositories.withType(IvyArtifactRepository) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T025838Z" creationid="huanghaohang" creationdate="20190605T025838Z">
        <seg>}
}

&lt;s2&gt;// Can use a rule instead to enable (or disable) dynamic resolve mode for all repositories&lt;/s2&gt;
repositories.withType(IvyArtifactRepository) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

&lt;s2&gt;// Iterate over the source sets&lt;/s2&gt;
sourceSets.all {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="haohang" changedate="20180320T094737Z" creationid="haohang" creationdate="20180320T094737Z">
        <seg>}
}

&lt;s2&gt;// Iterate over the source sets&lt;/s2&gt;
sourceSets.all {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

&lt;s2&gt;class&lt;/s2&gt; DocumentationPlugin &lt;s3&gt;implements&lt;/s3&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130959Z" creationid="huanghaohang" creationdate="20190728T130959Z">
        <seg>}
}

&lt;s2&gt;class&lt;/s2&gt; DocumentationPlugin &lt;s3&gt;implements&lt;/s3&gt; Plugin&lt;Project&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

&lt;s6&gt;class&lt;/s6&gt; Book {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T131003Z" creationid="huanghaohang" creationdate="20190728T131003Z">
        <seg>}
}

&lt;s6&gt;class&lt;/s6&gt; Book {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

&lt;s7&gt;// Inject special case configuration into a particular project&lt;/s7&gt;
project(&lt;s8&gt;':child2'&lt;/s8&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191201T132531Z" creationid="huanghaohang" creationdate="20191201T132531Z">
        <seg>}
}

&lt;s7&gt;// Inject special case configuration into a particular project&lt;/s7&gt;
project(&lt;s8&gt;':child2'&lt;/s8&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

&lt;s8&gt;class&lt;/s8&gt; GreetingPluginExtension {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190719T155826Z" creationid="huanghaohang" creationdate="20190719T155826Z">
        <seg>}
}

&lt;s8&gt;class&lt;/s8&gt; GreetingPluginExtension {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

File[] fileList(String dir) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023512Z" creationid="95" creationdate="20170729T023512Z">
        <seg>}
}

File[] fileList(String dir) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

applicationDistribution.from(createDocs) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20190131T140542Z" creationid="95" creationdate="20190131T140542Z">
        <seg>}
}

applicationDistribution.from(createDocs) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

artifacts {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170803T125722Z" creationid="95" creationdate="20170803T125722Z">
        <seg>}
}

artifacts {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

def findDefaultVersionInCatalog(String group, String name) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T022641Z" creationid="huanghaohang" creationdate="20190605T022641Z">
        <seg>}
}

def findDefaultVersionInCatalog(String group, String name) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

libraries {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T052716Z" creationid="huanghaohang" creationdate="20190610T052716Z">
        <seg>}
}

libraries {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

println Fraction.ONE_FIFTH.multiply(&lt;s4&gt;2&lt;/s4&gt;)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191206T151040Z" creationid="huanghaohang" creationdate="20191206T151040Z">
        <seg>}
}

println Fraction.ONE_FIFTH.multiply(&lt;s4&gt;2&lt;/s4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

project(&lt;s3&gt;'projectB'&lt;/s3&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170919T130155Z" creationid="huanghaohang" creationdate="20170919T130155Z">
        <seg>}
}

project(&lt;s3&gt;'projectB'&lt;/s3&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

project(&lt;s4&gt;':api'&lt;/s4&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160635Z" creationid="huanghaohang" creationdate="20190617T160635Z">
        <seg>}
}

project(&lt;s4&gt;':api'&lt;/s4&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

project(&lt;s5&gt;":exe"&lt;/s5&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T023033Z" creationid="huanghaohang" creationdate="20190610T023033Z">
        <seg>}
}

project(&lt;s5&gt;":exe"&lt;/s5&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

project(&lt;s6&gt;':services:personService'&lt;/s6&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T160637Z" creationid="huanghaohang" creationdate="20190617T160637Z">
        <seg>}
}

project(&lt;s6&gt;':services:personService'&lt;/s6&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

project(&lt;s7&gt;':services:personService'&lt;/s7&gt;) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T162745Z" creationid="huanghaohang" creationdate="20190617T162745Z">
        <seg>}
}

project(&lt;s7&gt;':services:personService'&lt;/s7&gt;) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170731T154103Z" creationid="95" creationdate="20170731T154103Z">
        <seg>}
}

repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task books &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130958Z" creationid="huanghaohang" creationdate="20190728T130958Z">
        <seg>}
}

task books &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task compile &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190602T105523Z" creationid="huanghaohang" creationdate="20190602T105523Z">
        <seg>}
}

task compile &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task encode &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141053Z" creationid="huanghaohang" creationdate="20191202T141053Z">
        <seg>}
}

task encode &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task explodedDist(dependsOn: assemble) &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190617T150908Z" creationid="huanghaohang" creationdate="20190617T150908Z">
        <seg>}
}

task explodedDist(dependsOn: assemble) &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task ftp &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20191202T141258Z" creationid="huanghaohang" creationdate="20191202T141258Z">
        <seg>}
}

task ftp &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task greet(type: GreetingToFileTask) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190727T151158Z" creationid="huanghaohang" creationdate="20190727T151158Z">
        <seg>}
}

task greet(type: GreetingToFileTask) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task greeting(type: org.gradle.GreetingTask) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190706T123743Z" creationid="huanghaohang" creationdate="20190706T123743Z">
        <seg>}
}

task greeting(type: org.gradle.GreetingTask) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task groupPing {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170923T043836Z" creationid="huanghaohang" creationdate="20170923T043836Z">
        <seg>}
}

task groupPing {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task listBirds &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190605T041011Z" creationid="huanghaohang" creationdate="20190605T041011Z">
        <seg>}
}

task listBirds &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task loadfile &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T023508Z" creationid="95" creationdate="20170729T023501Z">
        <seg>}
}

task loadfile &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task printProperties &lt;&lt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20170913T133549Z" creationid="huanghaohang" creationdate="20170913T133549Z">
        <seg>}
}

task printProperties &lt;&lt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

task testReport(type: TestReport) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20180406T044003Z" creationid="huanghaohang" creationdate="20180406T044003Z">
        <seg>}
}

task testReport(type: TestReport) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}

uploadArchives {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190606T080209Z" creationid="huanghaohang" creationdate="20190606T080209Z">
        <seg>}
}

uploadArchives {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}
apply plugin: &lt;s4&gt;'greeting'&lt;/s4&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190728T130734Z" creationid="huanghaohang" creationdate="20190728T130734Z">
        <seg>}
}
apply plugin: &lt;s4&gt;'greeting'&lt;/s4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}
configurations.compile {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190527T153700Z" creationid="huanghaohang" creationdate="20190527T153700Z">
        <seg>}
}
configurations.compile {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}
repositories {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025338Z" creationid="huanghaohang" creationdate="20190604T025338Z">
        <seg>}
}
repositories {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}
repositories.localRepository {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190604T025341Z" creationid="huanghaohang" creationdate="20190604T025341Z">
        <seg>}
}
repositories.localRepository {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}
task fooJar(type: Jar) {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20181203T033600Z" creationid="huanghaohang" creationdate="20181203T033600Z">
        <seg>}
}
task fooJar(type: Jar) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}
}
task0.dependsOn task2, task3</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170727T133026Z" creationid="95" creationdate="20170727T133026Z">
        <seg>}
}
task0.dependsOn task2, task3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>} &lt;s2&gt;else&lt;/s2&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190610T012145Z" creationid="huanghaohang" creationdate="20190610T012145Z">
        <seg>} &lt;s2&gt;else&lt;/s2&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>} &lt;s5&gt;else&lt;/s5&gt; {</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="95" changedate="20170729T025309Z" creationid="95" creationdate="20170729T025309Z">
        <seg>} &lt;s5&gt;else&lt;/s5&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>}.writeTo(&lt;s4&gt;"$buildDir/newpom.xml"&lt;/s4&gt;)
}</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20190607T061322Z" creationid="huanghaohang" creationdate="20190607T061322Z">
        <seg>}.writeTo(&lt;s4&gt;"$buildDir/newpom.xml"&lt;/s4&gt;)
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Build Outcome”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152906Z" creationid="huanghaohang" creationdate="20200604T152906Z">
        <seg>“构建结果”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Build”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T152721Z" creationid="huanghaohang" creationdate="20200604T152712Z">
        <seg>“构建”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Compared Build Outcome”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T154435Z" creationid="huanghaohang" creationdate="20210508T154435Z">
        <seg>“比较构建结果”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Host Build”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210506T141528Z" creationid="huanghaohang" creationdate="20210506T141528Z">
        <seg>“主机构建”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Source Build”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20200604T154234Z" creationid="huanghaohang" creationdate="20200604T154234Z">
        <seg>“源构建”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Target Build”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210506T140008Z" creationid="huanghaohang" creationdate="20210506T140008Z">
        <seg>“目标构建”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Uncompared Build Outcome”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T154538Z" creationid="huanghaohang" creationdate="20210508T154538Z">
        <seg>“未比较的构建结果”</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>“Unknown Build Outcome”</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="huanghaohang" changedate="20210508T154838Z" creationid="huanghaohang" creationdate="20210508T154838Z">
        <seg>“未知的构建结果”</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
